	.text
	.file	"rdopt.c"
	.globl	clear_rdopt             # -- Begin function clear_rdopt
	.p2align	4, 0x90
	.type	clear_rdopt,@function
clear_rdopt:                            # @clear_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cofDC, %rdi
	callq	free_mem_DCcoeff
	movq	cofAC, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC8x8, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC4x4intern, %rdi
	callq	free_mem_ACcoeff
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB0_2
# %bb.1:                                # %if.then
	movq	cofAC_8x8ts, %rdi
	callq	free_mem_ACcoeff
.LBB0_2:                                # %if.end
	movq	cs_mb, %rdi
	callq	delete_coding_state
	movq	cs_b8, %rdi
	callq	delete_coding_state
	movq	cs_cm, %rdi
	callq	delete_coding_state
	movq	cs_imb, %rdi
	callq	delete_coding_state
	movq	cs_ib8, %rdi
	callq	delete_coding_state
	movq	cs_ib4, %rdi
	callq	delete_coding_state
	movq	cs_pc, %rdi
	callq	delete_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	clear_rdopt, .Lfunc_end0-clear_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	init_rdopt              # -- Begin function init_rdopt
	.p2align	4, 0x90
	.type	init_rdopt,@function
init_rdopt:                             # @init_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, rdopt
	movabsq	$cofDC, %rdi
	callq	get_mem_DCcoeff
	movabsq	$cofAC, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC8x8, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC4x4intern, %rdi
	callq	get_mem_ACcoeff
	movq	cofAC4x4intern, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, cofAC4x4
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB1_2
# %bb.1:                                # %if.then
	movabsq	$cofAC_8x8ts, %rdi
	callq	get_mem_ACcoeff
.LBB1_2:                                # %if.end
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_mb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_b8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_cm
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_imb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib4
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_pc
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	init_rdopt, .Lfunc_end1-init_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap          # -- Begin function UpdatePixelMap
	.p2align	4, 0x90
	.type	UpdatePixelMap,@function
UpdatePixelMap:                         # @UpdatePixelMap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_UpdatePixelMap.19
	callq	UpdatePixelMap.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_UpdatePixelMap.31
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.31
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_UpdatePixelMap.34
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_UpdatePixelMap.74
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	UpdatePixelMap, .Lfunc_end2-UpdatePixelMap
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef   # -- Begin function CheckReliabilityOfRef
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef,@function
CheckReliabilityOfRef:                  # @CheckReliabilityOfRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_CheckReliabilityOfRef.58
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.58
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_CheckReliabilityOfRef.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.61
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_CheckReliabilityOfRef.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.64
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_CheckReliabilityOfRef.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.87
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	CheckReliabilityOfRef, .Lfunc_end3-CheckReliabilityOfRef
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks # -- Begin function RDCost_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks,@function
RDCost_for_4x4IntraBlocks:              # @RDCost_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	vmovsd	%xmm1, -56(%rbp)        # 8-byte Spill
	vmovsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_RDCost_for_4x4IntraBlocks.4
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.4
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_RDCost_for_4x4IntraBlocks.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.33
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_RDCost_for_4x4IntraBlocks.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.51
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_RDCost_for_4x4IntraBlocks.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.52
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	RDCost_for_4x4IntraBlocks, .Lfunc_end4-RDCost_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma # -- Begin function RDCost_for_4x4Blocks_Chroma
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma,@function
RDCost_for_4x4Blocks_Chroma:            # @RDCost_for_4x4Blocks_Chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_RDCost_for_4x4Blocks_Chroma.40
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_RDCost_for_4x4Blocks_Chroma.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_RDCost_for_4x4Blocks_Chroma.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_RDCost_for_4x4Blocks_Chroma.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	RDCost_for_4x4Blocks_Chroma, .Lfunc_end5-RDCost_for_4x4Blocks_Chroma
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_4x4IntraBlocks # -- Begin function Mode_Decision_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks,@function
Mode_Decision_for_4x4IntraBlocks:       # @Mode_Decision_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Mode_Decision_for_4x4IntraBlocks.12
	movl	%ebx, %edi
	movl	%r15d, %esi
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Mode_Decision_for_4x4IntraBlocks.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Mode_Decision_for_4x4IntraBlocks.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Mode_Decision_for_4x4IntraBlocks.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Mode_Decision_for_4x4IntraBlocks, .Lfunc_end6-Mode_Decision_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_8x8IntraBlocks # -- Begin function Mode_Decision_for_8x8IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks,@function
Mode_Decision_for_8x8IntraBlocks:       # @Mode_Decision_for_8x8IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_Mode_Decision_for_8x8IntraBlocks.22
	movl	%ebx, %edi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.22
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_Mode_Decision_for_8x8IntraBlocks.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.32
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_Mode_Decision_for_8x8IntraBlocks.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.42
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_Mode_Decision_for_8x8IntraBlocks.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.60
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	Mode_Decision_for_8x8IntraBlocks, .Lfunc_end7-Mode_Decision_for_8x8IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock # -- Begin function Mode_Decision_for_Intra4x4Macroblock
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock,@function
Mode_Decision_for_Intra4x4Macroblock:   # @Mode_Decision_for_Intra4x4Macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	vmovsd	%xmm0, -16(%rbp)        # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_Mode_Decision_for_Intra4x4Macroblock.30
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_Mode_Decision_for_Intra4x4Macroblock.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.39
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_Mode_Decision_for_Intra4x4Macroblock.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_Mode_Decision_for_Intra4x4Macroblock.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	Mode_Decision_for_Intra4x4Macroblock, .Lfunc_end8-Mode_Decision_for_Intra4x4Macroblock
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_8x8blocks    # -- Begin function RDCost_for_8x8blocks
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks,@function
RDCost_for_8x8blocks:                   # @RDCost_for_8x8blocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, %r14
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_RDCost_for_8x8blocks.43
	movq	%r14, %rdi
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.43
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_RDCost_for_8x8blocks.68
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.68
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_RDCost_for_8x8blocks.81
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.81
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_RDCost_for_8x8blocks.84
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.84
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	RDCost_for_8x8blocks, .Lfunc_end9-RDCost_for_8x8blocks
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset               # -- Begin function I16Offset
	.p2align	4, 0x90
	.type	I16Offset,@function
I16Offset:                              # @I16Offset
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_2
# %bb.1:                                # %func_I16Offset.5
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_I16Offset.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end10:
	.size	I16Offset, .Lfunc_end10-I16Offset
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks # -- Begin function SetModesAndRefframeForBlocks
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks,@function
SetModesAndRefframeForBlocks:           # @SetModesAndRefframeForBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SetModesAndRefframeForBlocks.6
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SetModesAndRefframeForBlocks.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SetModesAndRefframeForBlocks.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.70
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SetModesAndRefframeForBlocks.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.83
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SetModesAndRefframeForBlocks, .Lfunc_end11-SetModesAndRefframeForBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision # -- Begin function Intra16x16_Mode_Decision
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision,@function
Intra16x16_Mode_Decision:               # @Intra16x16_Mode_Decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_Intra16x16_Mode_Decision.36
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_Intra16x16_Mode_Decision.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_Intra16x16_Mode_Decision.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_Intra16x16_Mode_Decision.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.94
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	Intra16x16_Mode_Decision, .Lfunc_end12-Intra16x16_Mode_Decision
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8 # -- Begin function SetCoeffAndReconstruction8x8
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8,@function
SetCoeffAndReconstruction8x8:           # @SetCoeffAndReconstruction8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetCoeffAndReconstruction8x8.21
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetCoeffAndReconstruction8x8.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetCoeffAndReconstruction8x8.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.89
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetCoeffAndReconstruction8x8.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.99
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetCoeffAndReconstruction8x8, .Lfunc_end13-SetCoeffAndReconstruction8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8              # -- Begin function StoreMV8x8
	.p2align	4, 0x90
	.type	StoreMV8x8,@function
StoreMV8x8:                             # @StoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_StoreMV8x8.49
	movl	%ebx, %edi
	callq	StoreMV8x8.49
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_StoreMV8x8.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_StoreMV8x8.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_StoreMV8x8.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	StoreMV8x8, .Lfunc_end14-StoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8            # -- Begin function RestoreMV8x8
	.p2align	4, 0x90
	.type	RestoreMV8x8,@function
RestoreMV8x8:                           # @RestoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_RestoreMV8x8.18
	movl	%ebx, %edi
	callq	RestoreMV8x8.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_RestoreMV8x8.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_RestoreMV8x8.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_RestoreMV8x8.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	RestoreMV8x8, .Lfunc_end15-RestoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB      # -- Begin function SetMotionVectorsMB
	.p2align	4, 0x90
	.type	SetMotionVectorsMB,@function
SetMotionVectorsMB:                     # @SetMotionVectorsMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_SetMotionVectorsMB.7
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_SetMotionVectorsMB.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_SetMotionVectorsMB.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_SetMotionVectorsMB.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	SetMotionVectorsMB, .Lfunc_end16-SetMotionVectorsMB
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_macroblocks  # -- Begin function RDCost_for_macroblocks
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks,@function
RDCost_for_macroblocks:                 # @RDCost_for_macroblocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movl	%edi, %ebx
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_RDCost_for_macroblocks.41
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_RDCost_for_macroblocks.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.77
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_RDCost_for_macroblocks.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_RDCost_for_macroblocks.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	RDCost_for_macroblocks, .Lfunc_end17-RDCost_for_macroblocks
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters # -- Begin function store_macroblock_parameters
	.p2align	4, 0x90
	.type	store_macroblock_parameters,@function
store_macroblock_parameters:            # @store_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_store_macroblock_parameters.63
	movl	%ebx, %edi
	callq	store_macroblock_parameters.63
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_store_macroblock_parameters.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_store_macroblock_parameters.82
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.82
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_store_macroblock_parameters.95
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.95
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	store_macroblock_parameters, .Lfunc_end18-store_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters # -- Begin function set_stored_macroblock_parameters
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters,@function
set_stored_macroblock_parameters:       # @set_stored_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_set_stored_macroblock_parameters.9
	callq	set_stored_macroblock_parameters.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_set_stored_macroblock_parameters.10
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_set_stored_macroblock_parameters.14
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_set_stored_macroblock_parameters.16
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	set_stored_macroblock_parameters, .Lfunc_end19-set_stored_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors  # -- Begin function SetRefAndMotionVectors
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors,@function
SetRefAndMotionVectors:                 # @SetRefAndMotionVectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_SetRefAndMotionVectors.1
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_SetRefAndMotionVectors.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_SetRefAndMotionVectors.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_SetRefAndMotionVectors.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	SetRefAndMotionVectors, .Lfunc_end20-SetRefAndMotionVectors
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference    # -- Begin function field_flag_inference
	.p2align	4, 0x90
	.type	field_flag_inference,@function
field_flag_inference:                   # @field_flag_inference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_2
# %bb.1:                                # %func_field_flag_inference.26
	callq	field_flag_inference.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_field_flag_inference.57
	.cfi_def_cfa %rbp, 16
	callq	field_flag_inference.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	field_flag_inference, .Lfunc_end21-field_flag_inference
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8         # -- Begin function StoreMVBlock8x8
	.p2align	4, 0x90
	.type	StoreMVBlock8x8,@function
StoreMVBlock8x8:                        # @StoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_StoreMVBlock8x8.8
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.8
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_StoreMVBlock8x8.15
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreMVBlock8x8.15
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_StoreMVBlock8x8.62
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.62
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_StoreMVBlock8x8.67
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.67
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	StoreMVBlock8x8, .Lfunc_end22-StoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8       # -- Begin function RestoreMVBlock8x8
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8,@function
RestoreMVBlock8x8:                      # @RestoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_RestoreMVBlock8x8.13
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.13
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_RestoreMVBlock8x8.17
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	RestoreMVBlock8x8.17
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_RestoreMVBlock8x8.65
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.65
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_RestoreMVBlock8x8.76
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.76
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	RestoreMVBlock8x8, .Lfunc_end23-RestoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8 # -- Begin function StoreNewMotionVectorsBlock8x8
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8,@function
StoreNewMotionVectorsBlock8x8:          # @StoreNewMotionVectorsBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_StoreNewMotionVectorsBlock8x8.2
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.2
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_StoreNewMotionVectorsBlock8x8.53
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.53
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_StoreNewMotionVectorsBlock8x8.85
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.85
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_StoreNewMotionVectorsBlock8x8.92
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.92
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	StoreNewMotionVectorsBlock8x8, .Lfunc_end24-StoreNewMotionVectorsBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8    # -- Begin function GetBestTransformP8x8
	.p2align	4, 0x90
	.type	GetBestTransformP8x8,@function
GetBestTransformP8x8:                   # @GetBestTransformP8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_GetBestTransformP8x8.11
	callq	GetBestTransformP8x8.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_GetBestTransformP8x8.45
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_GetBestTransformP8x8.80
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_GetBestTransformP8x8.88
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.88
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	GetBestTransformP8x8, .Lfunc_end25-GetBestTransformP8x8
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_macroblock   # -- Begin function encode_one_macroblock
	.p2align	4, 0x90
	.type	encode_one_macroblock,@function
encode_one_macroblock:                  # @encode_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_encode_one_macroblock.3
	callq	encode_one_macroblock.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_encode_one_macroblock.27
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_encode_one_macroblock.38
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_encode_one_macroblock.56
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	encode_one_macroblock, .Lfunc_end26-encode_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters    # -- Begin function set_mbaff_parameters
	.p2align	4, 0x90
	.type	set_mbaff_parameters,@function
set_mbaff_parameters:                   # @set_mbaff_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_5
# %bb.1:                                # %func_set_mbaff_parameters.86
	callq	set_mbaff_parameters.86
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_set_mbaff_parameters.91
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.91
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_3:                               # %func_set_mbaff_parameters.96
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.96
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_4:                               # %func_set_mbaff_parameters.98
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.98
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB27_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB27_3
	jmp	.LBB27_4
.Lfunc_end27:
	.size	set_mbaff_parameters, .Lfunc_end27-set_mbaff_parameters
	.cfi_endproc
                                        # -- End function
	.globl	store_coding_state_cs_cm # -- Begin function store_coding_state_cs_cm
	.p2align	4, 0x90
	.type	store_coding_state_cs_cm,@function
store_coding_state_cs_cm:               # @store_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	store_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	store_coding_state_cs_cm, .Lfunc_end28-store_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	reset_coding_state_cs_cm # -- Begin function reset_coding_state_cs_cm
	.p2align	4, 0x90
	.type	reset_coding_state_cs_cm,@function
reset_coding_state_cs_cm:               # @reset_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	reset_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	reset_coding_state_cs_cm, .Lfunc_end29-reset_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.1 # -- Begin function SetRefAndMotionVectors.1
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.1,@function
SetRefAndMotionVectors.1:               # @SetRefAndMotionVectors.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1900861114, -68(%rbp)  # imm = 0x714CD6BA
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB30_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB30_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB30_4
.LBB30_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB30_5
.LBB30_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB30_5
.LBB30_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB30_9
.LBB30_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB30_9
.LBB30_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB30_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_13:                              # %for.cond34
                                        #   Parent Loop BB30_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB30_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB30_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_13
.LBB30_16:                              # %for.end
                                        #   in Loop: Header=BB30_11 Depth=1
	jmp	.LBB30_17
.LBB30_17:                              # %for.inc117
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_11
.LBB30_18:                              # %for.end119
	jmp	.LBB30_64
.LBB30_19:                              # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB30_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB30_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_23:                              # %for.cond126
                                        #   Parent Loop BB30_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB30_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB30_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_23
.LBB30_26:                              # %for.end211
                                        #   in Loop: Header=BB30_21 Depth=1
	jmp	.LBB30_27
.LBB30_27:                              # %for.inc212
                                        #   in Loop: Header=BB30_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_21
.LBB30_28:                              # %for.end214
	jmp	.LBB30_64
.LBB30_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB30_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_32:                              # %for.cond219
                                        #   Parent Loop BB30_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB30_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB30_35:                              # %if.end255
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB30_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB30_46
.LBB30_37:                              # %if.then261
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB30_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB30_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB30_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB30_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB30_43
.LBB30_42:                              # %cond.false274
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB30_43:                              # %cond.end275
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB30_45
.LBB30_44:                              # %if.else342
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB30_45:                              # %if.end424
                                        #   in Loop: Header=BB30_32 Depth=2
	jmp	.LBB30_47
.LBB30_46:                              # %if.else425
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB30_47:                              # %if.end468
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB30_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB30_58
.LBB30_49:                              # %if.then474
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB30_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB30_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB30_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB30_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB30_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB30_55
.LBB30_54:                              # %cond.false490
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB30_55:                              # %cond.end492
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB30_57
.LBB30_56:                              # %if.else559
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB30_57:                              # %if.end641
                                        #   in Loop: Header=BB30_32 Depth=2
	jmp	.LBB30_59
.LBB30_58:                              # %if.else642
                                        #   in Loop: Header=BB30_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB30_59:                              # %if.end685
                                        #   in Loop: Header=BB30_32 Depth=2
	jmp	.LBB30_60
.LBB30_60:                              # %for.inc686
                                        #   in Loop: Header=BB30_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_32
.LBB30_61:                              # %for.end688
                                        #   in Loop: Header=BB30_30 Depth=1
	jmp	.LBB30_62
.LBB30_62:                              # %for.inc689
                                        #   in Loop: Header=BB30_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_30
.LBB30_63:                              # %for.end691
	jmp	.LBB30_64
.LBB30_64:                              # %if.end692
	cmpl	$1900861114, -68(%rbp)  # imm = 0x714CD6BA
	jne	.LBB30_66
.LBB30_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_65
.Lfunc_end30:
	.size	SetRefAndMotionVectors.1, .Lfunc_end30-SetRefAndMotionVectors.1
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.2 # -- Begin function StoreNewMotionVectorsBlock8x8.2
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.2,@function
StoreNewMotionVectorsBlock8x8.2:        # @StoreNewMotionVectorsBlock8x8.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1323441156, -72(%rbp)  # imm = 0x4EE21C04
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB31_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB31_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_4:                               # %for.cond6
                                        #   Parent Loop BB31_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB31_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB31_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB31_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_4
.LBB31_7:                               # %for.end
                                        #   in Loop: Header=BB31_2 Depth=1
	jmp	.LBB31_8
.LBB31_8:                               # %for.inc39
                                        #   in Loop: Header=BB31_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_2
.LBB31_9:                               # %for.end41
	jmp	.LBB31_61
.LBB31_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB31_20
# %bb.11:                               # %if.then42
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB31_12 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_14:                              # %for.cond46
                                        #   Parent Loop BB31_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB31_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB31_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_14
.LBB31_17:                              # %for.end119
                                        #   in Loop: Header=BB31_12 Depth=1
	jmp	.LBB31_18
.LBB31_18:                              # %for.inc120
                                        #   in Loop: Header=BB31_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_12
.LBB31_19:                              # %for.end122
	jmp	.LBB31_61
.LBB31_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB31_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB31_31
.LBB31_22:                              # %if.then125
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB31_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_25:                              # %for.cond129
                                        #   Parent Loop BB31_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB31_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB31_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_25
.LBB31_28:                              # %for.end206
                                        #   in Loop: Header=BB31_23 Depth=1
	jmp	.LBB31_29
.LBB31_29:                              # %for.inc207
                                        #   in Loop: Header=BB31_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_23
.LBB31_30:                              # %for.end209
	jmp	.LBB31_40
.LBB31_31:                              # %if.else210
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_34:                              # %for.cond214
                                        #   Parent Loop BB31_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB31_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB31_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB31_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_34
.LBB31_37:                              # %for.end235
                                        #   in Loop: Header=BB31_32 Depth=1
	jmp	.LBB31_38
.LBB31_38:                              # %for.inc236
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_32
.LBB31_39:                              # %for.end238
	jmp	.LBB31_40
.LBB31_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB31_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB31_51
.LBB31_42:                              # %if.then243
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB31_43 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_45:                              # %for.cond247
                                        #   Parent Loop BB31_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB31_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB31_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB31_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_45
.LBB31_48:                              # %for.end324
                                        #   in Loop: Header=BB31_43 Depth=1
	jmp	.LBB31_49
.LBB31_49:                              # %for.inc325
                                        #   in Loop: Header=BB31_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_43
.LBB31_50:                              # %for.end327
	jmp	.LBB31_60
.LBB31_51:                              # %if.else328
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB31_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_54:                              # %for.cond332
                                        #   Parent Loop BB31_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB31_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB31_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB31_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_54
.LBB31_57:                              # %for.end353
                                        #   in Loop: Header=BB31_52 Depth=1
	jmp	.LBB31_58
.LBB31_58:                              # %for.inc354
                                        #   in Loop: Header=BB31_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_52
.LBB31_59:                              # %for.end356
	jmp	.LBB31_60
.LBB31_60:                              # %if.end357
	jmp	.LBB31_61
.LBB31_61:                              # %if.end358
	cmpl	$1323441156, -72(%rbp)  # imm = 0x4EE21C04
	jne	.LBB31_63
.LBB31_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_62
.Lfunc_end31:
	.size	StoreNewMotionVectorsBlock8x8.2, .Lfunc_end31-StoreNewMotionVectorsBlock8x8.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.3
.LCPI32_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI32_1:
	.quad	4622945017495814144     # double 12
.LCPI32_2:
	.quad	4607182418800017408     # double 1
.LCPI32_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI32_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI32_5:
	.quad	4611686018427387904     # double 2
.LCPI32_6:
	.quad	4613937818241073152     # double 3
.LCPI32_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI32_8:
	.quad	4616189618054758400     # double 4
.LCPI32_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI32_10:
	.quad	4618441417868443648     # double 6
.LCPI32_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI32_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI32_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI32_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI32_15:
	.quad	4602678819172646912     # double 0.5
.LCPI32_16:
	.quad	4679240012837945344     # double 65536
.LCPI32_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI32_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.3
	.p2align	4, 0x90
	.type	encode_one_macroblock.3,@function
encode_one_macroblock.3:                # @encode_one_macroblock.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1049517294, -412(%rbp) # imm = 0x3E8E5CEE
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -180(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -188(%rbp)
	movl	$0, -320(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB32_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB32_4
.LBB32_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB32_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB32_5
.LBB32_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB32_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -300(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -416(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB32_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB32_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB32_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB32_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB32_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB32_11:                              # %land.end
.LBB32_12:                              # %lor.end36
.LBB32_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -312(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB32_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB32_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB32_17:                              # %lor.end51
.LBB32_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB32_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB32_21
.LBB32_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB32_21
.LBB32_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB32_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB32_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -288(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -288(%rbp)
	je	.LBB32_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB32_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB32_27
.LBB32_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB32_27:                              # %if.end
	jmp	.LBB32_29
.LBB32_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB32_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB32_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB32_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB32_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB32_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB32_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB32_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB32_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB32_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB32_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB32_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB32_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB32_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB32_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB32_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB32_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-416(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB32_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB32_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB32_53 Depth=1
	movl	$0, -56(%rbp)
.LBB32_55:                              # %for.cond156
                                        #   Parent Loop BB32_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB32_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB32_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB32_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB32_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB32_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB32_59:                              # %if.end183
                                        #   in Loop: Header=BB32_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB32_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB32_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB32_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB32_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB32_62:                              # %if.end202
                                        #   in Loop: Header=BB32_55 Depth=2
	jmp	.LBB32_63
.LBB32_63:                              # %for.inc
                                        #   in Loop: Header=BB32_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_55
.LBB32_64:                              # %for.end
                                        #   in Loop: Header=BB32_53 Depth=1
	jmp	.LBB32_65
.LBB32_65:                              # %for.inc203
                                        #   in Loop: Header=BB32_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB32_53
.LBB32_66:                              # %for.end205
	jmp	.LBB32_93
.LBB32_67:                              # %if.else206
	cmpl	$0, -288(%rbp)
	je	.LBB32_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB32_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB32_69 Depth=1
	movl	$0, -56(%rbp)
.LBB32_71:                              # %for.cond215
                                        #   Parent Loop BB32_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB32_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB32_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB32_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB32_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB32_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB32_75:                              # %if.end244
                                        #   in Loop: Header=BB32_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB32_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB32_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB32_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB32_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB32_78:                              # %if.end263
                                        #   in Loop: Header=BB32_71 Depth=2
	jmp	.LBB32_79
.LBB32_79:                              # %for.inc264
                                        #   in Loop: Header=BB32_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_71
.LBB32_80:                              # %for.end266
                                        #   in Loop: Header=BB32_69 Depth=1
	jmp	.LBB32_81
.LBB32_81:                              # %for.inc267
                                        #   in Loop: Header=BB32_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB32_69
.LBB32_82:                              # %for.end269
	jmp	.LBB32_92
.LBB32_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB32_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB32_84 Depth=1
	movl	$0, -56(%rbp)
.LBB32_86:                              # %for.cond277
                                        #   Parent Loop BB32_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB32_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB32_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_86
.LBB32_89:                              # %for.end290
                                        #   in Loop: Header=BB32_84 Depth=1
	jmp	.LBB32_90
.LBB32_90:                              # %for.inc291
                                        #   in Loop: Header=BB32_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB32_84
.LBB32_91:                              # %for.end293
	jmp	.LBB32_92
.LBB32_92:                              # %if.end294
	jmp	.LBB32_93
.LBB32_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI32_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB32_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB32_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB32_99
.LBB32_98:                              # %if.else315
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB32_99:                              # %if.end326
	jmp	.LBB32_159
.LBB32_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB32_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI32_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB32_104
.LBB32_103:                             # %cond.false336
	vmovsd	.LCPI32_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB32_104:                             # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB32_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI32_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB32_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI32_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI32_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_109
.LBB32_108:                             # %cond.false357
	vmovsd	.LCPI32_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB32_109:                             # %cond.end359
	vmovsd	.LCPI32_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI32_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_115
.LBB32_111:                             # %cond.false364
	vmovsd	.LCPI32_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI32_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_114
.LBB32_113:                             # %cond.false369
	vmovsd	.LCPI32_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB32_114:                             # %cond.end371
.LBB32_115:                             # %cond.end373
	jmp	.LBB32_129
.LBB32_116:                             # %cond.false375
	cmpl	$0, -300(%rbp)
	je	.LBB32_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_120
.LBB32_119:                             # %cond.false382
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB32_120:                             # %cond.end384
	vmovsd	.LCPI32_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI32_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_126
.LBB32_122:                             # %cond.false389
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_125
.LBB32_124:                             # %cond.false394
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB32_125:                             # %cond.end396
.LBB32_126:                             # %cond.end398
	jmp	.LBB32_128
.LBB32_127:                             # %cond.false400
	vmovsd	.LCPI32_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_128
.LBB32_128:                             # %cond.end401
.LBB32_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB32_146
.LBB32_130:                             # %if.else406
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI32_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB32_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI32_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_145
.LBB32_132:                             # %cond.false415
	cmpl	$0, -300(%rbp)
	je	.LBB32_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_136
.LBB32_135:                             # %cond.false422
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB32_136:                             # %cond.end424
	vmovsd	.LCPI32_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI32_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_142
.LBB32_138:                             # %cond.false429
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB32_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI32_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_141
.LBB32_140:                             # %cond.false434
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB32_141:                             # %cond.end436
.LBB32_142:                             # %cond.end438
	jmp	.LBB32_144
.LBB32_143:                             # %cond.false440
	vmovsd	.LCPI32_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB32_144
.LBB32_144:                             # %cond.end441
.LBB32_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB32_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB32_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB32_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI32_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI32_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI32_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB32_152
.LBB32_151:                             # %cond.false465
	vmovsd	.LCPI32_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB32_152:                             # %cond.end473
	vmovsd	.LCPI32_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB32_153:                             # %if.end477
	jmp	.LBB32_158
.LBB32_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB32_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI32_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB32_157:                             # %if.end487
	jmp	.LBB32_158
.LBB32_158:                             # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB32_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB32_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI32_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB32_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB32_166
.LBB32_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB32_165
.LBB32_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB32_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB32_166:                             # %if.end510
	vmovsd	.LCPI32_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI32_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB32_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB32_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB32_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB32_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB32_167
.LBB32_170:                             # %for.end522
	movl	$0, -256(%rbp)
.LBB32_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_181 Depth 2
                                        #       Child Loop BB32_184 Depth 3
                                        #         Child Loop BB32_190 Depth 4
                                        #         Child Loop BB32_210 Depth 4
                                        #         Child Loop BB32_300 Depth 4
                                        #           Child Loop BB32_302 Depth 5
                                        #         Child Loop BB32_309 Depth 4
                                        #           Child Loop BB32_311 Depth 5
                                        #         Child Loop BB32_326 Depth 4
                                        #           Child Loop BB32_328 Depth 5
                                        #         Child Loop BB32_335 Depth 4
                                        #           Child Loop BB32_337 Depth 5
                                        #         Child Loop BB32_355 Depth 4
                                        #           Child Loop BB32_357 Depth 5
                                        #         Child Loop BB32_374 Depth 4
                                        #           Child Loop BB32_376 Depth 5
                                        #     Child Loop BB32_416 Depth 2
                                        #       Child Loop BB32_418 Depth 3
                                        #         Child Loop BB32_445 Depth 4
                                        #         Child Loop BB32_464 Depth 4
                                        #           Child Loop BB32_466 Depth 5
                                        #         Child Loop BB32_473 Depth 4
                                        #         Child Loop BB32_508 Depth 4
                                        #           Child Loop BB32_510 Depth 5
                                        #         Child Loop BB32_532 Depth 4
                                        #           Child Loop BB32_534 Depth 5
                                        #             Child Loop BB32_536 Depth 6
                                        #         Child Loop BB32_544 Depth 4
                                        #           Child Loop BB32_546 Depth 5
                                        #       Child Loop BB32_569 Depth 3
                                        #         Child Loop BB32_571 Depth 4
                                        #           Child Loop BB32_573 Depth 5
                                        #       Child Loop BB32_581 Depth 3
                                        #         Child Loop BB32_583 Depth 4
                                        #     Child Loop BB32_601 Depth 2
                                        #       Child Loop BB32_603 Depth 3
                                        #         Child Loop BB32_614 Depth 4
                                        #         Child Loop BB32_633 Depth 4
                                        #           Child Loop BB32_635 Depth 5
                                        #         Child Loop BB32_642 Depth 4
                                        #         Child Loop BB32_677 Depth 4
                                        #           Child Loop BB32_679 Depth 5
                                        #         Child Loop BB32_701 Depth 4
                                        #           Child Loop BB32_703 Depth 5
                                        #             Child Loop BB32_705 Depth 6
                                        #         Child Loop BB32_713 Depth 4
                                        #           Child Loop BB32_715 Depth 5
                                        #         Child Loop BB32_723 Depth 4
                                        #           Child Loop BB32_725 Depth 5
                                        #       Child Loop BB32_745 Depth 3
                                        #         Child Loop BB32_747 Depth 4
                                        #           Child Loop BB32_749 Depth 5
                                        #       Child Loop BB32_757 Depth 3
                                        #         Child Loop BB32_759 Depth 4
                                        #       Child Loop BB32_766 Depth 3
                                        #         Child Loop BB32_768 Depth 4
                                        #       Child Loop BB32_778 Depth 3
                                        #         Child Loop BB32_780 Depth 4
                                        #       Child Loop BB32_786 Depth 3
                                        #       Child Loop BB32_791 Depth 3
                                        #         Child Loop BB32_793 Depth 4
                                        #     Child Loop BB32_803 Depth 2
                                        #       Child Loop BB32_805 Depth 3
                                        #     Child Loop BB32_835 Depth 2
                                        #       Child Loop BB32_853 Depth 3
                                        #         Child Loop BB32_908 Depth 4
                                        #           Child Loop BB32_911 Depth 5
                                        #             Child Loop BB32_913 Depth 6
                                        #           Child Loop BB32_920 Depth 5
                                        #             Child Loop BB32_922 Depth 6
                                        #         Child Loop BB32_955 Depth 4
                                        #           Child Loop BB32_957 Depth 5
                                        #     Child Loop BB32_981 Depth 2
                                        #       Child Loop BB32_1014 Depth 3
                                        #         Child Loop BB32_1017 Depth 4
                                        #           Child Loop BB32_1019 Depth 5
                                        #         Child Loop BB32_1026 Depth 4
                                        #           Child Loop BB32_1028 Depth 5
                                        #       Child Loop BB32_1061 Depth 3
                                        #         Child Loop BB32_1063 Depth 4
                                        #     Child Loop BB32_1113 Depth 2
                                        #       Child Loop BB32_1115 Depth 3
                                        #     Child Loop BB32_1127 Depth 2
                                        #       Child Loop BB32_1129 Depth 3
                                        #         Child Loop BB32_1131 Depth 4
                                        #     Child Loop BB32_1141 Depth 2
                                        #       Child Loop BB32_1143 Depth 3
                                        #     Child Loop BB32_1152 Depth 2
                                        #       Child Loop BB32_1154 Depth 3
                                        #     Child Loop BB32_1160 Depth 2
                                        #       Child Loop BB32_1162 Depth 3
                                        #     Child Loop BB32_1174 Depth 2
                                        #       Child Loop BB32_1176 Depth 3
                                        #         Child Loop BB32_1178 Depth 4
                                        #     Child Loop BB32_1189 Depth 2
                                        #       Child Loop BB32_1191 Depth 3
                                        #     Child Loop BB32_1202 Depth 2
                                        #       Child Loop BB32_1204 Depth 3
                                        #     Child Loop BB32_1211 Depth 2
                                        #       Child Loop BB32_1213 Depth 3
                                        #     Child Loop BB32_1221 Depth 2
                                        #       Child Loop BB32_1223 Depth 3
                                        #     Child Loop BB32_1229 Depth 2
                                        #       Child Loop BB32_1231 Depth 3
                                        #     Child Loop BB32_1237 Depth 2
                                        #       Child Loop BB32_1239 Depth 3
                                        #     Child Loop BB32_1245 Depth 2
                                        #       Child Loop BB32_1247 Depth 3
	movl	-256(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB32_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$2, -312(%rbp)
	jne	.LBB32_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB32_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB32_176
.LBB32_175:                             # %if.else534
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB32_176:                             # %if.end536
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_177
.LBB32_177:                             # %if.end537
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB32_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB32_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB32_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB32_180:                             # %if.end542
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB32_181:                             # %for.cond543
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_184 Depth 3
                                        #         Child Loop BB32_190 Depth 4
                                        #         Child Loop BB32_210 Depth 4
                                        #         Child Loop BB32_300 Depth 4
                                        #           Child Loop BB32_302 Depth 5
                                        #         Child Loop BB32_309 Depth 4
                                        #           Child Loop BB32_311 Depth 5
                                        #         Child Loop BB32_326 Depth 4
                                        #           Child Loop BB32_328 Depth 5
                                        #         Child Loop BB32_335 Depth 4
                                        #           Child Loop BB32_337 Depth 5
                                        #         Child Loop BB32_355 Depth 4
                                        #           Child Loop BB32_357 Depth 5
                                        #         Child Loop BB32_374 Depth 4
                                        #           Child Loop BB32_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB32_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB32_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB32_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB32_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB32_184:                             # %for.cond554
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_190 Depth 4
                                        #         Child Loop BB32_210 Depth 4
                                        #         Child Loop BB32_300 Depth 4
                                        #           Child Loop BB32_302 Depth 5
                                        #         Child Loop BB32_309 Depth 4
                                        #           Child Loop BB32_311 Depth 5
                                        #         Child Loop BB32_326 Depth 4
                                        #           Child Loop BB32_328 Depth 5
                                        #         Child Loop BB32_335 Depth 4
                                        #           Child Loop BB32_337 Depth 5
                                        #         Child Loop BB32_355 Depth 4
                                        #           Child Loop BB32_357 Depth 5
                                        #         Child Loop BB32_374 Depth 4
                                        #           Child Loop BB32_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB32_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB32_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB32_187:                             # %land.end566
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB32_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB32_189:                             # %land.end574
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB32_190:                             # %for.cond577
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB32_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB32_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB32_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB32_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB32_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB32_206
.LBB32_194:                             # %if.then594
                                        #   in Loop: Header=BB32_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB32_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB32_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB32_198
.LBB32_197:                             # %cond.false604
                                        #   in Loop: Header=BB32_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_198:                             # %cond.end607
                                        #   in Loop: Header=BB32_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB32_203
.LBB32_199:                             # %cond.false610
                                        #   in Loop: Header=BB32_190 Depth=4
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB32_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB32_202
.LBB32_201:                             # %cond.false617
                                        #   in Loop: Header=BB32_190 Depth=4
	movl	$1, %eax
	jmp	.LBB32_202
.LBB32_202:                             # %cond.end618
                                        #   in Loop: Header=BB32_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_203:                             # %cond.end623
                                        #   in Loop: Header=BB32_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB32_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB32_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB32_205:                             # %if.end636
                                        #   in Loop: Header=BB32_190 Depth=4
	jmp	.LBB32_206
.LBB32_206:                             # %if.end637
                                        #   in Loop: Header=BB32_190 Depth=4
	jmp	.LBB32_207
.LBB32_207:                             # %for.inc638
                                        #   in Loop: Header=BB32_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB32_190
.LBB32_208:                             # %for.end640
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB32_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB32_210:                             # %for.cond643
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB32_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB32_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB32_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB32_215
.LBB32_214:                             # %cond.false660
                                        #   in Loop: Header=BB32_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_215:                             # %cond.end663
                                        #   in Loop: Header=BB32_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB32_220
.LBB32_216:                             # %cond.false667
                                        #   in Loop: Header=BB32_210 Depth=4
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB32_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB32_219
.LBB32_218:                             # %cond.false674
                                        #   in Loop: Header=BB32_210 Depth=4
	movl	$1, %eax
	jmp	.LBB32_219
.LBB32_219:                             # %cond.end675
                                        #   in Loop: Header=BB32_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_220:                             # %cond.end680
                                        #   in Loop: Header=BB32_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB32_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB32_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB32_222:                             # %if.end693
                                        #   in Loop: Header=BB32_210 Depth=4
	jmp	.LBB32_223
.LBB32_223:                             # %for.inc694
                                        #   in Loop: Header=BB32_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB32_210
.LBB32_224:                             # %for.end696
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB32_228
.LBB32_227:                             # %cond.false706
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_228:                             # %cond.end709
                                        #   in Loop: Header=BB32_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB32_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB32_231
.LBB32_230:                             # %cond.false719
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB32_231:                             # %cond.end721
                                        #   in Loop: Header=BB32_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB32_236
.LBB32_232:                             # %cond.false726
                                        #   in Loop: Header=BB32_184 Depth=3
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB32_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB32_235
.LBB32_234:                             # %cond.false733
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	$1, %eax
	jmp	.LBB32_235
.LBB32_235:                             # %cond.end734
                                        #   in Loop: Header=BB32_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_236:                             # %cond.end739
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB32_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB32_243
.LBB32_242:                             # %cond.false761
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB32_243:                             # %cond.end763
                                        #   in Loop: Header=BB32_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB32_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB32_246
.LBB32_245:                             # %cond.false773
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB32_246:                             # %cond.end775
                                        #   in Loop: Header=BB32_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB32_248
.LBB32_247:                             # %cond.false780
                                        #   in Loop: Header=BB32_184 Depth=3
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_248:                             # %cond.end784
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB32_252
.LBB32_251:                             # %cond.false797
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB32_252:                             # %cond.end799
                                        #   in Loop: Header=BB32_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB32_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB32_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB32_255
.LBB32_254:                             # %cond.false809
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB32_255:                             # %cond.end811
                                        #   in Loop: Header=BB32_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB32_257
.LBB32_256:                             # %cond.false816
                                        #   in Loop: Header=BB32_184 Depth=3
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_257:                             # %cond.end820
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	%eax, -176(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	jmp	.LBB32_259
.LBB32_258:                             # %if.else824
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
.LBB32_259:                             # %if.end825
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB32_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB32_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB32_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB32_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_285
.LBB32_266:                             # %if.else845
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB32_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB32_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB32_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB32_284
.LBB32_271:                             # %if.else859
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB32_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB32_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB32_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB32_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB32_283
.LBB32_276:                             # %if.else876
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB32_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB32_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jg	.LBB32_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB32_282
.LBB32_281:                             # %if.else893
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-176(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB32_282:                             # %if.end898
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_283
.LBB32_283:                             # %if.end899
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_284
.LBB32_284:                             # %if.end900
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_285
.LBB32_285:                             # %if.end901
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_295
.LBB32_286:                             # %if.else902
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB32_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_294
.LBB32_289:                             # %if.else910
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB32_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB32_293
.LBB32_292:                             # %if.else918
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB32_293:                             # %if.end920
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_294
.LBB32_294:                             # %if.end921
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_295
.LBB32_295:                             # %if.end922
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_297
.LBB32_296:                             # %if.else923
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_297:                             # %if.end925
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB32_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB32_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB32_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	$0, -24(%rbp)
.LBB32_300:                             # %for.cond933
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB32_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB32_300 Depth=4
	movl	$0, -20(%rbp)
.LBB32_302:                             # %for.cond937
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        #         Parent Loop BB32_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB32_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB32_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB32_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_302
.LBB32_305:                             # %for.end999
                                        #   in Loop: Header=BB32_300 Depth=4
	jmp	.LBB32_306
.LBB32_306:                             # %for.inc1000
                                        #   in Loop: Header=BB32_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_300
.LBB32_307:                             # %for.end1002
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_323
.LBB32_308:                             # %if.else1003
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	$0, -24(%rbp)
.LBB32_309:                             # %for.cond1004
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB32_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB32_309 Depth=4
	movl	$0, -20(%rbp)
.LBB32_311:                             # %for.cond1008
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        #         Parent Loop BB32_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB32_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB32_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB32_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB32_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB32_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB32_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB32_316
.LBB32_315:                             # %cond.false1024
                                        #   in Loop: Header=BB32_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB32_316:                             # %cond.end1025
                                        #   in Loop: Header=BB32_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB32_318
.LBB32_317:                             # %if.else1111
                                        #   in Loop: Header=BB32_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB32_318:                             # %if.end1217
                                        #   in Loop: Header=BB32_311 Depth=5
	jmp	.LBB32_319
.LBB32_319:                             # %for.inc1218
                                        #   in Loop: Header=BB32_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_311
.LBB32_320:                             # %for.end1220
                                        #   in Loop: Header=BB32_309 Depth=4
	jmp	.LBB32_321
.LBB32_321:                             # %for.inc1221
                                        #   in Loop: Header=BB32_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_309
.LBB32_322:                             # %for.end1223
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_323
.LBB32_323:                             # %if.end1224
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB32_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB32_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB32_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	$0, -24(%rbp)
.LBB32_326:                             # %for.cond1231
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB32_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB32_326 Depth=4
	movl	$0, -20(%rbp)
.LBB32_328:                             # %for.cond1235
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        #         Parent Loop BB32_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB32_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB32_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB32_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_328
.LBB32_331:                             # %for.end1303
                                        #   in Loop: Header=BB32_326 Depth=4
	jmp	.LBB32_332
.LBB32_332:                             # %for.inc1304
                                        #   in Loop: Header=BB32_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_326
.LBB32_333:                             # %for.end1306
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_351
.LBB32_334:                             # %if.else1307
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	$0, -24(%rbp)
.LBB32_335:                             # %for.cond1308
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB32_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB32_335 Depth=4
	movl	$0, -20(%rbp)
.LBB32_337:                             # %for.cond1312
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        #         Parent Loop BB32_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB32_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB32_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB32_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB32_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB32_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB32_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB32_342
.LBB32_341:                             # %cond.false1330
                                        #   in Loop: Header=BB32_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB32_342:                             # %cond.end1332
                                        #   in Loop: Header=BB32_337 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB32_346
.LBB32_343:                             # %if.else1419
                                        #   in Loop: Header=BB32_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB32_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB32_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB32_345:                             # %if.end1529
                                        #   in Loop: Header=BB32_337 Depth=5
	jmp	.LBB32_346
.LBB32_346:                             # %if.end1530
                                        #   in Loop: Header=BB32_337 Depth=5
	jmp	.LBB32_347
.LBB32_347:                             # %for.inc1531
                                        #   in Loop: Header=BB32_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_337
.LBB32_348:                             # %for.end1533
                                        #   in Loop: Header=BB32_335 Depth=4
	jmp	.LBB32_349
.LBB32_349:                             # %for.inc1534
                                        #   in Loop: Header=BB32_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_335
.LBB32_350:                             # %for.end1536
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_351
.LBB32_351:                             # %if.end1537
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_352
.LBB32_352:                             # %if.end1538
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_393
.LBB32_353:                             # %if.else1539
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB32_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB32_355:                             # %for.cond1546
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB32_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB32_355 Depth=4
	movl	$0, -20(%rbp)
.LBB32_357:                             # %for.cond1550
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        #         Parent Loop BB32_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB32_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB32_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB32_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB32_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB32_361
.LBB32_360:                             # %if.else1596
                                        #   in Loop: Header=BB32_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB32_361:                             # %if.end1676
                                        #   in Loop: Header=BB32_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB32_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB32_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB32_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB32_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB32_367
.LBB32_364:                             # %if.else1721
                                        #   in Loop: Header=BB32_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB32_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB32_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB32_366:                             # %if.end1805
                                        #   in Loop: Header=BB32_357 Depth=5
	jmp	.LBB32_367
.LBB32_367:                             # %if.end1806
                                        #   in Loop: Header=BB32_357 Depth=5
	jmp	.LBB32_368
.LBB32_368:                             # %if.end1807
                                        #   in Loop: Header=BB32_357 Depth=5
	jmp	.LBB32_369
.LBB32_369:                             # %for.inc1808
                                        #   in Loop: Header=BB32_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_357
.LBB32_370:                             # %for.end1810
                                        #   in Loop: Header=BB32_355 Depth=4
	jmp	.LBB32_371
.LBB32_371:                             # %for.inc1811
                                        #   in Loop: Header=BB32_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_355
.LBB32_372:                             # %for.end1813
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_392
.LBB32_373:                             # %if.else1814
                                        #   in Loop: Header=BB32_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB32_374:                             # %for.cond1818
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB32_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB32_374 Depth=4
	movl	$0, -20(%rbp)
.LBB32_376:                             # %for.cond1822
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_181 Depth=2
                                        #       Parent Loop BB32_184 Depth=3
                                        #         Parent Loop BB32_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB32_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB32_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB32_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB32_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB32_380
.LBB32_379:                             # %if.else1868
                                        #   in Loop: Header=BB32_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB32_380:                             # %if.end1948
                                        #   in Loop: Header=BB32_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB32_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB32_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB32_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB32_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB32_386
.LBB32_383:                             # %if.else1993
                                        #   in Loop: Header=BB32_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB32_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB32_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB32_385:                             # %if.end2077
                                        #   in Loop: Header=BB32_376 Depth=5
	jmp	.LBB32_386
.LBB32_386:                             # %if.end2078
                                        #   in Loop: Header=BB32_376 Depth=5
	jmp	.LBB32_387
.LBB32_387:                             # %if.end2079
                                        #   in Loop: Header=BB32_376 Depth=5
	jmp	.LBB32_388
.LBB32_388:                             # %for.inc2080
                                        #   in Loop: Header=BB32_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_376
.LBB32_389:                             # %for.end2082
                                        #   in Loop: Header=BB32_374 Depth=4
	jmp	.LBB32_390
.LBB32_390:                             # %for.inc2083
                                        #   in Loop: Header=BB32_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_374
.LBB32_391:                             # %for.end2085
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_392
.LBB32_392:                             # %if.end2086
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_393
.LBB32_393:                             # %if.end2087
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB32_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB32_399
.LBB32_395:                             # %if.else2106
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB32_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB32_398
.LBB32_397:                             # %if.else2131
                                        #   in Loop: Header=BB32_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB32_398:                             # %if.end2132
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_399
.LBB32_399:                             # %if.end2133
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB32_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB32_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB32_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB32_402:                             # %if.end2143
                                        #   in Loop: Header=BB32_184 Depth=3
	jmp	.LBB32_403
.LBB32_403:                             # %for.inc2144
                                        #   in Loop: Header=BB32_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB32_184
.LBB32_404:                             # %for.end2146
                                        #   in Loop: Header=BB32_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB32_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB32_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB32_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB32_407:                             # %if.end2155
                                        #   in Loop: Header=BB32_181 Depth=2
	jmp	.LBB32_408
.LBB32_408:                             # %if.end2156
                                        #   in Loop: Header=BB32_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB32_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB32_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -320(%rbp)
.LBB32_410:                             # %if.end2161
                                        #   in Loop: Header=BB32_181 Depth=2
	jmp	.LBB32_411
.LBB32_411:                             # %if.end2162
                                        #   in Loop: Header=BB32_181 Depth=2
	jmp	.LBB32_412
.LBB32_412:                             # %for.inc2163
                                        #   in Loop: Header=BB32_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB32_181
.LBB32_413:                             # %for.end2165
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB32_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB32_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB32_416:                             # %for.cond2172
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_418 Depth 3
                                        #         Child Loop BB32_445 Depth 4
                                        #         Child Loop BB32_464 Depth 4
                                        #           Child Loop BB32_466 Depth 5
                                        #         Child Loop BB32_473 Depth 4
                                        #         Child Loop BB32_508 Depth 4
                                        #           Child Loop BB32_510 Depth 5
                                        #         Child Loop BB32_532 Depth 4
                                        #           Child Loop BB32_534 Depth 5
                                        #             Child Loop BB32_536 Depth 6
                                        #         Child Loop BB32_544 Depth 4
                                        #           Child Loop BB32_546 Depth 5
                                        #       Child Loop BB32_569 Depth 3
                                        #         Child Loop BB32_571 Depth 4
                                        #           Child Loop BB32_573 Depth 5
                                        #       Child Loop BB32_581 Depth 3
                                        #         Child Loop BB32_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB32_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB32_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB32_418:                             # %for.cond2184
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_445 Depth 4
                                        #         Child Loop BB32_464 Depth 4
                                        #           Child Loop BB32_466 Depth 5
                                        #         Child Loop BB32_473 Depth 4
                                        #         Child Loop BB32_508 Depth 4
                                        #           Child Loop BB32_510 Depth 5
                                        #         Child Loop BB32_532 Depth 4
                                        #           Child Loop BB32_534 Depth 5
                                        #             Child Loop BB32_536 Depth 6
                                        #         Child Loop BB32_544 Depth 4
                                        #           Child Loop BB32_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB32_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB32_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB32_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB32_423
.LBB32_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB32_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB32_557
.LBB32_423:                             # %if.then2201
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB32_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	$0, -212(%rbp)
	movl	$0, -224(%rbp)
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -212(%rbp)
	cmpl	$2147483647, -212(%rbp) # imm = 0x7FFFFFFF
	je	.LBB32_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB32_428
.LBB32_427:                             # %if.then2214
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB32_429
.LBB32_428:                             # %if.else2215
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-212(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-224(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB32_429:                             # %if.end2218
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB32_431
	jmp	.LBB32_430
.LBB32_430:                             # %if.end2218
                                        #   in Loop: Header=BB32_418 Depth=3
	subl	$2, %eax
	je	.LBB32_438
	jmp	.LBB32_439
.LBB32_431:                             # %sw.bb
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-224(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jl	.LBB32_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB32_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB32_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB32_436
.LBB32_435:                             # %if.then2231
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_437
.LBB32_436:                             # %if.else2232
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_437:                             # %if.end2233
                                        #   in Loop: Header=BB32_418 Depth=3
	jmp	.LBB32_440
.LBB32_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_440
.LBB32_439:                             # %sw.default
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_440:                             # %sw.epilog
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB32_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB32_442:                             # %if.end2240
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB32_443:                             # %if.end2242
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB32_518
.LBB32_444:                             # %if.else2278
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB32_445:                             # %for.cond2279
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB32_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB32_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB32_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB32_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB32_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB32_461
.LBB32_449:                             # %if.then2296
                                        #   in Loop: Header=BB32_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB32_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB32_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB32_453
.LBB32_452:                             # %cond.false2306
                                        #   in Loop: Header=BB32_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_453:                             # %cond.end2309
                                        #   in Loop: Header=BB32_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB32_458
.LBB32_454:                             # %cond.false2313
                                        #   in Loop: Header=BB32_445 Depth=4
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB32_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB32_457
.LBB32_456:                             # %cond.false2320
                                        #   in Loop: Header=BB32_445 Depth=4
	movl	$1, %eax
	jmp	.LBB32_457
.LBB32_457:                             # %cond.end2321
                                        #   in Loop: Header=BB32_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_458:                             # %cond.end2326
                                        #   in Loop: Header=BB32_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB32_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB32_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB32_460:                             # %if.end2339
                                        #   in Loop: Header=BB32_445 Depth=4
	jmp	.LBB32_461
.LBB32_461:                             # %if.end2340
                                        #   in Loop: Header=BB32_445 Depth=4
	jmp	.LBB32_462
.LBB32_462:                             # %for.inc2341
                                        #   in Loop: Header=BB32_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB32_445
.LBB32_463:                             # %for.end2343
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	$0, -24(%rbp)
.LBB32_464:                             # %for.cond2344
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB32_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB32_464 Depth=4
	movl	$0, -20(%rbp)
.LBB32_466:                             # %for.cond2348
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        #         Parent Loop BB32_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB32_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB32_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB32_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_466
.LBB32_469:                             # %for.end2405
                                        #   in Loop: Header=BB32_464 Depth=4
	jmp	.LBB32_470
.LBB32_470:                             # %for.inc2406
                                        #   in Loop: Header=BB32_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_464
.LBB32_471:                             # %for.end2408
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB32_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB32_473:                             # %for.cond2411
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB32_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB32_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB32_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB32_478
.LBB32_477:                             # %cond.false2428
                                        #   in Loop: Header=BB32_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_478:                             # %cond.end2431
                                        #   in Loop: Header=BB32_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB32_483
.LBB32_479:                             # %cond.false2435
                                        #   in Loop: Header=BB32_473 Depth=4
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB32_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB32_482
.LBB32_481:                             # %cond.false2442
                                        #   in Loop: Header=BB32_473 Depth=4
	movl	$1, %eax
	jmp	.LBB32_482
.LBB32_482:                             # %cond.end2443
                                        #   in Loop: Header=BB32_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_483:                             # %cond.end2448
                                        #   in Loop: Header=BB32_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB32_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB32_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB32_485:                             # %if.end2461
                                        #   in Loop: Header=BB32_473 Depth=4
	jmp	.LBB32_486
.LBB32_486:                             # %for.inc2462
                                        #   in Loop: Header=BB32_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB32_473
.LBB32_487:                             # %for.end2464
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB32_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB32_491
.LBB32_490:                             # %cond.false2474
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_491:                             # %cond.end2477
                                        #   in Loop: Header=BB32_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB32_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB32_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB32_494
.LBB32_493:                             # %cond.false2487
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB32_494:                             # %cond.end2489
                                        #   in Loop: Header=BB32_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB32_499
.LBB32_495:                             # %cond.false2494
                                        #   in Loop: Header=BB32_418 Depth=3
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB32_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB32_498
.LBB32_497:                             # %cond.false2501
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	$1, %eax
	jmp	.LBB32_498
.LBB32_498:                             # %cond.end2502
                                        #   in Loop: Header=BB32_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_499:                             # %cond.end2507
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB32_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB32_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB32_507
.LBB32_502:                             # %if.else2517
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB32_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB32_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB32_506
.LBB32_505:                             # %if.else2524
                                        #   in Loop: Header=BB32_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB32_506:                             # %if.end2525
                                        #   in Loop: Header=BB32_418 Depth=3
	jmp	.LBB32_507
.LBB32_507:                             # %if.end2526
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	$0, -24(%rbp)
.LBB32_508:                             # %for.cond2527
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB32_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB32_508 Depth=4
	movl	$0, -20(%rbp)
.LBB32_510:                             # %for.cond2531
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        #         Parent Loop BB32_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB32_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB32_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB32_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_510
.LBB32_513:                             # %for.end2567
                                        #   in Loop: Header=BB32_508 Depth=4
	jmp	.LBB32_514
.LBB32_514:                             # %for.inc2568
                                        #   in Loop: Header=BB32_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_508
.LBB32_515:                             # %for.end2570
                                        #   in Loop: Header=BB32_418 Depth=3
	jmp	.LBB32_517
.LBB32_516:                             # %if.else2571
                                        #   in Loop: Header=BB32_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_517:                             # %if.end2572
                                        #   in Loop: Header=BB32_418 Depth=3
	jmp	.LBB32_518
.LBB32_518:                             # %if.end2573
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB32_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB32_526
.LBB32_520:                             # %if.else2578
                                        #   in Loop: Header=BB32_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB32_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB32_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB32_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB32_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_524
.LBB32_523:                             # %cond.false2592
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB32_524:                             # %cond.end2597
                                        #   in Loop: Header=BB32_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB32_525:                             # %if.end2603
                                        #   in Loop: Header=BB32_418 Depth=3
	jmp	.LBB32_526
.LBB32_526:                             # %if.end2604
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB32_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB32_530
.LBB32_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB32_556
.LBB32_530:                             # %if.then2616
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB32_532:                             # %for.cond2638
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_534 Depth 5
                                        #             Child Loop BB32_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB32_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB32_532 Depth=4
	movl	$0, -24(%rbp)
.LBB32_534:                             # %for.cond2642
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        #         Parent Loop BB32_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB32_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB32_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB32_534 Depth=5
	movl	$0, -20(%rbp)
.LBB32_536:                             # %for.cond2646
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        #         Parent Loop BB32_532 Depth=4
                                        #           Parent Loop BB32_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB32_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB32_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB32_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_536
.LBB32_539:                             # %for.end2668
                                        #   in Loop: Header=BB32_534 Depth=5
	jmp	.LBB32_540
.LBB32_540:                             # %for.inc2669
                                        #   in Loop: Header=BB32_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_534
.LBB32_541:                             # %for.end2671
                                        #   in Loop: Header=BB32_532 Depth=4
	jmp	.LBB32_542
.LBB32_542:                             # %for.inc2672
                                        #   in Loop: Header=BB32_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_532
.LBB32_543:                             # %for.end2674
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_544:                             # %for.cond2675
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB32_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_546:                             # %for.cond2680
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_418 Depth=3
                                        #         Parent Loop BB32_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB32_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB32_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB32_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB32_550
.LBB32_549:                             # %if.else2705
                                        #   in Loop: Header=BB32_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB32_550:                             # %if.end2754
                                        #   in Loop: Header=BB32_546 Depth=5
	jmp	.LBB32_551
.LBB32_551:                             # %for.inc2755
                                        #   in Loop: Header=BB32_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_546
.LBB32_552:                             # %for.end2757
                                        #   in Loop: Header=BB32_544 Depth=4
	jmp	.LBB32_553
.LBB32_553:                             # %for.inc2758
                                        #   in Loop: Header=BB32_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_544
.LBB32_554:                             # %for.end2760
                                        #   in Loop: Header=BB32_418 Depth=3
	jmp	.LBB32_555
.LBB32_555:                             # %if.end2761
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB32_556:                             # %if.end2762
                                        #   in Loop: Header=BB32_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB32_557:                             # %if.end2763
                                        #   in Loop: Header=BB32_418 Depth=3
	jmp	.LBB32_558
.LBB32_558:                             # %for.inc2764
                                        #   in Loop: Header=BB32_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB32_418
.LBB32_559:                             # %for.end2766
                                        #   in Loop: Header=BB32_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB32_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB32_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB32_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB32_563
.LBB32_562:                             # %cond.true2782
                                        #   in Loop: Header=BB32_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB32_564
.LBB32_563:                             # %cond.false2783
                                        #   in Loop: Header=BB32_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB32_564
.LBB32_564:                             # %cond.end2784
                                        #   in Loop: Header=BB32_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB32_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB32_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB32_567
.LBB32_566:                             # %cond.true2793
                                        #   in Loop: Header=BB32_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB32_568
.LBB32_567:                             # %cond.false2794
                                        #   in Loop: Header=BB32_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB32_568
.LBB32_568:                             # %cond.end2795
                                        #   in Loop: Header=BB32_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB32_569:                             # %for.cond2813
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_571 Depth 4
                                        #           Child Loop BB32_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB32_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB32_569 Depth=3
	movl	$0, -24(%rbp)
.LBB32_571:                             # %for.cond2817
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB32_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB32_571 Depth=4
	movl	$0, -20(%rbp)
.LBB32_573:                             # %for.cond2821
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_569 Depth=3
                                        #         Parent Loop BB32_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB32_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB32_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB32_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_573
.LBB32_576:                             # %for.end2844
                                        #   in Loop: Header=BB32_571 Depth=4
	jmp	.LBB32_577
.LBB32_577:                             # %for.inc2845
                                        #   in Loop: Header=BB32_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_571
.LBB32_578:                             # %for.end2847
                                        #   in Loop: Header=BB32_569 Depth=3
	jmp	.LBB32_579
.LBB32_579:                             # %for.inc2848
                                        #   in Loop: Header=BB32_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_569
.LBB32_580:                             # %for.end2850
                                        #   in Loop: Header=BB32_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_581:                             # %for.cond2851
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB32_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_583:                             # %for.cond2856
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_416 Depth=2
                                        #       Parent Loop BB32_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB32_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB32_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB32_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB32_587
.LBB32_586:                             # %if.else2886
                                        #   in Loop: Header=BB32_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB32_587:                             # %if.end2935
                                        #   in Loop: Header=BB32_583 Depth=4
	jmp	.LBB32_588
.LBB32_588:                             # %for.inc2936
                                        #   in Loop: Header=BB32_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_583
.LBB32_589:                             # %for.end2938
                                        #   in Loop: Header=BB32_581 Depth=3
	jmp	.LBB32_590
.LBB32_590:                             # %for.inc2939
                                        #   in Loop: Header=BB32_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_581
.LBB32_591:                             # %for.end2941
                                        #   in Loop: Header=BB32_416 Depth=2
	jmp	.LBB32_592
.LBB32_592:                             # %if.end2942
                                        #   in Loop: Header=BB32_416 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB32_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB32_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB32_594:                             # %if.end2948
                                        #   in Loop: Header=BB32_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB32_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB32_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB32_596:                             # %if.end2974
                                        #   in Loop: Header=BB32_416 Depth=2
	jmp	.LBB32_597
.LBB32_597:                             # %for.inc2975
                                        #   in Loop: Header=BB32_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB32_416
.LBB32_598:                             # %for.end2977
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_599:                             # %if.end2980
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB32_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB32_601:                             # %for.cond2985
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_603 Depth 3
                                        #         Child Loop BB32_614 Depth 4
                                        #         Child Loop BB32_633 Depth 4
                                        #           Child Loop BB32_635 Depth 5
                                        #         Child Loop BB32_642 Depth 4
                                        #         Child Loop BB32_677 Depth 4
                                        #           Child Loop BB32_679 Depth 5
                                        #         Child Loop BB32_701 Depth 4
                                        #           Child Loop BB32_703 Depth 5
                                        #             Child Loop BB32_705 Depth 6
                                        #         Child Loop BB32_713 Depth 4
                                        #           Child Loop BB32_715 Depth 5
                                        #         Child Loop BB32_723 Depth 4
                                        #           Child Loop BB32_725 Depth 5
                                        #       Child Loop BB32_745 Depth 3
                                        #         Child Loop BB32_747 Depth 4
                                        #           Child Loop BB32_749 Depth 5
                                        #       Child Loop BB32_757 Depth 3
                                        #         Child Loop BB32_759 Depth 4
                                        #       Child Loop BB32_766 Depth 3
                                        #         Child Loop BB32_768 Depth 4
                                        #       Child Loop BB32_778 Depth 3
                                        #         Child Loop BB32_780 Depth 4
                                        #       Child Loop BB32_786 Depth 3
                                        #       Child Loop BB32_791 Depth 3
                                        #         Child Loop BB32_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB32_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB32_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB32_603:                             # %for.cond2997
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_614 Depth 4
                                        #         Child Loop BB32_633 Depth 4
                                        #           Child Loop BB32_635 Depth 5
                                        #         Child Loop BB32_642 Depth 4
                                        #         Child Loop BB32_677 Depth 4
                                        #           Child Loop BB32_679 Depth 5
                                        #         Child Loop BB32_701 Depth 4
                                        #           Child Loop BB32_703 Depth 5
                                        #             Child Loop BB32_705 Depth 6
                                        #         Child Loop BB32_713 Depth 4
                                        #           Child Loop BB32_715 Depth 5
                                        #         Child Loop BB32_723 Depth 4
                                        #           Child Loop BB32_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB32_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB32_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB32_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB32_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB32_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB32_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB32_610
.LBB32_609:                             # %if.then3019
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB32_611
.LBB32_610:                             # %if.else3020
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB32_611:                             # %if.end3022
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB32_612:                             # %if.end3024
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB32_687
.LBB32_613:                             # %if.else3060
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB32_614:                             # %for.cond3061
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB32_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB32_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB32_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB32_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB32_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB32_630
.LBB32_618:                             # %if.then3078
                                        #   in Loop: Header=BB32_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB32_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB32_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB32_622
.LBB32_621:                             # %cond.false3088
                                        #   in Loop: Header=BB32_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_622:                             # %cond.end3091
                                        #   in Loop: Header=BB32_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB32_627
.LBB32_623:                             # %cond.false3095
                                        #   in Loop: Header=BB32_614 Depth=4
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB32_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB32_626
.LBB32_625:                             # %cond.false3102
                                        #   in Loop: Header=BB32_614 Depth=4
	movl	$1, %eax
	jmp	.LBB32_626
.LBB32_626:                             # %cond.end3103
                                        #   in Loop: Header=BB32_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_627:                             # %cond.end3108
                                        #   in Loop: Header=BB32_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB32_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB32_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB32_629:                             # %if.end3121
                                        #   in Loop: Header=BB32_614 Depth=4
	jmp	.LBB32_630
.LBB32_630:                             # %if.end3122
                                        #   in Loop: Header=BB32_614 Depth=4
	jmp	.LBB32_631
.LBB32_631:                             # %for.inc3123
                                        #   in Loop: Header=BB32_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB32_614
.LBB32_632:                             # %for.end3125
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	$0, -24(%rbp)
.LBB32_633:                             # %for.cond3126
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB32_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB32_633 Depth=4
	movl	$0, -20(%rbp)
.LBB32_635:                             # %for.cond3130
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        #         Parent Loop BB32_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB32_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB32_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB32_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_635
.LBB32_638:                             # %for.end3187
                                        #   in Loop: Header=BB32_633 Depth=4
	jmp	.LBB32_639
.LBB32_639:                             # %for.inc3188
                                        #   in Loop: Header=BB32_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_633
.LBB32_640:                             # %for.end3190
                                        #   in Loop: Header=BB32_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB32_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB32_642:                             # %for.cond3193
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB32_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB32_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB32_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB32_647
.LBB32_646:                             # %cond.false3210
                                        #   in Loop: Header=BB32_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_647:                             # %cond.end3213
                                        #   in Loop: Header=BB32_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB32_652
.LBB32_648:                             # %cond.false3217
                                        #   in Loop: Header=BB32_642 Depth=4
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB32_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB32_651
.LBB32_650:                             # %cond.false3224
                                        #   in Loop: Header=BB32_642 Depth=4
	movl	$1, %eax
	jmp	.LBB32_651
.LBB32_651:                             # %cond.end3225
                                        #   in Loop: Header=BB32_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_652:                             # %cond.end3230
                                        #   in Loop: Header=BB32_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB32_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB32_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB32_654:                             # %if.end3243
                                        #   in Loop: Header=BB32_642 Depth=4
	jmp	.LBB32_655
.LBB32_655:                             # %for.inc3244
                                        #   in Loop: Header=BB32_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB32_642
.LBB32_656:                             # %for.end3246
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB32_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB32_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB32_660
.LBB32_659:                             # %cond.false3256
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB32_660:                             # %cond.end3259
                                        #   in Loop: Header=BB32_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB32_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB32_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB32_663
.LBB32_662:                             # %cond.false3269
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB32_663:                             # %cond.end3271
                                        #   in Loop: Header=BB32_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB32_668
.LBB32_664:                             # %cond.false3276
                                        #   in Loop: Header=BB32_603 Depth=3
	vmovsd	.LCPI32_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB32_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB32_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB32_667
.LBB32_666:                             # %cond.false3283
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	$1, %eax
	jmp	.LBB32_667
.LBB32_667:                             # %cond.end3284
                                        #   in Loop: Header=BB32_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB32_668:                             # %cond.end3289
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB32_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB32_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB32_676
.LBB32_671:                             # %if.else3299
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB32_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB32_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB32_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB32_675
.LBB32_674:                             # %if.else3306
                                        #   in Loop: Header=BB32_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB32_675:                             # %if.end3307
                                        #   in Loop: Header=BB32_603 Depth=3
	jmp	.LBB32_676
.LBB32_676:                             # %if.end3308
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	$0, -24(%rbp)
.LBB32_677:                             # %for.cond3309
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB32_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB32_677 Depth=4
	movl	$0, -20(%rbp)
.LBB32_679:                             # %for.cond3313
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        #         Parent Loop BB32_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB32_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB32_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB32_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_679
.LBB32_682:                             # %for.end3349
                                        #   in Loop: Header=BB32_677 Depth=4
	jmp	.LBB32_683
.LBB32_683:                             # %for.inc3350
                                        #   in Loop: Header=BB32_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_677
.LBB32_684:                             # %for.end3352
                                        #   in Loop: Header=BB32_603 Depth=3
	jmp	.LBB32_686
.LBB32_685:                             # %if.else3353
                                        #   in Loop: Header=BB32_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_686:                             # %if.end3354
                                        #   in Loop: Header=BB32_603 Depth=3
	jmp	.LBB32_687
.LBB32_687:                             # %if.end3355
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB32_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB32_695
.LBB32_689:                             # %if.else3360
                                        #   in Loop: Header=BB32_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB32_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB32_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB32_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB32_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_693
.LBB32_692:                             # %cond.false3374
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB32_693:                             # %cond.end3379
                                        #   in Loop: Header=BB32_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB32_694:                             # %if.end3385
                                        #   in Loop: Header=BB32_603 Depth=3
	jmp	.LBB32_695
.LBB32_695:                             # %if.end3386
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB32_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB32_699
.LBB32_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB32_732
.LBB32_699:                             # %if.then3398
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB32_701:                             # %for.cond3422
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_703 Depth 5
                                        #             Child Loop BB32_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB32_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB32_701 Depth=4
	movl	$0, -24(%rbp)
.LBB32_703:                             # %for.cond3426
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        #         Parent Loop BB32_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB32_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB32_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB32_703 Depth=5
	movl	$0, -20(%rbp)
.LBB32_705:                             # %for.cond3430
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        #         Parent Loop BB32_701 Depth=4
                                        #           Parent Loop BB32_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB32_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB32_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB32_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_705
.LBB32_708:                             # %for.end3453
                                        #   in Loop: Header=BB32_703 Depth=5
	jmp	.LBB32_709
.LBB32_709:                             # %for.inc3454
                                        #   in Loop: Header=BB32_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_703
.LBB32_710:                             # %for.end3456
                                        #   in Loop: Header=BB32_701 Depth=4
	jmp	.LBB32_711
.LBB32_711:                             # %for.inc3457
                                        #   in Loop: Header=BB32_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_701
.LBB32_712:                             # %for.end3459
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_713:                             # %for.cond3460
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB32_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_715:                             # %for.cond3465
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        #         Parent Loop BB32_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB32_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB32_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_715
.LBB32_718:                             # %for.end3494
                                        #   in Loop: Header=BB32_713 Depth=4
	jmp	.LBB32_719
.LBB32_719:                             # %for.inc3495
                                        #   in Loop: Header=BB32_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_713
.LBB32_720:                             # %for.end3497
                                        #   in Loop: Header=BB32_603 Depth=3
	jmp	.LBB32_721
.LBB32_721:                             # %if.end3498
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_723:                             # %for.cond3502
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB32_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_725:                             # %for.cond3507
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_603 Depth=3
                                        #         Parent Loop BB32_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB32_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB32_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_725
.LBB32_728:                             # %for.end3562
                                        #   in Loop: Header=BB32_723 Depth=4
	jmp	.LBB32_729
.LBB32_729:                             # %for.inc3563
                                        #   in Loop: Header=BB32_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_723
.LBB32_730:                             # %for.end3565
                                        #   in Loop: Header=BB32_603 Depth=3
	jmp	.LBB32_731
.LBB32_731:                             # %if.end3566
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB32_732:                             # %if.end3567
                                        #   in Loop: Header=BB32_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB32_733:                             # %if.end3568
                                        #   in Loop: Header=BB32_603 Depth=3
	jmp	.LBB32_734
.LBB32_734:                             # %for.inc3569
                                        #   in Loop: Header=BB32_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB32_603
.LBB32_735:                             # %for.end3571
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB32_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB32_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB32_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB32_739
.LBB32_738:                             # %cond.true3588
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB32_740
.LBB32_739:                             # %cond.false3589
                                        #   in Loop: Header=BB32_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB32_740
.LBB32_740:                             # %cond.end3590
                                        #   in Loop: Header=BB32_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB32_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB32_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB32_743
.LBB32_742:                             # %cond.true3599
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB32_744
.LBB32_743:                             # %cond.false3600
                                        #   in Loop: Header=BB32_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB32_744
.LBB32_744:                             # %cond.end3601
                                        #   in Loop: Header=BB32_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB32_745:                             # %for.cond3619
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_747 Depth 4
                                        #           Child Loop BB32_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB32_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB32_745 Depth=3
	movl	$0, -24(%rbp)
.LBB32_747:                             # %for.cond3623
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB32_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB32_747 Depth=4
	movl	$0, -20(%rbp)
.LBB32_749:                             # %for.cond3627
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_745 Depth=3
                                        #         Parent Loop BB32_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB32_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB32_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB32_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_749
.LBB32_752:                             # %for.end3650
                                        #   in Loop: Header=BB32_747 Depth=4
	jmp	.LBB32_753
.LBB32_753:                             # %for.inc3651
                                        #   in Loop: Header=BB32_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_747
.LBB32_754:                             # %for.end3653
                                        #   in Loop: Header=BB32_745 Depth=3
	jmp	.LBB32_755
.LBB32_755:                             # %for.inc3654
                                        #   in Loop: Header=BB32_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_745
.LBB32_756:                             # %for.end3656
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_757:                             # %for.cond3657
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB32_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_759:                             # %for.cond3662
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB32_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB32_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_759
.LBB32_762:                             # %for.end3691
                                        #   in Loop: Header=BB32_757 Depth=3
	jmp	.LBB32_763
.LBB32_763:                             # %for.inc3692
                                        #   in Loop: Header=BB32_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_757
.LBB32_764:                             # %for.end3694
                                        #   in Loop: Header=BB32_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_766:                             # %for.cond3698
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB32_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_768:                             # %for.cond3703
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB32_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB32_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_768
.LBB32_771:                             # %for.end3758
                                        #   in Loop: Header=BB32_766 Depth=3
	jmp	.LBB32_772
.LBB32_772:                             # %for.inc3759
                                        #   in Loop: Header=BB32_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_766
.LBB32_773:                             # %for.end3761
                                        #   in Loop: Header=BB32_601 Depth=2
	jmp	.LBB32_774
.LBB32_774:                             # %if.end3762
                                        #   in Loop: Header=BB32_601 Depth=2
	jmp	.LBB32_775
.LBB32_775:                             # %if.end3763
                                        #   in Loop: Header=BB32_601 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB32_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB32_777:                             # %if.end3769
                                        #   in Loop: Header=BB32_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_778:                             # %for.cond3781
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB32_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_780:                             # %for.cond3786
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB32_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB32_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_780
.LBB32_783:                             # %for.end3797
                                        #   in Loop: Header=BB32_778 Depth=3
	jmp	.LBB32_784
.LBB32_784:                             # %for.inc3798
                                        #   in Loop: Header=BB32_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_778
.LBB32_785:                             # %for.end3800
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_786:                             # %for.cond3802
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB32_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB32_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_786
.LBB32_789:                             # %for.end3811
                                        #   in Loop: Header=BB32_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB32_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB32_791:                             # %for.cond3819
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB32_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB32_793:                             # %for.cond3824
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_601 Depth=2
                                        #       Parent Loop BB32_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB32_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB32_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_793
.LBB32_796:                             # %for.end3844
                                        #   in Loop: Header=BB32_791 Depth=3
	jmp	.LBB32_797
.LBB32_797:                             # %for.inc3845
                                        #   in Loop: Header=BB32_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_791
.LBB32_798:                             # %for.end3847
                                        #   in Loop: Header=BB32_601 Depth=2
	jmp	.LBB32_799
.LBB32_799:                             # %if.end3848
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB32_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB32_601
.LBB32_801:                             # %for.end3860
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_802
.LBB32_802:                             # %if.end3861
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB32_803:                             # %for.cond3862
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB32_803 Depth=2
	movl	$0, -24(%rbp)
.LBB32_805:                             # %for.cond3866
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB32_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB32_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_805
.LBB32_808:                             # %for.end3890
                                        #   in Loop: Header=BB32_803 Depth=2
	jmp	.LBB32_809
.LBB32_809:                             # %for.inc3891
                                        #   in Loop: Header=BB32_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_803
.LBB32_810:                             # %for.end3893
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB32_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB32_825
.LBB32_813:                             # %if.then3902
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB32_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB32_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_822
.LBB32_816:                             # %if.else3910
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB32_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB32_821
.LBB32_818:                             # %if.else3915
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB32_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_820:                             # %if.end3922
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_821
.LBB32_821:                             # %if.end3923
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_822
.LBB32_822:                             # %if.end3924
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_824
.LBB32_823:                             # %if.else3925
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_824:                             # %if.end3927
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_825
.LBB32_825:                             # %if.end3928
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_827
.LBB32_826:                             # %if.else3929
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB32_827:                             # %if.end3930
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB32_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB32_830
.LBB32_829:                             # %if.then3938
                                        #   in Loop: Header=BB32_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB32_830:                             # %if.end3939
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_832
.LBB32_831:                             # %if.else3940
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB32_832:                             # %if.end3941
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB32_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB32_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB32_171 Depth=1
	leaq	-276(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-304(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB32_835:                             # %for.cond3949
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_853 Depth 3
                                        #         Child Loop BB32_908 Depth 4
                                        #           Child Loop BB32_911 Depth 5
                                        #             Child Loop BB32_913 Depth 6
                                        #           Child Loop BB32_920 Depth 5
                                        #             Child Loop BB32_922 Depth 6
                                        #         Child Loop BB32_955 Depth 4
                                        #           Child Loop BB32_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB32_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB32_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB32_846
.LBB32_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB32_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB32_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB32_846
.LBB32_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB32_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB32_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB32_846
.LBB32_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB32_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB32_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB32_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB32_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB32_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB32_835 Depth=2
	cmpl	$0, -304(%rbp)
	jne	.LBB32_847
.LBB32_846:                             # %if.then3982
                                        #   in Loop: Header=BB32_835 Depth=2
	jmp	.LBB32_976
.LBB32_847:                             # %if.end3983
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB32_835 Depth=2
	movl	$11, -308(%rbp)
	jmp	.LBB32_850
.LBB32_849:                             # %if.else3987
                                        #   in Loop: Header=BB32_835 Depth=2
	movl	$8, -308(%rbp)
.LBB32_850:                             # %if.end3988
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB32_852:                             # %if.end3994
                                        #   in Loop: Header=BB32_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB32_853:                             # %for.cond3995
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_908 Depth 4
                                        #           Child Loop BB32_911 Depth 5
                                        #             Child Loop BB32_913 Depth 6
                                        #           Child Loop BB32_920 Depth 5
                                        #             Child Loop BB32_922 Depth 6
                                        #         Child Loop BB32_955 Depth 4
                                        #           Child Loop BB32_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB32_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB32_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB32_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB32_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB32_857:                             # %if.end4010
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB32_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB32_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB32_866
.LBB32_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB32_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB32_866
.LBB32_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB32_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB32_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB32_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -304(%rbp)
	jne	.LBB32_867
.LBB32_866:                             # %if.then4032
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_974
.LBB32_867:                             # %if.end4033
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_869
.LBB32_868:                             # %if.else4034
                                        #   in Loop: Header=BB32_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB32_869:                             # %if.end4037
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB32_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB32_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB32_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB32_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB32_877:                             # %if.end4066
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_878
.LBB32_878:                             # %if.end4067
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB32_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB32_880:                             # %if.end4072
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB32_881:                             # %if.end4074
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB32_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB32_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB32_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB32_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB32_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB32_887:                             # %if.end4092
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_888
.LBB32_888:                             # %if.end4093
                                        #   in Loop: Header=BB32_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB32_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB32_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB32_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB32_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_902
.LBB32_893:                             # %if.else4110
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB32_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB32_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB32_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_901
.LBB32_897:                             # %if.else4120
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB32_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB32_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB32_900:                             # %if.end4128
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_901
.LBB32_901:                             # %if.end4129
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_902
.LBB32_902:                             # %if.end4130
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_903
.LBB32_903:                             # %if.end4131
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB32_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB32_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB32_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB32_947
.LBB32_907:                             # %if.then4146
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_908
.LBB32_908:                             # %while.body
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        #       Parent Loop BB32_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_911 Depth 5
                                        #             Child Loop BB32_913 Depth 6
                                        #           Child Loop BB32_920 Depth 5
                                        #             Child Loop BB32_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB32_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB32_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB32_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB32_908 Depth=4
	movl	$0, -20(%rbp)
.LBB32_911:                             # %for.cond4153
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        #       Parent Loop BB32_853 Depth=3
                                        #         Parent Loop BB32_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB32_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB32_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB32_911 Depth=5
	movl	$0, -24(%rbp)
.LBB32_913:                             # %for.cond4157
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        #       Parent Loop BB32_853 Depth=3
                                        #         Parent Loop BB32_908 Depth=4
                                        #           Parent Loop BB32_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB32_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB32_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB32_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_913
.LBB32_916:                             # %for.end4182
                                        #   in Loop: Header=BB32_911 Depth=5
	jmp	.LBB32_917
.LBB32_917:                             # %for.inc4183
                                        #   in Loop: Header=BB32_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_911
.LBB32_918:                             # %for.end4185
                                        #   in Loop: Header=BB32_908 Depth=4
	jmp	.LBB32_928
.LBB32_919:                             # %if.else4186
                                        #   in Loop: Header=BB32_908 Depth=4
	movl	$0, -20(%rbp)
.LBB32_920:                             # %for.cond4187
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        #       Parent Loop BB32_853 Depth=3
                                        #         Parent Loop BB32_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB32_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB32_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB32_920 Depth=5
	movl	$0, -24(%rbp)
.LBB32_922:                             # %for.cond4191
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        #       Parent Loop BB32_853 Depth=3
                                        #         Parent Loop BB32_908 Depth=4
                                        #           Parent Loop BB32_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB32_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB32_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB32_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_922
.LBB32_925:                             # %for.end4215
                                        #   in Loop: Header=BB32_920 Depth=5
	jmp	.LBB32_926
.LBB32_926:                             # %for.inc4216
                                        #   in Loop: Header=BB32_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_920
.LBB32_927:                             # %for.end4218
                                        #   in Loop: Header=BB32_908 Depth=4
	jmp	.LBB32_928
.LBB32_928:                             # %if.end4219
                                        #   in Loop: Header=BB32_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB32_929:                             # %if.end4220
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB32_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB32_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB32_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB32_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB32_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB32_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB32_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB32_908 Depth=4
	jmp	.LBB32_908
.LBB32_935:                             # %if.else4236
                                        #   in Loop: Header=BB32_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB32_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB32_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB32_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB32_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB32_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_934
.LBB32_940:                             # %if.else4250
                                        #   in Loop: Header=BB32_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB32_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB32_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB32_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB32_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB32_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_934
.LBB32_944:                             # %if.else4262
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB32_946
.LBB32_945:                             # %if.else4264
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_946
.LBB32_946:                             # %while.end
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_947
.LBB32_947:                             # %if.end4265
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB32_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB32_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB32_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB32_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB32_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB32_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB32_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	$0, -20(%rbp)
.LBB32_955:                             # %for.cond4288
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        #       Parent Loop BB32_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB32_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB32_955 Depth=4
	movl	$0, -24(%rbp)
.LBB32_957:                             # %for.cond4292
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_835 Depth=2
                                        #       Parent Loop BB32_853 Depth=3
                                        #         Parent Loop BB32_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB32_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB32_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB32_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_957
.LBB32_960:                             # %for.end4316
                                        #   in Loop: Header=BB32_955 Depth=4
	jmp	.LBB32_961
.LBB32_961:                             # %for.inc4317
                                        #   in Loop: Header=BB32_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_955
.LBB32_962:                             # %for.end4319
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB32_963:                             # %if.end4320
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_964
.LBB32_964:                             # %if.end4321
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_965
.LBB32_965:                             # %if.end4322
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB32_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB32_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB32_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB32_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB32_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB32_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB32_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB32_972:                             # %if.end4356
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_973
.LBB32_973:                             # %if.end4357
                                        #   in Loop: Header=BB32_853 Depth=3
	jmp	.LBB32_974
.LBB32_974:                             # %for.inc4358
                                        #   in Loop: Header=BB32_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB32_853
.LBB32_975:                             # %for.end4360
                                        #   in Loop: Header=BB32_835 Depth=2
	jmp	.LBB32_976
.LBB32_976:                             # %for.inc4361
                                        #   in Loop: Header=BB32_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB32_835
.LBB32_977:                             # %for.end4364
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1082
.LBB32_978:                             # %if.else4365
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB32_980:                             # %if.end4371
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB32_981:                             # %for.cond4372
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1014 Depth 3
                                        #         Child Loop BB32_1017 Depth 4
                                        #           Child Loop BB32_1019 Depth 5
                                        #         Child Loop BB32_1026 Depth 4
                                        #           Child Loop BB32_1028 Depth 5
                                        #       Child Loop BB32_1061 Depth 3
                                        #         Child Loop BB32_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB32_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB32_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB32_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB32_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB32_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB32_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB32_990:                             # %if.end4407
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_991
.LBB32_991:                             # %if.end4408
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB32_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB32_993:                             # %if.end4413
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB32_994:                             # %if.end4415
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB32_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB32_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB32_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB32_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_1008
.LBB32_999:                             # %if.else4433
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB32_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB32_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB32_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_1007
.LBB32_1003:                            # %if.else4443
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB32_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB32_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB32_1006:                            # %if.end4451
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1007
.LBB32_1007:                            # %if.end4452
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1008
.LBB32_1008:                            # %if.end4453
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1009
.LBB32_1009:                            # %if.end4454
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB32_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB32_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB32_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB32_1053
.LBB32_1013:                            # %if.then4470
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1014
.LBB32_1014:                            # %while.body4471
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_1017 Depth 4
                                        #           Child Loop BB32_1019 Depth 5
                                        #         Child Loop BB32_1026 Depth 4
                                        #           Child Loop BB32_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB32_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB32_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB32_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB32_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB32_1017:                            # %for.cond4478
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_981 Depth=2
                                        #       Parent Loop BB32_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB32_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB32_1019:                            # %for.cond4482
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_981 Depth=2
                                        #       Parent Loop BB32_1014 Depth=3
                                        #         Parent Loop BB32_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB32_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB32_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1019
.LBB32_1022:                            # %for.end4507
                                        #   in Loop: Header=BB32_1017 Depth=4
	jmp	.LBB32_1023
.LBB32_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB32_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1017
.LBB32_1024:                            # %for.end4510
                                        #   in Loop: Header=BB32_1014 Depth=3
	jmp	.LBB32_1034
.LBB32_1025:                            # %if.else4511
                                        #   in Loop: Header=BB32_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB32_1026:                            # %for.cond4512
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_981 Depth=2
                                        #       Parent Loop BB32_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB32_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB32_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB32_1028:                            # %for.cond4516
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_981 Depth=2
                                        #       Parent Loop BB32_1014 Depth=3
                                        #         Parent Loop BB32_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB32_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB32_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1028
.LBB32_1031:                            # %for.end4540
                                        #   in Loop: Header=BB32_1026 Depth=4
	jmp	.LBB32_1032
.LBB32_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB32_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1026
.LBB32_1033:                            # %for.end4543
                                        #   in Loop: Header=BB32_1014 Depth=3
	jmp	.LBB32_1034
.LBB32_1034:                            # %if.end4544
                                        #   in Loop: Header=BB32_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB32_1035:                            # %if.end4545
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB32_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB32_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB32_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB32_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB32_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB32_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB32_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB32_1014 Depth=3
	jmp	.LBB32_1014
.LBB32_1041:                            # %if.else4561
                                        #   in Loop: Header=BB32_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB32_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB32_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB32_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB32_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB32_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_1040
.LBB32_1046:                            # %if.else4575
                                        #   in Loop: Header=BB32_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB32_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB32_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB32_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB32_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB32_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_1040
.LBB32_1050:                            # %if.else4587
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB32_1052
.LBB32_1051:                            # %if.else4589
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1052
.LBB32_1052:                            # %while.end4590
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1053
.LBB32_1053:                            # %if.end4591
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB32_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB32_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB32_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB32_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB32_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB32_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB32_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1061:                            # %for.cond4615
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB32_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB32_1063:                            # %for.cond4619
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_981 Depth=2
                                        #       Parent Loop BB32_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB32_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB32_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1063
.LBB32_1066:                            # %for.end4643
                                        #   in Loop: Header=BB32_1061 Depth=3
	jmp	.LBB32_1067
.LBB32_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB32_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1061
.LBB32_1068:                            # %for.end4646
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB32_1069:                            # %if.end4647
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1070
.LBB32_1070:                            # %if.end4648
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1071
.LBB32_1071:                            # %if.end4649
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB32_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB32_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB32_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB32_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB32_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB32_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB32_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB32_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB32_1078:                            # %if.end4683
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1079
.LBB32_1079:                            # %if.end4684
                                        #   in Loop: Header=BB32_981 Depth=2
	jmp	.LBB32_1080
.LBB32_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB32_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB32_981
.LBB32_1081:                            # %for.end4687
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1082
.LBB32_1082:                            # %if.end4688
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1284
.LBB32_1083:                            # %if.else4689
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -316(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB32_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB32_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB32_1085:                            # %if.end4695
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB32_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB32_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -264(%rbp)
	je	.LBB32_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB32_1090
	jmp	.LBB32_1089
.LBB32_1089:                            # %if.then4702
                                        #   in Loop: Header=BB32_171 Depth=1
	subl	$2, %eax
	je	.LBB32_1097
	jmp	.LBB32_1098
.LBB32_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB32_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB32_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB32_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB32_1095
.LBB32_1094:                            # %if.then4716
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_1096
.LBB32_1095:                            # %if.else4717
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_1096:                            # %if.end4718
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1099
.LBB32_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_1099
.LBB32_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1101
.LBB32_1100:                            # %if.else4722
                                        #   in Loop: Header=BB32_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB32_1101:                            # %if.end4724
                                        #   in Loop: Header=BB32_171 Depth=1
	vmovsd	.LCPI32_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI32_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB32_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB32_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB32_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB32_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_1110
.LBB32_1106:                            # %if.else4743
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB32_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB32_1109
.LBB32_1108:                            # %if.else4748
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_1109:                            # %if.end4750
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1110
.LBB32_1110:                            # %if.end4751
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1112
.LBB32_1111:                            # %if.else4752
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_1112:                            # %if.end4754
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -20(%rbp)
.LBB32_1113:                            # %for.cond4755
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB32_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB32_1115:                            # %for.cond4759
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB32_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB32_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1115
.LBB32_1118:                            # %for.end4785
                                        #   in Loop: Header=BB32_1113 Depth=2
	jmp	.LBB32_1119
.LBB32_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB32_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1113
.LBB32_1120:                            # %for.end4788
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB32_1122
.LBB32_1121:                            # %if.else4789
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB32_1122:                            # %if.end4792
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1123
.LBB32_1123:                            # %if.end4793
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB32_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB32_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -20(%rbp)
.LBB32_1127:                            # %for.cond4806
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1129 Depth 3
                                        #         Child Loop BB32_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB32_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB32_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB32_1129:                            # %for.cond4810
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB32_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB32_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB32_1131:                            # %for.cond4814
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1127 Depth=2
                                        #       Parent Loop BB32_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB32_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB32_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB32_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB32_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB32_1134:                            # %if.end4826
                                        #   in Loop: Header=BB32_1131 Depth=4
	jmp	.LBB32_1135
.LBB32_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB32_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_1131
.LBB32_1136:                            # %for.end4829
                                        #   in Loop: Header=BB32_1129 Depth=3
	jmp	.LBB32_1137
.LBB32_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB32_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1129
.LBB32_1138:                            # %for.end4832
                                        #   in Loop: Header=BB32_1127 Depth=2
	jmp	.LBB32_1139
.LBB32_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB32_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1127
.LBB32_1140:                            # %for.end4835
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -24(%rbp)
.LBB32_1141:                            # %for.cond4840
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB32_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1143:                            # %for.cond4844
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB32_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB32_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1143
.LBB32_1146:                            # %for.end4877
                                        #   in Loop: Header=BB32_1141 Depth=2
	jmp	.LBB32_1147
.LBB32_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB32_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1141
.LBB32_1148:                            # %for.end4880
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1149
.LBB32_1149:                            # %if.end4881
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB32_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB32_1151:                            # %if.end4889
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -24(%rbp)
.LBB32_1152:                            # %for.cond4890
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB32_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1154:                            # %for.cond4894
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB32_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB32_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1154
.LBB32_1157:                            # %for.end4913
                                        #   in Loop: Header=BB32_1152 Depth=2
	jmp	.LBB32_1158
.LBB32_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB32_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1152
.LBB32_1159:                            # %for.end4916
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -20(%rbp)
.LBB32_1160:                            # %for.cond4917
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB32_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB32_1162:                            # %for.cond4921
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB32_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB32_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1162
.LBB32_1165:                            # %for.end4947
                                        #   in Loop: Header=BB32_1160 Depth=2
	jmp	.LBB32_1166
.LBB32_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB32_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1160
.LBB32_1167:                            # %for.end4950
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB32_1169
.LBB32_1168:                            # %if.else4952
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB32_1169:                            # %if.end4954
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1170
.LBB32_1170:                            # %if.end4955
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB32_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB32_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -20(%rbp)
.LBB32_1174:                            # %for.cond4968
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1176 Depth 3
                                        #         Child Loop BB32_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB32_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB32_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB32_1176:                            # %for.cond4972
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB32_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB32_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB32_1178:                            # %for.cond4976
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1174 Depth=2
                                        #       Parent Loop BB32_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB32_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB32_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB32_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB32_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB32_1181:                            # %if.end4988
                                        #   in Loop: Header=BB32_1178 Depth=4
	jmp	.LBB32_1182
.LBB32_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB32_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_1178
.LBB32_1183:                            # %for.end4991
                                        #   in Loop: Header=BB32_1176 Depth=3
	jmp	.LBB32_1184
.LBB32_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB32_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1176
.LBB32_1185:                            # %for.end4994
                                        #   in Loop: Header=BB32_1174 Depth=2
	jmp	.LBB32_1186
.LBB32_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB32_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1174
.LBB32_1187:                            # %for.end4997
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
.LBB32_1188:                            # %if.end5002
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB32_1189:                            # %for.cond5004
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB32_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB32_1191:                            # %for.cond5008
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB32_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB32_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1191
.LBB32_1194:                            # %for.end5034
                                        #   in Loop: Header=BB32_1189 Depth=2
	jmp	.LBB32_1195
.LBB32_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB32_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1189
.LBB32_1196:                            # %for.end5037
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB32_1198
.LBB32_1197:                            # %if.else5039
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB32_1198:                            # %if.end5043
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1199
.LBB32_1199:                            # %if.end5044
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB32_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB32_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -20(%rbp)
.LBB32_1202:                            # %for.cond5053
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB32_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB32_1204:                            # %for.cond5057
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB32_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB32_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1204
.LBB32_1207:                            # %for.end5084
                                        #   in Loop: Header=BB32_1202 Depth=2
	jmp	.LBB32_1208
.LBB32_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB32_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1202
.LBB32_1209:                            # %for.end5087
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -24(%rbp)
.LBB32_1211:                            # %for.cond5091
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB32_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1213:                            # %for.cond5095
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB32_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -228(%rbp)
	movl	-228(%rbp), %eax
	subl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -252(%rbp)
	movl	-216(%rbp), %eax
	subl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB32_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1213
.LBB32_1216:                            # %for.end5194
                                        #   in Loop: Header=BB32_1211 Depth=2
	jmp	.LBB32_1217
.LBB32_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB32_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1211
.LBB32_1218:                            # %for.end5197
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1219
.LBB32_1219:                            # %if.end5198
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -24(%rbp)
.LBB32_1221:                            # %for.cond5204
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB32_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1223:                            # %for.cond5208
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB32_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB32_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1223
.LBB32_1226:                            # %for.end5232
                                        #   in Loop: Header=BB32_1221 Depth=2
	jmp	.LBB32_1227
.LBB32_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB32_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1221
.LBB32_1228:                            # %for.end5235
                                        #   in Loop: Header=BB32_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB32_1229:                            # %for.cond5237
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB32_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1231:                            # %for.cond5241
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB32_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB32_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1231
.LBB32_1234:                            # %for.end5265
                                        #   in Loop: Header=BB32_1229 Depth=2
	jmp	.LBB32_1235
.LBB32_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB32_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1229
.LBB32_1236:                            # %for.end5268
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB32_1237:                            # %for.cond5270
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB32_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1239:                            # %for.cond5274
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB32_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB32_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1239
.LBB32_1242:                            # %for.end5289
                                        #   in Loop: Header=BB32_1237 Depth=2
	jmp	.LBB32_1243
.LBB32_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB32_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1237
.LBB32_1244:                            # %for.end5292
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB32_1245:                            # %for.cond5296
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB32_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB32_1247:                            # %for.cond5300
                                        #   Parent Loop BB32_171 Depth=1
                                        #     Parent Loop BB32_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -252(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-252(%rbp), %ecx
	movl	%ecx, -216(%rbp)
	movl	-252(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movl	-184(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -228(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-184(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB32_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_1251
.LBB32_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB32_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB32_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB32_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB32_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB32_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB32_1257
.LBB32_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	movl	-184(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_1256
.LBB32_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB32_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB32_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB32_1247 Depth=3
.LBB32_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB32_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB32_1260
.LBB32_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB32_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB32_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB32_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB32_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB32_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_1266
.LBB32_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_1265
.LBB32_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB32_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB32_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB32_1247 Depth=3
.LBB32_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-228(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB32_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB32_1269
.LBB32_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB32_1247 Depth=3
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB32_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB32_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB32_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB32_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB32_1275
.LBB32_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB32_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_1274
.LBB32_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB32_1247 Depth=3
	movl	-228(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB32_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB32_1247 Depth=3
.LBB32_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB32_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB32_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1247
.LBB32_1277:                            # %for.end5546
                                        #   in Loop: Header=BB32_1245 Depth=2
	jmp	.LBB32_1278
.LBB32_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB32_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1245
.LBB32_1279:                            # %for.end5549
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1280
.LBB32_1280:                            # %if.end5550
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1282
.LBB32_1281:                            # %if.else5551
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB32_1282:                            # %if.end5554
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1283
.LBB32_1283:                            # %if.end5555
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1284
.LBB32_1284:                            # %if.end5556
                                        #   in Loop: Header=BB32_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB32_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB32_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB32_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB32_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB32_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB32_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB32_1289:                            # %if.end5574
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_1290
.LBB32_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
	jmp	.LBB32_171
.LBB32_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB32_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB32_1295
.LBB32_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB32_1299
.LBB32_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB32_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB32_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB32_1298:                            # %if.end5597
	jmp	.LBB32_1299
.LBB32_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB32_1395
.LBB32_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB32_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB32_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB32_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB32_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB32_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB32_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB32_1308:                            # %for.cond5623
                                        #   Parent Loop BB32_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB32_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB32_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_1308
.LBB32_1311:                            # %for.end5639
                                        #   in Loop: Header=BB32_1306 Depth=1
	jmp	.LBB32_1312
.LBB32_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB32_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1306
.LBB32_1313:                            # %for.end5642
	jmp	.LBB32_1370
.LBB32_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB32_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB32_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB32_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB32_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB32_1318:                            # %for.cond5651
                                        #   Parent Loop BB32_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB32_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB32_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB32_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_1318
.LBB32_1321:                            # %for.end5680
                                        #   in Loop: Header=BB32_1316 Depth=1
	jmp	.LBB32_1322
.LBB32_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB32_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1316
.LBB32_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB32_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB32_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB32_1326:                            # %for.cond5688
                                        #   Parent Loop BB32_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB32_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB32_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1326
.LBB32_1329:                            # %for.end5707
                                        #   in Loop: Header=BB32_1324 Depth=1
	jmp	.LBB32_1330
.LBB32_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB32_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1324
.LBB32_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB32_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB32_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB32_1335:                            # %for.cond5718
                                        #   Parent Loop BB32_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB32_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB32_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1335
.LBB32_1338:                            # %for.end5752
                                        #   in Loop: Header=BB32_1333 Depth=1
	jmp	.LBB32_1339
.LBB32_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB32_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1333
.LBB32_1340:                            # %for.end5755
	jmp	.LBB32_1341
.LBB32_1341:                            # %if.end5756
	jmp	.LBB32_1342
.LBB32_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB32_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB32_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB32_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB32_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB32_1347:                            # %for.cond5772
                                        #   Parent Loop BB32_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB32_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB32_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_1347
.LBB32_1350:                            # %for.end5788
                                        #   in Loop: Header=BB32_1345 Depth=1
	jmp	.LBB32_1351
.LBB32_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB32_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1345
.LBB32_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB32_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB32_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB32_1356
# %bb.1355:                             # %if.then5800
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB32_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB32_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB32_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB32_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB32_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB32_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB32_1362:                            # %for.cond5816
                                        #   Parent Loop BB32_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB32_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB32_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB32_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_1362
.LBB32_1365:                            # %for.end5842
                                        #   in Loop: Header=BB32_1360 Depth=1
	jmp	.LBB32_1366
.LBB32_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB32_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_1360
.LBB32_1367:                            # %for.end5845
	jmp	.LBB32_1368
.LBB32_1368:                            # %if.end5846
	jmp	.LBB32_1369
.LBB32_1369:                            # %if.end5847
	jmp	.LBB32_1370
.LBB32_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB32_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB32_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB32_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB32_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB32_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -284(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB32_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB32_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB32_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB32_1382
.LBB32_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB32_1382
# %bb.1381:                             # %if.then5884
	leaq	-284(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB32_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB32_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB32_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB32_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB32_1392
.LBB32_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB32_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB32_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB32_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB32_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB32_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB32_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB32_1394:                            # %if.end5973
	jmp	.LBB32_1395
.LBB32_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB32_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB32_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB32_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB32_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB32_1401
.LBB32_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB32_1402
.LBB32_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB32_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB32_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB32_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB32_1406
.LBB32_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB32_1406:                            # %if.end6019
	jmp	.LBB32_1407
.LBB32_1407:                            # %if.end6020
	jmp	.LBB32_1408
.LBB32_1408:                            # %if.end6021
	jmp	.LBB32_1409
.LBB32_1409:                            # %if.end6022
	jmp	.LBB32_1410
.LBB32_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB32_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB32_1413
.LBB32_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB32_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB32_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB32_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB32_1420
	jmp	.LBB32_1428
.LBB32_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB32_1428
	jmp	.LBB32_1420
.LBB32_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB32_1420
	jmp	.LBB32_1428
.LBB32_1420:                            # %land.lhs.true6050
	movq	-448(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB32_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB32_1425
	jmp	.LBB32_1428
.LBB32_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_1424
# %bb.1423:                             # %cond.true6058
	movq	-448(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB32_1428
	jmp	.LBB32_1425
.LBB32_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB32_1425
	jmp	.LBB32_1428
.LBB32_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-288(%rbp), %eax
	je	.LBB32_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB32_1427:                            # %if.end6068
	jmp	.LBB32_1428
.LBB32_1428:                            # %if.end6069
	jmp	.LBB32_1429
.LBB32_1429:                            # %if.end6070
	jmp	.LBB32_1430
.LBB32_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB32_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB32_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB32_1452
.LBB32_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB32_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB32_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB32_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB32_1437:                            # %lor.end6142
.LBB32_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB32_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB32_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB32_1441:                            # %lor.end6166
.LBB32_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB32_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB32_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB32_1445:                            # %lor.end6191
.LBB32_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB32_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB32_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB32_1449:                            # %lor.end6216
.LBB32_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB32_1451:                            # %if.end6232
	jmp	.LBB32_1452
.LBB32_1452:                            # %if.end6233
	jmp	.LBB32_1464
.LBB32_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB32_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB32_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB32_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB32_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB32_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB32_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB32_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB32_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB32_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB32_1463:                            # %if.end6319
	jmp	.LBB32_1464
.LBB32_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB32_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB32_1466:                            # %if.end6327
	cmpl	$1049517294, -412(%rbp) # imm = 0x3E8E5CEE
	jne	.LBB32_1468
.LBB32_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_1467
.Lfunc_end32:
	.size	encode_one_macroblock.3, .Lfunc_end32-encode_one_macroblock.3
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.4 # -- Begin function RDCost_for_4x4IntraBlocks.4
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.4,@function
RDCost_for_4x4IntraBlocks.4:            # @RDCost_for_4x4IntraBlocks.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$539505592, -72(%rbp)   # imm = 0x202833B8
	movq	%rdi, -120(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	-52(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-68(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB33_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB33_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB33_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB33_4:                               # %for.cond15
                                        #   Parent Loop BB33_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB33_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-76(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-144(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB33_4 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_4
.LBB33_7:                               # %for.end
                                        #   in Loop: Header=BB33_2 Depth=1
	jmp	.LBB33_8
.LBB33_8:                               # %for.inc33
                                        #   in Loop: Header=BB33_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_2
.LBB33_9:                               # %for.end35
	jmp	.LBB33_10
.LBB33_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB33_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_16
.LBB33_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB33_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB33_15
.LBB33_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB33_15:                              # %cond.end
.LBB33_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB33_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB33_18:                              # %if.end50
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB33_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB33_21
.LBB33_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB33_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB33_23
# %bb.22:                               # %if.then66
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_24
.LBB33_23:                              # %if.else69
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB33_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -152(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB33_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -88(%rbp)
	jmp	.LBB33_27
.LBB33_26:                              # %if.else81
	vmovsd	-152(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -88(%rbp)
.LBB33_27:                              # %return
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$539505592, -72(%rbp)   # imm = 0x202833B8
	jne	.LBB33_29
.LBB33_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB33_28
.Lfunc_end33:
	.size	RDCost_for_4x4IntraBlocks.4, .Lfunc_end33-RDCost_for_4x4IntraBlocks.4
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.5             # -- Begin function I16Offset.5
	.p2align	4, 0x90
	.type	I16Offset.5,@function
I16Offset.5:                            # @I16Offset.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1429104877, -20(%rbp)  # imm = 0x552E68ED
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$1429104877, -20(%rbp)  # imm = 0x552E68ED
	jne	.LBB34_2
.LBB34_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_1
.Lfunc_end34:
	.size	I16Offset.5, .Lfunc_end34-I16Offset.5
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.6 # -- Begin function SetModesAndRefframeForBlocks.6
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.6,@function
SetModesAndRefframeForBlocks.6:         # @SetModesAndRefframeForBlocks.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$82713678, -40(%rbp)    # imm = 0x4EE1C4E
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB35_4
.LBB35_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB35_4
.LBB35_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB35_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB35_7
.LBB35_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB35_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB35_42
# %bb.8:                                # %if.end
	movq	.LJTI35_0(,%rax,8), %rax
	jmpq	*%rax
.LBB35_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB35_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB35_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB35_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB35_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB35_14
.LBB35_13:                              # %cond.false26
                                        #   in Loop: Header=BB35_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_14
.LBB35_14:                              # %cond.end27
                                        #   in Loop: Header=BB35_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB35_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_10
.LBB35_16:                              # %for.end
	jmp	.LBB35_43
.LBB35_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB35_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB35_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB35_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_18
.LBB35_21:                              # %for.end49
	jmp	.LBB35_43
.LBB35_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB35_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB35_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB35_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_23
.LBB35_26:                              # %for.end71
	jmp	.LBB35_43
.LBB35_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB35_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB35_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB35_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_28
.LBB35_31:                              # %for.end85
	jmp	.LBB35_43
.LBB35_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB35_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB35_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_33
.LBB35_36:                              # %for.end99
	jmp	.LBB35_43
.LBB35_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB35_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB35_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB35_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_38
.LBB35_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB35_43
.LBB35_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB35_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB35_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB35_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB35_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB35_70
.LBB35_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB35_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB35_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB35_49 Depth=1
	movl	$0, -4(%rbp)
.LBB35_51:                              # %for.cond131
                                        #   Parent Loop BB35_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB35_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB35_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB35_55
.LBB35_54:                              # %if.else174
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB35_55:                              # %if.end195
                                        #   in Loop: Header=BB35_51 Depth=2
	jmp	.LBB35_56
.LBB35_56:                              # %for.inc196
                                        #   in Loop: Header=BB35_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_51
.LBB35_57:                              # %for.end198
                                        #   in Loop: Header=BB35_49 Depth=1
	jmp	.LBB35_58
.LBB35_58:                              # %for.inc199
                                        #   in Loop: Header=BB35_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_49
.LBB35_59:                              # %for.end201
	jmp	.LBB35_69
.LBB35_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB35_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB35_61 Depth=1
	movl	$0, -4(%rbp)
.LBB35_63:                              # %for.cond207
                                        #   Parent Loop BB35_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB35_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB35_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_63
.LBB35_66:                              # %for.end227
                                        #   in Loop: Header=BB35_61 Depth=1
	jmp	.LBB35_67
.LBB35_67:                              # %for.inc228
                                        #   in Loop: Header=BB35_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_61
.LBB35_68:                              # %for.end230
	jmp	.LBB35_69
.LBB35_69:                              # %if.end231
	jmp	.LBB35_127
.LBB35_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB35_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB35_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB35_72 Depth=1
	movl	$0, -4(%rbp)
.LBB35_74:                              # %for.cond239
                                        #   Parent Loop BB35_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB35_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB35_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB35_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB35_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB35_105
.LBB35_78:                              # %if.else298
                                        #   in Loop: Header=BB35_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB35_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB35_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB35_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB35_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB35_90
.LBB35_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB35_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB35_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB35_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB35_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB35_90
.LBB35_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB35_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB35_90
.LBB35_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB35_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB35_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB35_90
.LBB35_89:                              # %if.then356
                                        #   in Loop: Header=BB35_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB35_104
.LBB35_90:                              # %if.else377
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB35_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB35_96
.LBB35_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB35_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB35_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB35_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB35_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB35_96
.LBB35_95:                              # %cond.true404
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB35_97
.LBB35_96:                              # %cond.false410
                                        #   in Loop: Header=BB35_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_97
.LBB35_97:                              # %cond.end411
                                        #   in Loop: Header=BB35_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB35_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB35_102
.LBB35_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB35_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB35_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB35_102
.LBB35_101:                             # %cond.true448
                                        #   in Loop: Header=BB35_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB35_103
.LBB35_102:                             # %cond.false454
                                        #   in Loop: Header=BB35_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_103
.LBB35_103:                             # %cond.end455
                                        #   in Loop: Header=BB35_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB35_104:                             # %if.end468
                                        #   in Loop: Header=BB35_74 Depth=2
	jmp	.LBB35_105
.LBB35_105:                             # %if.end469
                                        #   in Loop: Header=BB35_74 Depth=2
	jmp	.LBB35_106
.LBB35_106:                             # %for.inc470
                                        #   in Loop: Header=BB35_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_74
.LBB35_107:                             # %for.end472
                                        #   in Loop: Header=BB35_72 Depth=1
	jmp	.LBB35_108
.LBB35_108:                             # %for.inc473
                                        #   in Loop: Header=BB35_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_72
.LBB35_109:                             # %for.end475
	jmp	.LBB35_126
.LBB35_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB35_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB35_111 Depth=1
	movl	$0, -4(%rbp)
.LBB35_113:                             # %for.cond481
                                        #   Parent Loop BB35_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB35_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB35_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB35_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB35_120
.LBB35_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB35_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB35_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB35_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB35_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB35_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB35_120
.LBB35_119:                             # %cond.true519
                                        #   in Loop: Header=BB35_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB35_121
.LBB35_120:                             # %cond.false525
                                        #   in Loop: Header=BB35_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_121
.LBB35_121:                             # %cond.end526
                                        #   in Loop: Header=BB35_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB35_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_113
.LBB35_123:                             # %for.end541
                                        #   in Loop: Header=BB35_111 Depth=1
	jmp	.LBB35_124
.LBB35_124:                             # %for.inc542
                                        #   in Loop: Header=BB35_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_111
.LBB35_125:                             # %for.end544
	jmp	.LBB35_126
.LBB35_126:                             # %if.end545
	jmp	.LBB35_127
.LBB35_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB35_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB35_128 Depth=1
	movl	$0, -4(%rbp)
.LBB35_130:                             # %for.cond551
                                        #   Parent Loop BB35_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB35_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB35_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB35_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB35_134
.LBB35_133:                             # %cond.false584
                                        #   in Loop: Header=BB35_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB35_134
.LBB35_134:                             # %cond.end585
                                        #   in Loop: Header=BB35_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB35_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_130
.LBB35_136:                             # %for.end598
                                        #   in Loop: Header=BB35_128 Depth=1
	jmp	.LBB35_137
.LBB35_137:                             # %for.inc599
                                        #   in Loop: Header=BB35_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_128
.LBB35_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB35_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB35_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB35_140 Depth=1
	movl	$0, -4(%rbp)
.LBB35_142:                             # %for.cond608
                                        #   Parent Loop BB35_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB35_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB35_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB35_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB35_146
.LBB35_145:                             # %cond.false642
                                        #   in Loop: Header=BB35_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB35_146
.LBB35_146:                             # %cond.end643
                                        #   in Loop: Header=BB35_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB35_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_142
.LBB35_148:                             # %for.end657
                                        #   in Loop: Header=BB35_140 Depth=1
	jmp	.LBB35_149
.LBB35_149:                             # %for.inc658
                                        #   in Loop: Header=BB35_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_140
.LBB35_150:                             # %for.end660
	jmp	.LBB35_151
.LBB35_151:                             # %if.end661
	cmpl	$82713678, -40(%rbp)    # imm = 0x4EE1C4E
	jne	.LBB35_153
.LBB35_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_152
.Lfunc_end35:
	.size	SetModesAndRefframeForBlocks.6, .Lfunc_end35-SetModesAndRefframeForBlocks.6
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI35_0:
	.quad	.LBB35_9
	.quad	.LBB35_17
	.quad	.LBB35_17
	.quad	.LBB35_17
	.quad	.LBB35_42
	.quad	.LBB35_42
	.quad	.LBB35_42
	.quad	.LBB35_42
	.quad	.LBB35_22
	.quad	.LBB35_27
	.quad	.LBB35_32
	.quad	.LBB35_42
	.quad	.LBB35_42
	.quad	.LBB35_37
                                        # -- End function
	.text
	.globl	SetMotionVectorsMB.7    # -- Begin function SetMotionVectorsMB.7
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.7,@function
SetMotionVectorsMB.7:                   # @SetMotionVectorsMB.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1626618743, -72(%rbp)  # imm = 0x60F43B77
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_3:                               # %for.cond3
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB36_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB36_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB36_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB36_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB36_10
.LBB36_9:                               # %cond.false
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB36_10:                              # %cond.end
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB36_11:                              # %if.end
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB36_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB36_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB36_15
.LBB36_14:                              # %if.else
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB36_15:                              # %if.end89
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_29
.LBB36_16:                              # %if.else90
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB36_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB36_28
.LBB36_18:                              # %if.else122
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB36_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB36_27
.LBB36_20:                              # %if.else174
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB36_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB36_26
.LBB36_22:                              # %if.else226
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB36_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB36_25
.LBB36_24:                              # %if.else298
                                        #   in Loop: Header=BB36_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB36_25:                              # %if.end299
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_26
.LBB36_26:                              # %if.end300
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_27
.LBB36_27:                              # %if.end301
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_28
.LBB36_28:                              # %if.end302
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_29
.LBB36_29:                              # %if.end303
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_30
.LBB36_30:                              # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_3
.LBB36_31:                              # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_32
.LBB36_32:                              # %for.inc304
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_1
.LBB36_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB36_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_37 Depth 2
                                        #       Child Loop BB36_39 Depth 3
                                        #         Child Loop BB36_41 Depth 4
                                        #           Child Loop BB36_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB36_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB36_35 Depth=1
	movl	$0, -8(%rbp)
.LBB36_37:                              # %for.cond313
                                        #   Parent Loop BB36_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_39 Depth 3
                                        #         Child Loop BB36_41 Depth 4
                                        #           Child Loop BB36_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB36_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB36_37 Depth=2
	movl	$0, -20(%rbp)
.LBB36_39:                              # %for.cond317
                                        #   Parent Loop BB36_35 Depth=1
                                        #     Parent Loop BB36_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_41 Depth 4
                                        #           Child Loop BB36_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB36_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB36_39 Depth=3
	movl	$0, -24(%rbp)
.LBB36_41:                              # %for.cond321
                                        #   Parent Loop BB36_35 Depth=1
                                        #     Parent Loop BB36_37 Depth=2
                                        #       Parent Loop BB36_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB36_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB36_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB36_41 Depth=4
	movl	$0, -28(%rbp)
.LBB36_43:                              # %for.cond325
                                        #   Parent Loop BB36_35 Depth=1
                                        #     Parent Loop BB36_37 Depth=2
                                        #       Parent Loop BB36_39 Depth=3
                                        #         Parent Loop BB36_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB36_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB36_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB36_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_43
.LBB36_46:                              # %for.end423
                                        #   in Loop: Header=BB36_41 Depth=4
	jmp	.LBB36_47
.LBB36_47:                              # %for.inc424
                                        #   in Loop: Header=BB36_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_41
.LBB36_48:                              # %for.end426
                                        #   in Loop: Header=BB36_39 Depth=3
	jmp	.LBB36_49
.LBB36_49:                              # %for.inc427
                                        #   in Loop: Header=BB36_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_39
.LBB36_50:                              # %for.end429
                                        #   in Loop: Header=BB36_37 Depth=2
	jmp	.LBB36_51
.LBB36_51:                              # %for.inc430
                                        #   in Loop: Header=BB36_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_37
.LBB36_52:                              # %for.end432
                                        #   in Loop: Header=BB36_35 Depth=1
	jmp	.LBB36_53
.LBB36_53:                              # %for.inc433
                                        #   in Loop: Header=BB36_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_35
.LBB36_54:                              # %for.end435
	jmp	.LBB36_55
.LBB36_55:                              # %if.end436
	cmpl	$1626618743, -72(%rbp)  # imm = 0x60F43B77
	jne	.LBB36_57
.LBB36_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_56
.Lfunc_end36:
	.size	SetMotionVectorsMB.7, .Lfunc_end36-SetMotionVectorsMB.7
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.8       # -- Begin function StoreMVBlock8x8.8
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.8,@function
StoreMVBlock8x8.8:                      # @StoreMVBlock8x8.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$740493898, -68(%rbp)   # imm = 0x2C230A4A
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB37_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB37_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB37_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_5:                               # %for.cond7
                                        #   Parent Loop BB37_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB37_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB37_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_5
.LBB37_8:                               # %for.end
                                        #   in Loop: Header=BB37_3 Depth=1
	jmp	.LBB37_9
.LBB37_9:                               # %for.inc76
                                        #   in Loop: Header=BB37_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_3
.LBB37_10:                              # %for.end78
	jmp	.LBB37_11
.LBB37_11:                              # %if.end
	jmp	.LBB37_46
.LBB37_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB37_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB37_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_16:                              # %for.cond84
                                        #   Parent Loop BB37_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB37_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB37_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_16
.LBB37_19:                              # %for.end161
                                        #   in Loop: Header=BB37_14 Depth=1
	jmp	.LBB37_20
.LBB37_20:                              # %for.inc162
                                        #   in Loop: Header=BB37_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_14
.LBB37_21:                              # %for.end164
	jmp	.LBB37_45
.LBB37_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB37_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB37_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_26:                              # %for.cond171
                                        #   Parent Loop BB37_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB37_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB37_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_26
.LBB37_29:                              # %for.end248
                                        #   in Loop: Header=BB37_24 Depth=1
	jmp	.LBB37_30
.LBB37_30:                              # %for.inc249
                                        #   in Loop: Header=BB37_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_24
.LBB37_31:                              # %for.end251
	jmp	.LBB37_44
.LBB37_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB37_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_36:                              # %for.cond258
                                        #   Parent Loop BB37_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB37_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_36
.LBB37_39:                              # %for.end407
                                        #   in Loop: Header=BB37_34 Depth=1
	jmp	.LBB37_40
.LBB37_40:                              # %for.inc408
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_34
.LBB37_41:                              # %for.end410
	jmp	.LBB37_43
.LBB37_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB37_43:                              # %if.end412
	jmp	.LBB37_44
.LBB37_44:                              # %if.end413
	jmp	.LBB37_45
.LBB37_45:                              # %if.end414
	jmp	.LBB37_46
.LBB37_46:                              # %if.end415
	cmpl	$740493898, -68(%rbp)   # imm = 0x2C230A4A
	jne	.LBB37_48
.LBB37_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_47
.Lfunc_end37:
	.size	StoreMVBlock8x8.8, .Lfunc_end37-StoreMVBlock8x8.8
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.9 # -- Begin function set_stored_macroblock_parameters.9
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.9,@function
set_stored_macroblock_parameters.9:     # @set_stored_macroblock_parameters.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1114234237, -52(%rbp)  # imm = 0x4269DD7D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB38_4
.LBB38_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB38_4
.LBB38_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB38_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB38_5 Depth=1
	movl	$0, -4(%rbp)
.LBB38_7:                               # %for.cond9
                                        #   Parent Loop BB38_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB38_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB38_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_10:                              # %if.end
                                        #   in Loop: Header=BB38_7 Depth=2
	jmp	.LBB38_11
.LBB38_11:                              # %for.inc
                                        #   in Loop: Header=BB38_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_7
.LBB38_12:                              # %for.end
                                        #   in Loop: Header=BB38_5 Depth=1
	jmp	.LBB38_13
.LBB38_13:                              # %for.inc33
                                        #   in Loop: Header=BB38_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_5
.LBB38_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB38_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB38_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB38_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB38_16 Depth=1
	movl	$0, -4(%rbp)
.LBB38_18:                              # %for.cond43
                                        #   Parent Loop BB38_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB38_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB38_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB38_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_21:                              # %if.end92
                                        #   in Loop: Header=BB38_18 Depth=2
	jmp	.LBB38_22
.LBB38_22:                              # %for.inc93
                                        #   in Loop: Header=BB38_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_18
.LBB38_23:                              # %for.end95
                                        #   in Loop: Header=BB38_16 Depth=1
	jmp	.LBB38_24
.LBB38_24:                              # %for.inc96
                                        #   in Loop: Header=BB38_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_16
.LBB38_25:                              # %for.end98
	jmp	.LBB38_26
.LBB38_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB38_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_30 Depth 2
                                        #       Child Loop BB38_32 Depth 3
                                        #         Child Loop BB38_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB38_28 Depth=1
	movl	$0, -8(%rbp)
.LBB38_30:                              # %for.cond118
                                        #   Parent Loop BB38_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_32 Depth 3
                                        #         Child Loop BB38_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB38_30 Depth=2
	movl	$0, -12(%rbp)
.LBB38_32:                              # %for.cond122
                                        #   Parent Loop BB38_28 Depth=1
                                        #     Parent Loop BB38_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB38_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB38_32 Depth=3
	movl	$0, -28(%rbp)
.LBB38_34:                              # %for.cond126
                                        #   Parent Loop BB38_28 Depth=1
                                        #     Parent Loop BB38_30 Depth=2
                                        #       Parent Loop BB38_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB38_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB38_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB38_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_34
.LBB38_37:                              # %for.end150
                                        #   in Loop: Header=BB38_32 Depth=3
	jmp	.LBB38_38
.LBB38_38:                              # %for.inc151
                                        #   in Loop: Header=BB38_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_32
.LBB38_39:                              # %for.end153
                                        #   in Loop: Header=BB38_30 Depth=2
	jmp	.LBB38_40
.LBB38_40:                              # %for.inc154
                                        #   in Loop: Header=BB38_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_30
.LBB38_41:                              # %for.end156
                                        #   in Loop: Header=BB38_28 Depth=1
	jmp	.LBB38_42
.LBB38_42:                              # %for.inc157
                                        #   in Loop: Header=BB38_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_28
.LBB38_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB38_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_46 Depth 2
                                        #       Child Loop BB38_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB38_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB38_44 Depth=1
	movl	$0, -12(%rbp)
.LBB38_46:                              # %for.cond164
                                        #   Parent Loop BB38_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB38_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB38_46 Depth=2
	movl	$0, -28(%rbp)
.LBB38_48:                              # %for.cond168
                                        #   Parent Loop BB38_44 Depth=1
                                        #     Parent Loop BB38_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB38_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB38_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB38_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_48
.LBB38_51:                              # %for.end188
                                        #   in Loop: Header=BB38_46 Depth=2
	jmp	.LBB38_52
.LBB38_52:                              # %for.inc189
                                        #   in Loop: Header=BB38_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_46
.LBB38_53:                              # %for.end191
                                        #   in Loop: Header=BB38_44 Depth=1
	jmp	.LBB38_54
.LBB38_54:                              # %for.inc192
                                        #   in Loop: Header=BB38_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_44
.LBB38_55:                              # %for.end194
	jmp	.LBB38_56
.LBB38_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB38_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB38_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB38_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB38_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB38_60:                              # %if.end225
                                        #   in Loop: Header=BB38_57 Depth=1
	jmp	.LBB38_61
.LBB38_61:                              # %for.inc226
                                        #   in Loop: Header=BB38_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_57
.LBB38_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB38_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB38_65
.LBB38_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB38_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB38_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB38_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB38_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB38_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB38_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB38_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB38_74
.LBB38_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB38_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB38_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB38_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB38_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB38_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB38_78 Depth=1
	movl	$0, -4(%rbp)
.LBB38_80:                              # %for.cond276
                                        #   Parent Loop BB38_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB38_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_88
.LBB38_85:                              # %if.then299
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB38_87:                              # %if.end345
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_101
.LBB38_88:                              # %if.else346
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB38_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB38_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB38_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB38_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB38_94
.LBB38_93:                              # %cond.false368
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB38_94:                              # %cond.end369
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB38_96:                              # %if.end458
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_100
.LBB38_97:                              # %if.else459
                                        #   in Loop: Header=BB38_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB38_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB38_99:                              # %if.end578
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_100
.LBB38_100:                             # %if.end579
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_101
.LBB38_101:                             # %if.end580
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB38_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_108
.LBB38_105:                             # %if.then602
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB38_107:                             # %if.end654
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_108
.LBB38_108:                             # %if.end655
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_109
.LBB38_109:                             # %for.inc656
                                        #   in Loop: Header=BB38_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_80
.LBB38_110:                             # %for.end658
                                        #   in Loop: Header=BB38_78 Depth=1
	jmp	.LBB38_111
.LBB38_111:                             # %for.inc659
                                        #   in Loop: Header=BB38_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_78
.LBB38_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB38_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB38_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB38_114 Depth=1
	movl	$0, -4(%rbp)
.LBB38_116:                             # %for.cond668
                                        #   Parent Loop BB38_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB38_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB38_124
.LBB38_121:                             # %if.then693
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB38_123:                             # %if.end745
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_137
.LBB38_124:                             # %if.else746
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB38_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB38_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB38_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB38_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB38_130
.LBB38_129:                             # %cond.false770
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB38_130:                             # %cond.end772
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB38_132:                             # %if.end862
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_136
.LBB38_133:                             # %if.else863
                                        #   in Loop: Header=BB38_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB38_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB38_135:                             # %if.end983
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_136
.LBB38_136:                             # %if.end984
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_137
.LBB38_137:                             # %if.end985
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_138
.LBB38_138:                             # %for.inc986
                                        #   in Loop: Header=BB38_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_116
.LBB38_139:                             # %for.end988
                                        #   in Loop: Header=BB38_114 Depth=1
	jmp	.LBB38_140
.LBB38_140:                             # %for.inc989
                                        #   in Loop: Header=BB38_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_114
.LBB38_141:                             # %for.end991
	jmp	.LBB38_142
.LBB38_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB38_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB38_144 Depth=1
	movl	$0, -8(%rbp)
.LBB38_146:                             # %for.cond1002
                                        #   Parent Loop BB38_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB38_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB38_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_146
.LBB38_149:                             # %for.end1030
                                        #   in Loop: Header=BB38_144 Depth=1
	jmp	.LBB38_150
.LBB38_150:                             # %for.inc1031
                                        #   in Loop: Header=BB38_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_144
.LBB38_151:                             # %for.end1033
	jmp	.LBB38_175
.LBB38_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB38_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB38_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB38_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB38_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB38_157:                             # %for.cond1049
                                        #   Parent Loop BB38_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB38_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB38_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_157
.LBB38_160:                             # %for.end1065
                                        #   in Loop: Header=BB38_155 Depth=1
	jmp	.LBB38_161
.LBB38_161:                             # %for.inc1066
                                        #   in Loop: Header=BB38_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_155
.LBB38_162:                             # %for.end1068
	jmp	.LBB38_174
.LBB38_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB38_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB38_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB38_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB38_167:                             # %for.cond1081
                                        #   Parent Loop BB38_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB38_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB38_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_167
.LBB38_170:                             # %for.end1101
                                        #   in Loop: Header=BB38_165 Depth=1
	jmp	.LBB38_171
.LBB38_171:                             # %for.inc1102
                                        #   in Loop: Header=BB38_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_165
.LBB38_172:                             # %for.end1104
	jmp	.LBB38_173
.LBB38_173:                             # %if.end1105
	jmp	.LBB38_174
.LBB38_174:                             # %if.end1106
	jmp	.LBB38_175
.LBB38_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB38_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB38_177 Depth=1
	movl	$0, -8(%rbp)
.LBB38_179:                             # %for.cond1116
                                        #   Parent Loop BB38_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB38_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB38_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_179
.LBB38_182:                             # %for.end1141
                                        #   in Loop: Header=BB38_177 Depth=1
	jmp	.LBB38_183
.LBB38_183:                             # %for.inc1142
                                        #   in Loop: Header=BB38_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_177
.LBB38_184:                             # %for.end1144
	jmp	.LBB38_185
.LBB38_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB38_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB38_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB38_189:                             # %for.cond1157
                                        #   Parent Loop BB38_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB38_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB38_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_189
.LBB38_192:                             # %for.end1181
                                        #   in Loop: Header=BB38_187 Depth=1
	jmp	.LBB38_193
.LBB38_193:                             # %for.inc1182
                                        #   in Loop: Header=BB38_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_187
.LBB38_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB38_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1114234237, -52(%rbp)  # imm = 0x4269DD7D
	jne	.LBB38_197
.LBB38_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_196
.Lfunc_end38:
	.size	set_stored_macroblock_parameters.9, .Lfunc_end38-set_stored_macroblock_parameters.9
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.10 # -- Begin function set_stored_macroblock_parameters.10
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.10,@function
set_stored_macroblock_parameters.10:    # @set_stored_macroblock_parameters.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$2002641262, -52(%rbp)  # imm = 0x775DE16E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB39_4
.LBB39_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB39_4
.LBB39_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB39_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB39_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB39_5 Depth=1
	movl	$0, -4(%rbp)
.LBB39_7:                               # %for.cond9
                                        #   Parent Loop BB39_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB39_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB39_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB39_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB39_10:                              # %if.end
                                        #   in Loop: Header=BB39_7 Depth=2
	jmp	.LBB39_11
.LBB39_11:                              # %for.inc
                                        #   in Loop: Header=BB39_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_7
.LBB39_12:                              # %for.end
                                        #   in Loop: Header=BB39_5 Depth=1
	jmp	.LBB39_13
.LBB39_13:                              # %for.inc33
                                        #   in Loop: Header=BB39_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_5
.LBB39_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB39_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB39_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB39_16 Depth=1
	movl	$0, -4(%rbp)
.LBB39_18:                              # %for.cond43
                                        #   Parent Loop BB39_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB39_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB39_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB39_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB39_21:                              # %if.end92
                                        #   in Loop: Header=BB39_18 Depth=2
	jmp	.LBB39_22
.LBB39_22:                              # %for.inc93
                                        #   in Loop: Header=BB39_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_18
.LBB39_23:                              # %for.end95
                                        #   in Loop: Header=BB39_16 Depth=1
	jmp	.LBB39_24
.LBB39_24:                              # %for.inc96
                                        #   in Loop: Header=BB39_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_16
.LBB39_25:                              # %for.end98
	jmp	.LBB39_26
.LBB39_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB39_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_30 Depth 2
                                        #       Child Loop BB39_32 Depth 3
                                        #         Child Loop BB39_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB39_28 Depth=1
	movl	$0, -8(%rbp)
.LBB39_30:                              # %for.cond118
                                        #   Parent Loop BB39_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_32 Depth 3
                                        #         Child Loop BB39_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB39_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB39_30 Depth=2
	movl	$0, -12(%rbp)
.LBB39_32:                              # %for.cond122
                                        #   Parent Loop BB39_28 Depth=1
                                        #     Parent Loop BB39_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB39_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB39_32 Depth=3
	movl	$0, -28(%rbp)
.LBB39_34:                              # %for.cond126
                                        #   Parent Loop BB39_28 Depth=1
                                        #     Parent Loop BB39_30 Depth=2
                                        #       Parent Loop BB39_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB39_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB39_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB39_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_34
.LBB39_37:                              # %for.end150
                                        #   in Loop: Header=BB39_32 Depth=3
	jmp	.LBB39_38
.LBB39_38:                              # %for.inc151
                                        #   in Loop: Header=BB39_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_32
.LBB39_39:                              # %for.end153
                                        #   in Loop: Header=BB39_30 Depth=2
	jmp	.LBB39_40
.LBB39_40:                              # %for.inc154
                                        #   in Loop: Header=BB39_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_30
.LBB39_41:                              # %for.end156
                                        #   in Loop: Header=BB39_28 Depth=1
	jmp	.LBB39_42
.LBB39_42:                              # %for.inc157
                                        #   in Loop: Header=BB39_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_28
.LBB39_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB39_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_46 Depth 2
                                        #       Child Loop BB39_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB39_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB39_44 Depth=1
	movl	$0, -12(%rbp)
.LBB39_46:                              # %for.cond164
                                        #   Parent Loop BB39_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB39_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB39_46 Depth=2
	movl	$0, -28(%rbp)
.LBB39_48:                              # %for.cond168
                                        #   Parent Loop BB39_44 Depth=1
                                        #     Parent Loop BB39_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB39_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB39_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_48
.LBB39_51:                              # %for.end188
                                        #   in Loop: Header=BB39_46 Depth=2
	jmp	.LBB39_52
.LBB39_52:                              # %for.inc189
                                        #   in Loop: Header=BB39_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_46
.LBB39_53:                              # %for.end191
                                        #   in Loop: Header=BB39_44 Depth=1
	jmp	.LBB39_54
.LBB39_54:                              # %for.inc192
                                        #   in Loop: Header=BB39_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_44
.LBB39_55:                              # %for.end194
	jmp	.LBB39_56
.LBB39_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB39_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB39_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB39_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB39_60:                              # %if.end225
                                        #   in Loop: Header=BB39_57 Depth=1
	jmp	.LBB39_61
.LBB39_61:                              # %for.inc226
                                        #   in Loop: Header=BB39_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_57
.LBB39_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB39_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB39_65
.LBB39_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB39_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB39_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB39_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB39_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB39_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB39_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB39_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB39_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB39_74
.LBB39_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB39_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB39_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB39_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB39_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB39_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB39_78 Depth=1
	movl	$0, -4(%rbp)
.LBB39_80:                              # %for.cond276
                                        #   Parent Loop BB39_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB39_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB39_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB39_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB39_88
.LBB39_85:                              # %if.then299
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB39_87:                              # %if.end345
                                        #   in Loop: Header=BB39_80 Depth=2
	jmp	.LBB39_101
.LBB39_88:                              # %if.else346
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB39_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB39_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB39_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB39_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB39_94
.LBB39_93:                              # %cond.false368
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB39_94:                              # %cond.end369
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB39_96:                              # %if.end458
                                        #   in Loop: Header=BB39_80 Depth=2
	jmp	.LBB39_100
.LBB39_97:                              # %if.else459
                                        #   in Loop: Header=BB39_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB39_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB39_99:                              # %if.end578
                                        #   in Loop: Header=BB39_80 Depth=2
	jmp	.LBB39_100
.LBB39_100:                             # %if.end579
                                        #   in Loop: Header=BB39_80 Depth=2
	jmp	.LBB39_101
.LBB39_101:                             # %if.end580
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB39_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB39_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB39_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB39_108
.LBB39_105:                             # %if.then602
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB39_107:                             # %if.end654
                                        #   in Loop: Header=BB39_80 Depth=2
	jmp	.LBB39_108
.LBB39_108:                             # %if.end655
                                        #   in Loop: Header=BB39_80 Depth=2
	jmp	.LBB39_109
.LBB39_109:                             # %for.inc656
                                        #   in Loop: Header=BB39_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_80
.LBB39_110:                             # %for.end658
                                        #   in Loop: Header=BB39_78 Depth=1
	jmp	.LBB39_111
.LBB39_111:                             # %for.inc659
                                        #   in Loop: Header=BB39_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_78
.LBB39_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB39_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB39_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB39_114 Depth=1
	movl	$0, -4(%rbp)
.LBB39_116:                             # %for.cond668
                                        #   Parent Loop BB39_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB39_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB39_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB39_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB39_124
.LBB39_121:                             # %if.then693
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB39_123:                             # %if.end745
                                        #   in Loop: Header=BB39_116 Depth=2
	jmp	.LBB39_137
.LBB39_124:                             # %if.else746
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB39_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB39_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB39_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB39_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB39_130
.LBB39_129:                             # %cond.false770
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB39_130:                             # %cond.end772
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB39_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB39_132:                             # %if.end862
                                        #   in Loop: Header=BB39_116 Depth=2
	jmp	.LBB39_136
.LBB39_133:                             # %if.else863
                                        #   in Loop: Header=BB39_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB39_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB39_135:                             # %if.end983
                                        #   in Loop: Header=BB39_116 Depth=2
	jmp	.LBB39_136
.LBB39_136:                             # %if.end984
                                        #   in Loop: Header=BB39_116 Depth=2
	jmp	.LBB39_137
.LBB39_137:                             # %if.end985
                                        #   in Loop: Header=BB39_116 Depth=2
	jmp	.LBB39_138
.LBB39_138:                             # %for.inc986
                                        #   in Loop: Header=BB39_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_116
.LBB39_139:                             # %for.end988
                                        #   in Loop: Header=BB39_114 Depth=1
	jmp	.LBB39_140
.LBB39_140:                             # %for.inc989
                                        #   in Loop: Header=BB39_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_114
.LBB39_141:                             # %for.end991
	jmp	.LBB39_142
.LBB39_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB39_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB39_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB39_144 Depth=1
	movl	$0, -8(%rbp)
.LBB39_146:                             # %for.cond1002
                                        #   Parent Loop BB39_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB39_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB39_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_146
.LBB39_149:                             # %for.end1030
                                        #   in Loop: Header=BB39_144 Depth=1
	jmp	.LBB39_150
.LBB39_150:                             # %for.inc1031
                                        #   in Loop: Header=BB39_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_144
.LBB39_151:                             # %for.end1033
	jmp	.LBB39_175
.LBB39_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB39_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB39_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB39_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB39_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB39_157:                             # %for.cond1049
                                        #   Parent Loop BB39_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB39_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB39_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_157
.LBB39_160:                             # %for.end1065
                                        #   in Loop: Header=BB39_155 Depth=1
	jmp	.LBB39_161
.LBB39_161:                             # %for.inc1066
                                        #   in Loop: Header=BB39_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_155
.LBB39_162:                             # %for.end1068
	jmp	.LBB39_174
.LBB39_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB39_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB39_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB39_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB39_167:                             # %for.cond1081
                                        #   Parent Loop BB39_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB39_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB39_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_167
.LBB39_170:                             # %for.end1101
                                        #   in Loop: Header=BB39_165 Depth=1
	jmp	.LBB39_171
.LBB39_171:                             # %for.inc1102
                                        #   in Loop: Header=BB39_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_165
.LBB39_172:                             # %for.end1104
	jmp	.LBB39_173
.LBB39_173:                             # %if.end1105
	jmp	.LBB39_174
.LBB39_174:                             # %if.end1106
	jmp	.LBB39_175
.LBB39_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB39_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB39_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB39_177 Depth=1
	movl	$0, -8(%rbp)
.LBB39_179:                             # %for.cond1116
                                        #   Parent Loop BB39_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB39_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB39_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_179
.LBB39_182:                             # %for.end1141
                                        #   in Loop: Header=BB39_177 Depth=1
	jmp	.LBB39_183
.LBB39_183:                             # %for.inc1142
                                        #   in Loop: Header=BB39_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_177
.LBB39_184:                             # %for.end1144
	jmp	.LBB39_185
.LBB39_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB39_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB39_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB39_189:                             # %for.cond1157
                                        #   Parent Loop BB39_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB39_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB39_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_189
.LBB39_192:                             # %for.end1181
                                        #   in Loop: Header=BB39_187 Depth=1
	jmp	.LBB39_193
.LBB39_193:                             # %for.inc1182
                                        #   in Loop: Header=BB39_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_187
.LBB39_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB39_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$2002641262, -52(%rbp)  # imm = 0x775DE16E
	jne	.LBB39_197
.LBB39_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_196
.Lfunc_end39:
	.size	set_stored_macroblock_parameters.10, .Lfunc_end39-set_stored_macroblock_parameters.10
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.11 # -- Begin function GetBestTransformP8x8.11
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.11,@function
GetBestTransformP8x8.11:                # @GetBestTransformP8x8.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$386838396, -64(%rbp)   # imm = 0x170EAF7C
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB40_2
# %bb.1:                                # %if.then
	movl	$1, -36(%rbp)
	jmp	.LBB40_25
.LBB40_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB40_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_5 Depth 2
                                        #       Child Loop BB40_7 Depth 3
                                        #         Child Loop BB40_9 Depth 4
                                        #           Child Loop BB40_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB40_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB40_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB40_5:                               # %for.cond3
                                        #   Parent Loop BB40_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_7 Depth 3
                                        #         Child Loop BB40_9 Depth 4
                                        #           Child Loop BB40_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB40_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB40_7:                               # %for.cond7
                                        #   Parent Loop BB40_3 Depth=1
                                        #     Parent Loop BB40_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_9 Depth 4
                                        #           Child Loop BB40_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB40_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB40_9:                               # %for.cond12
                                        #   Parent Loop BB40_3 Depth=1
                                        #     Parent Loop BB40_5 Depth=2
                                        #       Parent Loop BB40_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB40_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB40_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB40_9 Depth=4
	movl	$0, -12(%rbp)
.LBB40_11:                              # %for.cond15
                                        #   Parent Loop BB40_3 Depth=1
                                        #     Parent Loop BB40_5 Depth=2
                                        #       Parent Loop BB40_7 Depth=3
                                        #         Parent Loop BB40_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB40_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB40_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB40_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB40_11
.LBB40_14:                              # %for.end
                                        #   in Loop: Header=BB40_9 Depth=4
	jmp	.LBB40_15
.LBB40_15:                              # %for.inc51
                                        #   in Loop: Header=BB40_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_9
.LBB40_16:                              # %for.end53
                                        #   in Loop: Header=BB40_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB40_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_7
.LBB40_18:                              # %for.end57
                                        #   in Loop: Header=BB40_5 Depth=2
	jmp	.LBB40_19
.LBB40_19:                              # %for.inc58
                                        #   in Loop: Header=BB40_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB40_5
.LBB40_20:                              # %for.end60
                                        #   in Loop: Header=BB40_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB40_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB40_3
.LBB40_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB40_24
# %bb.23:                               # %if.then69
	movl	$1, -36(%rbp)
	jmp	.LBB40_25
.LBB40_24:                              # %if.else
	movl	$0, -36(%rbp)
.LBB40_25:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$386838396, -64(%rbp)   # imm = 0x170EAF7C
	jne	.LBB40_27
.LBB40_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_26
.Lfunc_end40:
	.size	GetBestTransformP8x8.11, .Lfunc_end40-GetBestTransformP8x8.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.12
.LCPI41_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI41_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.12
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.12,@function
Mode_Decision_for_4x4IntraBlocks.12:    # @Mode_Decision_for_4x4IntraBlocks.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI41_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$780925171, -180(%rbp)  # imm = 0x2E8BF8F3
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -156(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -172(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB41_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB41_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_4
.LBB41_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB41_4
.LBB41_4:                               # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB41_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_7
.LBB41_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB41_7
.LBB41_7:                               # %cond.end31
	movl	%eax, -208(%rbp)
.LBB41_8:                               # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB41_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_11
.LBB41_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB41_11
.LBB41_11:                              # %cond.end42
	movl	%eax, -116(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB41_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_14
.LBB41_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB41_14
.LBB41_14:                              # %cond.end55
	movl	%eax, -108(%rbp)
	cmpl	$0, -116(%rbp)
	jl	.LBB41_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -108(%rbp)
	jge	.LBB41_17
.LBB41_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB41_21
.LBB41_17:                              # %cond.false59
	movl	-116(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB41_19
# %bb.18:                               # %cond.true61
	movl	-116(%rbp), %eax
	jmp	.LBB41_20
.LBB41_19:                              # %cond.false62
	movl	-108(%rbp), %eax
.LBB41_20:                              # %cond.end63
.LBB41_21:                              # %cond.end65
	movl	%eax, -92(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-168(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	leaq	-176(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB41_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_49 Depth 2
                                        #       Child Loop BB41_51 Depth 3
                                        #     Child Loop BB41_64 Depth 2
                                        #       Child Loop BB41_66 Depth 3
                                        #     Child Loop BB41_73 Depth 2
                                        #       Child Loop BB41_75 Depth 3
                                        #     Child Loop BB41_81 Depth 2
                                        #       Child Loop BB41_83 Depth 3
                                        #     Child Loop BB41_91 Depth 2
                                        #       Child Loop BB41_93 Depth 3
                                        #     Child Loop BB41_99 Depth 2
                                        #       Child Loop BB41_101 Depth 3
                                        #     Child Loop BB41_107 Depth 2
                                        #       Child Loop BB41_109 Depth 3
                                        #     Child Loop BB41_115 Depth 2
                                        #       Child Loop BB41_117 Depth 3
                                        #     Child Loop BB41_123 Depth 2
                                        #       Child Loop BB41_125 Depth 3
                                        #     Child Loop BB41_131 Depth 2
                                        #       Child Loop BB41_133 Depth 3
                                        #     Child Loop BB41_166 Depth 2
                                        #       Child Loop BB41_168 Depth 3
                                        #     Child Loop BB41_175 Depth 2
                                        #       Child Loop BB41_177 Depth 3
                                        #     Child Loop BB41_183 Depth 2
                                        #       Child Loop BB41_185 Depth 3
                                        #     Child Loop BB41_191 Depth 2
                                        #       Child Loop BB41_193 Depth 3
                                        #     Child Loop BB41_199 Depth 2
                                        #       Child Loop BB41_201 Depth 3
                                        #         Child Loop BB41_203 Depth 4
                                        #     Child Loop BB41_211 Depth 2
                                        #       Child Loop BB41_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB41_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB41_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB41_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB41_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB41_28
.LBB41_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB41_32
.LBB41_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB41_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB41_31
.LBB41_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -168(%rbp)
	movb	$1, %al
	jne	.LBB41_32
.LBB41_31:                              # %lor.rhs
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -176(%rbp)
	setne	%al
.LBB41_32:                              # %lor.end
                                        #   in Loop: Header=BB41_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB41_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_46
.LBB41_34:                              # %if.then86
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB41_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB41_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB41_38
.LBB41_37:                              # %if.then92
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_38:                              # %if.end93
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB41_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB41_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB41_42
.LBB41_41:                              # %if.then99
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_42:                              # %if.end100
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB41_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB41_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_45:                              # %if.end105
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_46
.LBB41_46:                              # %if.end106
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB41_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB41_49:                              # %for.cond111
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB41_49 Depth=2
	movl	$0, -12(%rbp)
.LBB41_51:                              # %for.cond114
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB41_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB41_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB41_51
.LBB41_54:                              # %for.end
                                        #   in Loop: Header=BB41_49 Depth=2
	jmp	.LBB41_55
.LBB41_55:                              # %for.inc133
                                        #   in Loop: Header=BB41_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_49
.LBB41_56:                              # %for.end135
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jne	.LBB41_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB41_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_59
.LBB41_58:                              # %cond.false139
                                        #   in Loop: Header=BB41_22 Depth=1
	vmovsd	.LCPI41_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_59:                              # %cond.end142
                                        #   in Loop: Header=BB41_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB41_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB41_61:                              # %if.end148
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_221
.LBB41_62:                              # %if.else
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_64:                              # %for.cond151
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB41_64 Depth=2
	movl	$0, -12(%rbp)
.LBB41_66:                              # %for.cond155
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB41_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB41_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_66
.LBB41_69:                              # %for.end194
                                        #   in Loop: Header=BB41_64 Depth=2
	jmp	.LBB41_70
.LBB41_70:                              # %for.inc195
                                        #   in Loop: Header=BB41_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_64
.LBB41_71:                              # %for.end197
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB41_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_73:                              # %for.cond202
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB41_73 Depth=2
	movl	$0, -12(%rbp)
.LBB41_75:                              # %for.cond206
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB41_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB41_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_75
.LBB41_78:                              # %for.end224
                                        #   in Loop: Header=BB41_73 Depth=2
	jmp	.LBB41_79
.LBB41_79:                              # %for.inc225
                                        #   in Loop: Header=BB41_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_73
.LBB41_80:                              # %for.end227
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -24(%rbp)
.LBB41_81:                              # %for.cond228
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB41_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB41_81 Depth=2
	movl	$0, -20(%rbp)
.LBB41_83:                              # %for.cond232
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB41_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB41_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB41_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_83
.LBB41_86:                              # %for.end249
                                        #   in Loop: Header=BB41_81 Depth=2
	jmp	.LBB41_87
.LBB41_87:                              # %for.inc250
                                        #   in Loop: Header=BB41_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_81
.LBB41_88:                              # %for.end252
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_89:                              # %if.end253
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB41_220
.LBB41_90:                              # %if.else254
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_91:                              # %for.cond255
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB41_91 Depth=2
	movl	$0, -12(%rbp)
.LBB41_93:                              # %for.cond259
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB41_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB41_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_93
.LBB41_96:                              # %for.end345
                                        #   in Loop: Header=BB41_91 Depth=2
	jmp	.LBB41_97
.LBB41_97:                              # %for.inc346
                                        #   in Loop: Header=BB41_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_91
.LBB41_98:                              # %for.end348
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_99:                              # %for.cond349
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB41_99 Depth=2
	movl	$0, -12(%rbp)
.LBB41_101:                             # %for.cond353
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB41_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB41_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_101
.LBB41_104:                             # %for.end368
                                        #   in Loop: Header=BB41_99 Depth=2
	jmp	.LBB41_105
.LBB41_105:                             # %for.inc369
                                        #   in Loop: Header=BB41_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_99
.LBB41_106:                             # %for.end371
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB41_107:                             # %for.cond374
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB41_107 Depth=2
	movl	$0, -12(%rbp)
.LBB41_109:                             # %for.cond378
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB41_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB41_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_109
.LBB41_112:                             # %for.end402
                                        #   in Loop: Header=BB41_107 Depth=2
	jmp	.LBB41_113
.LBB41_113:                             # %for.inc403
                                        #   in Loop: Header=BB41_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_107
.LBB41_114:                             # %for.end405
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB41_115:                             # %for.cond409
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB41_115 Depth=2
	movl	$0, -12(%rbp)
.LBB41_117:                             # %for.cond413
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB41_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB41_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_117
.LBB41_120:                             # %for.end437
                                        #   in Loop: Header=BB41_115 Depth=2
	jmp	.LBB41_121
.LBB41_121:                             # %for.inc438
                                        #   in Loop: Header=BB41_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_115
.LBB41_122:                             # %for.end440
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB41_123:                             # %for.cond444
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB41_123 Depth=2
	movl	$0, -12(%rbp)
.LBB41_125:                             # %for.cond448
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB41_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB41_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_125
.LBB41_128:                             # %for.end463
                                        #   in Loop: Header=BB41_123 Depth=2
	jmp	.LBB41_129
.LBB41_129:                             # %for.inc464
                                        #   in Loop: Header=BB41_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_123
.LBB41_130:                             # %for.end466
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_131:                             # %for.cond467
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB41_131 Depth=2
	movl	$0, -12(%rbp)
.LBB41_133:                             # %for.cond471
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB41_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_137
.LBB41_136:                             # %cond.false516
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB41_137:                             # %cond.end529
                                        #   in Loop: Header=BB41_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB41_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_143
.LBB41_139:                             # %cond.false535
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_142
.LBB41_141:                             # %cond.false551
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_142:                             # %cond.end564
                                        #   in Loop: Header=BB41_133 Depth=3
.LBB41_143:                             # %cond.end566
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_146
.LBB41_145:                             # %cond.false588
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_146:                             # %cond.end598
                                        #   in Loop: Header=BB41_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB41_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_152
.LBB41_148:                             # %cond.false604
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_151
.LBB41_150:                             # %cond.false617
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_151:                             # %cond.end627
                                        #   in Loop: Header=BB41_133 Depth=3
.LBB41_152:                             # %cond.end629
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_155
.LBB41_154:                             # %cond.false655
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_155:                             # %cond.end668
                                        #   in Loop: Header=BB41_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB41_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_161
.LBB41_157:                             # %cond.false674
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_160
.LBB41_159:                             # %cond.false690
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_160:                             # %cond.end703
                                        #   in Loop: Header=BB41_133 Depth=3
.LBB41_161:                             # %cond.end705
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_133
.LBB41_163:                             # %for.end718
                                        #   in Loop: Header=BB41_131 Depth=2
	jmp	.LBB41_164
.LBB41_164:                             # %for.inc719
                                        #   in Loop: Header=BB41_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_131
.LBB41_165:                             # %for.end721
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB41_166:                             # %for.cond722
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB41_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB41_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_168:                             # %for.cond726
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB41_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB41_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_168
.LBB41_171:                             # %for.end831
                                        #   in Loop: Header=BB41_166 Depth=2
	jmp	.LBB41_172
.LBB41_172:                             # %for.inc832
                                        #   in Loop: Header=BB41_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_166
.LBB41_173:                             # %for.end834
                                        #   in Loop: Header=BB41_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB41_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_175:                             # %for.cond842
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB41_175 Depth=2
	movl	$0, -12(%rbp)
.LBB41_177:                             # %for.cond846
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB41_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB41_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_177
.LBB41_180:                             # %for.end865
                                        #   in Loop: Header=BB41_175 Depth=2
	jmp	.LBB41_181
.LBB41_181:                             # %for.inc866
                                        #   in Loop: Header=BB41_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_175
.LBB41_182:                             # %for.end868
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_183:                             # %for.cond869
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB41_183 Depth=2
	movl	$0, -12(%rbp)
.LBB41_185:                             # %for.cond873
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB41_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB41_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_185
.LBB41_188:                             # %for.end893
                                        #   in Loop: Header=BB41_183 Depth=2
	jmp	.LBB41_189
.LBB41_189:                             # %for.inc894
                                        #   in Loop: Header=BB41_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_183
.LBB41_190:                             # %for.end896
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_191:                             # %for.cond897
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB41_191 Depth=2
	movl	$0, -12(%rbp)
.LBB41_193:                             # %for.cond901
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB41_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB41_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_193
.LBB41_196:                             # %for.end921
                                        #   in Loop: Header=BB41_191 Depth=2
	jmp	.LBB41_197
.LBB41_197:                             # %for.inc922
                                        #   in Loop: Header=BB41_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_191
.LBB41_198:                             # %for.end924
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -12(%rbp)
.LBB41_199:                             # %for.cond925
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_201 Depth 3
                                        #         Child Loop BB41_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB41_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB41_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB41_201:                             # %for.cond985
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB41_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB41_201 Depth=3
	movl	$0, -20(%rbp)
.LBB41_203:                             # %for.cond989
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_199 Depth=2
                                        #       Parent Loop BB41_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB41_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB41_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB41_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_203
.LBB41_206:                             # %for.end1011
                                        #   in Loop: Header=BB41_201 Depth=3
	jmp	.LBB41_207
.LBB41_207:                             # %for.inc1012
                                        #   in Loop: Header=BB41_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_201
.LBB41_208:                             # %for.end1014
                                        #   in Loop: Header=BB41_199 Depth=2
	jmp	.LBB41_209
.LBB41_209:                             # %for.inc1015
                                        #   in Loop: Header=BB41_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_199
.LBB41_210:                             # %for.end1017
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -24(%rbp)
.LBB41_211:                             # %for.cond1018
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB41_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB41_211 Depth=2
	movl	$0, -20(%rbp)
.LBB41_213:                             # %for.cond1022
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB41_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB41_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB41_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_213
.LBB41_216:                             # %for.end1040
                                        #   in Loop: Header=BB41_211 Depth=2
	jmp	.LBB41_217
.LBB41_217:                             # %for.inc1041
                                        #   in Loop: Header=BB41_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_211
.LBB41_218:                             # %for.end1043
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_219:                             # %if.end1044
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_220
.LBB41_220:                             # %if.end1045
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_221
.LBB41_221:                             # %if.end1046
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_222
.LBB41_222:                             # %if.end1047
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_223:                             # %for.inc1048
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB41_22
.LBB41_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-156(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-172(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB41_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB41_230
.LBB41_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB41_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB41_229
.LBB41_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB41_229:                             # %cond.end1065
.LBB41_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB41_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB41_233 Depth=1
	movl	$0, -12(%rbp)
.LBB41_235:                             # %for.cond1087
                                        #   Parent Loop BB41_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB41_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB41_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_235
.LBB41_238:                             # %for.end1128
                                        #   in Loop: Header=BB41_233 Depth=1
	jmp	.LBB41_239
.LBB41_239:                             # %for.inc1129
                                        #   in Loop: Header=BB41_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_233
.LBB41_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-184(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB41_317
.LBB41_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB41_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB41_242 Depth=1
	movl	$0, -12(%rbp)
.LBB41_244:                             # %for.cond1138
                                        #   Parent Loop BB41_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB41_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB41_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_244
.LBB41_247:                             # %for.end1226
                                        #   in Loop: Header=BB41_242 Depth=1
	jmp	.LBB41_248
.LBB41_248:                             # %for.inc1227
                                        #   in Loop: Header=BB41_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_242
.LBB41_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB41_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB41_250 Depth=1
	movl	$0, -12(%rbp)
.LBB41_252:                             # %for.cond1234
                                        #   Parent Loop BB41_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB41_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB41_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_252
.LBB41_255:                             # %for.end1249
                                        #   in Loop: Header=BB41_250 Depth=1
	jmp	.LBB41_256
.LBB41_256:                             # %for.inc1250
                                        #   in Loop: Header=BB41_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_250
.LBB41_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-184(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB41_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB41_258 Depth=1
	movl	$0, -12(%rbp)
.LBB41_260:                             # %for.cond1258
                                        #   Parent Loop BB41_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB41_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB41_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_260
.LBB41_263:                             # %for.end1282
                                        #   in Loop: Header=BB41_258 Depth=1
	jmp	.LBB41_264
.LBB41_264:                             # %for.inc1283
                                        #   in Loop: Header=BB41_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_258
.LBB41_265:                             # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB41_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB41_266 Depth=1
	movl	$0, -12(%rbp)
.LBB41_268:                             # %for.cond1328
                                        #   Parent Loop BB41_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB41_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB41_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_268
.LBB41_271:                             # %for.end1352
                                        #   in Loop: Header=BB41_266 Depth=1
	jmp	.LBB41_272
.LBB41_272:                             # %for.inc1353
                                        #   in Loop: Header=BB41_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_266
.LBB41_273:                             # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB41_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB41_274 Depth=1
	movl	$0, -12(%rbp)
.LBB41_276:                             # %for.cond1398
                                        #   Parent Loop BB41_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB41_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB41_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_276
.LBB41_279:                             # %for.end1413
                                        #   in Loop: Header=BB41_274 Depth=1
	jmp	.LBB41_280
.LBB41_280:                             # %for.inc1414
                                        #   in Loop: Header=BB41_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_274
.LBB41_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB41_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB41_282 Depth=1
	movl	$0, -12(%rbp)
.LBB41_284:                             # %for.cond1421
                                        #   Parent Loop BB41_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB41_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_288
.LBB41_287:                             # %cond.false1467
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB41_288:                             # %cond.end1480
                                        #   in Loop: Header=BB41_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB41_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_294
.LBB41_290:                             # %cond.false1486
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_293
.LBB41_292:                             # %cond.false1502
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_293:                             # %cond.end1515
                                        #   in Loop: Header=BB41_284 Depth=2
.LBB41_294:                             # %cond.end1517
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_297
.LBB41_296:                             # %cond.false1541
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_297:                             # %cond.end1551
                                        #   in Loop: Header=BB41_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB41_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_303
.LBB41_299:                             # %cond.false1557
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_302
.LBB41_301:                             # %cond.false1570
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_302:                             # %cond.end1580
                                        #   in Loop: Header=BB41_284 Depth=2
.LBB41_303:                             # %cond.end1582
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_306
.LBB41_305:                             # %cond.false1608
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_306:                             # %cond.end1621
                                        #   in Loop: Header=BB41_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB41_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_312
.LBB41_308:                             # %cond.false1627
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_311
.LBB41_310:                             # %cond.false1643
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_311:                             # %cond.end1656
                                        #   in Loop: Header=BB41_284 Depth=2
.LBB41_312:                             # %cond.end1658
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_284
.LBB41_314:                             # %for.end1671
                                        #   in Loop: Header=BB41_282 Depth=1
	jmp	.LBB41_315
.LBB41_315:                             # %for.inc1672
                                        #   in Loop: Header=BB41_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_282
.LBB41_316:                             # %for.end1674
	jmp	.LBB41_317
.LBB41_317:                             # %if.end1675
	jmp	.LBB41_367
.LBB41_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB41_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB41_319 Depth=1
	movl	$0, -12(%rbp)
.LBB41_321:                             # %for.cond1681
                                        #   Parent Loop BB41_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB41_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB41_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB41_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_321
.LBB41_324:                             # %for.end1700
                                        #   in Loop: Header=BB41_319 Depth=1
	jmp	.LBB41_325
.LBB41_325:                             # %for.inc1701
                                        #   in Loop: Header=BB41_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_319
.LBB41_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB41_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB41_328 Depth=1
	movl	$0, -12(%rbp)
.LBB41_330:                             # %for.cond1711
                                        #   Parent Loop BB41_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB41_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB41_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB41_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_330
.LBB41_333:                             # %for.end1731
                                        #   in Loop: Header=BB41_328 Depth=1
	jmp	.LBB41_334
.LBB41_334:                             # %for.inc1732
                                        #   in Loop: Header=BB41_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_328
.LBB41_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB41_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB41_336 Depth=1
	movl	$0, -12(%rbp)
.LBB41_338:                             # %for.cond1739
                                        #   Parent Loop BB41_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB41_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB41_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB41_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_338
.LBB41_341:                             # %for.end1759
                                        #   in Loop: Header=BB41_336 Depth=1
	jmp	.LBB41_342
.LBB41_342:                             # %for.inc1760
                                        #   in Loop: Header=BB41_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_336
.LBB41_343:                             # %for.end1762
	jmp	.LBB41_344
.LBB41_344:                             # %if.end1763
	movl	$0, -24(%rbp)
.LBB41_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB41_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB41_345 Depth=1
	movl	$0, -20(%rbp)
.LBB41_347:                             # %for.cond1768
                                        #   Parent Loop BB41_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB41_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB41_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB41_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_347
.LBB41_350:                             # %for.end1800
                                        #   in Loop: Header=BB41_345 Depth=1
	jmp	.LBB41_351
.LBB41_351:                             # %for.inc1801
                                        #   in Loop: Header=BB41_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_345
.LBB41_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB41_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_356 Depth 2
                                        #       Child Loop BB41_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB41_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB41_354 Depth=1
	movl	$0, -24(%rbp)
.LBB41_356:                             # %for.cond1811
                                        #   Parent Loop BB41_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB41_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB41_356 Depth=2
	movl	$0, -20(%rbp)
.LBB41_358:                             # %for.cond1815
                                        #   Parent Loop BB41_354 Depth=1
                                        #     Parent Loop BB41_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB41_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB41_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB41_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_358
.LBB41_361:                             # %for.end1837
                                        #   in Loop: Header=BB41_356 Depth=2
	jmp	.LBB41_362
.LBB41_362:                             # %for.inc1838
                                        #   in Loop: Header=BB41_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_356
.LBB41_363:                             # %for.end1840
                                        #   in Loop: Header=BB41_354 Depth=1
	jmp	.LBB41_364
.LBB41_364:                             # %for.inc1841
                                        #   in Loop: Header=BB41_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_354
.LBB41_365:                             # %for.end1843
	jmp	.LBB41_366
.LBB41_366:                             # %if.end1844
	jmp	.LBB41_367
.LBB41_367:                             # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$780925171, -180(%rbp)  # imm = 0x2E8BF8F3
	jne	.LBB41_369
.LBB41_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_368
.Lfunc_end41:
	.size	Mode_Decision_for_4x4IntraBlocks.12, .Lfunc_end41-Mode_Decision_for_4x4IntraBlocks.12
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.13    # -- Begin function RestoreMVBlock8x8.13
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.13,@function
RestoreMVBlock8x8.13:                   # @RestoreMVBlock8x8.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1375710783, -68(%rbp)  # imm = 0x51FFAE3F
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB42_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB42_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB42_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_5:                               # %for.cond7
                                        #   Parent Loop BB42_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB42_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB42_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB42_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_5
.LBB42_8:                               # %for.end
                                        #   in Loop: Header=BB42_3 Depth=1
	jmp	.LBB42_9
.LBB42_9:                               # %for.inc76
                                        #   in Loop: Header=BB42_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_3
.LBB42_10:                              # %for.end78
	jmp	.LBB42_11
.LBB42_11:                              # %if.end
	jmp	.LBB42_46
.LBB42_12:                              # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB42_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB42_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_16:                              # %for.cond84
                                        #   Parent Loop BB42_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB42_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB42_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB42_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_16
.LBB42_19:                              # %for.end161
                                        #   in Loop: Header=BB42_14 Depth=1
	jmp	.LBB42_20
.LBB42_20:                              # %for.inc162
                                        #   in Loop: Header=BB42_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_14
.LBB42_21:                              # %for.end164
	jmp	.LBB42_45
.LBB42_22:                              # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB42_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_26:                              # %for.cond171
                                        #   Parent Loop BB42_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB42_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB42_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB42_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_26
.LBB42_29:                              # %for.end248
                                        #   in Loop: Header=BB42_24 Depth=1
	jmp	.LBB42_30
.LBB42_30:                              # %for.inc249
                                        #   in Loop: Header=BB42_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_24
.LBB42_31:                              # %for.end251
	jmp	.LBB42_44
.LBB42_32:                              # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB42_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_36:                              # %for.cond258
                                        #   Parent Loop BB42_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB42_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB42_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_36
.LBB42_39:                              # %for.end407
                                        #   in Loop: Header=BB42_34 Depth=1
	jmp	.LBB42_40
.LBB42_40:                              # %for.inc408
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_34
.LBB42_41:                              # %for.end410
	jmp	.LBB42_43
.LBB42_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB42_43:                              # %if.end412
	jmp	.LBB42_44
.LBB42_44:                              # %if.end413
	jmp	.LBB42_45
.LBB42_45:                              # %if.end414
	jmp	.LBB42_46
.LBB42_46:                              # %if.end415
	cmpl	$1375710783, -68(%rbp)  # imm = 0x51FFAE3F
	jne	.LBB42_48
.LBB42_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_47
.Lfunc_end42:
	.size	RestoreMVBlock8x8.13, .Lfunc_end42-RestoreMVBlock8x8.13
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.14 # -- Begin function set_stored_macroblock_parameters.14
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.14,@function
set_stored_macroblock_parameters.14:    # @set_stored_macroblock_parameters.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1830861442, -52(%rbp)  # imm = 0x6D20BA82
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB43_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	$0, -4(%rbp)
.LBB43_7:                               # %for.cond9
                                        #   Parent Loop BB43_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB43_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB43_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_10:                              # %if.end
                                        #   in Loop: Header=BB43_7 Depth=2
	jmp	.LBB43_11
.LBB43_11:                              # %for.inc
                                        #   in Loop: Header=BB43_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_7
.LBB43_12:                              # %for.end
                                        #   in Loop: Header=BB43_5 Depth=1
	jmp	.LBB43_13
.LBB43_13:                              # %for.inc33
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_5
.LBB43_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB43_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	$0, -4(%rbp)
.LBB43_18:                              # %for.cond43
                                        #   Parent Loop BB43_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB43_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB43_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_21:                              # %if.end92
                                        #   in Loop: Header=BB43_18 Depth=2
	jmp	.LBB43_22
.LBB43_22:                              # %for.inc93
                                        #   in Loop: Header=BB43_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_18
.LBB43_23:                              # %for.end95
                                        #   in Loop: Header=BB43_16 Depth=1
	jmp	.LBB43_24
.LBB43_24:                              # %for.inc96
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_16
.LBB43_25:                              # %for.end98
	jmp	.LBB43_26
.LBB43_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB43_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_30 Depth 2
                                        #       Child Loop BB43_32 Depth 3
                                        #         Child Loop BB43_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB43_28 Depth=1
	movl	$0, -8(%rbp)
.LBB43_30:                              # %for.cond118
                                        #   Parent Loop BB43_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_32 Depth 3
                                        #         Child Loop BB43_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB43_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB43_30 Depth=2
	movl	$0, -12(%rbp)
.LBB43_32:                              # %for.cond122
                                        #   Parent Loop BB43_28 Depth=1
                                        #     Parent Loop BB43_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB43_32 Depth=3
	movl	$0, -28(%rbp)
.LBB43_34:                              # %for.cond126
                                        #   Parent Loop BB43_28 Depth=1
                                        #     Parent Loop BB43_30 Depth=2
                                        #       Parent Loop BB43_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB43_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB43_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB43_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_34
.LBB43_37:                              # %for.end150
                                        #   in Loop: Header=BB43_32 Depth=3
	jmp	.LBB43_38
.LBB43_38:                              # %for.inc151
                                        #   in Loop: Header=BB43_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_32
.LBB43_39:                              # %for.end153
                                        #   in Loop: Header=BB43_30 Depth=2
	jmp	.LBB43_40
.LBB43_40:                              # %for.inc154
                                        #   in Loop: Header=BB43_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_30
.LBB43_41:                              # %for.end156
                                        #   in Loop: Header=BB43_28 Depth=1
	jmp	.LBB43_42
.LBB43_42:                              # %for.inc157
                                        #   in Loop: Header=BB43_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_28
.LBB43_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB43_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_46 Depth 2
                                        #       Child Loop BB43_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB43_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	$0, -12(%rbp)
.LBB43_46:                              # %for.cond164
                                        #   Parent Loop BB43_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB43_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB43_46 Depth=2
	movl	$0, -28(%rbp)
.LBB43_48:                              # %for.cond168
                                        #   Parent Loop BB43_44 Depth=1
                                        #     Parent Loop BB43_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB43_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB43_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB43_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_48
.LBB43_51:                              # %for.end188
                                        #   in Loop: Header=BB43_46 Depth=2
	jmp	.LBB43_52
.LBB43_52:                              # %for.inc189
                                        #   in Loop: Header=BB43_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_46
.LBB43_53:                              # %for.end191
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_54
.LBB43_54:                              # %for.inc192
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_44
.LBB43_55:                              # %for.end194
	jmp	.LBB43_56
.LBB43_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB43_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB43_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB43_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB43_60:                              # %if.end225
                                        #   in Loop: Header=BB43_57 Depth=1
	jmp	.LBB43_61
.LBB43_61:                              # %for.inc226
                                        #   in Loop: Header=BB43_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_57
.LBB43_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB43_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB43_65
.LBB43_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB43_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB43_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB43_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB43_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB43_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB43_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB43_74
.LBB43_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB43_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB43_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB43_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB43_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB43_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	$0, -4(%rbp)
.LBB43_80:                              # %for.cond276
                                        #   Parent Loop BB43_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB43_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_88
.LBB43_85:                              # %if.then299
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB43_87:                              # %if.end345
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_101
.LBB43_88:                              # %if.else346
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB43_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB43_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB43_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB43_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB43_94
.LBB43_93:                              # %cond.false368
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB43_94:                              # %cond.end369
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB43_96:                              # %if.end458
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_100
.LBB43_97:                              # %if.else459
                                        #   in Loop: Header=BB43_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB43_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB43_99:                              # %if.end578
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_100
.LBB43_100:                             # %if.end579
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_101
.LBB43_101:                             # %if.end580
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB43_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_108
.LBB43_105:                             # %if.then602
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB43_107:                             # %if.end654
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_108
.LBB43_108:                             # %if.end655
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_109
.LBB43_109:                             # %for.inc656
                                        #   in Loop: Header=BB43_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_80
.LBB43_110:                             # %for.end658
                                        #   in Loop: Header=BB43_78 Depth=1
	jmp	.LBB43_111
.LBB43_111:                             # %for.inc659
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_78
.LBB43_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB43_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB43_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB43_114 Depth=1
	movl	$0, -4(%rbp)
.LBB43_116:                             # %for.cond668
                                        #   Parent Loop BB43_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB43_124
.LBB43_121:                             # %if.then693
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB43_123:                             # %if.end745
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_137
.LBB43_124:                             # %if.else746
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB43_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB43_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB43_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB43_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB43_130
.LBB43_129:                             # %cond.false770
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB43_130:                             # %cond.end772
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB43_132:                             # %if.end862
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_136
.LBB43_133:                             # %if.else863
                                        #   in Loop: Header=BB43_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB43_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB43_135:                             # %if.end983
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_136
.LBB43_136:                             # %if.end984
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_137
.LBB43_137:                             # %if.end985
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_138
.LBB43_138:                             # %for.inc986
                                        #   in Loop: Header=BB43_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_116
.LBB43_139:                             # %for.end988
                                        #   in Loop: Header=BB43_114 Depth=1
	jmp	.LBB43_140
.LBB43_140:                             # %for.inc989
                                        #   in Loop: Header=BB43_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_114
.LBB43_141:                             # %for.end991
	jmp	.LBB43_142
.LBB43_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB43_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB43_144 Depth=1
	movl	$0, -8(%rbp)
.LBB43_146:                             # %for.cond1002
                                        #   Parent Loop BB43_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB43_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_146
.LBB43_149:                             # %for.end1030
                                        #   in Loop: Header=BB43_144 Depth=1
	jmp	.LBB43_150
.LBB43_150:                             # %for.inc1031
                                        #   in Loop: Header=BB43_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_144
.LBB43_151:                             # %for.end1033
	jmp	.LBB43_175
.LBB43_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB43_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB43_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB43_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_157:                             # %for.cond1049
                                        #   Parent Loop BB43_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB43_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB43_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_157
.LBB43_160:                             # %for.end1065
                                        #   in Loop: Header=BB43_155 Depth=1
	jmp	.LBB43_161
.LBB43_161:                             # %for.inc1066
                                        #   in Loop: Header=BB43_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_155
.LBB43_162:                             # %for.end1068
	jmp	.LBB43_174
.LBB43_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB43_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB43_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_167:                             # %for.cond1081
                                        #   Parent Loop BB43_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB43_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB43_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_167
.LBB43_170:                             # %for.end1101
                                        #   in Loop: Header=BB43_165 Depth=1
	jmp	.LBB43_171
.LBB43_171:                             # %for.inc1102
                                        #   in Loop: Header=BB43_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_165
.LBB43_172:                             # %for.end1104
	jmp	.LBB43_173
.LBB43_173:                             # %if.end1105
	jmp	.LBB43_174
.LBB43_174:                             # %if.end1106
	jmp	.LBB43_175
.LBB43_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB43_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB43_177 Depth=1
	movl	$0, -8(%rbp)
.LBB43_179:                             # %for.cond1116
                                        #   Parent Loop BB43_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB43_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB43_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_179
.LBB43_182:                             # %for.end1141
                                        #   in Loop: Header=BB43_177 Depth=1
	jmp	.LBB43_183
.LBB43_183:                             # %for.inc1142
                                        #   in Loop: Header=BB43_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_177
.LBB43_184:                             # %for.end1144
	jmp	.LBB43_185
.LBB43_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB43_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_189:                             # %for.cond1157
                                        #   Parent Loop BB43_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB43_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB43_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_189
.LBB43_192:                             # %for.end1181
                                        #   in Loop: Header=BB43_187 Depth=1
	jmp	.LBB43_193
.LBB43_193:                             # %for.inc1182
                                        #   in Loop: Header=BB43_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_187
.LBB43_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB43_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1830861442, -52(%rbp)  # imm = 0x6D20BA82
	jne	.LBB43_197
.LBB43_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_196
.Lfunc_end43:
	.size	set_stored_macroblock_parameters.14, .Lfunc_end43-set_stored_macroblock_parameters.14
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.15      # -- Begin function StoreMVBlock8x8.15
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.15,@function
StoreMVBlock8x8.15:                     # @StoreMVBlock8x8.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$2112240276, -68(%rbp)  # imm = 0x7DE63A94
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB44_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB44_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB44_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_5:                               # %for.cond7
                                        #   Parent Loop BB44_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB44_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB44_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_5
.LBB44_8:                               # %for.end
                                        #   in Loop: Header=BB44_3 Depth=1
	jmp	.LBB44_9
.LBB44_9:                               # %for.inc76
                                        #   in Loop: Header=BB44_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_3
.LBB44_10:                              # %for.end78
	jmp	.LBB44_11
.LBB44_11:                              # %if.end
	jmp	.LBB44_46
.LBB44_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB44_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB44_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_16:                              # %for.cond84
                                        #   Parent Loop BB44_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB44_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB44_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_16
.LBB44_19:                              # %for.end161
                                        #   in Loop: Header=BB44_14 Depth=1
	jmp	.LBB44_20
.LBB44_20:                              # %for.inc162
                                        #   in Loop: Header=BB44_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_14
.LBB44_21:                              # %for.end164
	jmp	.LBB44_45
.LBB44_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB44_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB44_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_26:                              # %for.cond171
                                        #   Parent Loop BB44_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB44_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB44_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_26
.LBB44_29:                              # %for.end248
                                        #   in Loop: Header=BB44_24 Depth=1
	jmp	.LBB44_30
.LBB44_30:                              # %for.inc249
                                        #   in Loop: Header=BB44_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_24
.LBB44_31:                              # %for.end251
	jmp	.LBB44_44
.LBB44_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB44_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_36:                              # %for.cond258
                                        #   Parent Loop BB44_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB44_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_36
.LBB44_39:                              # %for.end407
                                        #   in Loop: Header=BB44_34 Depth=1
	jmp	.LBB44_40
.LBB44_40:                              # %for.inc408
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_34
.LBB44_41:                              # %for.end410
	jmp	.LBB44_43
.LBB44_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB44_43:                              # %if.end412
	jmp	.LBB44_44
.LBB44_44:                              # %if.end413
	jmp	.LBB44_45
.LBB44_45:                              # %if.end414
	jmp	.LBB44_46
.LBB44_46:                              # %if.end415
	cmpl	$2112240276, -68(%rbp)  # imm = 0x7DE63A94
	jne	.LBB44_48
.LBB44_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_47
.Lfunc_end44:
	.size	StoreMVBlock8x8.15, .Lfunc_end44-StoreMVBlock8x8.15
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.16 # -- Begin function set_stored_macroblock_parameters.16
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.16,@function
set_stored_macroblock_parameters.16:    # @set_stored_macroblock_parameters.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$95077285, -52(%rbp)    # imm = 0x5AAC3A5
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB45_4
.LBB45_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB45_4
.LBB45_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB45_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB45_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB45_5 Depth=1
	movl	$0, -4(%rbp)
.LBB45_7:                               # %for.cond9
                                        #   Parent Loop BB45_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB45_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB45_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB45_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB45_10:                              # %if.end
                                        #   in Loop: Header=BB45_7 Depth=2
	jmp	.LBB45_11
.LBB45_11:                              # %for.inc
                                        #   in Loop: Header=BB45_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_7
.LBB45_12:                              # %for.end
                                        #   in Loop: Header=BB45_5 Depth=1
	jmp	.LBB45_13
.LBB45_13:                              # %for.inc33
                                        #   in Loop: Header=BB45_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_5
.LBB45_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB45_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB45_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB45_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB45_16 Depth=1
	movl	$0, -4(%rbp)
.LBB45_18:                              # %for.cond43
                                        #   Parent Loop BB45_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB45_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB45_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB45_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB45_21:                              # %if.end92
                                        #   in Loop: Header=BB45_18 Depth=2
	jmp	.LBB45_22
.LBB45_22:                              # %for.inc93
                                        #   in Loop: Header=BB45_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_18
.LBB45_23:                              # %for.end95
                                        #   in Loop: Header=BB45_16 Depth=1
	jmp	.LBB45_24
.LBB45_24:                              # %for.inc96
                                        #   in Loop: Header=BB45_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_16
.LBB45_25:                              # %for.end98
	jmp	.LBB45_26
.LBB45_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB45_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_30 Depth 2
                                        #       Child Loop BB45_32 Depth 3
                                        #         Child Loop BB45_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB45_28 Depth=1
	movl	$0, -8(%rbp)
.LBB45_30:                              # %for.cond118
                                        #   Parent Loop BB45_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_32 Depth 3
                                        #         Child Loop BB45_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB45_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB45_30 Depth=2
	movl	$0, -12(%rbp)
.LBB45_32:                              # %for.cond122
                                        #   Parent Loop BB45_28 Depth=1
                                        #     Parent Loop BB45_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB45_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB45_32 Depth=3
	movl	$0, -28(%rbp)
.LBB45_34:                              # %for.cond126
                                        #   Parent Loop BB45_28 Depth=1
                                        #     Parent Loop BB45_30 Depth=2
                                        #       Parent Loop BB45_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB45_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB45_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB45_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_34
.LBB45_37:                              # %for.end150
                                        #   in Loop: Header=BB45_32 Depth=3
	jmp	.LBB45_38
.LBB45_38:                              # %for.inc151
                                        #   in Loop: Header=BB45_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_32
.LBB45_39:                              # %for.end153
                                        #   in Loop: Header=BB45_30 Depth=2
	jmp	.LBB45_40
.LBB45_40:                              # %for.inc154
                                        #   in Loop: Header=BB45_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_30
.LBB45_41:                              # %for.end156
                                        #   in Loop: Header=BB45_28 Depth=1
	jmp	.LBB45_42
.LBB45_42:                              # %for.inc157
                                        #   in Loop: Header=BB45_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_28
.LBB45_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB45_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_46 Depth 2
                                        #       Child Loop BB45_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB45_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB45_44 Depth=1
	movl	$0, -12(%rbp)
.LBB45_46:                              # %for.cond164
                                        #   Parent Loop BB45_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB45_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB45_46 Depth=2
	movl	$0, -28(%rbp)
.LBB45_48:                              # %for.cond168
                                        #   Parent Loop BB45_44 Depth=1
                                        #     Parent Loop BB45_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB45_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB45_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB45_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_48
.LBB45_51:                              # %for.end188
                                        #   in Loop: Header=BB45_46 Depth=2
	jmp	.LBB45_52
.LBB45_52:                              # %for.inc189
                                        #   in Loop: Header=BB45_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_46
.LBB45_53:                              # %for.end191
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_54
.LBB45_54:                              # %for.inc192
                                        #   in Loop: Header=BB45_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_44
.LBB45_55:                              # %for.end194
	jmp	.LBB45_56
.LBB45_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB45_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB45_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB45_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB45_60:                              # %if.end225
                                        #   in Loop: Header=BB45_57 Depth=1
	jmp	.LBB45_61
.LBB45_61:                              # %for.inc226
                                        #   in Loop: Header=BB45_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_57
.LBB45_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB45_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB45_65
.LBB45_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB45_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB45_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB45_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB45_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB45_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB45_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB45_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB45_74
.LBB45_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB45_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB45_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB45_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB45_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB45_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB45_78 Depth=1
	movl	$0, -4(%rbp)
.LBB45_80:                              # %for.cond276
                                        #   Parent Loop BB45_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB45_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB45_88
.LBB45_85:                              # %if.then299
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB45_87:                              # %if.end345
                                        #   in Loop: Header=BB45_80 Depth=2
	jmp	.LBB45_101
.LBB45_88:                              # %if.else346
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB45_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB45_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB45_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB45_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB45_94
.LBB45_93:                              # %cond.false368
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB45_94:                              # %cond.end369
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB45_96:                              # %if.end458
                                        #   in Loop: Header=BB45_80 Depth=2
	jmp	.LBB45_100
.LBB45_97:                              # %if.else459
                                        #   in Loop: Header=BB45_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB45_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB45_99:                              # %if.end578
                                        #   in Loop: Header=BB45_80 Depth=2
	jmp	.LBB45_100
.LBB45_100:                             # %if.end579
                                        #   in Loop: Header=BB45_80 Depth=2
	jmp	.LBB45_101
.LBB45_101:                             # %if.end580
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB45_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB45_108
.LBB45_105:                             # %if.then602
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB45_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB45_107:                             # %if.end654
                                        #   in Loop: Header=BB45_80 Depth=2
	jmp	.LBB45_108
.LBB45_108:                             # %if.end655
                                        #   in Loop: Header=BB45_80 Depth=2
	jmp	.LBB45_109
.LBB45_109:                             # %for.inc656
                                        #   in Loop: Header=BB45_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_80
.LBB45_110:                             # %for.end658
                                        #   in Loop: Header=BB45_78 Depth=1
	jmp	.LBB45_111
.LBB45_111:                             # %for.inc659
                                        #   in Loop: Header=BB45_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_78
.LBB45_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB45_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB45_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB45_114 Depth=1
	movl	$0, -4(%rbp)
.LBB45_116:                             # %for.cond668
                                        #   Parent Loop BB45_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB45_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB45_124
.LBB45_121:                             # %if.then693
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB45_123:                             # %if.end745
                                        #   in Loop: Header=BB45_116 Depth=2
	jmp	.LBB45_137
.LBB45_124:                             # %if.else746
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB45_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB45_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB45_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB45_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB45_130
.LBB45_129:                             # %cond.false770
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB45_130:                             # %cond.end772
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB45_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB45_132:                             # %if.end862
                                        #   in Loop: Header=BB45_116 Depth=2
	jmp	.LBB45_136
.LBB45_133:                             # %if.else863
                                        #   in Loop: Header=BB45_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB45_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB45_135:                             # %if.end983
                                        #   in Loop: Header=BB45_116 Depth=2
	jmp	.LBB45_136
.LBB45_136:                             # %if.end984
                                        #   in Loop: Header=BB45_116 Depth=2
	jmp	.LBB45_137
.LBB45_137:                             # %if.end985
                                        #   in Loop: Header=BB45_116 Depth=2
	jmp	.LBB45_138
.LBB45_138:                             # %for.inc986
                                        #   in Loop: Header=BB45_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_116
.LBB45_139:                             # %for.end988
                                        #   in Loop: Header=BB45_114 Depth=1
	jmp	.LBB45_140
.LBB45_140:                             # %for.inc989
                                        #   in Loop: Header=BB45_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_114
.LBB45_141:                             # %for.end991
	jmp	.LBB45_142
.LBB45_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB45_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB45_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB45_144 Depth=1
	movl	$0, -8(%rbp)
.LBB45_146:                             # %for.cond1002
                                        #   Parent Loop BB45_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB45_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB45_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_146
.LBB45_149:                             # %for.end1030
                                        #   in Loop: Header=BB45_144 Depth=1
	jmp	.LBB45_150
.LBB45_150:                             # %for.inc1031
                                        #   in Loop: Header=BB45_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_144
.LBB45_151:                             # %for.end1033
	jmp	.LBB45_175
.LBB45_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB45_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB45_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB45_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB45_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB45_157:                             # %for.cond1049
                                        #   Parent Loop BB45_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB45_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB45_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_157
.LBB45_160:                             # %for.end1065
                                        #   in Loop: Header=BB45_155 Depth=1
	jmp	.LBB45_161
.LBB45_161:                             # %for.inc1066
                                        #   in Loop: Header=BB45_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_155
.LBB45_162:                             # %for.end1068
	jmp	.LBB45_174
.LBB45_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB45_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB45_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB45_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB45_167:                             # %for.cond1081
                                        #   Parent Loop BB45_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB45_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB45_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_167
.LBB45_170:                             # %for.end1101
                                        #   in Loop: Header=BB45_165 Depth=1
	jmp	.LBB45_171
.LBB45_171:                             # %for.inc1102
                                        #   in Loop: Header=BB45_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_165
.LBB45_172:                             # %for.end1104
	jmp	.LBB45_173
.LBB45_173:                             # %if.end1105
	jmp	.LBB45_174
.LBB45_174:                             # %if.end1106
	jmp	.LBB45_175
.LBB45_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB45_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB45_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB45_177 Depth=1
	movl	$0, -8(%rbp)
.LBB45_179:                             # %for.cond1116
                                        #   Parent Loop BB45_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB45_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB45_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_179
.LBB45_182:                             # %for.end1141
                                        #   in Loop: Header=BB45_177 Depth=1
	jmp	.LBB45_183
.LBB45_183:                             # %for.inc1142
                                        #   in Loop: Header=BB45_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_177
.LBB45_184:                             # %for.end1144
	jmp	.LBB45_185
.LBB45_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB45_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB45_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB45_189:                             # %for.cond1157
                                        #   Parent Loop BB45_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB45_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB45_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_189
.LBB45_192:                             # %for.end1181
                                        #   in Loop: Header=BB45_187 Depth=1
	jmp	.LBB45_193
.LBB45_193:                             # %for.inc1182
                                        #   in Loop: Header=BB45_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_187
.LBB45_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB45_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$95077285, -52(%rbp)    # imm = 0x5AAC3A5
	jne	.LBB45_197
.LBB45_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_196
.Lfunc_end45:
	.size	set_stored_macroblock_parameters.16, .Lfunc_end45-set_stored_macroblock_parameters.16
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.17    # -- Begin function RestoreMVBlock8x8.17
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.17,@function
RestoreMVBlock8x8.17:                   # @RestoreMVBlock8x8.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1645502778, -68(%rbp)  # imm = 0x6214613A
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB46_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB46_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_5:                               # %for.cond7
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB46_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB46_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_5
.LBB46_8:                               # %for.end
                                        #   in Loop: Header=BB46_3 Depth=1
	jmp	.LBB46_9
.LBB46_9:                               # %for.inc76
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_3
.LBB46_10:                              # %for.end78
	jmp	.LBB46_11
.LBB46_11:                              # %if.end
	jmp	.LBB46_46
.LBB46_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB46_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB46_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_16:                              # %for.cond84
                                        #   Parent Loop BB46_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB46_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB46_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_16
.LBB46_19:                              # %for.end161
                                        #   in Loop: Header=BB46_14 Depth=1
	jmp	.LBB46_20
.LBB46_20:                              # %for.inc162
                                        #   in Loop: Header=BB46_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_14
.LBB46_21:                              # %for.end164
	jmp	.LBB46_45
.LBB46_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB46_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_26:                              # %for.cond171
                                        #   Parent Loop BB46_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB46_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB46_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_26
.LBB46_29:                              # %for.end248
                                        #   in Loop: Header=BB46_24 Depth=1
	jmp	.LBB46_30
.LBB46_30:                              # %for.inc249
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_24
.LBB46_31:                              # %for.end251
	jmp	.LBB46_44
.LBB46_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB46_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_36:                              # %for.cond258
                                        #   Parent Loop BB46_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB46_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB46_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_36
.LBB46_39:                              # %for.end407
                                        #   in Loop: Header=BB46_34 Depth=1
	jmp	.LBB46_40
.LBB46_40:                              # %for.inc408
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_34
.LBB46_41:                              # %for.end410
	jmp	.LBB46_43
.LBB46_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB46_43:                              # %if.end412
	jmp	.LBB46_44
.LBB46_44:                              # %if.end413
	jmp	.LBB46_45
.LBB46_45:                              # %if.end414
	jmp	.LBB46_46
.LBB46_46:                              # %if.end415
	cmpl	$1645502778, -68(%rbp)  # imm = 0x6214613A
	jne	.LBB46_48
.LBB46_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_47
.Lfunc_end46:
	.size	RestoreMVBlock8x8.17, .Lfunc_end46-RestoreMVBlock8x8.17
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.18         # -- Begin function RestoreMV8x8.18
	.p2align	4, 0x90
	.type	RestoreMV8x8.18,@function
RestoreMV8x8.18:                        # @RestoreMV8x8.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1247097128, -16(%rbp)  # imm = 0x4A553128
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_4:                               # %for.end
	cmpl	$1247097128, -16(%rbp)  # imm = 0x4A553128
	jne	.LBB47_6
.LBB47_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_5
.Lfunc_end47:
	.size	RestoreMV8x8.18, .Lfunc_end47-RestoreMV8x8.18
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.19       # -- Begin function UpdatePixelMap.19
	.p2align	4, 0x90
	.type	UpdatePixelMap.19,@function
UpdatePixelMap.19:                      # @UpdatePixelMap.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$71518853, -28(%rbp)    # imm = 0x4434A85
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB48_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	$0, -8(%rbp)
.LBB48_4:                               # %for.cond2
                                        #   Parent Loop BB48_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB48_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB48_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB48_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_4
.LBB48_7:                               # %for.end
                                        #   in Loop: Header=BB48_2 Depth=1
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc7
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_2
.LBB48_9:                               # %for.end9
	jmp	.LBB48_41
.LBB48_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB48_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_13 Depth 2
                                        #       Child Loop BB48_16 Depth 3
                                        #         Child Loop BB48_18 Depth 4
                                        #       Child Loop BB48_25 Depth 3
                                        #         Child Loop BB48_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	$0, -12(%rbp)
.LBB48_13:                              # %for.cond14
                                        #   Parent Loop BB48_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_16 Depth 3
                                        #         Child Loop BB48_18 Depth 4
                                        #       Child Loop BB48_25 Depth 3
                                        #         Child Loop BB48_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB48_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB48_16:                              # %for.cond27
                                        #   Parent Loop BB48_11 Depth=1
                                        #     Parent Loop BB48_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB48_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB48_18:                              # %for.cond31
                                        #   Parent Loop BB48_11 Depth=1
                                        #     Parent Loop BB48_13 Depth=2
                                        #       Parent Loop BB48_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB48_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB48_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB48_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_18
.LBB48_21:                              # %for.end40
                                        #   in Loop: Header=BB48_16 Depth=3
	jmp	.LBB48_22
.LBB48_22:                              # %for.inc41
                                        #   in Loop: Header=BB48_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_16
.LBB48_23:                              # %for.end43
                                        #   in Loop: Header=BB48_13 Depth=2
	jmp	.LBB48_36
.LBB48_24:                              # %if.else44
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB48_25:                              # %for.cond46
                                        #   Parent Loop BB48_11 Depth=1
                                        #     Parent Loop BB48_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB48_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB48_27:                              # %for.cond50
                                        #   Parent Loop BB48_11 Depth=1
                                        #     Parent Loop BB48_13 Depth=2
                                        #       Parent Loop BB48_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB48_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB48_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB48_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB48_31
.LBB48_30:                              # %cond.false
                                        #   in Loop: Header=BB48_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB48_31:                              # %cond.end
                                        #   in Loop: Header=BB48_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB48_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_27
.LBB48_33:                              # %for.end76
                                        #   in Loop: Header=BB48_25 Depth=3
	jmp	.LBB48_34
.LBB48_34:                              # %for.inc77
                                        #   in Loop: Header=BB48_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_25
.LBB48_35:                              # %for.end79
                                        #   in Loop: Header=BB48_13 Depth=2
	jmp	.LBB48_36
.LBB48_36:                              # %if.end
                                        #   in Loop: Header=BB48_13 Depth=2
	jmp	.LBB48_37
.LBB48_37:                              # %for.inc80
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_13
.LBB48_38:                              # %for.end82
                                        #   in Loop: Header=BB48_11 Depth=1
	jmp	.LBB48_39
.LBB48_39:                              # %for.inc83
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_11
.LBB48_40:                              # %for.end85
	jmp	.LBB48_41
.LBB48_41:                              # %if.end86
	cmpl	$71518853, -28(%rbp)    # imm = 0x4434A85
	jne	.LBB48_43
.LBB48_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_42
.Lfunc_end48:
	.size	UpdatePixelMap.19, .Lfunc_end48-UpdatePixelMap.19
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.20 # -- Begin function SetRefAndMotionVectors.20
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.20,@function
SetRefAndMotionVectors.20:              # @SetRefAndMotionVectors.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1655511915, -72(%rbp)  # imm = 0x62AD1B6B
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB49_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB49_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB49_4
.LBB49_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB49_5
.LBB49_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB49_5
.LBB49_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB49_9
.LBB49_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB49_9
.LBB49_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB49_19
# %bb.10:                               # %if.then
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB49_11 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_13:                              # %for.cond34
                                        #   Parent Loop BB49_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB49_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB49_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_13
.LBB49_16:                              # %for.end
                                        #   in Loop: Header=BB49_11 Depth=1
	jmp	.LBB49_17
.LBB49_17:                              # %for.inc117
                                        #   in Loop: Header=BB49_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_11
.LBB49_18:                              # %for.end119
	jmp	.LBB49_64
.LBB49_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB49_29
# %bb.20:                               # %if.then121
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_23:                              # %for.cond126
                                        #   Parent Loop BB49_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB49_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB49_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_23
.LBB49_26:                              # %for.end211
                                        #   in Loop: Header=BB49_21 Depth=1
	jmp	.LBB49_27
.LBB49_27:                              # %for.inc212
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_21
.LBB49_28:                              # %for.end214
	jmp	.LBB49_64
.LBB49_29:                              # %if.else
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB49_30 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_32:                              # %for.cond219
                                        #   Parent Loop BB49_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB49_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB49_35:                              # %if.end255
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB49_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB49_46
.LBB49_37:                              # %if.then261
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB49_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB49_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB49_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB49_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB49_43
.LBB49_42:                              # %cond.false274
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB49_43:                              # %cond.end275
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB49_45
.LBB49_44:                              # %if.else342
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB49_45:                              # %if.end424
                                        #   in Loop: Header=BB49_32 Depth=2
	jmp	.LBB49_47
.LBB49_46:                              # %if.else425
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB49_47:                              # %if.end468
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB49_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB49_58
.LBB49_49:                              # %if.then474
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB49_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB49_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB49_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB49_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB49_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB49_55
.LBB49_54:                              # %cond.false490
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB49_55:                              # %cond.end492
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB49_57
.LBB49_56:                              # %if.else559
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB49_57:                              # %if.end641
                                        #   in Loop: Header=BB49_32 Depth=2
	jmp	.LBB49_59
.LBB49_58:                              # %if.else642
                                        #   in Loop: Header=BB49_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB49_59:                              # %if.end685
                                        #   in Loop: Header=BB49_32 Depth=2
	jmp	.LBB49_60
.LBB49_60:                              # %for.inc686
                                        #   in Loop: Header=BB49_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_32
.LBB49_61:                              # %for.end688
                                        #   in Loop: Header=BB49_30 Depth=1
	jmp	.LBB49_62
.LBB49_62:                              # %for.inc689
                                        #   in Loop: Header=BB49_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_30
.LBB49_63:                              # %for.end691
	jmp	.LBB49_64
.LBB49_64:                              # %if.end692
	cmpl	$1655511915, -72(%rbp)  # imm = 0x62AD1B6B
	jne	.LBB49_66
.LBB49_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_65
.Lfunc_end49:
	.size	SetRefAndMotionVectors.20, .Lfunc_end49-SetRefAndMotionVectors.20
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.21 # -- Begin function SetCoeffAndReconstruction8x8.21
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.21,@function
SetCoeffAndReconstruction8x8.21:        # @SetCoeffAndReconstruction8x8.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$420698252, -36(%rbp)   # imm = 0x1913588C
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB50_4
.LBB50_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB50_4
.LBB50_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB50_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB50_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB50_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB50_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB50_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_6
.LBB50_9:                               # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB50_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB50_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	$0, -4(%rbp)
.LBB50_13:                              # %for.cond20
                                        #   Parent Loop BB50_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end52
                                        #   in Loop: Header=BB50_11 Depth=1
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc53
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end55
	jmp	.LBB50_28
.LBB50_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB50_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB50_20 Depth=1
	movl	$0, -4(%rbp)
.LBB50_22:                              # %for.cond60
                                        #   Parent Loop BB50_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB50_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB50_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_22
.LBB50_25:                              # %for.end86
                                        #   in Loop: Header=BB50_20 Depth=1
	jmp	.LBB50_26
.LBB50_26:                              # %for.inc87
                                        #   in Loop: Header=BB50_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_20
.LBB50_27:                              # %for.end89
	jmp	.LBB50_28
.LBB50_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB50_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB50_29 Depth=1
	movl	$0, -4(%rbp)
.LBB50_31:                              # %for.cond94
                                        #   Parent Loop BB50_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB50_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB50_35
.LBB50_34:                              # %cond.false127
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB50_35
.LBB50_35:                              # %cond.end128
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB50_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_31
.LBB50_37:                              # %for.end141
                                        #   in Loop: Header=BB50_29 Depth=1
	jmp	.LBB50_38
.LBB50_38:                              # %for.inc142
                                        #   in Loop: Header=BB50_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_29
.LBB50_39:                              # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB50_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB50_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB50_41 Depth=1
	movl	$0, -4(%rbp)
.LBB50_43:                              # %for.cond151
                                        #   Parent Loop BB50_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB50_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB50_47
.LBB50_46:                              # %cond.false185
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB50_47
.LBB50_47:                              # %cond.end186
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB50_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_43
.LBB50_49:                              # %for.end200
                                        #   in Loop: Header=BB50_41 Depth=1
	jmp	.LBB50_50
.LBB50_50:                              # %for.inc201
                                        #   in Loop: Header=BB50_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_41
.LBB50_51:                              # %for.end203
	jmp	.LBB50_52
.LBB50_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB50_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_55 Depth 2
                                        #       Child Loop BB50_57 Depth 3
                                        #         Child Loop BB50_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB50_53 Depth=1
	movl	$0, -12(%rbp)
.LBB50_55:                              # %for.cond209
                                        #   Parent Loop BB50_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_57 Depth 3
                                        #         Child Loop BB50_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB50_55 Depth=2
	movl	$0, -8(%rbp)
.LBB50_57:                              # %for.cond213
                                        #   Parent Loop BB50_53 Depth=1
                                        #     Parent Loop BB50_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB50_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB50_57 Depth=3
	movl	$0, -4(%rbp)
.LBB50_59:                              # %for.cond217
                                        #   Parent Loop BB50_53 Depth=1
                                        #     Parent Loop BB50_55 Depth=2
                                        #       Parent Loop BB50_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB50_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB50_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB50_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_59
.LBB50_62:                              # %for.end239
                                        #   in Loop: Header=BB50_57 Depth=3
	jmp	.LBB50_63
.LBB50_63:                              # %for.inc240
                                        #   in Loop: Header=BB50_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_57
.LBB50_64:                              # %for.end242
                                        #   in Loop: Header=BB50_55 Depth=2
	jmp	.LBB50_65
.LBB50_65:                              # %for.inc243
                                        #   in Loop: Header=BB50_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_55
.LBB50_66:                              # %for.end245
                                        #   in Loop: Header=BB50_53 Depth=1
	jmp	.LBB50_67
.LBB50_67:                              # %for.inc246
                                        #   in Loop: Header=BB50_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_53
.LBB50_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB50_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB50_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB50_83
.LBB50_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB50_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB50_72 Depth=1
	movl	$0, -4(%rbp)
.LBB50_74:                              # %for.cond262
                                        #   Parent Loop BB50_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB50_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB50_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_78
.LBB50_77:                              # %if.else278
                                        #   in Loop: Header=BB50_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB50_78:                              # %if.end283
                                        #   in Loop: Header=BB50_74 Depth=2
	jmp	.LBB50_79
.LBB50_79:                              # %for.inc284
                                        #   in Loop: Header=BB50_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_74
.LBB50_80:                              # %for.end286
                                        #   in Loop: Header=BB50_72 Depth=1
	jmp	.LBB50_81
.LBB50_81:                              # %for.inc287
                                        #   in Loop: Header=BB50_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_72
.LBB50_82:                              # %for.end289
	jmp	.LBB50_95
.LBB50_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB50_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB50_84 Depth=1
	movl	$0, -4(%rbp)
.LBB50_86:                              # %for.cond297
                                        #   Parent Loop BB50_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB50_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB50_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_90
.LBB50_89:                              # %if.else317
                                        #   in Loop: Header=BB50_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB50_90:                              # %if.end326
                                        #   in Loop: Header=BB50_86 Depth=2
	jmp	.LBB50_91
.LBB50_91:                              # %for.inc327
                                        #   in Loop: Header=BB50_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_86
.LBB50_92:                              # %for.end329
                                        #   in Loop: Header=BB50_84 Depth=1
	jmp	.LBB50_93
.LBB50_93:                              # %for.inc330
                                        #   in Loop: Header=BB50_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_84
.LBB50_94:                              # %for.end332
	jmp	.LBB50_95
.LBB50_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB50_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB50_96 Depth=1
	movl	$0, -4(%rbp)
.LBB50_98:                              # %for.cond338
                                        #   Parent Loop BB50_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB50_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB50_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_98
.LBB50_101:                             # %for.end384
                                        #   in Loop: Header=BB50_96 Depth=1
	jmp	.LBB50_102
.LBB50_102:                             # %for.inc385
                                        #   in Loop: Header=BB50_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_96
.LBB50_103:                             # %for.end387
	jmp	.LBB50_157
.LBB50_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB50_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_107 Depth 2
                                        #       Child Loop BB50_109 Depth 3
                                        #         Child Loop BB50_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB50_105 Depth=1
	movl	$0, -12(%rbp)
.LBB50_107:                             # %for.cond394
                                        #   Parent Loop BB50_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_109 Depth 3
                                        #         Child Loop BB50_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB50_107 Depth=2
	movl	$0, -8(%rbp)
.LBB50_109:                             # %for.cond398
                                        #   Parent Loop BB50_105 Depth=1
                                        #     Parent Loop BB50_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB50_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB50_109 Depth=3
	movl	$0, -4(%rbp)
.LBB50_111:                             # %for.cond402
                                        #   Parent Loop BB50_105 Depth=1
                                        #     Parent Loop BB50_107 Depth=2
                                        #       Parent Loop BB50_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB50_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB50_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB50_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_111
.LBB50_114:                             # %for.end425
                                        #   in Loop: Header=BB50_109 Depth=3
	jmp	.LBB50_115
.LBB50_115:                             # %for.inc426
                                        #   in Loop: Header=BB50_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_109
.LBB50_116:                             # %for.end428
                                        #   in Loop: Header=BB50_107 Depth=2
	jmp	.LBB50_117
.LBB50_117:                             # %for.inc429
                                        #   in Loop: Header=BB50_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_107
.LBB50_118:                             # %for.end431
                                        #   in Loop: Header=BB50_105 Depth=1
	jmp	.LBB50_119
.LBB50_119:                             # %for.inc432
                                        #   in Loop: Header=BB50_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_105
.LBB50_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB50_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB50_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB50_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB50_136
.LBB50_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB50_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB50_125 Depth=1
	movl	$0, -4(%rbp)
.LBB50_127:                             # %for.cond458
                                        #   Parent Loop BB50_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB50_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB50_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_131
.LBB50_130:                             # %if.else478
                                        #   in Loop: Header=BB50_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB50_131:                             # %if.end483
                                        #   in Loop: Header=BB50_127 Depth=2
	jmp	.LBB50_132
.LBB50_132:                             # %for.inc484
                                        #   in Loop: Header=BB50_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_127
.LBB50_133:                             # %for.end486
                                        #   in Loop: Header=BB50_125 Depth=1
	jmp	.LBB50_134
.LBB50_134:                             # %for.inc487
                                        #   in Loop: Header=BB50_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_125
.LBB50_135:                             # %for.end489
	jmp	.LBB50_148
.LBB50_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB50_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB50_137 Depth=1
	movl	$0, -4(%rbp)
.LBB50_139:                             # %for.cond498
                                        #   Parent Loop BB50_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB50_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB50_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_143
.LBB50_142:                             # %if.else518
                                        #   in Loop: Header=BB50_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB50_143:                             # %if.end527
                                        #   in Loop: Header=BB50_139 Depth=2
	jmp	.LBB50_144
.LBB50_144:                             # %for.inc528
                                        #   in Loop: Header=BB50_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_139
.LBB50_145:                             # %for.end530
                                        #   in Loop: Header=BB50_137 Depth=1
	jmp	.LBB50_146
.LBB50_146:                             # %for.inc531
                                        #   in Loop: Header=BB50_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_137
.LBB50_147:                             # %for.end533
	jmp	.LBB50_148
.LBB50_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB50_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB50_149 Depth=1
	movl	$0, -4(%rbp)
.LBB50_151:                             # %for.cond539
                                        #   Parent Loop BB50_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB50_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB50_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_151
.LBB50_154:                             # %for.end585
                                        #   in Loop: Header=BB50_149 Depth=1
	jmp	.LBB50_155
.LBB50_155:                             # %for.inc586
                                        #   in Loop: Header=BB50_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_149
.LBB50_156:                             # %for.end588
	jmp	.LBB50_157
.LBB50_157:                             # %if.end589
	cmpl	$420698252, -36(%rbp)   # imm = 0x1913588C
	jne	.LBB50_159
.LBB50_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_158
.Lfunc_end50:
	.size	SetCoeffAndReconstruction8x8.21, .Lfunc_end50-SetCoeffAndReconstruction8x8.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.22
.LCPI51_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI51_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.22
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.22,@function
Mode_Decision_for_8x8IntraBlocks.22:    # @Mode_Decision_for_8x8IntraBlocks.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI51_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1874894643, -28(%rbp)  # imm = 0x6FC09F33
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB51_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB51_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$1, -16(%rbp)
.LBB51_4:                               # %if.end
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1874894643, -28(%rbp)  # imm = 0x6FC09F33
	jne	.LBB51_8
.LBB51_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_7
.Lfunc_end51:
	.size	Mode_Decision_for_8x8IntraBlocks.22, .Lfunc_end51-Mode_Decision_for_8x8IntraBlocks.22
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.23   # -- Begin function SetMotionVectorsMB.23
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.23,@function
SetMotionVectorsMB.23:                  # @SetMotionVectorsMB.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1849667166, -68(%rbp)  # imm = 0x6E3FAE5E
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB52_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_3:                               # %for.cond3
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB52_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB52_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB52_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB52_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB52_10
.LBB52_9:                               # %cond.false
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB52_10:                              # %cond.end
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB52_11:                              # %if.end
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB52_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB52_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB52_15
.LBB52_14:                              # %if.else
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB52_15:                              # %if.end89
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_29
.LBB52_16:                              # %if.else90
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB52_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB52_28
.LBB52_18:                              # %if.else122
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB52_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB52_27
.LBB52_20:                              # %if.else174
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB52_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB52_26
.LBB52_22:                              # %if.else226
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB52_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB52_25
.LBB52_24:                              # %if.else298
                                        #   in Loop: Header=BB52_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB52_25:                              # %if.end299
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_26
.LBB52_26:                              # %if.end300
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_27
.LBB52_27:                              # %if.end301
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_28
.LBB52_28:                              # %if.end302
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_29
.LBB52_29:                              # %if.end303
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_30
.LBB52_30:                              # %for.inc
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_3
.LBB52_31:                              # %for.end
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_32
.LBB52_32:                              # %for.inc304
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_1
.LBB52_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB52_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_37 Depth 2
                                        #       Child Loop BB52_39 Depth 3
                                        #         Child Loop BB52_41 Depth 4
                                        #           Child Loop BB52_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB52_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB52_35 Depth=1
	movl	$0, -8(%rbp)
.LBB52_37:                              # %for.cond313
                                        #   Parent Loop BB52_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_39 Depth 3
                                        #         Child Loop BB52_41 Depth 4
                                        #           Child Loop BB52_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB52_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB52_37 Depth=2
	movl	$0, -20(%rbp)
.LBB52_39:                              # %for.cond317
                                        #   Parent Loop BB52_35 Depth=1
                                        #     Parent Loop BB52_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_41 Depth 4
                                        #           Child Loop BB52_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB52_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB52_39 Depth=3
	movl	$0, -24(%rbp)
.LBB52_41:                              # %for.cond321
                                        #   Parent Loop BB52_35 Depth=1
                                        #     Parent Loop BB52_37 Depth=2
                                        #       Parent Loop BB52_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB52_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB52_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB52_41 Depth=4
	movl	$0, -28(%rbp)
.LBB52_43:                              # %for.cond325
                                        #   Parent Loop BB52_35 Depth=1
                                        #     Parent Loop BB52_37 Depth=2
                                        #       Parent Loop BB52_39 Depth=3
                                        #         Parent Loop BB52_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB52_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB52_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB52_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_43
.LBB52_46:                              # %for.end423
                                        #   in Loop: Header=BB52_41 Depth=4
	jmp	.LBB52_47
.LBB52_47:                              # %for.inc424
                                        #   in Loop: Header=BB52_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_41
.LBB52_48:                              # %for.end426
                                        #   in Loop: Header=BB52_39 Depth=3
	jmp	.LBB52_49
.LBB52_49:                              # %for.inc427
                                        #   in Loop: Header=BB52_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_39
.LBB52_50:                              # %for.end429
                                        #   in Loop: Header=BB52_37 Depth=2
	jmp	.LBB52_51
.LBB52_51:                              # %for.inc430
                                        #   in Loop: Header=BB52_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_37
.LBB52_52:                              # %for.end432
                                        #   in Loop: Header=BB52_35 Depth=1
	jmp	.LBB52_53
.LBB52_53:                              # %for.inc433
                                        #   in Loop: Header=BB52_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_35
.LBB52_54:                              # %for.end435
	jmp	.LBB52_55
.LBB52_55:                              # %if.end436
	cmpl	$1849667166, -68(%rbp)  # imm = 0x6E3FAE5E
	jne	.LBB52_57
.LBB52_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_56
.Lfunc_end52:
	.size	SetMotionVectorsMB.23, .Lfunc_end52-SetMotionVectorsMB.23
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.24         # -- Begin function RestoreMV8x8.24
	.p2align	4, 0x90
	.type	RestoreMV8x8.24,@function
RestoreMV8x8.24:                        # @RestoreMV8x8.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$823076200, -16(%rbp)   # imm = 0x310F2568
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_1
.LBB53_4:                               # %for.end
	cmpl	$823076200, -16(%rbp)   # imm = 0x310F2568
	jne	.LBB53_6
.LBB53_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_5
.Lfunc_end53:
	.size	RestoreMV8x8.24, .Lfunc_end53-RestoreMV8x8.24
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.25   # -- Begin function SetMotionVectorsMB.25
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.25,@function
SetMotionVectorsMB.25:                  # @SetMotionVectorsMB.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1585686735, -72(%rbp)  # imm = 0x5E83A8CF
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_3:                               # %for.cond3
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB54_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB54_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB54_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB54_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB54_10
.LBB54_9:                               # %cond.false
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB54_10:                              # %cond.end
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB54_11:                              # %if.end
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB54_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB54_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB54_15
.LBB54_14:                              # %if.else
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB54_15:                              # %if.end89
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_29
.LBB54_16:                              # %if.else90
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB54_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB54_28
.LBB54_18:                              # %if.else122
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB54_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB54_27
.LBB54_20:                              # %if.else174
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB54_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB54_26
.LBB54_22:                              # %if.else226
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB54_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB54_25
.LBB54_24:                              # %if.else298
                                        #   in Loop: Header=BB54_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB54_25:                              # %if.end299
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_26
.LBB54_26:                              # %if.end300
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_27
.LBB54_27:                              # %if.end301
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_28
.LBB54_28:                              # %if.end302
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_29
.LBB54_29:                              # %if.end303
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_30
.LBB54_30:                              # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_3
.LBB54_31:                              # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_32
.LBB54_32:                              # %for.inc304
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_1
.LBB54_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB54_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_37 Depth 2
                                        #       Child Loop BB54_39 Depth 3
                                        #         Child Loop BB54_41 Depth 4
                                        #           Child Loop BB54_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB54_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB54_35 Depth=1
	movl	$0, -8(%rbp)
.LBB54_37:                              # %for.cond313
                                        #   Parent Loop BB54_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_39 Depth 3
                                        #         Child Loop BB54_41 Depth 4
                                        #           Child Loop BB54_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB54_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB54_37 Depth=2
	movl	$0, -20(%rbp)
.LBB54_39:                              # %for.cond317
                                        #   Parent Loop BB54_35 Depth=1
                                        #     Parent Loop BB54_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_41 Depth 4
                                        #           Child Loop BB54_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB54_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB54_39 Depth=3
	movl	$0, -24(%rbp)
.LBB54_41:                              # %for.cond321
                                        #   Parent Loop BB54_35 Depth=1
                                        #     Parent Loop BB54_37 Depth=2
                                        #       Parent Loop BB54_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB54_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB54_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB54_41 Depth=4
	movl	$0, -28(%rbp)
.LBB54_43:                              # %for.cond325
                                        #   Parent Loop BB54_35 Depth=1
                                        #     Parent Loop BB54_37 Depth=2
                                        #       Parent Loop BB54_39 Depth=3
                                        #         Parent Loop BB54_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB54_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB54_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB54_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB54_43
.LBB54_46:                              # %for.end423
                                        #   in Loop: Header=BB54_41 Depth=4
	jmp	.LBB54_47
.LBB54_47:                              # %for.inc424
                                        #   in Loop: Header=BB54_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_41
.LBB54_48:                              # %for.end426
                                        #   in Loop: Header=BB54_39 Depth=3
	jmp	.LBB54_49
.LBB54_49:                              # %for.inc427
                                        #   in Loop: Header=BB54_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_39
.LBB54_50:                              # %for.end429
                                        #   in Loop: Header=BB54_37 Depth=2
	jmp	.LBB54_51
.LBB54_51:                              # %for.inc430
                                        #   in Loop: Header=BB54_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_37
.LBB54_52:                              # %for.end432
                                        #   in Loop: Header=BB54_35 Depth=1
	jmp	.LBB54_53
.LBB54_53:                              # %for.inc433
                                        #   in Loop: Header=BB54_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_35
.LBB54_54:                              # %for.end435
	jmp	.LBB54_55
.LBB54_55:                              # %if.end436
	cmpl	$1585686735, -72(%rbp)  # imm = 0x5E83A8CF
	jne	.LBB54_57
.LBB54_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_56
.Lfunc_end54:
	.size	SetMotionVectorsMB.25, .Lfunc_end54-SetMotionVectorsMB.25
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.26 # -- Begin function field_flag_inference.26
	.p2align	4, 0x90
	.type	field_flag_inference.26,@function
field_flag_inference.26:                # @field_flag_inference.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1014838749, -28(%rbp)  # imm = 0x3C7D35DD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB55_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_6
.LBB55_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB55_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_5
.LBB55_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB55_5:                               # %if.end
	jmp	.LBB55_6
.LBB55_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$1014838749, -28(%rbp)  # imm = 0x3C7D35DD
	jne	.LBB55_8
.LBB55_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_7
.Lfunc_end55:
	.size	field_flag_inference.26, .Lfunc_end55-field_flag_inference.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.27
.LCPI56_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI56_1:
	.quad	4622945017495814144     # double 12
.LCPI56_2:
	.quad	4607182418800017408     # double 1
.LCPI56_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI56_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI56_5:
	.quad	4611686018427387904     # double 2
.LCPI56_6:
	.quad	4613937818241073152     # double 3
.LCPI56_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI56_8:
	.quad	4616189618054758400     # double 4
.LCPI56_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI56_10:
	.quad	4618441417868443648     # double 6
.LCPI56_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI56_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI56_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI56_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI56_15:
	.quad	4602678819172646912     # double 0.5
.LCPI56_16:
	.quad	4679240012837945344     # double 65536
.LCPI56_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI56_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.27
	.p2align	4, 0x90
	.type	encode_one_macroblock.27,@function
encode_one_macroblock.27:               # @encode_one_macroblock.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$698294322, -412(%rbp)  # imm = 0x299F2032
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -268(%rbp)
	movl	$0, -188(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -312(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB56_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB56_4
.LBB56_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB56_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB56_5
.LBB56_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB56_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -304(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -408(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB56_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB56_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB56_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB56_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB56_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB56_11:                              # %land.end
.LBB56_12:                              # %lor.end36
.LBB56_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -320(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB56_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB56_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB56_17:                              # %lor.end51
.LBB56_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -288(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB56_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB56_21
.LBB56_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB56_21
.LBB56_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB56_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB56_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB56_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB56_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB56_27
.LBB56_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB56_27:                              # %if.end
	jmp	.LBB56_29
.LBB56_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB56_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB56_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB56_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB56_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB56_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB56_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB56_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB56_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB56_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB56_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB56_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB56_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB56_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB56_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB56_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB56_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-408(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB56_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB56_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB56_53 Depth=1
	movl	$0, -56(%rbp)
.LBB56_55:                              # %for.cond156
                                        #   Parent Loop BB56_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB56_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB56_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB56_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB56_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB56_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB56_59:                              # %if.end183
                                        #   in Loop: Header=BB56_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB56_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB56_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB56_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB56_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB56_62:                              # %if.end202
                                        #   in Loop: Header=BB56_55 Depth=2
	jmp	.LBB56_63
.LBB56_63:                              # %for.inc
                                        #   in Loop: Header=BB56_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_55
.LBB56_64:                              # %for.end
                                        #   in Loop: Header=BB56_53 Depth=1
	jmp	.LBB56_65
.LBB56_65:                              # %for.inc203
                                        #   in Loop: Header=BB56_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB56_53
.LBB56_66:                              # %for.end205
	jmp	.LBB56_93
.LBB56_67:                              # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB56_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB56_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	$0, -56(%rbp)
.LBB56_71:                              # %for.cond215
                                        #   Parent Loop BB56_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB56_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB56_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB56_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB56_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB56_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB56_75:                              # %if.end244
                                        #   in Loop: Header=BB56_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB56_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB56_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB56_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB56_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB56_78:                              # %if.end263
                                        #   in Loop: Header=BB56_71 Depth=2
	jmp	.LBB56_79
.LBB56_79:                              # %for.inc264
                                        #   in Loop: Header=BB56_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_71
.LBB56_80:                              # %for.end266
                                        #   in Loop: Header=BB56_69 Depth=1
	jmp	.LBB56_81
.LBB56_81:                              # %for.inc267
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB56_69
.LBB56_82:                              # %for.end269
	jmp	.LBB56_92
.LBB56_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB56_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB56_84 Depth=1
	movl	$0, -56(%rbp)
.LBB56_86:                              # %for.cond277
                                        #   Parent Loop BB56_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB56_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB56_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_86
.LBB56_89:                              # %for.end290
                                        #   in Loop: Header=BB56_84 Depth=1
	jmp	.LBB56_90
.LBB56_90:                              # %for.inc291
                                        #   in Loop: Header=BB56_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB56_84
.LBB56_91:                              # %for.end293
	jmp	.LBB56_92
.LBB56_92:                              # %if.end294
	jmp	.LBB56_93
.LBB56_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI56_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB56_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB56_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB56_99
.LBB56_98:                              # %if.else315
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB56_99:                              # %if.end326
	jmp	.LBB56_159
.LBB56_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB56_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI56_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB56_104
.LBB56_103:                             # %cond.false336
	vmovsd	.LCPI56_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB56_104:                             # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB56_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI56_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB56_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI56_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI56_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI56_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_109
.LBB56_108:                             # %cond.false357
	vmovsd	.LCPI56_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB56_109:                             # %cond.end359
	vmovsd	.LCPI56_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI56_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_115
.LBB56_111:                             # %cond.false364
	vmovsd	.LCPI56_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI56_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI56_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_114
.LBB56_113:                             # %cond.false369
	vmovsd	.LCPI56_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB56_114:                             # %cond.end371
.LBB56_115:                             # %cond.end373
	jmp	.LBB56_129
.LBB56_116:                             # %cond.false375
	cmpl	$0, -304(%rbp)
	je	.LBB56_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_120
.LBB56_119:                             # %cond.false382
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB56_120:                             # %cond.end384
	vmovsd	.LCPI56_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI56_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_126
.LBB56_122:                             # %cond.false389
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_125
.LBB56_124:                             # %cond.false394
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB56_125:                             # %cond.end396
.LBB56_126:                             # %cond.end398
	jmp	.LBB56_128
.LBB56_127:                             # %cond.false400
	vmovsd	.LCPI56_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_128
.LBB56_128:                             # %cond.end401
.LBB56_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB56_146
.LBB56_130:                             # %if.else406
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI56_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB56_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI56_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_145
.LBB56_132:                             # %cond.false415
	cmpl	$0, -304(%rbp)
	je	.LBB56_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_136
.LBB56_135:                             # %cond.false422
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB56_136:                             # %cond.end424
	vmovsd	.LCPI56_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI56_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_142
.LBB56_138:                             # %cond.false429
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB56_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI56_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_141
.LBB56_140:                             # %cond.false434
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB56_141:                             # %cond.end436
.LBB56_142:                             # %cond.end438
	jmp	.LBB56_144
.LBB56_143:                             # %cond.false440
	vmovsd	.LCPI56_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB56_144
.LBB56_144:                             # %cond.end441
.LBB56_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB56_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB56_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB56_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI56_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI56_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI56_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB56_152
.LBB56_151:                             # %cond.false465
	vmovsd	.LCPI56_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB56_152:                             # %cond.end473
	vmovsd	.LCPI56_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB56_153:                             # %if.end477
	jmp	.LBB56_158
.LBB56_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB56_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI56_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB56_157:                             # %if.end487
	jmp	.LBB56_158
.LBB56_158:                             # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB56_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB56_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI56_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB56_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB56_166
.LBB56_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB56_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB56_165
.LBB56_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB56_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB56_166:                             # %if.end510
	vmovsd	.LCPI56_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI56_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB56_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB56_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB56_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB56_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_167
.LBB56_170:                             # %for.end522
	movl	$0, -264(%rbp)
.LBB56_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_181 Depth 2
                                        #       Child Loop BB56_184 Depth 3
                                        #         Child Loop BB56_190 Depth 4
                                        #         Child Loop BB56_210 Depth 4
                                        #         Child Loop BB56_300 Depth 4
                                        #           Child Loop BB56_302 Depth 5
                                        #         Child Loop BB56_309 Depth 4
                                        #           Child Loop BB56_311 Depth 5
                                        #         Child Loop BB56_326 Depth 4
                                        #           Child Loop BB56_328 Depth 5
                                        #         Child Loop BB56_335 Depth 4
                                        #           Child Loop BB56_337 Depth 5
                                        #         Child Loop BB56_355 Depth 4
                                        #           Child Loop BB56_357 Depth 5
                                        #         Child Loop BB56_374 Depth 4
                                        #           Child Loop BB56_376 Depth 5
                                        #     Child Loop BB56_416 Depth 2
                                        #       Child Loop BB56_418 Depth 3
                                        #         Child Loop BB56_445 Depth 4
                                        #         Child Loop BB56_464 Depth 4
                                        #           Child Loop BB56_466 Depth 5
                                        #         Child Loop BB56_473 Depth 4
                                        #         Child Loop BB56_508 Depth 4
                                        #           Child Loop BB56_510 Depth 5
                                        #         Child Loop BB56_532 Depth 4
                                        #           Child Loop BB56_534 Depth 5
                                        #             Child Loop BB56_536 Depth 6
                                        #         Child Loop BB56_544 Depth 4
                                        #           Child Loop BB56_546 Depth 5
                                        #       Child Loop BB56_569 Depth 3
                                        #         Child Loop BB56_571 Depth 4
                                        #           Child Loop BB56_573 Depth 5
                                        #       Child Loop BB56_581 Depth 3
                                        #         Child Loop BB56_583 Depth 4
                                        #     Child Loop BB56_601 Depth 2
                                        #       Child Loop BB56_603 Depth 3
                                        #         Child Loop BB56_614 Depth 4
                                        #         Child Loop BB56_633 Depth 4
                                        #           Child Loop BB56_635 Depth 5
                                        #         Child Loop BB56_642 Depth 4
                                        #         Child Loop BB56_677 Depth 4
                                        #           Child Loop BB56_679 Depth 5
                                        #         Child Loop BB56_701 Depth 4
                                        #           Child Loop BB56_703 Depth 5
                                        #             Child Loop BB56_705 Depth 6
                                        #         Child Loop BB56_713 Depth 4
                                        #           Child Loop BB56_715 Depth 5
                                        #         Child Loop BB56_723 Depth 4
                                        #           Child Loop BB56_725 Depth 5
                                        #       Child Loop BB56_745 Depth 3
                                        #         Child Loop BB56_747 Depth 4
                                        #           Child Loop BB56_749 Depth 5
                                        #       Child Loop BB56_757 Depth 3
                                        #         Child Loop BB56_759 Depth 4
                                        #       Child Loop BB56_766 Depth 3
                                        #         Child Loop BB56_768 Depth 4
                                        #       Child Loop BB56_778 Depth 3
                                        #         Child Loop BB56_780 Depth 4
                                        #       Child Loop BB56_786 Depth 3
                                        #       Child Loop BB56_791 Depth 3
                                        #         Child Loop BB56_793 Depth 4
                                        #     Child Loop BB56_803 Depth 2
                                        #       Child Loop BB56_805 Depth 3
                                        #     Child Loop BB56_835 Depth 2
                                        #       Child Loop BB56_853 Depth 3
                                        #         Child Loop BB56_908 Depth 4
                                        #           Child Loop BB56_911 Depth 5
                                        #             Child Loop BB56_913 Depth 6
                                        #           Child Loop BB56_920 Depth 5
                                        #             Child Loop BB56_922 Depth 6
                                        #         Child Loop BB56_955 Depth 4
                                        #           Child Loop BB56_957 Depth 5
                                        #     Child Loop BB56_981 Depth 2
                                        #       Child Loop BB56_1014 Depth 3
                                        #         Child Loop BB56_1017 Depth 4
                                        #           Child Loop BB56_1019 Depth 5
                                        #         Child Loop BB56_1026 Depth 4
                                        #           Child Loop BB56_1028 Depth 5
                                        #       Child Loop BB56_1061 Depth 3
                                        #         Child Loop BB56_1063 Depth 4
                                        #     Child Loop BB56_1113 Depth 2
                                        #       Child Loop BB56_1115 Depth 3
                                        #     Child Loop BB56_1127 Depth 2
                                        #       Child Loop BB56_1129 Depth 3
                                        #         Child Loop BB56_1131 Depth 4
                                        #     Child Loop BB56_1141 Depth 2
                                        #       Child Loop BB56_1143 Depth 3
                                        #     Child Loop BB56_1152 Depth 2
                                        #       Child Loop BB56_1154 Depth 3
                                        #     Child Loop BB56_1160 Depth 2
                                        #       Child Loop BB56_1162 Depth 3
                                        #     Child Loop BB56_1174 Depth 2
                                        #       Child Loop BB56_1176 Depth 3
                                        #         Child Loop BB56_1178 Depth 4
                                        #     Child Loop BB56_1189 Depth 2
                                        #       Child Loop BB56_1191 Depth 3
                                        #     Child Loop BB56_1202 Depth 2
                                        #       Child Loop BB56_1204 Depth 3
                                        #     Child Loop BB56_1211 Depth 2
                                        #       Child Loop BB56_1213 Depth 3
                                        #     Child Loop BB56_1221 Depth 2
                                        #       Child Loop BB56_1223 Depth 3
                                        #     Child Loop BB56_1229 Depth 2
                                        #       Child Loop BB56_1231 Depth 3
                                        #     Child Loop BB56_1237 Depth 2
                                        #       Child Loop BB56_1239 Depth 3
                                        #     Child Loop BB56_1245 Depth 2
                                        #       Child Loop BB56_1247 Depth 3
	movl	-264(%rbp), %eax
	cmpl	-320(%rbp), %eax
	jge	.LBB56_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$2, -320(%rbp)
	jne	.LBB56_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB56_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB56_176
.LBB56_175:                             # %if.else534
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB56_176:                             # %if.end536
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_177
.LBB56_177:                             # %if.end537
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB56_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB56_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB56_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB56_180:                             # %if.end542
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB56_181:                             # %for.cond543
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_184 Depth 3
                                        #         Child Loop BB56_190 Depth 4
                                        #         Child Loop BB56_210 Depth 4
                                        #         Child Loop BB56_300 Depth 4
                                        #           Child Loop BB56_302 Depth 5
                                        #         Child Loop BB56_309 Depth 4
                                        #           Child Loop BB56_311 Depth 5
                                        #         Child Loop BB56_326 Depth 4
                                        #           Child Loop BB56_328 Depth 5
                                        #         Child Loop BB56_335 Depth 4
                                        #           Child Loop BB56_337 Depth 5
                                        #         Child Loop BB56_355 Depth 4
                                        #           Child Loop BB56_357 Depth 5
                                        #         Child Loop BB56_374 Depth 4
                                        #           Child Loop BB56_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB56_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB56_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB56_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB56_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB56_184:                             # %for.cond554
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_190 Depth 4
                                        #         Child Loop BB56_210 Depth 4
                                        #         Child Loop BB56_300 Depth 4
                                        #           Child Loop BB56_302 Depth 5
                                        #         Child Loop BB56_309 Depth 4
                                        #           Child Loop BB56_311 Depth 5
                                        #         Child Loop BB56_326 Depth 4
                                        #           Child Loop BB56_328 Depth 5
                                        #         Child Loop BB56_335 Depth 4
                                        #           Child Loop BB56_337 Depth 5
                                        #         Child Loop BB56_355 Depth 4
                                        #           Child Loop BB56_357 Depth 5
                                        #         Child Loop BB56_374 Depth 4
                                        #           Child Loop BB56_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB56_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB56_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB56_187:                             # %land.end566
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB56_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB56_189:                             # %land.end574
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB56_190:                             # %for.cond577
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB56_190 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB56_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB56_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB56_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB56_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB56_206
.LBB56_194:                             # %if.then594
                                        #   in Loop: Header=BB56_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB56_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB56_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_198
.LBB56_197:                             # %cond.false604
                                        #   in Loop: Header=BB56_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_198:                             # %cond.end607
                                        #   in Loop: Header=BB56_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB56_203
.LBB56_199:                             # %cond.false610
                                        #   in Loop: Header=BB56_190 Depth=4
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB56_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB56_202
.LBB56_201:                             # %cond.false617
                                        #   in Loop: Header=BB56_190 Depth=4
	movl	$1, %eax
	jmp	.LBB56_202
.LBB56_202:                             # %cond.end618
                                        #   in Loop: Header=BB56_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_203:                             # %cond.end623
                                        #   in Loop: Header=BB56_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB56_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB56_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB56_205:                             # %if.end636
                                        #   in Loop: Header=BB56_190 Depth=4
	jmp	.LBB56_206
.LBB56_206:                             # %if.end637
                                        #   in Loop: Header=BB56_190 Depth=4
	jmp	.LBB56_207
.LBB56_207:                             # %for.inc638
                                        #   in Loop: Header=BB56_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB56_190
.LBB56_208:                             # %for.end640
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB56_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB56_210:                             # %for.cond643
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB56_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB56_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB56_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_215
.LBB56_214:                             # %cond.false660
                                        #   in Loop: Header=BB56_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_215:                             # %cond.end663
                                        #   in Loop: Header=BB56_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB56_220
.LBB56_216:                             # %cond.false667
                                        #   in Loop: Header=BB56_210 Depth=4
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB56_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB56_219
.LBB56_218:                             # %cond.false674
                                        #   in Loop: Header=BB56_210 Depth=4
	movl	$1, %eax
	jmp	.LBB56_219
.LBB56_219:                             # %cond.end675
                                        #   in Loop: Header=BB56_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_220:                             # %cond.end680
                                        #   in Loop: Header=BB56_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB56_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB56_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB56_222:                             # %if.end693
                                        #   in Loop: Header=BB56_210 Depth=4
	jmp	.LBB56_223
.LBB56_223:                             # %for.inc694
                                        #   in Loop: Header=BB56_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB56_210
.LBB56_224:                             # %for.end696
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB56_228
.LBB56_227:                             # %cond.false706
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_228:                             # %cond.end709
                                        #   in Loop: Header=BB56_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB56_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB56_231
.LBB56_230:                             # %cond.false719
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB56_231:                             # %cond.end721
                                        #   in Loop: Header=BB56_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB56_236
.LBB56_232:                             # %cond.false726
                                        #   in Loop: Header=BB56_184 Depth=3
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB56_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB56_235
.LBB56_234:                             # %cond.false733
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	$1, %eax
	jmp	.LBB56_235
.LBB56_235:                             # %cond.end734
                                        #   in Loop: Header=BB56_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_236:                             # %cond.end739
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB56_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB56_243
.LBB56_242:                             # %cond.false761
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB56_243:                             # %cond.end763
                                        #   in Loop: Header=BB56_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB56_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB56_246
.LBB56_245:                             # %cond.false773
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB56_246:                             # %cond.end775
                                        #   in Loop: Header=BB56_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB56_248
.LBB56_247:                             # %cond.false780
                                        #   in Loop: Header=BB56_184 Depth=3
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_248:                             # %cond.end784
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB56_252
.LBB56_251:                             # %cond.false797
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB56_252:                             # %cond.end799
                                        #   in Loop: Header=BB56_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB56_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB56_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB56_255
.LBB56_254:                             # %cond.false809
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB56_255:                             # %cond.end811
                                        #   in Loop: Header=BB56_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB56_257
.LBB56_256:                             # %cond.false816
                                        #   in Loop: Header=BB56_184 Depth=3
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_257:                             # %cond.end820
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	%eax, -172(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	jmp	.LBB56_259
.LBB56_258:                             # %if.else824
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
.LBB56_259:                             # %if.end825
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB56_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB56_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB56_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB56_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_285
.LBB56_266:                             # %if.else845
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB56_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB56_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB56_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB56_284
.LBB56_271:                             # %if.else859
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB56_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB56_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB56_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB56_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB56_283
.LBB56_276:                             # %if.else876
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB56_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB56_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jg	.LBB56_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB56_282
.LBB56_281:                             # %if.else893
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-172(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB56_282:                             # %if.end898
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_283
.LBB56_283:                             # %if.end899
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_284
.LBB56_284:                             # %if.end900
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_285
.LBB56_285:                             # %if.end901
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_295
.LBB56_286:                             # %if.else902
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB56_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_294
.LBB56_289:                             # %if.else910
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB56_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB56_293
.LBB56_292:                             # %if.else918
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB56_293:                             # %if.end920
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_294
.LBB56_294:                             # %if.end921
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_295
.LBB56_295:                             # %if.end922
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_297
.LBB56_296:                             # %if.else923
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB56_297:                             # %if.end925
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB56_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB56_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB56_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	$0, -24(%rbp)
.LBB56_300:                             # %for.cond933
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB56_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB56_300 Depth=4
	movl	$0, -20(%rbp)
.LBB56_302:                             # %for.cond937
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        #         Parent Loop BB56_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB56_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB56_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB56_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_302
.LBB56_305:                             # %for.end999
                                        #   in Loop: Header=BB56_300 Depth=4
	jmp	.LBB56_306
.LBB56_306:                             # %for.inc1000
                                        #   in Loop: Header=BB56_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_300
.LBB56_307:                             # %for.end1002
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_323
.LBB56_308:                             # %if.else1003
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	$0, -24(%rbp)
.LBB56_309:                             # %for.cond1004
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB56_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB56_309 Depth=4
	movl	$0, -20(%rbp)
.LBB56_311:                             # %for.cond1008
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        #         Parent Loop BB56_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB56_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB56_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB56_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB56_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB56_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB56_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB56_316
.LBB56_315:                             # %cond.false1024
                                        #   in Loop: Header=BB56_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB56_316:                             # %cond.end1025
                                        #   in Loop: Header=BB56_311 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB56_318
.LBB56_317:                             # %if.else1111
                                        #   in Loop: Header=BB56_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB56_318:                             # %if.end1217
                                        #   in Loop: Header=BB56_311 Depth=5
	jmp	.LBB56_319
.LBB56_319:                             # %for.inc1218
                                        #   in Loop: Header=BB56_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_311
.LBB56_320:                             # %for.end1220
                                        #   in Loop: Header=BB56_309 Depth=4
	jmp	.LBB56_321
.LBB56_321:                             # %for.inc1221
                                        #   in Loop: Header=BB56_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_309
.LBB56_322:                             # %for.end1223
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_323
.LBB56_323:                             # %if.end1224
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB56_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB56_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB56_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	$0, -24(%rbp)
.LBB56_326:                             # %for.cond1231
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB56_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB56_326 Depth=4
	movl	$0, -20(%rbp)
.LBB56_328:                             # %for.cond1235
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        #         Parent Loop BB56_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB56_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB56_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB56_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_328
.LBB56_331:                             # %for.end1303
                                        #   in Loop: Header=BB56_326 Depth=4
	jmp	.LBB56_332
.LBB56_332:                             # %for.inc1304
                                        #   in Loop: Header=BB56_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_326
.LBB56_333:                             # %for.end1306
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_351
.LBB56_334:                             # %if.else1307
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	$0, -24(%rbp)
.LBB56_335:                             # %for.cond1308
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB56_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB56_335 Depth=4
	movl	$0, -20(%rbp)
.LBB56_337:                             # %for.cond1312
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        #         Parent Loop BB56_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB56_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB56_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB56_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB56_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB56_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB56_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB56_342
.LBB56_341:                             # %cond.false1330
                                        #   in Loop: Header=BB56_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB56_342:                             # %cond.end1332
                                        #   in Loop: Header=BB56_337 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB56_346
.LBB56_343:                             # %if.else1419
                                        #   in Loop: Header=BB56_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB56_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB56_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB56_345:                             # %if.end1529
                                        #   in Loop: Header=BB56_337 Depth=5
	jmp	.LBB56_346
.LBB56_346:                             # %if.end1530
                                        #   in Loop: Header=BB56_337 Depth=5
	jmp	.LBB56_347
.LBB56_347:                             # %for.inc1531
                                        #   in Loop: Header=BB56_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_337
.LBB56_348:                             # %for.end1533
                                        #   in Loop: Header=BB56_335 Depth=4
	jmp	.LBB56_349
.LBB56_349:                             # %for.inc1534
                                        #   in Loop: Header=BB56_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_335
.LBB56_350:                             # %for.end1536
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_351
.LBB56_351:                             # %if.end1537
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_352
.LBB56_352:                             # %if.end1538
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_393
.LBB56_353:                             # %if.else1539
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB56_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB56_355:                             # %for.cond1546
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB56_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB56_355 Depth=4
	movl	$0, -20(%rbp)
.LBB56_357:                             # %for.cond1550
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        #         Parent Loop BB56_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB56_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB56_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB56_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB56_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB56_361
.LBB56_360:                             # %if.else1596
                                        #   in Loop: Header=BB56_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB56_361:                             # %if.end1676
                                        #   in Loop: Header=BB56_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB56_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB56_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB56_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB56_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB56_367
.LBB56_364:                             # %if.else1721
                                        #   in Loop: Header=BB56_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB56_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB56_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB56_366:                             # %if.end1805
                                        #   in Loop: Header=BB56_357 Depth=5
	jmp	.LBB56_367
.LBB56_367:                             # %if.end1806
                                        #   in Loop: Header=BB56_357 Depth=5
	jmp	.LBB56_368
.LBB56_368:                             # %if.end1807
                                        #   in Loop: Header=BB56_357 Depth=5
	jmp	.LBB56_369
.LBB56_369:                             # %for.inc1808
                                        #   in Loop: Header=BB56_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_357
.LBB56_370:                             # %for.end1810
                                        #   in Loop: Header=BB56_355 Depth=4
	jmp	.LBB56_371
.LBB56_371:                             # %for.inc1811
                                        #   in Loop: Header=BB56_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_355
.LBB56_372:                             # %for.end1813
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_392
.LBB56_373:                             # %if.else1814
                                        #   in Loop: Header=BB56_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB56_374:                             # %for.cond1818
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB56_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB56_374 Depth=4
	movl	$0, -20(%rbp)
.LBB56_376:                             # %for.cond1822
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_181 Depth=2
                                        #       Parent Loop BB56_184 Depth=3
                                        #         Parent Loop BB56_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB56_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB56_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB56_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB56_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB56_380
.LBB56_379:                             # %if.else1868
                                        #   in Loop: Header=BB56_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB56_380:                             # %if.end1948
                                        #   in Loop: Header=BB56_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB56_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB56_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB56_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB56_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB56_386
.LBB56_383:                             # %if.else1993
                                        #   in Loop: Header=BB56_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB56_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB56_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB56_385:                             # %if.end2077
                                        #   in Loop: Header=BB56_376 Depth=5
	jmp	.LBB56_386
.LBB56_386:                             # %if.end2078
                                        #   in Loop: Header=BB56_376 Depth=5
	jmp	.LBB56_387
.LBB56_387:                             # %if.end2079
                                        #   in Loop: Header=BB56_376 Depth=5
	jmp	.LBB56_388
.LBB56_388:                             # %for.inc2080
                                        #   in Loop: Header=BB56_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_376
.LBB56_389:                             # %for.end2082
                                        #   in Loop: Header=BB56_374 Depth=4
	jmp	.LBB56_390
.LBB56_390:                             # %for.inc2083
                                        #   in Loop: Header=BB56_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_374
.LBB56_391:                             # %for.end2085
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_392
.LBB56_392:                             # %if.end2086
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_393
.LBB56_393:                             # %if.end2087
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB56_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB56_399
.LBB56_395:                             # %if.else2106
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB56_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB56_398
.LBB56_397:                             # %if.else2131
                                        #   in Loop: Header=BB56_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB56_398:                             # %if.end2132
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_399
.LBB56_399:                             # %if.end2133
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB56_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB56_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB56_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB56_402:                             # %if.end2143
                                        #   in Loop: Header=BB56_184 Depth=3
	jmp	.LBB56_403
.LBB56_403:                             # %for.inc2144
                                        #   in Loop: Header=BB56_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_184
.LBB56_404:                             # %for.end2146
                                        #   in Loop: Header=BB56_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB56_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB56_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB56_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB56_407:                             # %if.end2155
                                        #   in Loop: Header=BB56_181 Depth=2
	jmp	.LBB56_408
.LBB56_408:                             # %if.end2156
                                        #   in Loop: Header=BB56_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB56_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB56_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -312(%rbp)
.LBB56_410:                             # %if.end2161
                                        #   in Loop: Header=BB56_181 Depth=2
	jmp	.LBB56_411
.LBB56_411:                             # %if.end2162
                                        #   in Loop: Header=BB56_181 Depth=2
	jmp	.LBB56_412
.LBB56_412:                             # %for.inc2163
                                        #   in Loop: Header=BB56_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_181
.LBB56_413:                             # %for.end2165
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB56_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB56_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB56_416:                             # %for.cond2172
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_418 Depth 3
                                        #         Child Loop BB56_445 Depth 4
                                        #         Child Loop BB56_464 Depth 4
                                        #           Child Loop BB56_466 Depth 5
                                        #         Child Loop BB56_473 Depth 4
                                        #         Child Loop BB56_508 Depth 4
                                        #           Child Loop BB56_510 Depth 5
                                        #         Child Loop BB56_532 Depth 4
                                        #           Child Loop BB56_534 Depth 5
                                        #             Child Loop BB56_536 Depth 6
                                        #         Child Loop BB56_544 Depth 4
                                        #           Child Loop BB56_546 Depth 5
                                        #       Child Loop BB56_569 Depth 3
                                        #         Child Loop BB56_571 Depth 4
                                        #           Child Loop BB56_573 Depth 5
                                        #       Child Loop BB56_581 Depth 3
                                        #         Child Loop BB56_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB56_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB56_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB56_418:                             # %for.cond2184
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_445 Depth 4
                                        #         Child Loop BB56_464 Depth 4
                                        #           Child Loop BB56_466 Depth 5
                                        #         Child Loop BB56_473 Depth 4
                                        #         Child Loop BB56_508 Depth 4
                                        #           Child Loop BB56_510 Depth 5
                                        #         Child Loop BB56_532 Depth 4
                                        #           Child Loop BB56_534 Depth 5
                                        #             Child Loop BB56_536 Depth 6
                                        #         Child Loop BB56_544 Depth 4
                                        #           Child Loop BB56_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB56_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB56_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB56_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB56_423
.LBB56_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB56_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB56_557
.LBB56_423:                             # %if.then2201
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB56_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	$0, -220(%rbp)
	movl	$0, -216(%rbp)
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -220(%rbp)
	cmpl	$2147483647, -220(%rbp) # imm = 0x7FFFFFFF
	je	.LBB56_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB56_428
.LBB56_427:                             # %if.then2214
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB56_429
.LBB56_428:                             # %if.else2215
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-220(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-216(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB56_429:                             # %if.end2218
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB56_431
	jmp	.LBB56_430
.LBB56_430:                             # %if.end2218
                                        #   in Loop: Header=BB56_418 Depth=3
	subl	$2, %eax
	je	.LBB56_438
	jmp	.LBB56_439
.LBB56_431:                             # %sw.bb
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-216(%rbp), %eax
	cmpl	-220(%rbp), %eax
	jl	.LBB56_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB56_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB56_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB56_436
.LBB56_435:                             # %if.then2231
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_437
.LBB56_436:                             # %if.else2232
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB56_437:                             # %if.end2233
                                        #   in Loop: Header=BB56_418 Depth=3
	jmp	.LBB56_440
.LBB56_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_440
.LBB56_439:                             # %sw.default
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB56_440:                             # %sw.epilog
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB56_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB56_442:                             # %if.end2240
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB56_443:                             # %if.end2242
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB56_518
.LBB56_444:                             # %if.else2278
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB56_445:                             # %for.cond2279
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB56_445 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB56_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB56_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB56_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB56_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB56_461
.LBB56_449:                             # %if.then2296
                                        #   in Loop: Header=BB56_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB56_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB56_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_453
.LBB56_452:                             # %cond.false2306
                                        #   in Loop: Header=BB56_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_453:                             # %cond.end2309
                                        #   in Loop: Header=BB56_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB56_458
.LBB56_454:                             # %cond.false2313
                                        #   in Loop: Header=BB56_445 Depth=4
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB56_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB56_457
.LBB56_456:                             # %cond.false2320
                                        #   in Loop: Header=BB56_445 Depth=4
	movl	$1, %eax
	jmp	.LBB56_457
.LBB56_457:                             # %cond.end2321
                                        #   in Loop: Header=BB56_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_458:                             # %cond.end2326
                                        #   in Loop: Header=BB56_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB56_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB56_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB56_460:                             # %if.end2339
                                        #   in Loop: Header=BB56_445 Depth=4
	jmp	.LBB56_461
.LBB56_461:                             # %if.end2340
                                        #   in Loop: Header=BB56_445 Depth=4
	jmp	.LBB56_462
.LBB56_462:                             # %for.inc2341
                                        #   in Loop: Header=BB56_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB56_445
.LBB56_463:                             # %for.end2343
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	$0, -24(%rbp)
.LBB56_464:                             # %for.cond2344
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB56_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB56_464 Depth=4
	movl	$0, -20(%rbp)
.LBB56_466:                             # %for.cond2348
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        #         Parent Loop BB56_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB56_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB56_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB56_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_466
.LBB56_469:                             # %for.end2405
                                        #   in Loop: Header=BB56_464 Depth=4
	jmp	.LBB56_470
.LBB56_470:                             # %for.inc2406
                                        #   in Loop: Header=BB56_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_464
.LBB56_471:                             # %for.end2408
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB56_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB56_473:                             # %for.cond2411
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB56_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB56_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB56_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_478
.LBB56_477:                             # %cond.false2428
                                        #   in Loop: Header=BB56_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_478:                             # %cond.end2431
                                        #   in Loop: Header=BB56_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB56_483
.LBB56_479:                             # %cond.false2435
                                        #   in Loop: Header=BB56_473 Depth=4
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB56_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB56_482
.LBB56_481:                             # %cond.false2442
                                        #   in Loop: Header=BB56_473 Depth=4
	movl	$1, %eax
	jmp	.LBB56_482
.LBB56_482:                             # %cond.end2443
                                        #   in Loop: Header=BB56_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_483:                             # %cond.end2448
                                        #   in Loop: Header=BB56_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB56_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB56_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB56_485:                             # %if.end2461
                                        #   in Loop: Header=BB56_473 Depth=4
	jmp	.LBB56_486
.LBB56_486:                             # %for.inc2462
                                        #   in Loop: Header=BB56_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB56_473
.LBB56_487:                             # %for.end2464
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB56_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB56_491
.LBB56_490:                             # %cond.false2474
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_491:                             # %cond.end2477
                                        #   in Loop: Header=BB56_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB56_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB56_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB56_494
.LBB56_493:                             # %cond.false2487
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB56_494:                             # %cond.end2489
                                        #   in Loop: Header=BB56_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB56_499
.LBB56_495:                             # %cond.false2494
                                        #   in Loop: Header=BB56_418 Depth=3
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB56_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB56_498
.LBB56_497:                             # %cond.false2501
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	$1, %eax
	jmp	.LBB56_498
.LBB56_498:                             # %cond.end2502
                                        #   in Loop: Header=BB56_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_499:                             # %cond.end2507
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB56_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB56_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB56_507
.LBB56_502:                             # %if.else2517
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB56_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB56_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB56_506
.LBB56_505:                             # %if.else2524
                                        #   in Loop: Header=BB56_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB56_506:                             # %if.end2525
                                        #   in Loop: Header=BB56_418 Depth=3
	jmp	.LBB56_507
.LBB56_507:                             # %if.end2526
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	$0, -24(%rbp)
.LBB56_508:                             # %for.cond2527
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB56_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB56_508 Depth=4
	movl	$0, -20(%rbp)
.LBB56_510:                             # %for.cond2531
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        #         Parent Loop BB56_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB56_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB56_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB56_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_510
.LBB56_513:                             # %for.end2567
                                        #   in Loop: Header=BB56_508 Depth=4
	jmp	.LBB56_514
.LBB56_514:                             # %for.inc2568
                                        #   in Loop: Header=BB56_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_508
.LBB56_515:                             # %for.end2570
                                        #   in Loop: Header=BB56_418 Depth=3
	jmp	.LBB56_517
.LBB56_516:                             # %if.else2571
                                        #   in Loop: Header=BB56_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB56_517:                             # %if.end2572
                                        #   in Loop: Header=BB56_418 Depth=3
	jmp	.LBB56_518
.LBB56_518:                             # %if.end2573
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB56_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-268(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB56_526
.LBB56_520:                             # %if.else2578
                                        #   in Loop: Header=BB56_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB56_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB56_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB56_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB56_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB56_524
.LBB56_523:                             # %cond.false2592
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB56_524:                             # %cond.end2597
                                        #   in Loop: Header=BB56_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB56_525:                             # %if.end2603
                                        #   in Loop: Header=BB56_418 Depth=3
	jmp	.LBB56_526
.LBB56_526:                             # %if.end2604
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB56_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB56_530
.LBB56_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB56_556
.LBB56_530:                             # %if.then2616
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-268(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB56_532:                             # %for.cond2638
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_534 Depth 5
                                        #             Child Loop BB56_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB56_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB56_532 Depth=4
	movl	$0, -24(%rbp)
.LBB56_534:                             # %for.cond2642
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        #         Parent Loop BB56_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB56_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB56_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB56_534 Depth=5
	movl	$0, -20(%rbp)
.LBB56_536:                             # %for.cond2646
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        #         Parent Loop BB56_532 Depth=4
                                        #           Parent Loop BB56_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB56_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB56_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB56_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_536
.LBB56_539:                             # %for.end2668
                                        #   in Loop: Header=BB56_534 Depth=5
	jmp	.LBB56_540
.LBB56_540:                             # %for.inc2669
                                        #   in Loop: Header=BB56_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_534
.LBB56_541:                             # %for.end2671
                                        #   in Loop: Header=BB56_532 Depth=4
	jmp	.LBB56_542
.LBB56_542:                             # %for.inc2672
                                        #   in Loop: Header=BB56_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_532
.LBB56_543:                             # %for.end2674
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_544:                             # %for.cond2675
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB56_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_546:                             # %for.cond2680
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_418 Depth=3
                                        #         Parent Loop BB56_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB56_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB56_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB56_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB56_550
.LBB56_549:                             # %if.else2705
                                        #   in Loop: Header=BB56_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB56_550:                             # %if.end2754
                                        #   in Loop: Header=BB56_546 Depth=5
	jmp	.LBB56_551
.LBB56_551:                             # %for.inc2755
                                        #   in Loop: Header=BB56_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_546
.LBB56_552:                             # %for.end2757
                                        #   in Loop: Header=BB56_544 Depth=4
	jmp	.LBB56_553
.LBB56_553:                             # %for.inc2758
                                        #   in Loop: Header=BB56_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_544
.LBB56_554:                             # %for.end2760
                                        #   in Loop: Header=BB56_418 Depth=3
	jmp	.LBB56_555
.LBB56_555:                             # %if.end2761
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB56_556:                             # %if.end2762
                                        #   in Loop: Header=BB56_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB56_557:                             # %if.end2763
                                        #   in Loop: Header=BB56_418 Depth=3
	jmp	.LBB56_558
.LBB56_558:                             # %for.inc2764
                                        #   in Loop: Header=BB56_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB56_418
.LBB56_559:                             # %for.end2766
                                        #   in Loop: Header=BB56_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB56_416 Depth=2
	movl	-176(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB56_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB56_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB56_563
.LBB56_562:                             # %cond.true2782
                                        #   in Loop: Header=BB56_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB56_564
.LBB56_563:                             # %cond.false2783
                                        #   in Loop: Header=BB56_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB56_564
.LBB56_564:                             # %cond.end2784
                                        #   in Loop: Header=BB56_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB56_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB56_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB56_567
.LBB56_566:                             # %cond.true2793
                                        #   in Loop: Header=BB56_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB56_568
.LBB56_567:                             # %cond.false2794
                                        #   in Loop: Header=BB56_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB56_568
.LBB56_568:                             # %cond.end2795
                                        #   in Loop: Header=BB56_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB56_569:                             # %for.cond2813
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_571 Depth 4
                                        #           Child Loop BB56_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB56_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB56_569 Depth=3
	movl	$0, -24(%rbp)
.LBB56_571:                             # %for.cond2817
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB56_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB56_571 Depth=4
	movl	$0, -20(%rbp)
.LBB56_573:                             # %for.cond2821
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_569 Depth=3
                                        #         Parent Loop BB56_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB56_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB56_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB56_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_573
.LBB56_576:                             # %for.end2844
                                        #   in Loop: Header=BB56_571 Depth=4
	jmp	.LBB56_577
.LBB56_577:                             # %for.inc2845
                                        #   in Loop: Header=BB56_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_571
.LBB56_578:                             # %for.end2847
                                        #   in Loop: Header=BB56_569 Depth=3
	jmp	.LBB56_579
.LBB56_579:                             # %for.inc2848
                                        #   in Loop: Header=BB56_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_569
.LBB56_580:                             # %for.end2850
                                        #   in Loop: Header=BB56_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_581:                             # %for.cond2851
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB56_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_583:                             # %for.cond2856
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_416 Depth=2
                                        #       Parent Loop BB56_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB56_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB56_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB56_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB56_587
.LBB56_586:                             # %if.else2886
                                        #   in Loop: Header=BB56_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB56_587:                             # %if.end2935
                                        #   in Loop: Header=BB56_583 Depth=4
	jmp	.LBB56_588
.LBB56_588:                             # %for.inc2936
                                        #   in Loop: Header=BB56_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_583
.LBB56_589:                             # %for.end2938
                                        #   in Loop: Header=BB56_581 Depth=3
	jmp	.LBB56_590
.LBB56_590:                             # %for.inc2939
                                        #   in Loop: Header=BB56_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_581
.LBB56_591:                             # %for.end2941
                                        #   in Loop: Header=BB56_416 Depth=2
	jmp	.LBB56_592
.LBB56_592:                             # %if.end2942
                                        #   in Loop: Header=BB56_416 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB56_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB56_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB56_594:                             # %if.end2948
                                        #   in Loop: Header=BB56_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB56_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB56_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB56_596:                             # %if.end2974
                                        #   in Loop: Header=BB56_416 Depth=2
	jmp	.LBB56_597
.LBB56_597:                             # %for.inc2975
                                        #   in Loop: Header=BB56_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_416
.LBB56_598:                             # %for.end2977
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_599:                             # %if.end2980
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB56_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB56_601:                             # %for.cond2985
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_603 Depth 3
                                        #         Child Loop BB56_614 Depth 4
                                        #         Child Loop BB56_633 Depth 4
                                        #           Child Loop BB56_635 Depth 5
                                        #         Child Loop BB56_642 Depth 4
                                        #         Child Loop BB56_677 Depth 4
                                        #           Child Loop BB56_679 Depth 5
                                        #         Child Loop BB56_701 Depth 4
                                        #           Child Loop BB56_703 Depth 5
                                        #             Child Loop BB56_705 Depth 6
                                        #         Child Loop BB56_713 Depth 4
                                        #           Child Loop BB56_715 Depth 5
                                        #         Child Loop BB56_723 Depth 4
                                        #           Child Loop BB56_725 Depth 5
                                        #       Child Loop BB56_745 Depth 3
                                        #         Child Loop BB56_747 Depth 4
                                        #           Child Loop BB56_749 Depth 5
                                        #       Child Loop BB56_757 Depth 3
                                        #         Child Loop BB56_759 Depth 4
                                        #       Child Loop BB56_766 Depth 3
                                        #         Child Loop BB56_768 Depth 4
                                        #       Child Loop BB56_778 Depth 3
                                        #         Child Loop BB56_780 Depth 4
                                        #       Child Loop BB56_786 Depth 3
                                        #       Child Loop BB56_791 Depth 3
                                        #         Child Loop BB56_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB56_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB56_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB56_603:                             # %for.cond2997
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_614 Depth 4
                                        #         Child Loop BB56_633 Depth 4
                                        #           Child Loop BB56_635 Depth 5
                                        #         Child Loop BB56_642 Depth 4
                                        #         Child Loop BB56_677 Depth 4
                                        #           Child Loop BB56_679 Depth 5
                                        #         Child Loop BB56_701 Depth 4
                                        #           Child Loop BB56_703 Depth 5
                                        #             Child Loop BB56_705 Depth 6
                                        #         Child Loop BB56_713 Depth 4
                                        #           Child Loop BB56_715 Depth 5
                                        #         Child Loop BB56_723 Depth 4
                                        #           Child Loop BB56_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB56_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB56_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB56_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB56_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB56_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB56_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB56_610
.LBB56_609:                             # %if.then3019
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB56_611
.LBB56_610:                             # %if.else3020
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB56_611:                             # %if.end3022
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB56_612:                             # %if.end3024
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB56_687
.LBB56_613:                             # %if.else3060
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB56_614:                             # %for.cond3061
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB56_614 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB56_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB56_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB56_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB56_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB56_630
.LBB56_618:                             # %if.then3078
                                        #   in Loop: Header=BB56_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB56_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB56_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_622
.LBB56_621:                             # %cond.false3088
                                        #   in Loop: Header=BB56_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_622:                             # %cond.end3091
                                        #   in Loop: Header=BB56_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB56_627
.LBB56_623:                             # %cond.false3095
                                        #   in Loop: Header=BB56_614 Depth=4
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB56_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB56_626
.LBB56_625:                             # %cond.false3102
                                        #   in Loop: Header=BB56_614 Depth=4
	movl	$1, %eax
	jmp	.LBB56_626
.LBB56_626:                             # %cond.end3103
                                        #   in Loop: Header=BB56_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_627:                             # %cond.end3108
                                        #   in Loop: Header=BB56_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB56_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB56_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB56_629:                             # %if.end3121
                                        #   in Loop: Header=BB56_614 Depth=4
	jmp	.LBB56_630
.LBB56_630:                             # %if.end3122
                                        #   in Loop: Header=BB56_614 Depth=4
	jmp	.LBB56_631
.LBB56_631:                             # %for.inc3123
                                        #   in Loop: Header=BB56_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB56_614
.LBB56_632:                             # %for.end3125
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	$0, -24(%rbp)
.LBB56_633:                             # %for.cond3126
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB56_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB56_633 Depth=4
	movl	$0, -20(%rbp)
.LBB56_635:                             # %for.cond3130
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        #         Parent Loop BB56_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB56_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB56_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB56_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_635
.LBB56_638:                             # %for.end3187
                                        #   in Loop: Header=BB56_633 Depth=4
	jmp	.LBB56_639
.LBB56_639:                             # %for.inc3188
                                        #   in Loop: Header=BB56_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_633
.LBB56_640:                             # %for.end3190
                                        #   in Loop: Header=BB56_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB56_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB56_642:                             # %for.cond3193
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB56_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB56_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB56_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB56_647
.LBB56_646:                             # %cond.false3210
                                        #   in Loop: Header=BB56_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_647:                             # %cond.end3213
                                        #   in Loop: Header=BB56_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB56_652
.LBB56_648:                             # %cond.false3217
                                        #   in Loop: Header=BB56_642 Depth=4
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB56_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB56_651
.LBB56_650:                             # %cond.false3224
                                        #   in Loop: Header=BB56_642 Depth=4
	movl	$1, %eax
	jmp	.LBB56_651
.LBB56_651:                             # %cond.end3225
                                        #   in Loop: Header=BB56_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_652:                             # %cond.end3230
                                        #   in Loop: Header=BB56_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB56_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB56_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB56_654:                             # %if.end3243
                                        #   in Loop: Header=BB56_642 Depth=4
	jmp	.LBB56_655
.LBB56_655:                             # %for.inc3244
                                        #   in Loop: Header=BB56_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB56_642
.LBB56_656:                             # %for.end3246
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB56_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB56_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB56_660
.LBB56_659:                             # %cond.false3256
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB56_660:                             # %cond.end3259
                                        #   in Loop: Header=BB56_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB56_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB56_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB56_663
.LBB56_662:                             # %cond.false3269
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB56_663:                             # %cond.end3271
                                        #   in Loop: Header=BB56_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB56_668
.LBB56_664:                             # %cond.false3276
                                        #   in Loop: Header=BB56_603 Depth=3
	vmovsd	.LCPI56_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB56_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB56_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB56_667
.LBB56_666:                             # %cond.false3283
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	$1, %eax
	jmp	.LBB56_667
.LBB56_667:                             # %cond.end3284
                                        #   in Loop: Header=BB56_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB56_668:                             # %cond.end3289
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB56_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB56_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB56_676
.LBB56_671:                             # %if.else3299
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB56_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB56_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB56_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB56_675
.LBB56_674:                             # %if.else3306
                                        #   in Loop: Header=BB56_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB56_675:                             # %if.end3307
                                        #   in Loop: Header=BB56_603 Depth=3
	jmp	.LBB56_676
.LBB56_676:                             # %if.end3308
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	$0, -24(%rbp)
.LBB56_677:                             # %for.cond3309
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB56_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB56_677 Depth=4
	movl	$0, -20(%rbp)
.LBB56_679:                             # %for.cond3313
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        #         Parent Loop BB56_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB56_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB56_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB56_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_679
.LBB56_682:                             # %for.end3349
                                        #   in Loop: Header=BB56_677 Depth=4
	jmp	.LBB56_683
.LBB56_683:                             # %for.inc3350
                                        #   in Loop: Header=BB56_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_677
.LBB56_684:                             # %for.end3352
                                        #   in Loop: Header=BB56_603 Depth=3
	jmp	.LBB56_686
.LBB56_685:                             # %if.else3353
                                        #   in Loop: Header=BB56_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB56_686:                             # %if.end3354
                                        #   in Loop: Header=BB56_603 Depth=3
	jmp	.LBB56_687
.LBB56_687:                             # %if.end3355
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB56_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-268(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB56_695
.LBB56_689:                             # %if.else3360
                                        #   in Loop: Header=BB56_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB56_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB56_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB56_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB56_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB56_693
.LBB56_692:                             # %cond.false3374
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB56_693:                             # %cond.end3379
                                        #   in Loop: Header=BB56_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB56_694:                             # %if.end3385
                                        #   in Loop: Header=BB56_603 Depth=3
	jmp	.LBB56_695
.LBB56_695:                             # %if.end3386
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB56_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB56_699
.LBB56_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB56_732
.LBB56_699:                             # %if.then3398
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-268(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB56_701:                             # %for.cond3422
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_703 Depth 5
                                        #             Child Loop BB56_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB56_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB56_701 Depth=4
	movl	$0, -24(%rbp)
.LBB56_703:                             # %for.cond3426
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        #         Parent Loop BB56_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB56_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB56_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB56_703 Depth=5
	movl	$0, -20(%rbp)
.LBB56_705:                             # %for.cond3430
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        #         Parent Loop BB56_701 Depth=4
                                        #           Parent Loop BB56_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB56_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB56_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB56_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_705
.LBB56_708:                             # %for.end3453
                                        #   in Loop: Header=BB56_703 Depth=5
	jmp	.LBB56_709
.LBB56_709:                             # %for.inc3454
                                        #   in Loop: Header=BB56_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_703
.LBB56_710:                             # %for.end3456
                                        #   in Loop: Header=BB56_701 Depth=4
	jmp	.LBB56_711
.LBB56_711:                             # %for.inc3457
                                        #   in Loop: Header=BB56_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_701
.LBB56_712:                             # %for.end3459
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_713:                             # %for.cond3460
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB56_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_715:                             # %for.cond3465
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        #         Parent Loop BB56_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB56_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB56_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_715
.LBB56_718:                             # %for.end3494
                                        #   in Loop: Header=BB56_713 Depth=4
	jmp	.LBB56_719
.LBB56_719:                             # %for.inc3495
                                        #   in Loop: Header=BB56_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_713
.LBB56_720:                             # %for.end3497
                                        #   in Loop: Header=BB56_603 Depth=3
	jmp	.LBB56_721
.LBB56_721:                             # %if.end3498
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_723:                             # %for.cond3502
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB56_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_725:                             # %for.cond3507
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_603 Depth=3
                                        #         Parent Loop BB56_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB56_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB56_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_725
.LBB56_728:                             # %for.end3562
                                        #   in Loop: Header=BB56_723 Depth=4
	jmp	.LBB56_729
.LBB56_729:                             # %for.inc3563
                                        #   in Loop: Header=BB56_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_723
.LBB56_730:                             # %for.end3565
                                        #   in Loop: Header=BB56_603 Depth=3
	jmp	.LBB56_731
.LBB56_731:                             # %if.end3566
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB56_732:                             # %if.end3567
                                        #   in Loop: Header=BB56_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB56_733:                             # %if.end3568
                                        #   in Loop: Header=BB56_603 Depth=3
	jmp	.LBB56_734
.LBB56_734:                             # %for.inc3569
                                        #   in Loop: Header=BB56_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB56_603
.LBB56_735:                             # %for.end3571
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-176(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB56_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB56_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB56_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB56_739
.LBB56_738:                             # %cond.true3588
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB56_740
.LBB56_739:                             # %cond.false3589
                                        #   in Loop: Header=BB56_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB56_740
.LBB56_740:                             # %cond.end3590
                                        #   in Loop: Header=BB56_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB56_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB56_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB56_743
.LBB56_742:                             # %cond.true3599
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB56_744
.LBB56_743:                             # %cond.false3600
                                        #   in Loop: Header=BB56_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB56_744
.LBB56_744:                             # %cond.end3601
                                        #   in Loop: Header=BB56_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB56_745:                             # %for.cond3619
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_747 Depth 4
                                        #           Child Loop BB56_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB56_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB56_745 Depth=3
	movl	$0, -24(%rbp)
.LBB56_747:                             # %for.cond3623
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB56_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB56_747 Depth=4
	movl	$0, -20(%rbp)
.LBB56_749:                             # %for.cond3627
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_745 Depth=3
                                        #         Parent Loop BB56_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB56_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB56_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB56_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_749
.LBB56_752:                             # %for.end3650
                                        #   in Loop: Header=BB56_747 Depth=4
	jmp	.LBB56_753
.LBB56_753:                             # %for.inc3651
                                        #   in Loop: Header=BB56_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_747
.LBB56_754:                             # %for.end3653
                                        #   in Loop: Header=BB56_745 Depth=3
	jmp	.LBB56_755
.LBB56_755:                             # %for.inc3654
                                        #   in Loop: Header=BB56_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_745
.LBB56_756:                             # %for.end3656
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_757:                             # %for.cond3657
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB56_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_759:                             # %for.cond3662
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB56_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB56_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_759
.LBB56_762:                             # %for.end3691
                                        #   in Loop: Header=BB56_757 Depth=3
	jmp	.LBB56_763
.LBB56_763:                             # %for.inc3692
                                        #   in Loop: Header=BB56_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_757
.LBB56_764:                             # %for.end3694
                                        #   in Loop: Header=BB56_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_766:                             # %for.cond3698
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB56_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_768:                             # %for.cond3703
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB56_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB56_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_768
.LBB56_771:                             # %for.end3758
                                        #   in Loop: Header=BB56_766 Depth=3
	jmp	.LBB56_772
.LBB56_772:                             # %for.inc3759
                                        #   in Loop: Header=BB56_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_766
.LBB56_773:                             # %for.end3761
                                        #   in Loop: Header=BB56_601 Depth=2
	jmp	.LBB56_774
.LBB56_774:                             # %if.end3762
                                        #   in Loop: Header=BB56_601 Depth=2
	jmp	.LBB56_775
.LBB56_775:                             # %if.end3763
                                        #   in Loop: Header=BB56_601 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB56_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB56_777:                             # %if.end3769
                                        #   in Loop: Header=BB56_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_778:                             # %for.cond3781
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB56_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_780:                             # %for.cond3786
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB56_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB56_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_780
.LBB56_783:                             # %for.end3797
                                        #   in Loop: Header=BB56_778 Depth=3
	jmp	.LBB56_784
.LBB56_784:                             # %for.inc3798
                                        #   in Loop: Header=BB56_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_778
.LBB56_785:                             # %for.end3800
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_786:                             # %for.cond3802
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB56_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB56_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_786
.LBB56_789:                             # %for.end3811
                                        #   in Loop: Header=BB56_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB56_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_791:                             # %for.cond3819
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB56_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_793:                             # %for.cond3824
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_601 Depth=2
                                        #       Parent Loop BB56_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB56_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB56_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_793
.LBB56_796:                             # %for.end3844
                                        #   in Loop: Header=BB56_791 Depth=3
	jmp	.LBB56_797
.LBB56_797:                             # %for.inc3845
                                        #   in Loop: Header=BB56_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_791
.LBB56_798:                             # %for.end3847
                                        #   in Loop: Header=BB56_601 Depth=2
	jmp	.LBB56_799
.LBB56_799:                             # %if.end3848
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB56_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_601
.LBB56_801:                             # %for.end3860
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_802
.LBB56_802:                             # %if.end3861
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB56_803:                             # %for.cond3862
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB56_803 Depth=2
	movl	$0, -24(%rbp)
.LBB56_805:                             # %for.cond3866
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB56_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB56_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_805
.LBB56_808:                             # %for.end3890
                                        #   in Loop: Header=BB56_803 Depth=2
	jmp	.LBB56_809
.LBB56_809:                             # %for.inc3891
                                        #   in Loop: Header=BB56_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_803
.LBB56_810:                             # %for.end3893
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB56_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB56_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB56_825
.LBB56_813:                             # %if.then3902
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB56_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB56_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_822
.LBB56_816:                             # %if.else3910
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB56_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB56_821
.LBB56_818:                             # %if.else3915
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB56_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_820:                             # %if.end3922
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_821
.LBB56_821:                             # %if.end3923
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_822
.LBB56_822:                             # %if.end3924
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_824
.LBB56_823:                             # %if.else3925
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_824:                             # %if.end3927
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_825
.LBB56_825:                             # %if.end3928
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_827
.LBB56_826:                             # %if.else3929
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB56_827:                             # %if.end3930
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB56_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB56_830
.LBB56_829:                             # %if.then3938
                                        #   in Loop: Header=BB56_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB56_830:                             # %if.end3939
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_832
.LBB56_831:                             # %if.else3940
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB56_832:                             # %if.end3941
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB56_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB56_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB56_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-316(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB56_835:                             # %for.cond3949
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_853 Depth 3
                                        #         Child Loop BB56_908 Depth 4
                                        #           Child Loop BB56_911 Depth 5
                                        #             Child Loop BB56_913 Depth 6
                                        #           Child Loop BB56_920 Depth 5
                                        #             Child Loop BB56_922 Depth 6
                                        #         Child Loop BB56_955 Depth 4
                                        #           Child Loop BB56_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB56_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB56_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB56_846
.LBB56_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB56_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB56_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB56_846
.LBB56_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB56_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB56_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB56_846
.LBB56_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB56_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB56_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB56_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB56_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB56_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB56_835 Depth=2
	cmpl	$0, -316(%rbp)
	jne	.LBB56_847
.LBB56_846:                             # %if.then3982
                                        #   in Loop: Header=BB56_835 Depth=2
	jmp	.LBB56_976
.LBB56_847:                             # %if.end3983
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB56_835 Depth=2
	movl	$11, -308(%rbp)
	jmp	.LBB56_850
.LBB56_849:                             # %if.else3987
                                        #   in Loop: Header=BB56_835 Depth=2
	movl	$8, -308(%rbp)
.LBB56_850:                             # %if.end3988
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB56_852:                             # %if.end3994
                                        #   in Loop: Header=BB56_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB56_853:                             # %for.cond3995
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_908 Depth 4
                                        #           Child Loop BB56_911 Depth 5
                                        #             Child Loop BB56_913 Depth 6
                                        #           Child Loop BB56_920 Depth 5
                                        #             Child Loop BB56_922 Depth 6
                                        #         Child Loop BB56_955 Depth 4
                                        #           Child Loop BB56_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB56_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB56_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB56_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB56_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB56_857:                             # %if.end4010
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB56_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB56_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB56_866
.LBB56_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB56_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB56_866
.LBB56_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB56_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB56_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB56_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -316(%rbp)
	jne	.LBB56_867
.LBB56_866:                             # %if.then4032
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_974
.LBB56_867:                             # %if.end4033
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_869
.LBB56_868:                             # %if.else4034
                                        #   in Loop: Header=BB56_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB56_869:                             # %if.end4037
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB56_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB56_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB56_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB56_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB56_877:                             # %if.end4066
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_878
.LBB56_878:                             # %if.end4067
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB56_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB56_880:                             # %if.end4072
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB56_881:                             # %if.end4074
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB56_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB56_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB56_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB56_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB56_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB56_887:                             # %if.end4092
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_888
.LBB56_888:                             # %if.end4093
                                        #   in Loop: Header=BB56_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB56_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB56_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB56_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB56_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_902
.LBB56_893:                             # %if.else4110
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB56_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB56_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB56_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_901
.LBB56_897:                             # %if.else4120
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB56_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB56_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB56_900:                             # %if.end4128
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_901
.LBB56_901:                             # %if.end4129
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_902
.LBB56_902:                             # %if.end4130
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_903
.LBB56_903:                             # %if.end4131
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB56_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB56_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB56_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB56_947
.LBB56_907:                             # %if.then4146
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_908
.LBB56_908:                             # %while.body
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        #       Parent Loop BB56_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_911 Depth 5
                                        #             Child Loop BB56_913 Depth 6
                                        #           Child Loop BB56_920 Depth 5
                                        #             Child Loop BB56_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB56_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB56_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB56_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB56_908 Depth=4
	movl	$0, -20(%rbp)
.LBB56_911:                             # %for.cond4153
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        #       Parent Loop BB56_853 Depth=3
                                        #         Parent Loop BB56_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB56_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB56_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB56_911 Depth=5
	movl	$0, -24(%rbp)
.LBB56_913:                             # %for.cond4157
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        #       Parent Loop BB56_853 Depth=3
                                        #         Parent Loop BB56_908 Depth=4
                                        #           Parent Loop BB56_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB56_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB56_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB56_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_913
.LBB56_916:                             # %for.end4182
                                        #   in Loop: Header=BB56_911 Depth=5
	jmp	.LBB56_917
.LBB56_917:                             # %for.inc4183
                                        #   in Loop: Header=BB56_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_911
.LBB56_918:                             # %for.end4185
                                        #   in Loop: Header=BB56_908 Depth=4
	jmp	.LBB56_928
.LBB56_919:                             # %if.else4186
                                        #   in Loop: Header=BB56_908 Depth=4
	movl	$0, -20(%rbp)
.LBB56_920:                             # %for.cond4187
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        #       Parent Loop BB56_853 Depth=3
                                        #         Parent Loop BB56_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB56_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB56_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB56_920 Depth=5
	movl	$0, -24(%rbp)
.LBB56_922:                             # %for.cond4191
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        #       Parent Loop BB56_853 Depth=3
                                        #         Parent Loop BB56_908 Depth=4
                                        #           Parent Loop BB56_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB56_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB56_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB56_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_922
.LBB56_925:                             # %for.end4215
                                        #   in Loop: Header=BB56_920 Depth=5
	jmp	.LBB56_926
.LBB56_926:                             # %for.inc4216
                                        #   in Loop: Header=BB56_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_920
.LBB56_927:                             # %for.end4218
                                        #   in Loop: Header=BB56_908 Depth=4
	jmp	.LBB56_928
.LBB56_928:                             # %if.end4219
                                        #   in Loop: Header=BB56_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB56_929:                             # %if.end4220
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB56_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB56_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB56_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB56_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB56_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB56_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB56_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB56_908 Depth=4
	jmp	.LBB56_908
.LBB56_935:                             # %if.else4236
                                        #   in Loop: Header=BB56_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB56_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB56_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB56_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB56_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB56_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_934
.LBB56_940:                             # %if.else4250
                                        #   in Loop: Header=BB56_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB56_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB56_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB56_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB56_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB56_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_934
.LBB56_944:                             # %if.else4262
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB56_946
.LBB56_945:                             # %if.else4264
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_946
.LBB56_946:                             # %while.end
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_947
.LBB56_947:                             # %if.end4265
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB56_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB56_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB56_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB56_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB56_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB56_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB56_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	$0, -20(%rbp)
.LBB56_955:                             # %for.cond4288
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        #       Parent Loop BB56_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB56_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB56_955 Depth=4
	movl	$0, -24(%rbp)
.LBB56_957:                             # %for.cond4292
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_835 Depth=2
                                        #       Parent Loop BB56_853 Depth=3
                                        #         Parent Loop BB56_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB56_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB56_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB56_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_957
.LBB56_960:                             # %for.end4316
                                        #   in Loop: Header=BB56_955 Depth=4
	jmp	.LBB56_961
.LBB56_961:                             # %for.inc4317
                                        #   in Loop: Header=BB56_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_955
.LBB56_962:                             # %for.end4319
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB56_963:                             # %if.end4320
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_964
.LBB56_964:                             # %if.end4321
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_965
.LBB56_965:                             # %if.end4322
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB56_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB56_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB56_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB56_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB56_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB56_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB56_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB56_972:                             # %if.end4356
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_973
.LBB56_973:                             # %if.end4357
                                        #   in Loop: Header=BB56_853 Depth=3
	jmp	.LBB56_974
.LBB56_974:                             # %for.inc4358
                                        #   in Loop: Header=BB56_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB56_853
.LBB56_975:                             # %for.end4360
                                        #   in Loop: Header=BB56_835 Depth=2
	jmp	.LBB56_976
.LBB56_976:                             # %for.inc4361
                                        #   in Loop: Header=BB56_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB56_835
.LBB56_977:                             # %for.end4364
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1082
.LBB56_978:                             # %if.else4365
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB56_980:                             # %if.end4371
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB56_981:                             # %for.cond4372
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1014 Depth 3
                                        #         Child Loop BB56_1017 Depth 4
                                        #           Child Loop BB56_1019 Depth 5
                                        #         Child Loop BB56_1026 Depth 4
                                        #           Child Loop BB56_1028 Depth 5
                                        #       Child Loop BB56_1061 Depth 3
                                        #         Child Loop BB56_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB56_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB56_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB56_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB56_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB56_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB56_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB56_990:                             # %if.end4407
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_991
.LBB56_991:                             # %if.end4408
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB56_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB56_993:                             # %if.end4413
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB56_994:                             # %if.end4415
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB56_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB56_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB56_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB56_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_1008
.LBB56_999:                             # %if.else4433
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB56_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB56_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB56_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_1007
.LBB56_1003:                            # %if.else4443
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB56_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB56_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB56_1006:                            # %if.end4451
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1007
.LBB56_1007:                            # %if.end4452
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1008
.LBB56_1008:                            # %if.end4453
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1009
.LBB56_1009:                            # %if.end4454
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB56_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB56_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB56_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB56_1053
.LBB56_1013:                            # %if.then4470
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1014
.LBB56_1014:                            # %while.body4471
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_1017 Depth 4
                                        #           Child Loop BB56_1019 Depth 5
                                        #         Child Loop BB56_1026 Depth 4
                                        #           Child Loop BB56_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB56_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB56_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB56_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB56_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB56_1017:                            # %for.cond4478
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_981 Depth=2
                                        #       Parent Loop BB56_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB56_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB56_1019:                            # %for.cond4482
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_981 Depth=2
                                        #       Parent Loop BB56_1014 Depth=3
                                        #         Parent Loop BB56_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB56_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB56_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1019
.LBB56_1022:                            # %for.end4507
                                        #   in Loop: Header=BB56_1017 Depth=4
	jmp	.LBB56_1023
.LBB56_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB56_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1017
.LBB56_1024:                            # %for.end4510
                                        #   in Loop: Header=BB56_1014 Depth=3
	jmp	.LBB56_1034
.LBB56_1025:                            # %if.else4511
                                        #   in Loop: Header=BB56_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB56_1026:                            # %for.cond4512
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_981 Depth=2
                                        #       Parent Loop BB56_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB56_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB56_1028:                            # %for.cond4516
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_981 Depth=2
                                        #       Parent Loop BB56_1014 Depth=3
                                        #         Parent Loop BB56_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB56_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB56_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1028
.LBB56_1031:                            # %for.end4540
                                        #   in Loop: Header=BB56_1026 Depth=4
	jmp	.LBB56_1032
.LBB56_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB56_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1026
.LBB56_1033:                            # %for.end4543
                                        #   in Loop: Header=BB56_1014 Depth=3
	jmp	.LBB56_1034
.LBB56_1034:                            # %if.end4544
                                        #   in Loop: Header=BB56_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB56_1035:                            # %if.end4545
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB56_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB56_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB56_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB56_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB56_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB56_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB56_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB56_1014 Depth=3
	jmp	.LBB56_1014
.LBB56_1041:                            # %if.else4561
                                        #   in Loop: Header=BB56_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB56_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB56_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB56_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB56_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB56_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_1040
.LBB56_1046:                            # %if.else4575
                                        #   in Loop: Header=BB56_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB56_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB56_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB56_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB56_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB56_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_1040
.LBB56_1050:                            # %if.else4587
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB56_1052
.LBB56_1051:                            # %if.else4589
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1052
.LBB56_1052:                            # %while.end4590
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1053
.LBB56_1053:                            # %if.end4591
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB56_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB56_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB56_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB56_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB56_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB56_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB56_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1061:                            # %for.cond4615
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB56_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB56_1063:                            # %for.cond4619
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_981 Depth=2
                                        #       Parent Loop BB56_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB56_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB56_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1063
.LBB56_1066:                            # %for.end4643
                                        #   in Loop: Header=BB56_1061 Depth=3
	jmp	.LBB56_1067
.LBB56_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB56_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1061
.LBB56_1068:                            # %for.end4646
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB56_1069:                            # %if.end4647
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1070
.LBB56_1070:                            # %if.end4648
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1071
.LBB56_1071:                            # %if.end4649
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB56_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB56_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB56_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB56_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB56_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB56_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB56_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB56_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB56_1078:                            # %if.end4683
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1079
.LBB56_1079:                            # %if.end4684
                                        #   in Loop: Header=BB56_981 Depth=2
	jmp	.LBB56_1080
.LBB56_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB56_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB56_981
.LBB56_1081:                            # %for.end4687
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1082
.LBB56_1082:                            # %if.end4688
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1284
.LBB56_1083:                            # %if.else4689
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -300(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB56_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB56_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB56_1085:                            # %if.end4695
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB56_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB56_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -256(%rbp)
	je	.LBB56_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB56_1090
	jmp	.LBB56_1089
.LBB56_1089:                            # %if.then4702
                                        #   in Loop: Header=BB56_171 Depth=1
	subl	$2, %eax
	je	.LBB56_1097
	jmp	.LBB56_1098
.LBB56_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB56_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB56_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB56_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB56_1095
.LBB56_1094:                            # %if.then4716
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_1096
.LBB56_1095:                            # %if.else4717
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB56_1096:                            # %if.end4718
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1099
.LBB56_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_1099
.LBB56_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB56_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1101
.LBB56_1100:                            # %if.else4722
                                        #   in Loop: Header=BB56_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB56_1101:                            # %if.end4724
                                        #   in Loop: Header=BB56_171 Depth=1
	vmovsd	.LCPI56_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI56_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB56_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB56_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB56_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB56_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_1110
.LBB56_1106:                            # %if.else4743
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB56_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB56_1109
.LBB56_1108:                            # %if.else4748
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_1109:                            # %if.end4750
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1110
.LBB56_1110:                            # %if.end4751
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1112
.LBB56_1111:                            # %if.else4752
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_1112:                            # %if.end4754
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -20(%rbp)
.LBB56_1113:                            # %for.cond4755
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB56_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB56_1115:                            # %for.cond4759
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB56_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB56_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1115
.LBB56_1118:                            # %for.end4785
                                        #   in Loop: Header=BB56_1113 Depth=2
	jmp	.LBB56_1119
.LBB56_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB56_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1113
.LBB56_1120:                            # %for.end4788
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB56_1122
.LBB56_1121:                            # %if.else4789
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB56_1122:                            # %if.end4792
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1123
.LBB56_1123:                            # %if.end4793
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB56_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB56_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -20(%rbp)
.LBB56_1127:                            # %for.cond4806
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1129 Depth 3
                                        #         Child Loop BB56_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB56_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB56_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB56_1129:                            # %for.cond4810
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB56_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB56_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB56_1131:                            # %for.cond4814
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1127 Depth=2
                                        #       Parent Loop BB56_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB56_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB56_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB56_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB56_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB56_1134:                            # %if.end4826
                                        #   in Loop: Header=BB56_1131 Depth=4
	jmp	.LBB56_1135
.LBB56_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB56_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_1131
.LBB56_1136:                            # %for.end4829
                                        #   in Loop: Header=BB56_1129 Depth=3
	jmp	.LBB56_1137
.LBB56_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB56_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1129
.LBB56_1138:                            # %for.end4832
                                        #   in Loop: Header=BB56_1127 Depth=2
	jmp	.LBB56_1139
.LBB56_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB56_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1127
.LBB56_1140:                            # %for.end4835
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB56_1141:                            # %for.cond4840
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB56_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1143:                            # %for.cond4844
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB56_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB56_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1143
.LBB56_1146:                            # %for.end4877
                                        #   in Loop: Header=BB56_1141 Depth=2
	jmp	.LBB56_1147
.LBB56_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB56_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1141
.LBB56_1148:                            # %for.end4880
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1149
.LBB56_1149:                            # %if.end4881
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB56_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB56_1151:                            # %if.end4889
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -24(%rbp)
.LBB56_1152:                            # %for.cond4890
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB56_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1154:                            # %for.cond4894
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB56_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB56_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1154
.LBB56_1157:                            # %for.end4913
                                        #   in Loop: Header=BB56_1152 Depth=2
	jmp	.LBB56_1158
.LBB56_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB56_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1152
.LBB56_1159:                            # %for.end4916
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -20(%rbp)
.LBB56_1160:                            # %for.cond4917
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB56_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB56_1162:                            # %for.cond4921
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB56_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB56_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1162
.LBB56_1165:                            # %for.end4947
                                        #   in Loop: Header=BB56_1160 Depth=2
	jmp	.LBB56_1166
.LBB56_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB56_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1160
.LBB56_1167:                            # %for.end4950
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB56_1169
.LBB56_1168:                            # %if.else4952
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB56_1169:                            # %if.end4954
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1170
.LBB56_1170:                            # %if.end4955
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB56_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB56_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -20(%rbp)
.LBB56_1174:                            # %for.cond4968
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1176 Depth 3
                                        #         Child Loop BB56_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB56_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB56_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB56_1176:                            # %for.cond4972
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB56_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB56_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB56_1178:                            # %for.cond4976
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1174 Depth=2
                                        #       Parent Loop BB56_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB56_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB56_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB56_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB56_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB56_1181:                            # %if.end4988
                                        #   in Loop: Header=BB56_1178 Depth=4
	jmp	.LBB56_1182
.LBB56_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB56_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_1178
.LBB56_1183:                            # %for.end4991
                                        #   in Loop: Header=BB56_1176 Depth=3
	jmp	.LBB56_1184
.LBB56_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB56_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1176
.LBB56_1185:                            # %for.end4994
                                        #   in Loop: Header=BB56_1174 Depth=2
	jmp	.LBB56_1186
.LBB56_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB56_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1174
.LBB56_1187:                            # %for.end4997
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB56_1188:                            # %if.end5002
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB56_1189:                            # %for.cond5004
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB56_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB56_1191:                            # %for.cond5008
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB56_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB56_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1191
.LBB56_1194:                            # %for.end5034
                                        #   in Loop: Header=BB56_1189 Depth=2
	jmp	.LBB56_1195
.LBB56_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB56_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1189
.LBB56_1196:                            # %for.end5037
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB56_1198
.LBB56_1197:                            # %if.else5039
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB56_1198:                            # %if.end5043
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1199
.LBB56_1199:                            # %if.end5044
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB56_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB56_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -20(%rbp)
.LBB56_1202:                            # %for.cond5053
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB56_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB56_1204:                            # %for.cond5057
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB56_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB56_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1204
.LBB56_1207:                            # %for.end5084
                                        #   in Loop: Header=BB56_1202 Depth=2
	jmp	.LBB56_1208
.LBB56_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB56_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1202
.LBB56_1209:                            # %for.end5087
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -24(%rbp)
.LBB56_1211:                            # %for.cond5091
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB56_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1213:                            # %for.cond5095
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB56_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -260(%rbp)
	movl	-224(%rbp), %eax
	subl	-260(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-260(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB56_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1213
.LBB56_1216:                            # %for.end5194
                                        #   in Loop: Header=BB56_1211 Depth=2
	jmp	.LBB56_1217
.LBB56_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB56_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1211
.LBB56_1218:                            # %for.end5197
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1219
.LBB56_1219:                            # %if.end5198
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -24(%rbp)
.LBB56_1221:                            # %for.cond5204
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB56_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1223:                            # %for.cond5208
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB56_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB56_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1223
.LBB56_1226:                            # %for.end5232
                                        #   in Loop: Header=BB56_1221 Depth=2
	jmp	.LBB56_1227
.LBB56_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB56_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1221
.LBB56_1228:                            # %for.end5235
                                        #   in Loop: Header=BB56_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB56_1229:                            # %for.cond5237
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB56_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1231:                            # %for.cond5241
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB56_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB56_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1231
.LBB56_1234:                            # %for.end5265
                                        #   in Loop: Header=BB56_1229 Depth=2
	jmp	.LBB56_1235
.LBB56_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB56_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1229
.LBB56_1236:                            # %for.end5268
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB56_1237:                            # %for.cond5270
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB56_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1239:                            # %for.cond5274
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB56_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB56_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1239
.LBB56_1242:                            # %for.end5289
                                        #   in Loop: Header=BB56_1237 Depth=2
	jmp	.LBB56_1243
.LBB56_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB56_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1237
.LBB56_1244:                            # %for.end5292
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB56_1245:                            # %for.cond5296
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB56_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB56_1247:                            # %for.cond5300
                                        #   Parent Loop BB56_171 Depth=1
                                        #     Parent Loop BB56_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -260(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-260(%rbp), %ecx
	movl	%ecx, -224(%rbp)
	movl	-260(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movl	-184(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-184(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB56_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB56_1251
.LBB56_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB56_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB56_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB56_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB56_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB56_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB56_1257
.LBB56_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	movl	-184(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB56_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB56_1256
.LBB56_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB56_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB56_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB56_1247 Depth=3
.LBB56_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB56_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB56_1260
.LBB56_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB56_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB56_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB56_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB56_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB56_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_1266
.LBB56_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB56_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB56_1265
.LBB56_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB56_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB56_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB56_1247 Depth=3
.LBB56_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB56_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB56_1269
.LBB56_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB56_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB56_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB56_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB56_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB56_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB56_1275
.LBB56_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB56_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB56_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB56_1274
.LBB56_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB56_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB56_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB56_1247 Depth=3
.LBB56_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB56_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB56_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1247
.LBB56_1277:                            # %for.end5546
                                        #   in Loop: Header=BB56_1245 Depth=2
	jmp	.LBB56_1278
.LBB56_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB56_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1245
.LBB56_1279:                            # %for.end5549
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1280
.LBB56_1280:                            # %if.end5550
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1282
.LBB56_1281:                            # %if.else5551
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB56_1282:                            # %if.end5554
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1283
.LBB56_1283:                            # %if.end5555
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1284
.LBB56_1284:                            # %if.end5556
                                        #   in Loop: Header=BB56_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB56_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB56_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB56_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB56_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB56_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB56_1289:                            # %if.end5574
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_1290
.LBB56_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
	jmp	.LBB56_171
.LBB56_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB56_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB56_1295
.LBB56_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB56_1299
.LBB56_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB56_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB56_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB56_1298:                            # %if.end5597
	jmp	.LBB56_1299
.LBB56_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB56_1395
.LBB56_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB56_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB56_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB56_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB56_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB56_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB56_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB56_1308:                            # %for.cond5623
                                        #   Parent Loop BB56_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB56_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB56_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_1308
.LBB56_1311:                            # %for.end5639
                                        #   in Loop: Header=BB56_1306 Depth=1
	jmp	.LBB56_1312
.LBB56_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB56_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1306
.LBB56_1313:                            # %for.end5642
	jmp	.LBB56_1370
.LBB56_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB56_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB56_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB56_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB56_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB56_1318:                            # %for.cond5651
                                        #   Parent Loop BB56_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB56_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB56_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB56_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_1318
.LBB56_1321:                            # %for.end5680
                                        #   in Loop: Header=BB56_1316 Depth=1
	jmp	.LBB56_1322
.LBB56_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB56_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1316
.LBB56_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB56_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB56_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB56_1326:                            # %for.cond5688
                                        #   Parent Loop BB56_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB56_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB56_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1326
.LBB56_1329:                            # %for.end5707
                                        #   in Loop: Header=BB56_1324 Depth=1
	jmp	.LBB56_1330
.LBB56_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB56_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1324
.LBB56_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB56_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB56_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB56_1335:                            # %for.cond5718
                                        #   Parent Loop BB56_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB56_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB56_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1335
.LBB56_1338:                            # %for.end5752
                                        #   in Loop: Header=BB56_1333 Depth=1
	jmp	.LBB56_1339
.LBB56_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB56_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1333
.LBB56_1340:                            # %for.end5755
	jmp	.LBB56_1341
.LBB56_1341:                            # %if.end5756
	jmp	.LBB56_1342
.LBB56_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB56_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB56_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB56_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB56_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB56_1347:                            # %for.cond5772
                                        #   Parent Loop BB56_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB56_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB56_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_1347
.LBB56_1350:                            # %for.end5788
                                        #   in Loop: Header=BB56_1345 Depth=1
	jmp	.LBB56_1351
.LBB56_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB56_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1345
.LBB56_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB56_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB56_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB56_1356
# %bb.1355:                             # %if.then5800
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB56_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB56_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB56_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB56_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB56_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB56_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB56_1362:                            # %for.cond5816
                                        #   Parent Loop BB56_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB56_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB56_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB56_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_1362
.LBB56_1365:                            # %for.end5842
                                        #   in Loop: Header=BB56_1360 Depth=1
	jmp	.LBB56_1366
.LBB56_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB56_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1360
.LBB56_1367:                            # %for.end5845
	jmp	.LBB56_1368
.LBB56_1368:                            # %if.end5846
	jmp	.LBB56_1369
.LBB56_1369:                            # %if.end5847
	jmp	.LBB56_1370
.LBB56_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB56_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB56_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB56_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB56_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB56_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB56_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB56_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB56_1382
.LBB56_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB56_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB56_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB56_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB56_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB56_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB56_1392
.LBB56_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB56_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB56_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB56_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB56_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB56_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB56_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB56_1394:                            # %if.end5973
	jmp	.LBB56_1395
.LBB56_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB56_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB56_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB56_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB56_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB56_1401
.LBB56_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB56_1402
.LBB56_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB56_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB56_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB56_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB56_1406
.LBB56_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB56_1406:                            # %if.end6019
	jmp	.LBB56_1407
.LBB56_1407:                            # %if.end6020
	jmp	.LBB56_1408
.LBB56_1408:                            # %if.end6021
	jmp	.LBB56_1409
.LBB56_1409:                            # %if.end6022
	jmp	.LBB56_1410
.LBB56_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB56_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB56_1413
.LBB56_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB56_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB56_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB56_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB56_1420
	jmp	.LBB56_1428
.LBB56_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB56_1428
	jmp	.LBB56_1420
.LBB56_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB56_1420
	jmp	.LBB56_1428
.LBB56_1420:                            # %land.lhs.true6050
	movq	-440(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB56_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB56_1425
	jmp	.LBB56_1428
.LBB56_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_1424
# %bb.1423:                             # %cond.true6058
	movq	-440(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB56_1428
	jmp	.LBB56_1425
.LBB56_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB56_1425
	jmp	.LBB56_1428
.LBB56_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB56_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB56_1427:                            # %if.end6068
	jmp	.LBB56_1428
.LBB56_1428:                            # %if.end6069
	jmp	.LBB56_1429
.LBB56_1429:                            # %if.end6070
	jmp	.LBB56_1430
.LBB56_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB56_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB56_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB56_1452
.LBB56_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB56_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB56_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB56_1437:                            # %lor.end6142
.LBB56_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB56_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB56_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB56_1441:                            # %lor.end6166
.LBB56_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB56_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB56_1445:                            # %lor.end6191
.LBB56_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB56_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB56_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB56_1449:                            # %lor.end6216
.LBB56_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB56_1451:                            # %if.end6232
	jmp	.LBB56_1452
.LBB56_1452:                            # %if.end6233
	jmp	.LBB56_1464
.LBB56_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB56_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB56_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB56_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB56_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB56_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB56_1463:                            # %if.end6319
	jmp	.LBB56_1464
.LBB56_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB56_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB56_1466:                            # %if.end6327
	cmpl	$698294322, -412(%rbp)  # imm = 0x299F2032
	jne	.LBB56_1468
.LBB56_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_1467
.Lfunc_end56:
	.size	encode_one_macroblock.27, .Lfunc_end56-encode_one_macroblock.27
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.28   # -- Begin function SetMotionVectorsMB.28
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.28,@function
SetMotionVectorsMB.28:                  # @SetMotionVectorsMB.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1639541800, -72(%rbp)  # imm = 0x61B96C28
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB57_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -4(%rbp)
.LBB57_3:                               # %for.cond3
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB57_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB57_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB57_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB57_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB57_10
.LBB57_9:                               # %cond.false
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB57_10:                              # %cond.end
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB57_11:                              # %if.end
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB57_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB57_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB57_15
.LBB57_14:                              # %if.else
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB57_15:                              # %if.end89
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_29
.LBB57_16:                              # %if.else90
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB57_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB57_28
.LBB57_18:                              # %if.else122
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB57_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB57_27
.LBB57_20:                              # %if.else174
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB57_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB57_26
.LBB57_22:                              # %if.else226
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB57_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB57_25
.LBB57_24:                              # %if.else298
                                        #   in Loop: Header=BB57_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB57_25:                              # %if.end299
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_26
.LBB57_26:                              # %if.end300
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_27
.LBB57_27:                              # %if.end301
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_28
.LBB57_28:                              # %if.end302
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_29
.LBB57_29:                              # %if.end303
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_30
.LBB57_30:                              # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_3
.LBB57_31:                              # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_32
.LBB57_32:                              # %for.inc304
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_1
.LBB57_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB57_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_37 Depth 2
                                        #       Child Loop BB57_39 Depth 3
                                        #         Child Loop BB57_41 Depth 4
                                        #           Child Loop BB57_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB57_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB57_35 Depth=1
	movl	$0, -8(%rbp)
.LBB57_37:                              # %for.cond313
                                        #   Parent Loop BB57_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_39 Depth 3
                                        #         Child Loop BB57_41 Depth 4
                                        #           Child Loop BB57_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB57_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB57_37 Depth=2
	movl	$0, -20(%rbp)
.LBB57_39:                              # %for.cond317
                                        #   Parent Loop BB57_35 Depth=1
                                        #     Parent Loop BB57_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_41 Depth 4
                                        #           Child Loop BB57_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB57_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB57_39 Depth=3
	movl	$0, -24(%rbp)
.LBB57_41:                              # %for.cond321
                                        #   Parent Loop BB57_35 Depth=1
                                        #     Parent Loop BB57_37 Depth=2
                                        #       Parent Loop BB57_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB57_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB57_41 Depth=4
	movl	$0, -28(%rbp)
.LBB57_43:                              # %for.cond325
                                        #   Parent Loop BB57_35 Depth=1
                                        #     Parent Loop BB57_37 Depth=2
                                        #       Parent Loop BB57_39 Depth=3
                                        #         Parent Loop BB57_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB57_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB57_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB57_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_43
.LBB57_46:                              # %for.end423
                                        #   in Loop: Header=BB57_41 Depth=4
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc424
                                        #   in Loop: Header=BB57_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_41
.LBB57_48:                              # %for.end426
                                        #   in Loop: Header=BB57_39 Depth=3
	jmp	.LBB57_49
.LBB57_49:                              # %for.inc427
                                        #   in Loop: Header=BB57_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_39
.LBB57_50:                              # %for.end429
                                        #   in Loop: Header=BB57_37 Depth=2
	jmp	.LBB57_51
.LBB57_51:                              # %for.inc430
                                        #   in Loop: Header=BB57_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_37
.LBB57_52:                              # %for.end432
                                        #   in Loop: Header=BB57_35 Depth=1
	jmp	.LBB57_53
.LBB57_53:                              # %for.inc433
                                        #   in Loop: Header=BB57_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_35
.LBB57_54:                              # %for.end435
	jmp	.LBB57_55
.LBB57_55:                              # %if.end436
	cmpl	$1639541800, -72(%rbp)  # imm = 0x61B96C28
	jne	.LBB57_57
.LBB57_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_56
.Lfunc_end57:
	.size	SetMotionVectorsMB.28, .Lfunc_end57-SetMotionVectorsMB.28
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.29         # -- Begin function RestoreMV8x8.29
	.p2align	4, 0x90
	.type	RestoreMV8x8.29,@function
RestoreMV8x8.29:                        # @RestoreMV8x8.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1661326130, -12(%rbp)  # imm = 0x6305D332
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	cmpl	$1661326130, -12(%rbp)  # imm = 0x6305D332
	jne	.LBB58_6
.LBB58_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_5
.Lfunc_end58:
	.size	RestoreMV8x8.29, .Lfunc_end58-RestoreMV8x8.29
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.30 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.30
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.30,@function
Mode_Decision_for_Intra4x4Macroblock.30: # @Mode_Decision_for_Intra4x4Macroblock.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$625836116, -24(%rbp)   # imm = 0x254D8054
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB59_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB59_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB59_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB59_4:                               # %if.end
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_1
.LBB59_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$625836116, -24(%rbp)   # imm = 0x254D8054
	jne	.LBB59_8
.LBB59_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_7
.Lfunc_end59:
	.size	Mode_Decision_for_Intra4x4Macroblock.30, .Lfunc_end59-Mode_Decision_for_Intra4x4Macroblock.30
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.31       # -- Begin function UpdatePixelMap.31
	.p2align	4, 0x90
	.type	UpdatePixelMap.31,@function
UpdatePixelMap.31:                      # @UpdatePixelMap.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1050488740, -28(%rbp)  # imm = 0x3E9D2FA4
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB60_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB60_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	$0, -8(%rbp)
.LBB60_4:                               # %for.cond2
                                        #   Parent Loop BB60_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB60_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB60_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB60_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_4
.LBB60_7:                               # %for.end
                                        #   in Loop: Header=BB60_2 Depth=1
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc7
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_2
.LBB60_9:                               # %for.end9
	jmp	.LBB60_41
.LBB60_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB60_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_13 Depth 2
                                        #       Child Loop BB60_16 Depth 3
                                        #         Child Loop BB60_18 Depth 4
                                        #       Child Loop BB60_25 Depth 3
                                        #         Child Loop BB60_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	$0, -16(%rbp)
.LBB60_13:                              # %for.cond14
                                        #   Parent Loop BB60_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_16 Depth 3
                                        #         Child Loop BB60_18 Depth 4
                                        #       Child Loop BB60_25 Depth 3
                                        #         Child Loop BB60_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB60_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB60_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB60_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB60_16:                              # %for.cond27
                                        #   Parent Loop BB60_11 Depth=1
                                        #     Parent Loop BB60_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB60_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB60_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB60_18:                              # %for.cond31
                                        #   Parent Loop BB60_11 Depth=1
                                        #     Parent Loop BB60_13 Depth=2
                                        #       Parent Loop BB60_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB60_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB60_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB60_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_18
.LBB60_21:                              # %for.end40
                                        #   in Loop: Header=BB60_16 Depth=3
	jmp	.LBB60_22
.LBB60_22:                              # %for.inc41
                                        #   in Loop: Header=BB60_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_16
.LBB60_23:                              # %for.end43
                                        #   in Loop: Header=BB60_13 Depth=2
	jmp	.LBB60_36
.LBB60_24:                              # %if.else44
                                        #   in Loop: Header=BB60_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB60_25:                              # %for.cond46
                                        #   Parent Loop BB60_11 Depth=1
                                        #     Parent Loop BB60_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB60_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB60_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB60_27:                              # %for.cond50
                                        #   Parent Loop BB60_11 Depth=1
                                        #     Parent Loop BB60_13 Depth=2
                                        #       Parent Loop BB60_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB60_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB60_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB60_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB60_31
.LBB60_30:                              # %cond.false
                                        #   in Loop: Header=BB60_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB60_31:                              # %cond.end
                                        #   in Loop: Header=BB60_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB60_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_27
.LBB60_33:                              # %for.end76
                                        #   in Loop: Header=BB60_25 Depth=3
	jmp	.LBB60_34
.LBB60_34:                              # %for.inc77
                                        #   in Loop: Header=BB60_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_25
.LBB60_35:                              # %for.end79
                                        #   in Loop: Header=BB60_13 Depth=2
	jmp	.LBB60_36
.LBB60_36:                              # %if.end
                                        #   in Loop: Header=BB60_13 Depth=2
	jmp	.LBB60_37
.LBB60_37:                              # %for.inc80
                                        #   in Loop: Header=BB60_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_13
.LBB60_38:                              # %for.end82
                                        #   in Loop: Header=BB60_11 Depth=1
	jmp	.LBB60_39
.LBB60_39:                              # %for.inc83
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_11
.LBB60_40:                              # %for.end85
	jmp	.LBB60_41
.LBB60_41:                              # %if.end86
	cmpl	$1050488740, -28(%rbp)  # imm = 0x3E9D2FA4
	jne	.LBB60_43
.LBB60_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_42
.Lfunc_end60:
	.size	UpdatePixelMap.31, .Lfunc_end60-UpdatePixelMap.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.32
.LCPI61_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI61_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.32
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.32,@function
Mode_Decision_for_8x8IntraBlocks.32:    # @Mode_Decision_for_8x8IntraBlocks.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1614230532, -28(%rbp)  # imm = 0x60373404
	movl	%edi, -20(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB61_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-20(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB61_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$1, -16(%rbp)
.LBB61_4:                               # %if.end
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_1
.LBB61_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1614230532, -28(%rbp)  # imm = 0x60373404
	jne	.LBB61_8
.LBB61_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_7
.Lfunc_end61:
	.size	Mode_Decision_for_8x8IntraBlocks.32, .Lfunc_end61-Mode_Decision_for_8x8IntraBlocks.32
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.33 # -- Begin function RDCost_for_4x4IntraBlocks.33
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.33,@function
RDCost_for_4x4IntraBlocks.33:           # @RDCost_for_4x4IntraBlocks.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$660672468, -68(%rbp)   # imm = 0x27610FD4
	movq	%rdi, -120(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	$0, -72(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB62_10
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB62_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_4 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB62_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB62_4:                               # %for.cond15
                                        #   Parent Loop BB62_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB62_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-76(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-112(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB62_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_4
.LBB62_7:                               # %for.end
                                        #   in Loop: Header=BB62_2 Depth=1
	jmp	.LBB62_8
.LBB62_8:                               # %for.inc33
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_2
.LBB62_9:                               # %for.end35
	jmp	.LBB62_10
.LBB62_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB62_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB62_16
.LBB62_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB62_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB62_15
.LBB62_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB62_15:                              # %cond.end
.LBB62_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB62_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB62_18:                              # %if.end50
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB62_21
.LBB62_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB62_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-20(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_24
.LBB62_23:                              # %if.else69
	movl	-8(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB62_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB62_27
.LBB62_26:                              # %if.else81
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB62_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$660672468, -68(%rbp)   # imm = 0x27610FD4
	jne	.LBB62_29
.LBB62_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB62_28
.Lfunc_end62:
	.size	RDCost_for_4x4IntraBlocks.33, .Lfunc_end62-RDCost_for_4x4IntraBlocks.33
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.34       # -- Begin function UpdatePixelMap.34
	.p2align	4, 0x90
	.type	UpdatePixelMap.34,@function
UpdatePixelMap.34:                      # @UpdatePixelMap.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$974654749, -28(%rbp)   # imm = 0x3A180D1D
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB63_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB63_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	$0, -4(%rbp)
.LBB63_4:                               # %for.cond2
                                        #   Parent Loop BB63_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB63_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB63_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB63_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_4
.LBB63_7:                               # %for.end
                                        #   in Loop: Header=BB63_2 Depth=1
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc7
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_2
.LBB63_9:                               # %for.end9
	jmp	.LBB63_41
.LBB63_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB63_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_13 Depth 2
                                        #       Child Loop BB63_16 Depth 3
                                        #         Child Loop BB63_18 Depth 4
                                        #       Child Loop BB63_25 Depth 3
                                        #         Child Loop BB63_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB63_11 Depth=1
	movl	$0, -16(%rbp)
.LBB63_13:                              # %for.cond14
                                        #   Parent Loop BB63_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_16 Depth 3
                                        #         Child Loop BB63_18 Depth 4
                                        #       Child Loop BB63_25 Depth 3
                                        #         Child Loop BB63_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB63_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB63_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB63_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB63_16:                              # %for.cond27
                                        #   Parent Loop BB63_11 Depth=1
                                        #     Parent Loop BB63_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB63_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB63_18:                              # %for.cond31
                                        #   Parent Loop BB63_11 Depth=1
                                        #     Parent Loop BB63_13 Depth=2
                                        #       Parent Loop BB63_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB63_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB63_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_18
.LBB63_21:                              # %for.end40
                                        #   in Loop: Header=BB63_16 Depth=3
	jmp	.LBB63_22
.LBB63_22:                              # %for.inc41
                                        #   in Loop: Header=BB63_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_16
.LBB63_23:                              # %for.end43
                                        #   in Loop: Header=BB63_13 Depth=2
	jmp	.LBB63_36
.LBB63_24:                              # %if.else44
                                        #   in Loop: Header=BB63_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB63_25:                              # %for.cond46
                                        #   Parent Loop BB63_11 Depth=1
                                        #     Parent Loop BB63_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB63_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB63_27:                              # %for.cond50
                                        #   Parent Loop BB63_11 Depth=1
                                        #     Parent Loop BB63_13 Depth=2
                                        #       Parent Loop BB63_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB63_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB63_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB63_31
.LBB63_30:                              # %cond.false
                                        #   in Loop: Header=BB63_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB63_31:                              # %cond.end
                                        #   in Loop: Header=BB63_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB63_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_27
.LBB63_33:                              # %for.end76
                                        #   in Loop: Header=BB63_25 Depth=3
	jmp	.LBB63_34
.LBB63_34:                              # %for.inc77
                                        #   in Loop: Header=BB63_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_25
.LBB63_35:                              # %for.end79
                                        #   in Loop: Header=BB63_13 Depth=2
	jmp	.LBB63_36
.LBB63_36:                              # %if.end
                                        #   in Loop: Header=BB63_13 Depth=2
	jmp	.LBB63_37
.LBB63_37:                              # %for.inc80
                                        #   in Loop: Header=BB63_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_38:                              # %for.end82
                                        #   in Loop: Header=BB63_11 Depth=1
	jmp	.LBB63_39
.LBB63_39:                              # %for.inc83
                                        #   in Loop: Header=BB63_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_11
.LBB63_40:                              # %for.end85
	jmp	.LBB63_41
.LBB63_41:                              # %if.end86
	cmpl	$974654749, -28(%rbp)   # imm = 0x3A180D1D
	jne	.LBB63_43
.LBB63_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_42
.Lfunc_end63:
	.size	UpdatePixelMap.34, .Lfunc_end63-UpdatePixelMap.34
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.35            # -- Begin function I16Offset.35
	.p2align	4, 0x90
	.type	I16Offset.35,@function
I16Offset.35:                           # @I16Offset.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$293037139, -20(%rbp)   # imm = 0x11776453
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$293037139, -20(%rbp)   # imm = 0x11776453
	jne	.LBB64_2
.LBB64_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_1
.Lfunc_end64:
	.size	I16Offset.35, .Lfunc_end64-I16Offset.35
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.36 # -- Begin function Intra16x16_Mode_Decision.36
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.36,@function
Intra16x16_Mode_Decision.36:            # @Intra16x16_Mode_Decision.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$757369015, -56(%rbp)   # imm = 0x2D2488B7
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB65_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB65_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB65_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB65_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB65_4 Depth=1
	movl	$0, -4(%rbp)
.LBB65_6:                               # %for.cond4
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB65_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB65_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_6
.LBB65_9:                               # %for.end
                                        #   in Loop: Header=BB65_4 Depth=1
	jmp	.LBB65_10
.LBB65_10:                              # %for.inc87
                                        #   in Loop: Header=BB65_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_4
.LBB65_11:                              # %for.end89
	jmp	.LBB65_12
.LBB65_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB65_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB65_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB65_14 Depth=1
	movl	$0, -4(%rbp)
.LBB65_16:                              # %for.cond99
                                        #   Parent Loop BB65_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB65_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB65_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_16
.LBB65_19:                              # %for.end123
                                        #   in Loop: Header=BB65_14 Depth=1
	jmp	.LBB65_20
.LBB65_20:                              # %for.inc124
                                        #   in Loop: Header=BB65_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_14
.LBB65_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB65_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB65_22 Depth=1
	movl	$0, -4(%rbp)
.LBB65_24:                              # %for.cond132
                                        #   Parent Loop BB65_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB65_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB65_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_24
.LBB65_27:                              # %for.end156
                                        #   in Loop: Header=BB65_22 Depth=1
	jmp	.LBB65_28
.LBB65_28:                              # %for.inc157
                                        #   in Loop: Header=BB65_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_22
.LBB65_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB65_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB65_30 Depth=1
	movl	$0, -4(%rbp)
.LBB65_32:                              # %for.cond165
                                        #   Parent Loop BB65_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB65_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_32
.LBB65_35:                              # %for.end180
                                        #   in Loop: Header=BB65_30 Depth=1
	jmp	.LBB65_36
.LBB65_36:                              # %for.inc181
                                        #   in Loop: Header=BB65_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_30
.LBB65_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB65_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB65_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB65_38 Depth=1
	movl	$0, -4(%rbp)
.LBB65_40:                              # %for.cond190
                                        #   Parent Loop BB65_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB65_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB65_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_44
.LBB65_43:                              # %cond.false
                                        #   in Loop: Header=BB65_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB65_44:                              # %cond.end
                                        #   in Loop: Header=BB65_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB65_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB65_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_50
.LBB65_46:                              # %cond.false246
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_49
.LBB65_48:                              # %cond.false260
                                        #   in Loop: Header=BB65_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB65_49:                              # %cond.end271
                                        #   in Loop: Header=BB65_40 Depth=2
.LBB65_50:                              # %cond.end273
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB65_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB65_53
.LBB65_52:                              # %cond.false295
                                        #   in Loop: Header=BB65_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB65_53:                              # %cond.end305
                                        #   in Loop: Header=BB65_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB65_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB65_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_59
.LBB65_55:                              # %cond.false311
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_58
.LBB65_57:                              # %cond.false324
                                        #   in Loop: Header=BB65_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB65_58:                              # %cond.end334
                                        #   in Loop: Header=BB65_40 Depth=2
.LBB65_59:                              # %cond.end336
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB65_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB65_62
.LBB65_61:                              # %cond.false359
                                        #   in Loop: Header=BB65_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB65_62:                              # %cond.end370
                                        #   in Loop: Header=BB65_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB65_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB65_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_68
.LBB65_64:                              # %cond.false376
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB65_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_67
.LBB65_66:                              # %cond.false390
                                        #   in Loop: Header=BB65_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB65_67:                              # %cond.end401
                                        #   in Loop: Header=BB65_40 Depth=2
.LBB65_68:                              # %cond.end403
                                        #   in Loop: Header=BB65_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB65_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_40
.LBB65_70:                              # %for.end416
                                        #   in Loop: Header=BB65_38 Depth=1
	jmp	.LBB65_71
.LBB65_71:                              # %for.inc417
                                        #   in Loop: Header=BB65_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_38
.LBB65_72:                              # %for.end419
	jmp	.LBB65_73
.LBB65_73:                              # %if.end420
	cmpl	$757369015, -56(%rbp)   # imm = 0x2D2488B7
	jne	.LBB65_75
.LBB65_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_74
.Lfunc_end65:
	.size	Intra16x16_Mode_Decision.36, .Lfunc_end65-Intra16x16_Mode_Decision.36
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.37 # -- Begin function SetModesAndRefframeForBlocks.37
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.37,@function
SetModesAndRefframeForBlocks.37:        # @SetModesAndRefframeForBlocks.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$232713434, -36(%rbp)   # imm = 0xDDEECDA
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB66_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB66_4
.LBB66_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB66_4
.LBB66_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB66_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB66_7
.LBB66_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB66_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB66_42
# %bb.8:                                # %if.end
	movq	.LJTI66_0(,%rax,8), %rax
	jmpq	*%rax
.LBB66_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB66_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB66_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB66_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB66_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false26
                                        #   in Loop: Header=BB66_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_14
.LBB66_14:                              # %cond.end27
                                        #   in Loop: Header=BB66_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB66_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_10
.LBB66_16:                              # %for.end
	jmp	.LBB66_43
.LBB66_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB66_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB66_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB66_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_18
.LBB66_21:                              # %for.end49
	jmp	.LBB66_43
.LBB66_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB66_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB66_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_23
.LBB66_26:                              # %for.end71
	jmp	.LBB66_43
.LBB66_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB66_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB66_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB66_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_28
.LBB66_31:                              # %for.end85
	jmp	.LBB66_43
.LBB66_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB66_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB66_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB66_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_33
.LBB66_36:                              # %for.end99
	jmp	.LBB66_43
.LBB66_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB66_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB66_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB66_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB66_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_38
.LBB66_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB66_43
.LBB66_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB66_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB66_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB66_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB66_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB66_70
.LBB66_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB66_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB66_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB66_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB66_49 Depth=1
	movl	$0, -4(%rbp)
.LBB66_51:                              # %for.cond131
                                        #   Parent Loop BB66_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB66_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB66_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB66_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB66_55
.LBB66_54:                              # %if.else174
                                        #   in Loop: Header=BB66_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB66_55:                              # %if.end195
                                        #   in Loop: Header=BB66_51 Depth=2
	jmp	.LBB66_56
.LBB66_56:                              # %for.inc196
                                        #   in Loop: Header=BB66_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_51
.LBB66_57:                              # %for.end198
                                        #   in Loop: Header=BB66_49 Depth=1
	jmp	.LBB66_58
.LBB66_58:                              # %for.inc199
                                        #   in Loop: Header=BB66_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_49
.LBB66_59:                              # %for.end201
	jmp	.LBB66_69
.LBB66_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB66_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB66_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB66_61 Depth=1
	movl	$0, -4(%rbp)
.LBB66_63:                              # %for.cond207
                                        #   Parent Loop BB66_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB66_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB66_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_63
.LBB66_66:                              # %for.end227
                                        #   in Loop: Header=BB66_61 Depth=1
	jmp	.LBB66_67
.LBB66_67:                              # %for.inc228
                                        #   in Loop: Header=BB66_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_61
.LBB66_68:                              # %for.end230
	jmp	.LBB66_69
.LBB66_69:                              # %if.end231
	jmp	.LBB66_127
.LBB66_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB66_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB66_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB66_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB66_72 Depth=1
	movl	$0, -4(%rbp)
.LBB66_74:                              # %for.cond239
                                        #   Parent Loop BB66_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB66_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB66_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB66_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB66_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB66_105
.LBB66_78:                              # %if.else298
                                        #   in Loop: Header=BB66_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB66_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB66_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB66_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB66_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB66_90
.LBB66_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB66_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB66_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB66_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB66_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB66_90
.LBB66_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB66_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB66_90
.LBB66_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB66_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB66_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB66_90
.LBB66_89:                              # %if.then356
                                        #   in Loop: Header=BB66_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB66_104
.LBB66_90:                              # %if.else377
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB66_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB66_96
.LBB66_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB66_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB66_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB66_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB66_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB66_96
.LBB66_95:                              # %cond.true404
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB66_97
.LBB66_96:                              # %cond.false410
                                        #   in Loop: Header=BB66_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_97
.LBB66_97:                              # %cond.end411
                                        #   in Loop: Header=BB66_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB66_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB66_102
.LBB66_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB66_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB66_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB66_102
.LBB66_101:                             # %cond.true448
                                        #   in Loop: Header=BB66_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB66_103
.LBB66_102:                             # %cond.false454
                                        #   in Loop: Header=BB66_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_103
.LBB66_103:                             # %cond.end455
                                        #   in Loop: Header=BB66_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB66_104:                             # %if.end468
                                        #   in Loop: Header=BB66_74 Depth=2
	jmp	.LBB66_105
.LBB66_105:                             # %if.end469
                                        #   in Loop: Header=BB66_74 Depth=2
	jmp	.LBB66_106
.LBB66_106:                             # %for.inc470
                                        #   in Loop: Header=BB66_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_74
.LBB66_107:                             # %for.end472
                                        #   in Loop: Header=BB66_72 Depth=1
	jmp	.LBB66_108
.LBB66_108:                             # %for.inc473
                                        #   in Loop: Header=BB66_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_72
.LBB66_109:                             # %for.end475
	jmp	.LBB66_126
.LBB66_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB66_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB66_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB66_111 Depth=1
	movl	$0, -4(%rbp)
.LBB66_113:                             # %for.cond481
                                        #   Parent Loop BB66_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB66_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB66_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB66_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB66_120
.LBB66_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB66_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB66_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB66_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB66_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB66_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB66_120
.LBB66_119:                             # %cond.true519
                                        #   in Loop: Header=BB66_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB66_121
.LBB66_120:                             # %cond.false525
                                        #   in Loop: Header=BB66_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_121
.LBB66_121:                             # %cond.end526
                                        #   in Loop: Header=BB66_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB66_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_113
.LBB66_123:                             # %for.end541
                                        #   in Loop: Header=BB66_111 Depth=1
	jmp	.LBB66_124
.LBB66_124:                             # %for.inc542
                                        #   in Loop: Header=BB66_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_111
.LBB66_125:                             # %for.end544
	jmp	.LBB66_126
.LBB66_126:                             # %if.end545
	jmp	.LBB66_127
.LBB66_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB66_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB66_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB66_128 Depth=1
	movl	$0, -4(%rbp)
.LBB66_130:                             # %for.cond551
                                        #   Parent Loop BB66_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB66_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB66_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB66_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB66_134
.LBB66_133:                             # %cond.false584
                                        #   in Loop: Header=BB66_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB66_134
.LBB66_134:                             # %cond.end585
                                        #   in Loop: Header=BB66_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB66_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_130
.LBB66_136:                             # %for.end598
                                        #   in Loop: Header=BB66_128 Depth=1
	jmp	.LBB66_137
.LBB66_137:                             # %for.inc599
                                        #   in Loop: Header=BB66_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_128
.LBB66_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB66_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB66_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB66_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB66_140 Depth=1
	movl	$0, -4(%rbp)
.LBB66_142:                             # %for.cond608
                                        #   Parent Loop BB66_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB66_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB66_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB66_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB66_146
.LBB66_145:                             # %cond.false642
                                        #   in Loop: Header=BB66_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB66_146
.LBB66_146:                             # %cond.end643
                                        #   in Loop: Header=BB66_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB66_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_142
.LBB66_148:                             # %for.end657
                                        #   in Loop: Header=BB66_140 Depth=1
	jmp	.LBB66_149
.LBB66_149:                             # %for.inc658
                                        #   in Loop: Header=BB66_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_140
.LBB66_150:                             # %for.end660
	jmp	.LBB66_151
.LBB66_151:                             # %if.end661
	cmpl	$232713434, -36(%rbp)   # imm = 0xDDEECDA
	jne	.LBB66_153
.LBB66_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_152
.Lfunc_end66:
	.size	SetModesAndRefframeForBlocks.37, .Lfunc_end66-SetModesAndRefframeForBlocks.37
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI66_0:
	.quad	.LBB66_9
	.quad	.LBB66_17
	.quad	.LBB66_17
	.quad	.LBB66_17
	.quad	.LBB66_42
	.quad	.LBB66_42
	.quad	.LBB66_42
	.quad	.LBB66_42
	.quad	.LBB66_22
	.quad	.LBB66_27
	.quad	.LBB66_32
	.quad	.LBB66_42
	.quad	.LBB66_42
	.quad	.LBB66_37
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.38
.LCPI67_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI67_1:
	.quad	4622945017495814144     # double 12
.LCPI67_2:
	.quad	4607182418800017408     # double 1
.LCPI67_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI67_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI67_5:
	.quad	4611686018427387904     # double 2
.LCPI67_6:
	.quad	4613937818241073152     # double 3
.LCPI67_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI67_8:
	.quad	4616189618054758400     # double 4
.LCPI67_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI67_10:
	.quad	4618441417868443648     # double 6
.LCPI67_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI67_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI67_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI67_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI67_15:
	.quad	4602678819172646912     # double 0.5
.LCPI67_16:
	.quad	4679240012837945344     # double 65536
.LCPI67_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI67_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.38
	.p2align	4, 0x90
	.type	encode_one_macroblock.38,@function
encode_one_macroblock.38:               # @encode_one_macroblock.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1674892148, -412(%rbp) # imm = 0x63D4D374
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -184(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -176(%rbp)
	movl	$0, -308(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB67_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB67_4
.LBB67_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB67_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB67_5
.LBB67_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB67_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -312(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -416(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB67_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB67_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB67_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB67_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB67_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB67_11:                              # %land.end
.LBB67_12:                              # %lor.end36
.LBB67_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -320(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB67_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB67_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB67_17:                              # %lor.end51
.LBB67_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB67_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB67_21
.LBB67_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB67_21
.LBB67_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB67_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB67_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -288(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -288(%rbp)
	je	.LBB67_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB67_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB67_27
.LBB67_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB67_27:                              # %if.end
	jmp	.LBB67_29
.LBB67_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB67_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB67_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB67_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB67_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB67_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB67_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB67_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB67_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB67_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB67_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB67_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB67_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB67_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB67_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB67_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB67_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-416(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB67_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB67_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB67_53 Depth=1
	movl	$0, -56(%rbp)
.LBB67_55:                              # %for.cond156
                                        #   Parent Loop BB67_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB67_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB67_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB67_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB67_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB67_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB67_59:                              # %if.end183
                                        #   in Loop: Header=BB67_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB67_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB67_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB67_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB67_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB67_62:                              # %if.end202
                                        #   in Loop: Header=BB67_55 Depth=2
	jmp	.LBB67_63
.LBB67_63:                              # %for.inc
                                        #   in Loop: Header=BB67_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_55
.LBB67_64:                              # %for.end
                                        #   in Loop: Header=BB67_53 Depth=1
	jmp	.LBB67_65
.LBB67_65:                              # %for.inc203
                                        #   in Loop: Header=BB67_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB67_53
.LBB67_66:                              # %for.end205
	jmp	.LBB67_93
.LBB67_67:                              # %if.else206
	cmpl	$0, -288(%rbp)
	je	.LBB67_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB67_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	$0, -56(%rbp)
.LBB67_71:                              # %for.cond215
                                        #   Parent Loop BB67_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB67_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB67_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB67_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB67_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB67_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB67_75:                              # %if.end244
                                        #   in Loop: Header=BB67_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB67_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB67_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB67_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB67_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB67_78:                              # %if.end263
                                        #   in Loop: Header=BB67_71 Depth=2
	jmp	.LBB67_79
.LBB67_79:                              # %for.inc264
                                        #   in Loop: Header=BB67_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_71
.LBB67_80:                              # %for.end266
                                        #   in Loop: Header=BB67_69 Depth=1
	jmp	.LBB67_81
.LBB67_81:                              # %for.inc267
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB67_69
.LBB67_82:                              # %for.end269
	jmp	.LBB67_92
.LBB67_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB67_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB67_84 Depth=1
	movl	$0, -56(%rbp)
.LBB67_86:                              # %for.cond277
                                        #   Parent Loop BB67_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB67_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB67_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_86
.LBB67_89:                              # %for.end290
                                        #   in Loop: Header=BB67_84 Depth=1
	jmp	.LBB67_90
.LBB67_90:                              # %for.inc291
                                        #   in Loop: Header=BB67_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB67_84
.LBB67_91:                              # %for.end293
	jmp	.LBB67_92
.LBB67_92:                              # %if.end294
	jmp	.LBB67_93
.LBB67_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI67_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB67_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB67_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB67_99
.LBB67_98:                              # %if.else315
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB67_99:                              # %if.end326
	jmp	.LBB67_159
.LBB67_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB67_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI67_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB67_104
.LBB67_103:                             # %cond.false336
	vmovsd	.LCPI67_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB67_104:                             # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB67_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI67_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB67_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI67_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI67_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_109
.LBB67_108:                             # %cond.false357
	vmovsd	.LCPI67_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB67_109:                             # %cond.end359
	vmovsd	.LCPI67_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI67_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_115
.LBB67_111:                             # %cond.false364
	vmovsd	.LCPI67_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI67_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_114
.LBB67_113:                             # %cond.false369
	vmovsd	.LCPI67_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB67_114:                             # %cond.end371
.LBB67_115:                             # %cond.end373
	jmp	.LBB67_129
.LBB67_116:                             # %cond.false375
	cmpl	$0, -312(%rbp)
	je	.LBB67_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_120
.LBB67_119:                             # %cond.false382
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB67_120:                             # %cond.end384
	vmovsd	.LCPI67_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI67_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_126
.LBB67_122:                             # %cond.false389
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_125
.LBB67_124:                             # %cond.false394
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB67_125:                             # %cond.end396
.LBB67_126:                             # %cond.end398
	jmp	.LBB67_128
.LBB67_127:                             # %cond.false400
	vmovsd	.LCPI67_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_128
.LBB67_128:                             # %cond.end401
.LBB67_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB67_146
.LBB67_130:                             # %if.else406
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI67_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB67_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI67_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_145
.LBB67_132:                             # %cond.false415
	cmpl	$0, -312(%rbp)
	je	.LBB67_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_136
.LBB67_135:                             # %cond.false422
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB67_136:                             # %cond.end424
	vmovsd	.LCPI67_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI67_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_142
.LBB67_138:                             # %cond.false429
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB67_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI67_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_141
.LBB67_140:                             # %cond.false434
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB67_141:                             # %cond.end436
.LBB67_142:                             # %cond.end438
	jmp	.LBB67_144
.LBB67_143:                             # %cond.false440
	vmovsd	.LCPI67_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB67_144
.LBB67_144:                             # %cond.end441
.LBB67_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB67_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB67_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB67_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI67_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI67_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI67_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB67_152
.LBB67_151:                             # %cond.false465
	vmovsd	.LCPI67_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB67_152:                             # %cond.end473
	vmovsd	.LCPI67_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB67_153:                             # %if.end477
	jmp	.LBB67_158
.LBB67_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB67_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI67_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB67_157:                             # %if.end487
	jmp	.LBB67_158
.LBB67_158:                             # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB67_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB67_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI67_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB67_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB67_166
.LBB67_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB67_165
.LBB67_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB67_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB67_166:                             # %if.end510
	vmovsd	.LCPI67_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI67_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB67_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB67_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB67_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB67_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_167
.LBB67_170:                             # %for.end522
	movl	$0, -260(%rbp)
.LBB67_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_181 Depth 2
                                        #       Child Loop BB67_184 Depth 3
                                        #         Child Loop BB67_190 Depth 4
                                        #         Child Loop BB67_210 Depth 4
                                        #         Child Loop BB67_300 Depth 4
                                        #           Child Loop BB67_302 Depth 5
                                        #         Child Loop BB67_309 Depth 4
                                        #           Child Loop BB67_311 Depth 5
                                        #         Child Loop BB67_326 Depth 4
                                        #           Child Loop BB67_328 Depth 5
                                        #         Child Loop BB67_335 Depth 4
                                        #           Child Loop BB67_337 Depth 5
                                        #         Child Loop BB67_355 Depth 4
                                        #           Child Loop BB67_357 Depth 5
                                        #         Child Loop BB67_374 Depth 4
                                        #           Child Loop BB67_376 Depth 5
                                        #     Child Loop BB67_416 Depth 2
                                        #       Child Loop BB67_418 Depth 3
                                        #         Child Loop BB67_445 Depth 4
                                        #         Child Loop BB67_464 Depth 4
                                        #           Child Loop BB67_466 Depth 5
                                        #         Child Loop BB67_473 Depth 4
                                        #         Child Loop BB67_508 Depth 4
                                        #           Child Loop BB67_510 Depth 5
                                        #         Child Loop BB67_532 Depth 4
                                        #           Child Loop BB67_534 Depth 5
                                        #             Child Loop BB67_536 Depth 6
                                        #         Child Loop BB67_544 Depth 4
                                        #           Child Loop BB67_546 Depth 5
                                        #       Child Loop BB67_569 Depth 3
                                        #         Child Loop BB67_571 Depth 4
                                        #           Child Loop BB67_573 Depth 5
                                        #       Child Loop BB67_581 Depth 3
                                        #         Child Loop BB67_583 Depth 4
                                        #     Child Loop BB67_601 Depth 2
                                        #       Child Loop BB67_603 Depth 3
                                        #         Child Loop BB67_614 Depth 4
                                        #         Child Loop BB67_633 Depth 4
                                        #           Child Loop BB67_635 Depth 5
                                        #         Child Loop BB67_642 Depth 4
                                        #         Child Loop BB67_677 Depth 4
                                        #           Child Loop BB67_679 Depth 5
                                        #         Child Loop BB67_701 Depth 4
                                        #           Child Loop BB67_703 Depth 5
                                        #             Child Loop BB67_705 Depth 6
                                        #         Child Loop BB67_713 Depth 4
                                        #           Child Loop BB67_715 Depth 5
                                        #         Child Loop BB67_723 Depth 4
                                        #           Child Loop BB67_725 Depth 5
                                        #       Child Loop BB67_745 Depth 3
                                        #         Child Loop BB67_747 Depth 4
                                        #           Child Loop BB67_749 Depth 5
                                        #       Child Loop BB67_757 Depth 3
                                        #         Child Loop BB67_759 Depth 4
                                        #       Child Loop BB67_766 Depth 3
                                        #         Child Loop BB67_768 Depth 4
                                        #       Child Loop BB67_778 Depth 3
                                        #         Child Loop BB67_780 Depth 4
                                        #       Child Loop BB67_786 Depth 3
                                        #       Child Loop BB67_791 Depth 3
                                        #         Child Loop BB67_793 Depth 4
                                        #     Child Loop BB67_803 Depth 2
                                        #       Child Loop BB67_805 Depth 3
                                        #     Child Loop BB67_835 Depth 2
                                        #       Child Loop BB67_853 Depth 3
                                        #         Child Loop BB67_908 Depth 4
                                        #           Child Loop BB67_911 Depth 5
                                        #             Child Loop BB67_913 Depth 6
                                        #           Child Loop BB67_920 Depth 5
                                        #             Child Loop BB67_922 Depth 6
                                        #         Child Loop BB67_955 Depth 4
                                        #           Child Loop BB67_957 Depth 5
                                        #     Child Loop BB67_981 Depth 2
                                        #       Child Loop BB67_1014 Depth 3
                                        #         Child Loop BB67_1017 Depth 4
                                        #           Child Loop BB67_1019 Depth 5
                                        #         Child Loop BB67_1026 Depth 4
                                        #           Child Loop BB67_1028 Depth 5
                                        #       Child Loop BB67_1061 Depth 3
                                        #         Child Loop BB67_1063 Depth 4
                                        #     Child Loop BB67_1113 Depth 2
                                        #       Child Loop BB67_1115 Depth 3
                                        #     Child Loop BB67_1127 Depth 2
                                        #       Child Loop BB67_1129 Depth 3
                                        #         Child Loop BB67_1131 Depth 4
                                        #     Child Loop BB67_1141 Depth 2
                                        #       Child Loop BB67_1143 Depth 3
                                        #     Child Loop BB67_1152 Depth 2
                                        #       Child Loop BB67_1154 Depth 3
                                        #     Child Loop BB67_1160 Depth 2
                                        #       Child Loop BB67_1162 Depth 3
                                        #     Child Loop BB67_1174 Depth 2
                                        #       Child Loop BB67_1176 Depth 3
                                        #         Child Loop BB67_1178 Depth 4
                                        #     Child Loop BB67_1189 Depth 2
                                        #       Child Loop BB67_1191 Depth 3
                                        #     Child Loop BB67_1202 Depth 2
                                        #       Child Loop BB67_1204 Depth 3
                                        #     Child Loop BB67_1211 Depth 2
                                        #       Child Loop BB67_1213 Depth 3
                                        #     Child Loop BB67_1221 Depth 2
                                        #       Child Loop BB67_1223 Depth 3
                                        #     Child Loop BB67_1229 Depth 2
                                        #       Child Loop BB67_1231 Depth 3
                                        #     Child Loop BB67_1237 Depth 2
                                        #       Child Loop BB67_1239 Depth 3
                                        #     Child Loop BB67_1245 Depth 2
                                        #       Child Loop BB67_1247 Depth 3
	movl	-260(%rbp), %eax
	cmpl	-320(%rbp), %eax
	jge	.LBB67_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$2, -320(%rbp)
	jne	.LBB67_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB67_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB67_176
.LBB67_175:                             # %if.else534
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB67_176:                             # %if.end536
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_177
.LBB67_177:                             # %if.end537
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB67_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB67_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB67_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB67_180:                             # %if.end542
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB67_181:                             # %for.cond543
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_184 Depth 3
                                        #         Child Loop BB67_190 Depth 4
                                        #         Child Loop BB67_210 Depth 4
                                        #         Child Loop BB67_300 Depth 4
                                        #           Child Loop BB67_302 Depth 5
                                        #         Child Loop BB67_309 Depth 4
                                        #           Child Loop BB67_311 Depth 5
                                        #         Child Loop BB67_326 Depth 4
                                        #           Child Loop BB67_328 Depth 5
                                        #         Child Loop BB67_335 Depth 4
                                        #           Child Loop BB67_337 Depth 5
                                        #         Child Loop BB67_355 Depth 4
                                        #           Child Loop BB67_357 Depth 5
                                        #         Child Loop BB67_374 Depth 4
                                        #           Child Loop BB67_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB67_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB67_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB67_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB67_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB67_184:                             # %for.cond554
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_190 Depth 4
                                        #         Child Loop BB67_210 Depth 4
                                        #         Child Loop BB67_300 Depth 4
                                        #           Child Loop BB67_302 Depth 5
                                        #         Child Loop BB67_309 Depth 4
                                        #           Child Loop BB67_311 Depth 5
                                        #         Child Loop BB67_326 Depth 4
                                        #           Child Loop BB67_328 Depth 5
                                        #         Child Loop BB67_335 Depth 4
                                        #           Child Loop BB67_337 Depth 5
                                        #         Child Loop BB67_355 Depth 4
                                        #           Child Loop BB67_357 Depth 5
                                        #         Child Loop BB67_374 Depth 4
                                        #           Child Loop BB67_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB67_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB67_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB67_187:                             # %land.end566
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB67_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB67_189:                             # %land.end574
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB67_190:                             # %for.cond577
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB67_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB67_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB67_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB67_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB67_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB67_206
.LBB67_194:                             # %if.then594
                                        #   in Loop: Header=BB67_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB67_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB67_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_198
.LBB67_197:                             # %cond.false604
                                        #   in Loop: Header=BB67_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_198:                             # %cond.end607
                                        #   in Loop: Header=BB67_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB67_203
.LBB67_199:                             # %cond.false610
                                        #   in Loop: Header=BB67_190 Depth=4
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB67_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB67_202
.LBB67_201:                             # %cond.false617
                                        #   in Loop: Header=BB67_190 Depth=4
	movl	$1, %eax
	jmp	.LBB67_202
.LBB67_202:                             # %cond.end618
                                        #   in Loop: Header=BB67_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_203:                             # %cond.end623
                                        #   in Loop: Header=BB67_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB67_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB67_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB67_205:                             # %if.end636
                                        #   in Loop: Header=BB67_190 Depth=4
	jmp	.LBB67_206
.LBB67_206:                             # %if.end637
                                        #   in Loop: Header=BB67_190 Depth=4
	jmp	.LBB67_207
.LBB67_207:                             # %for.inc638
                                        #   in Loop: Header=BB67_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB67_190
.LBB67_208:                             # %for.end640
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB67_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB67_210:                             # %for.cond643
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB67_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB67_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB67_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_215
.LBB67_214:                             # %cond.false660
                                        #   in Loop: Header=BB67_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_215:                             # %cond.end663
                                        #   in Loop: Header=BB67_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB67_220
.LBB67_216:                             # %cond.false667
                                        #   in Loop: Header=BB67_210 Depth=4
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB67_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB67_219
.LBB67_218:                             # %cond.false674
                                        #   in Loop: Header=BB67_210 Depth=4
	movl	$1, %eax
	jmp	.LBB67_219
.LBB67_219:                             # %cond.end675
                                        #   in Loop: Header=BB67_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_220:                             # %cond.end680
                                        #   in Loop: Header=BB67_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB67_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB67_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB67_222:                             # %if.end693
                                        #   in Loop: Header=BB67_210 Depth=4
	jmp	.LBB67_223
.LBB67_223:                             # %for.inc694
                                        #   in Loop: Header=BB67_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB67_210
.LBB67_224:                             # %for.end696
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB67_228
.LBB67_227:                             # %cond.false706
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_228:                             # %cond.end709
                                        #   in Loop: Header=BB67_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB67_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB67_231
.LBB67_230:                             # %cond.false719
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB67_231:                             # %cond.end721
                                        #   in Loop: Header=BB67_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB67_236
.LBB67_232:                             # %cond.false726
                                        #   in Loop: Header=BB67_184 Depth=3
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB67_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB67_235
.LBB67_234:                             # %cond.false733
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	$1, %eax
	jmp	.LBB67_235
.LBB67_235:                             # %cond.end734
                                        #   in Loop: Header=BB67_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_236:                             # %cond.end739
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB67_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB67_243
.LBB67_242:                             # %cond.false761
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB67_243:                             # %cond.end763
                                        #   in Loop: Header=BB67_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB67_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB67_246
.LBB67_245:                             # %cond.false773
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB67_246:                             # %cond.end775
                                        #   in Loop: Header=BB67_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB67_248
.LBB67_247:                             # %cond.false780
                                        #   in Loop: Header=BB67_184 Depth=3
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_248:                             # %cond.end784
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB67_252
.LBB67_251:                             # %cond.false797
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB67_252:                             # %cond.end799
                                        #   in Loop: Header=BB67_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB67_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB67_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB67_255
.LBB67_254:                             # %cond.false809
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB67_255:                             # %cond.end811
                                        #   in Loop: Header=BB67_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB67_257
.LBB67_256:                             # %cond.false816
                                        #   in Loop: Header=BB67_184 Depth=3
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_257:                             # %cond.end820
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	%eax, -188(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB67_259
.LBB67_258:                             # %if.else824
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
.LBB67_259:                             # %if.end825
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB67_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB67_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB67_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB67_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB67_285
.LBB67_266:                             # %if.else845
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB67_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB67_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB67_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB67_284
.LBB67_271:                             # %if.else859
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB67_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB67_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB67_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB67_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB67_283
.LBB67_276:                             # %if.else876
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB67_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB67_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jg	.LBB67_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB67_282
.LBB67_281:                             # %if.else893
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-188(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB67_282:                             # %if.end898
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_283
.LBB67_283:                             # %if.end899
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_284
.LBB67_284:                             # %if.end900
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_285
.LBB67_285:                             # %if.end901
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_295
.LBB67_286:                             # %if.else902
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB67_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB67_294
.LBB67_289:                             # %if.else910
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB67_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB67_293
.LBB67_292:                             # %if.else918
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB67_293:                             # %if.end920
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_294
.LBB67_294:                             # %if.end921
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_295
.LBB67_295:                             # %if.end922
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_297
.LBB67_296:                             # %if.else923
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_297:                             # %if.end925
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB67_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB67_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB67_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	$0, -24(%rbp)
.LBB67_300:                             # %for.cond933
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB67_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB67_300 Depth=4
	movl	$0, -20(%rbp)
.LBB67_302:                             # %for.cond937
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        #         Parent Loop BB67_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB67_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB67_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB67_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_302
.LBB67_305:                             # %for.end999
                                        #   in Loop: Header=BB67_300 Depth=4
	jmp	.LBB67_306
.LBB67_306:                             # %for.inc1000
                                        #   in Loop: Header=BB67_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_300
.LBB67_307:                             # %for.end1002
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_323
.LBB67_308:                             # %if.else1003
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	$0, -24(%rbp)
.LBB67_309:                             # %for.cond1004
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB67_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB67_309 Depth=4
	movl	$0, -20(%rbp)
.LBB67_311:                             # %for.cond1008
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        #         Parent Loop BB67_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB67_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB67_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB67_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB67_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB67_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB67_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB67_316
.LBB67_315:                             # %cond.false1024
                                        #   in Loop: Header=BB67_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB67_316:                             # %cond.end1025
                                        #   in Loop: Header=BB67_311 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB67_318
.LBB67_317:                             # %if.else1111
                                        #   in Loop: Header=BB67_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB67_318:                             # %if.end1217
                                        #   in Loop: Header=BB67_311 Depth=5
	jmp	.LBB67_319
.LBB67_319:                             # %for.inc1218
                                        #   in Loop: Header=BB67_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_311
.LBB67_320:                             # %for.end1220
                                        #   in Loop: Header=BB67_309 Depth=4
	jmp	.LBB67_321
.LBB67_321:                             # %for.inc1221
                                        #   in Loop: Header=BB67_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_309
.LBB67_322:                             # %for.end1223
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_323
.LBB67_323:                             # %if.end1224
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB67_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB67_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB67_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	$0, -24(%rbp)
.LBB67_326:                             # %for.cond1231
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB67_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB67_326 Depth=4
	movl	$0, -20(%rbp)
.LBB67_328:                             # %for.cond1235
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        #         Parent Loop BB67_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB67_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB67_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB67_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_328
.LBB67_331:                             # %for.end1303
                                        #   in Loop: Header=BB67_326 Depth=4
	jmp	.LBB67_332
.LBB67_332:                             # %for.inc1304
                                        #   in Loop: Header=BB67_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_326
.LBB67_333:                             # %for.end1306
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_351
.LBB67_334:                             # %if.else1307
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	$0, -24(%rbp)
.LBB67_335:                             # %for.cond1308
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB67_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB67_335 Depth=4
	movl	$0, -20(%rbp)
.LBB67_337:                             # %for.cond1312
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        #         Parent Loop BB67_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB67_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB67_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB67_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB67_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB67_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB67_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB67_342
.LBB67_341:                             # %cond.false1330
                                        #   in Loop: Header=BB67_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB67_342:                             # %cond.end1332
                                        #   in Loop: Header=BB67_337 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB67_346
.LBB67_343:                             # %if.else1419
                                        #   in Loop: Header=BB67_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB67_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB67_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB67_345:                             # %if.end1529
                                        #   in Loop: Header=BB67_337 Depth=5
	jmp	.LBB67_346
.LBB67_346:                             # %if.end1530
                                        #   in Loop: Header=BB67_337 Depth=5
	jmp	.LBB67_347
.LBB67_347:                             # %for.inc1531
                                        #   in Loop: Header=BB67_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_337
.LBB67_348:                             # %for.end1533
                                        #   in Loop: Header=BB67_335 Depth=4
	jmp	.LBB67_349
.LBB67_349:                             # %for.inc1534
                                        #   in Loop: Header=BB67_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_335
.LBB67_350:                             # %for.end1536
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_351
.LBB67_351:                             # %if.end1537
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_352
.LBB67_352:                             # %if.end1538
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_393
.LBB67_353:                             # %if.else1539
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB67_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB67_355:                             # %for.cond1546
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB67_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB67_355 Depth=4
	movl	$0, -20(%rbp)
.LBB67_357:                             # %for.cond1550
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        #         Parent Loop BB67_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB67_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB67_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB67_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB67_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB67_361
.LBB67_360:                             # %if.else1596
                                        #   in Loop: Header=BB67_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB67_361:                             # %if.end1676
                                        #   in Loop: Header=BB67_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB67_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB67_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB67_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB67_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB67_367
.LBB67_364:                             # %if.else1721
                                        #   in Loop: Header=BB67_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB67_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB67_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB67_366:                             # %if.end1805
                                        #   in Loop: Header=BB67_357 Depth=5
	jmp	.LBB67_367
.LBB67_367:                             # %if.end1806
                                        #   in Loop: Header=BB67_357 Depth=5
	jmp	.LBB67_368
.LBB67_368:                             # %if.end1807
                                        #   in Loop: Header=BB67_357 Depth=5
	jmp	.LBB67_369
.LBB67_369:                             # %for.inc1808
                                        #   in Loop: Header=BB67_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_357
.LBB67_370:                             # %for.end1810
                                        #   in Loop: Header=BB67_355 Depth=4
	jmp	.LBB67_371
.LBB67_371:                             # %for.inc1811
                                        #   in Loop: Header=BB67_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_355
.LBB67_372:                             # %for.end1813
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_392
.LBB67_373:                             # %if.else1814
                                        #   in Loop: Header=BB67_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB67_374:                             # %for.cond1818
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB67_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB67_374 Depth=4
	movl	$0, -20(%rbp)
.LBB67_376:                             # %for.cond1822
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_181 Depth=2
                                        #       Parent Loop BB67_184 Depth=3
                                        #         Parent Loop BB67_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB67_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB67_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB67_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB67_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB67_380
.LBB67_379:                             # %if.else1868
                                        #   in Loop: Header=BB67_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB67_380:                             # %if.end1948
                                        #   in Loop: Header=BB67_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB67_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB67_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB67_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB67_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB67_386
.LBB67_383:                             # %if.else1993
                                        #   in Loop: Header=BB67_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB67_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB67_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB67_385:                             # %if.end2077
                                        #   in Loop: Header=BB67_376 Depth=5
	jmp	.LBB67_386
.LBB67_386:                             # %if.end2078
                                        #   in Loop: Header=BB67_376 Depth=5
	jmp	.LBB67_387
.LBB67_387:                             # %if.end2079
                                        #   in Loop: Header=BB67_376 Depth=5
	jmp	.LBB67_388
.LBB67_388:                             # %for.inc2080
                                        #   in Loop: Header=BB67_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_376
.LBB67_389:                             # %for.end2082
                                        #   in Loop: Header=BB67_374 Depth=4
	jmp	.LBB67_390
.LBB67_390:                             # %for.inc2083
                                        #   in Loop: Header=BB67_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_374
.LBB67_391:                             # %for.end2085
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_392
.LBB67_392:                             # %if.end2086
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_393
.LBB67_393:                             # %if.end2087
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB67_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB67_399
.LBB67_395:                             # %if.else2106
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB67_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB67_398
.LBB67_397:                             # %if.else2131
                                        #   in Loop: Header=BB67_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB67_398:                             # %if.end2132
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_399
.LBB67_399:                             # %if.end2133
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB67_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB67_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB67_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB67_402:                             # %if.end2143
                                        #   in Loop: Header=BB67_184 Depth=3
	jmp	.LBB67_403
.LBB67_403:                             # %for.inc2144
                                        #   in Loop: Header=BB67_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_184
.LBB67_404:                             # %for.end2146
                                        #   in Loop: Header=BB67_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB67_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB67_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB67_407:                             # %if.end2155
                                        #   in Loop: Header=BB67_181 Depth=2
	jmp	.LBB67_408
.LBB67_408:                             # %if.end2156
                                        #   in Loop: Header=BB67_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB67_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB67_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -308(%rbp)
.LBB67_410:                             # %if.end2161
                                        #   in Loop: Header=BB67_181 Depth=2
	jmp	.LBB67_411
.LBB67_411:                             # %if.end2162
                                        #   in Loop: Header=BB67_181 Depth=2
	jmp	.LBB67_412
.LBB67_412:                             # %for.inc2163
                                        #   in Loop: Header=BB67_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_181
.LBB67_413:                             # %for.end2165
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB67_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB67_416:                             # %for.cond2172
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_418 Depth 3
                                        #         Child Loop BB67_445 Depth 4
                                        #         Child Loop BB67_464 Depth 4
                                        #           Child Loop BB67_466 Depth 5
                                        #         Child Loop BB67_473 Depth 4
                                        #         Child Loop BB67_508 Depth 4
                                        #           Child Loop BB67_510 Depth 5
                                        #         Child Loop BB67_532 Depth 4
                                        #           Child Loop BB67_534 Depth 5
                                        #             Child Loop BB67_536 Depth 6
                                        #         Child Loop BB67_544 Depth 4
                                        #           Child Loop BB67_546 Depth 5
                                        #       Child Loop BB67_569 Depth 3
                                        #         Child Loop BB67_571 Depth 4
                                        #           Child Loop BB67_573 Depth 5
                                        #       Child Loop BB67_581 Depth 3
                                        #         Child Loop BB67_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB67_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB67_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB67_418:                             # %for.cond2184
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_445 Depth 4
                                        #         Child Loop BB67_464 Depth 4
                                        #           Child Loop BB67_466 Depth 5
                                        #         Child Loop BB67_473 Depth 4
                                        #         Child Loop BB67_508 Depth 4
                                        #           Child Loop BB67_510 Depth 5
                                        #         Child Loop BB67_532 Depth 4
                                        #           Child Loop BB67_534 Depth 5
                                        #             Child Loop BB67_536 Depth 6
                                        #         Child Loop BB67_544 Depth 4
                                        #           Child Loop BB67_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB67_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB67_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB67_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB67_423
.LBB67_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB67_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB67_557
.LBB67_423:                             # %if.then2201
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB67_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	$0, -216(%rbp)
	movl	$0, -212(%rbp)
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -216(%rbp)
	cmpl	$2147483647, -216(%rbp) # imm = 0x7FFFFFFF
	je	.LBB67_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB67_428
.LBB67_427:                             # %if.then2214
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB67_429
.LBB67_428:                             # %if.else2215
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-216(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-212(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB67_429:                             # %if.end2218
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB67_431
	jmp	.LBB67_430
.LBB67_430:                             # %if.end2218
                                        #   in Loop: Header=BB67_418 Depth=3
	subl	$2, %eax
	je	.LBB67_438
	jmp	.LBB67_439
.LBB67_431:                             # %sw.bb
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-212(%rbp), %eax
	cmpl	-216(%rbp), %eax
	jl	.LBB67_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB67_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB67_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB67_436
.LBB67_435:                             # %if.then2231
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB67_437
.LBB67_436:                             # %if.else2232
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_437:                             # %if.end2233
                                        #   in Loop: Header=BB67_418 Depth=3
	jmp	.LBB67_440
.LBB67_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB67_440
.LBB67_439:                             # %sw.default
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_440:                             # %sw.epilog
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB67_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB67_442:                             # %if.end2240
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB67_443:                             # %if.end2242
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB67_518
.LBB67_444:                             # %if.else2278
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB67_445:                             # %for.cond2279
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB67_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB67_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB67_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB67_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB67_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB67_461
.LBB67_449:                             # %if.then2296
                                        #   in Loop: Header=BB67_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB67_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB67_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_453
.LBB67_452:                             # %cond.false2306
                                        #   in Loop: Header=BB67_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_453:                             # %cond.end2309
                                        #   in Loop: Header=BB67_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB67_458
.LBB67_454:                             # %cond.false2313
                                        #   in Loop: Header=BB67_445 Depth=4
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB67_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB67_457
.LBB67_456:                             # %cond.false2320
                                        #   in Loop: Header=BB67_445 Depth=4
	movl	$1, %eax
	jmp	.LBB67_457
.LBB67_457:                             # %cond.end2321
                                        #   in Loop: Header=BB67_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_458:                             # %cond.end2326
                                        #   in Loop: Header=BB67_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB67_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB67_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB67_460:                             # %if.end2339
                                        #   in Loop: Header=BB67_445 Depth=4
	jmp	.LBB67_461
.LBB67_461:                             # %if.end2340
                                        #   in Loop: Header=BB67_445 Depth=4
	jmp	.LBB67_462
.LBB67_462:                             # %for.inc2341
                                        #   in Loop: Header=BB67_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB67_445
.LBB67_463:                             # %for.end2343
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	$0, -24(%rbp)
.LBB67_464:                             # %for.cond2344
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB67_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB67_464 Depth=4
	movl	$0, -20(%rbp)
.LBB67_466:                             # %for.cond2348
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        #         Parent Loop BB67_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB67_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB67_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB67_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_466
.LBB67_469:                             # %for.end2405
                                        #   in Loop: Header=BB67_464 Depth=4
	jmp	.LBB67_470
.LBB67_470:                             # %for.inc2406
                                        #   in Loop: Header=BB67_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_464
.LBB67_471:                             # %for.end2408
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB67_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB67_473:                             # %for.cond2411
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB67_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB67_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB67_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_478
.LBB67_477:                             # %cond.false2428
                                        #   in Loop: Header=BB67_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_478:                             # %cond.end2431
                                        #   in Loop: Header=BB67_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB67_483
.LBB67_479:                             # %cond.false2435
                                        #   in Loop: Header=BB67_473 Depth=4
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB67_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB67_482
.LBB67_481:                             # %cond.false2442
                                        #   in Loop: Header=BB67_473 Depth=4
	movl	$1, %eax
	jmp	.LBB67_482
.LBB67_482:                             # %cond.end2443
                                        #   in Loop: Header=BB67_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_483:                             # %cond.end2448
                                        #   in Loop: Header=BB67_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB67_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB67_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB67_485:                             # %if.end2461
                                        #   in Loop: Header=BB67_473 Depth=4
	jmp	.LBB67_486
.LBB67_486:                             # %for.inc2462
                                        #   in Loop: Header=BB67_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB67_473
.LBB67_487:                             # %for.end2464
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB67_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB67_491
.LBB67_490:                             # %cond.false2474
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_491:                             # %cond.end2477
                                        #   in Loop: Header=BB67_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB67_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB67_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB67_494
.LBB67_493:                             # %cond.false2487
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB67_494:                             # %cond.end2489
                                        #   in Loop: Header=BB67_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB67_499
.LBB67_495:                             # %cond.false2494
                                        #   in Loop: Header=BB67_418 Depth=3
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB67_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB67_498
.LBB67_497:                             # %cond.false2501
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	$1, %eax
	jmp	.LBB67_498
.LBB67_498:                             # %cond.end2502
                                        #   in Loop: Header=BB67_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_499:                             # %cond.end2507
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB67_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB67_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB67_507
.LBB67_502:                             # %if.else2517
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB67_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB67_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB67_506
.LBB67_505:                             # %if.else2524
                                        #   in Loop: Header=BB67_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB67_506:                             # %if.end2525
                                        #   in Loop: Header=BB67_418 Depth=3
	jmp	.LBB67_507
.LBB67_507:                             # %if.end2526
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	$0, -24(%rbp)
.LBB67_508:                             # %for.cond2527
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB67_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB67_508 Depth=4
	movl	$0, -20(%rbp)
.LBB67_510:                             # %for.cond2531
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        #         Parent Loop BB67_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB67_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB67_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB67_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_510
.LBB67_513:                             # %for.end2567
                                        #   in Loop: Header=BB67_508 Depth=4
	jmp	.LBB67_514
.LBB67_514:                             # %for.inc2568
                                        #   in Loop: Header=BB67_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_508
.LBB67_515:                             # %for.end2570
                                        #   in Loop: Header=BB67_418 Depth=3
	jmp	.LBB67_517
.LBB67_516:                             # %if.else2571
                                        #   in Loop: Header=BB67_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_517:                             # %if.end2572
                                        #   in Loop: Header=BB67_418 Depth=3
	jmp	.LBB67_518
.LBB67_518:                             # %if.end2573
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB67_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB67_526
.LBB67_520:                             # %if.else2578
                                        #   in Loop: Header=BB67_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB67_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB67_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB67_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB67_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB67_524
.LBB67_523:                             # %cond.false2592
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB67_524:                             # %cond.end2597
                                        #   in Loop: Header=BB67_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB67_525:                             # %if.end2603
                                        #   in Loop: Header=BB67_418 Depth=3
	jmp	.LBB67_526
.LBB67_526:                             # %if.end2604
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB67_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB67_530
.LBB67_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB67_556
.LBB67_530:                             # %if.then2616
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB67_532:                             # %for.cond2638
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_534 Depth 5
                                        #             Child Loop BB67_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB67_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB67_532 Depth=4
	movl	$0, -24(%rbp)
.LBB67_534:                             # %for.cond2642
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        #         Parent Loop BB67_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB67_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB67_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB67_534 Depth=5
	movl	$0, -20(%rbp)
.LBB67_536:                             # %for.cond2646
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        #         Parent Loop BB67_532 Depth=4
                                        #           Parent Loop BB67_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB67_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB67_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB67_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_536
.LBB67_539:                             # %for.end2668
                                        #   in Loop: Header=BB67_534 Depth=5
	jmp	.LBB67_540
.LBB67_540:                             # %for.inc2669
                                        #   in Loop: Header=BB67_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_534
.LBB67_541:                             # %for.end2671
                                        #   in Loop: Header=BB67_532 Depth=4
	jmp	.LBB67_542
.LBB67_542:                             # %for.inc2672
                                        #   in Loop: Header=BB67_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_532
.LBB67_543:                             # %for.end2674
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_544:                             # %for.cond2675
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB67_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_546:                             # %for.cond2680
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_418 Depth=3
                                        #         Parent Loop BB67_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB67_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB67_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB67_550
.LBB67_549:                             # %if.else2705
                                        #   in Loop: Header=BB67_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB67_550:                             # %if.end2754
                                        #   in Loop: Header=BB67_546 Depth=5
	jmp	.LBB67_551
.LBB67_551:                             # %for.inc2755
                                        #   in Loop: Header=BB67_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_546
.LBB67_552:                             # %for.end2757
                                        #   in Loop: Header=BB67_544 Depth=4
	jmp	.LBB67_553
.LBB67_553:                             # %for.inc2758
                                        #   in Loop: Header=BB67_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_544
.LBB67_554:                             # %for.end2760
                                        #   in Loop: Header=BB67_418 Depth=3
	jmp	.LBB67_555
.LBB67_555:                             # %if.end2761
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB67_556:                             # %if.end2762
                                        #   in Loop: Header=BB67_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB67_557:                             # %if.end2763
                                        #   in Loop: Header=BB67_418 Depth=3
	jmp	.LBB67_558
.LBB67_558:                             # %for.inc2764
                                        #   in Loop: Header=BB67_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB67_418
.LBB67_559:                             # %for.end2766
                                        #   in Loop: Header=BB67_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB67_416 Depth=2
	movl	-180(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB67_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB67_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB67_563
.LBB67_562:                             # %cond.true2782
                                        #   in Loop: Header=BB67_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB67_564
.LBB67_563:                             # %cond.false2783
                                        #   in Loop: Header=BB67_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB67_564
.LBB67_564:                             # %cond.end2784
                                        #   in Loop: Header=BB67_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB67_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB67_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB67_567
.LBB67_566:                             # %cond.true2793
                                        #   in Loop: Header=BB67_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB67_568
.LBB67_567:                             # %cond.false2794
                                        #   in Loop: Header=BB67_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB67_568
.LBB67_568:                             # %cond.end2795
                                        #   in Loop: Header=BB67_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB67_569:                             # %for.cond2813
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_571 Depth 4
                                        #           Child Loop BB67_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB67_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB67_569 Depth=3
	movl	$0, -24(%rbp)
.LBB67_571:                             # %for.cond2817
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB67_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB67_571 Depth=4
	movl	$0, -20(%rbp)
.LBB67_573:                             # %for.cond2821
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_569 Depth=3
                                        #         Parent Loop BB67_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB67_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB67_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB67_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_573
.LBB67_576:                             # %for.end2844
                                        #   in Loop: Header=BB67_571 Depth=4
	jmp	.LBB67_577
.LBB67_577:                             # %for.inc2845
                                        #   in Loop: Header=BB67_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_571
.LBB67_578:                             # %for.end2847
                                        #   in Loop: Header=BB67_569 Depth=3
	jmp	.LBB67_579
.LBB67_579:                             # %for.inc2848
                                        #   in Loop: Header=BB67_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_569
.LBB67_580:                             # %for.end2850
                                        #   in Loop: Header=BB67_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_581:                             # %for.cond2851
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB67_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_583:                             # %for.cond2856
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_416 Depth=2
                                        #       Parent Loop BB67_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB67_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB67_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB67_587
.LBB67_586:                             # %if.else2886
                                        #   in Loop: Header=BB67_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB67_587:                             # %if.end2935
                                        #   in Loop: Header=BB67_583 Depth=4
	jmp	.LBB67_588
.LBB67_588:                             # %for.inc2936
                                        #   in Loop: Header=BB67_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_583
.LBB67_589:                             # %for.end2938
                                        #   in Loop: Header=BB67_581 Depth=3
	jmp	.LBB67_590
.LBB67_590:                             # %for.inc2939
                                        #   in Loop: Header=BB67_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_581
.LBB67_591:                             # %for.end2941
                                        #   in Loop: Header=BB67_416 Depth=2
	jmp	.LBB67_592
.LBB67_592:                             # %if.end2942
                                        #   in Loop: Header=BB67_416 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB67_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB67_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB67_594:                             # %if.end2948
                                        #   in Loop: Header=BB67_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB67_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB67_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB67_596:                             # %if.end2974
                                        #   in Loop: Header=BB67_416 Depth=2
	jmp	.LBB67_597
.LBB67_597:                             # %for.inc2975
                                        #   in Loop: Header=BB67_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_416
.LBB67_598:                             # %for.end2977
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_599:                             # %if.end2980
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB67_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB67_601:                             # %for.cond2985
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_603 Depth 3
                                        #         Child Loop BB67_614 Depth 4
                                        #         Child Loop BB67_633 Depth 4
                                        #           Child Loop BB67_635 Depth 5
                                        #         Child Loop BB67_642 Depth 4
                                        #         Child Loop BB67_677 Depth 4
                                        #           Child Loop BB67_679 Depth 5
                                        #         Child Loop BB67_701 Depth 4
                                        #           Child Loop BB67_703 Depth 5
                                        #             Child Loop BB67_705 Depth 6
                                        #         Child Loop BB67_713 Depth 4
                                        #           Child Loop BB67_715 Depth 5
                                        #         Child Loop BB67_723 Depth 4
                                        #           Child Loop BB67_725 Depth 5
                                        #       Child Loop BB67_745 Depth 3
                                        #         Child Loop BB67_747 Depth 4
                                        #           Child Loop BB67_749 Depth 5
                                        #       Child Loop BB67_757 Depth 3
                                        #         Child Loop BB67_759 Depth 4
                                        #       Child Loop BB67_766 Depth 3
                                        #         Child Loop BB67_768 Depth 4
                                        #       Child Loop BB67_778 Depth 3
                                        #         Child Loop BB67_780 Depth 4
                                        #       Child Loop BB67_786 Depth 3
                                        #       Child Loop BB67_791 Depth 3
                                        #         Child Loop BB67_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB67_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB67_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB67_603:                             # %for.cond2997
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_614 Depth 4
                                        #         Child Loop BB67_633 Depth 4
                                        #           Child Loop BB67_635 Depth 5
                                        #         Child Loop BB67_642 Depth 4
                                        #         Child Loop BB67_677 Depth 4
                                        #           Child Loop BB67_679 Depth 5
                                        #         Child Loop BB67_701 Depth 4
                                        #           Child Loop BB67_703 Depth 5
                                        #             Child Loop BB67_705 Depth 6
                                        #         Child Loop BB67_713 Depth 4
                                        #           Child Loop BB67_715 Depth 5
                                        #         Child Loop BB67_723 Depth 4
                                        #           Child Loop BB67_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB67_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB67_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB67_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB67_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB67_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB67_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB67_610
.LBB67_609:                             # %if.then3019
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB67_611
.LBB67_610:                             # %if.else3020
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB67_611:                             # %if.end3022
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB67_612:                             # %if.end3024
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB67_687
.LBB67_613:                             # %if.else3060
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB67_614:                             # %for.cond3061
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB67_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB67_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB67_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB67_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB67_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB67_630
.LBB67_618:                             # %if.then3078
                                        #   in Loop: Header=BB67_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB67_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB67_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_622
.LBB67_621:                             # %cond.false3088
                                        #   in Loop: Header=BB67_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_622:                             # %cond.end3091
                                        #   in Loop: Header=BB67_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB67_627
.LBB67_623:                             # %cond.false3095
                                        #   in Loop: Header=BB67_614 Depth=4
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB67_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB67_626
.LBB67_625:                             # %cond.false3102
                                        #   in Loop: Header=BB67_614 Depth=4
	movl	$1, %eax
	jmp	.LBB67_626
.LBB67_626:                             # %cond.end3103
                                        #   in Loop: Header=BB67_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_627:                             # %cond.end3108
                                        #   in Loop: Header=BB67_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB67_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB67_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB67_629:                             # %if.end3121
                                        #   in Loop: Header=BB67_614 Depth=4
	jmp	.LBB67_630
.LBB67_630:                             # %if.end3122
                                        #   in Loop: Header=BB67_614 Depth=4
	jmp	.LBB67_631
.LBB67_631:                             # %for.inc3123
                                        #   in Loop: Header=BB67_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB67_614
.LBB67_632:                             # %for.end3125
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	$0, -24(%rbp)
.LBB67_633:                             # %for.cond3126
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB67_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB67_633 Depth=4
	movl	$0, -20(%rbp)
.LBB67_635:                             # %for.cond3130
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        #         Parent Loop BB67_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB67_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB67_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB67_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_635
.LBB67_638:                             # %for.end3187
                                        #   in Loop: Header=BB67_633 Depth=4
	jmp	.LBB67_639
.LBB67_639:                             # %for.inc3188
                                        #   in Loop: Header=BB67_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_633
.LBB67_640:                             # %for.end3190
                                        #   in Loop: Header=BB67_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB67_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB67_642:                             # %for.cond3193
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB67_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB67_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB67_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB67_647
.LBB67_646:                             # %cond.false3210
                                        #   in Loop: Header=BB67_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_647:                             # %cond.end3213
                                        #   in Loop: Header=BB67_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB67_652
.LBB67_648:                             # %cond.false3217
                                        #   in Loop: Header=BB67_642 Depth=4
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB67_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB67_651
.LBB67_650:                             # %cond.false3224
                                        #   in Loop: Header=BB67_642 Depth=4
	movl	$1, %eax
	jmp	.LBB67_651
.LBB67_651:                             # %cond.end3225
                                        #   in Loop: Header=BB67_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_652:                             # %cond.end3230
                                        #   in Loop: Header=BB67_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB67_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB67_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB67_654:                             # %if.end3243
                                        #   in Loop: Header=BB67_642 Depth=4
	jmp	.LBB67_655
.LBB67_655:                             # %for.inc3244
                                        #   in Loop: Header=BB67_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB67_642
.LBB67_656:                             # %for.end3246
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB67_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB67_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB67_660
.LBB67_659:                             # %cond.false3256
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB67_660:                             # %cond.end3259
                                        #   in Loop: Header=BB67_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB67_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB67_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB67_663
.LBB67_662:                             # %cond.false3269
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB67_663:                             # %cond.end3271
                                        #   in Loop: Header=BB67_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB67_668
.LBB67_664:                             # %cond.false3276
                                        #   in Loop: Header=BB67_603 Depth=3
	vmovsd	.LCPI67_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB67_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB67_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB67_667
.LBB67_666:                             # %cond.false3283
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	$1, %eax
	jmp	.LBB67_667
.LBB67_667:                             # %cond.end3284
                                        #   in Loop: Header=BB67_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB67_668:                             # %cond.end3289
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB67_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB67_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB67_676
.LBB67_671:                             # %if.else3299
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB67_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB67_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB67_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB67_675
.LBB67_674:                             # %if.else3306
                                        #   in Loop: Header=BB67_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB67_675:                             # %if.end3307
                                        #   in Loop: Header=BB67_603 Depth=3
	jmp	.LBB67_676
.LBB67_676:                             # %if.end3308
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	$0, -24(%rbp)
.LBB67_677:                             # %for.cond3309
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB67_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB67_677 Depth=4
	movl	$0, -20(%rbp)
.LBB67_679:                             # %for.cond3313
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        #         Parent Loop BB67_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB67_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB67_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB67_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_679
.LBB67_682:                             # %for.end3349
                                        #   in Loop: Header=BB67_677 Depth=4
	jmp	.LBB67_683
.LBB67_683:                             # %for.inc3350
                                        #   in Loop: Header=BB67_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_677
.LBB67_684:                             # %for.end3352
                                        #   in Loop: Header=BB67_603 Depth=3
	jmp	.LBB67_686
.LBB67_685:                             # %if.else3353
                                        #   in Loop: Header=BB67_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_686:                             # %if.end3354
                                        #   in Loop: Header=BB67_603 Depth=3
	jmp	.LBB67_687
.LBB67_687:                             # %if.end3355
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB67_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB67_695
.LBB67_689:                             # %if.else3360
                                        #   in Loop: Header=BB67_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB67_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB67_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB67_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB67_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB67_693
.LBB67_692:                             # %cond.false3374
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB67_693:                             # %cond.end3379
                                        #   in Loop: Header=BB67_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB67_694:                             # %if.end3385
                                        #   in Loop: Header=BB67_603 Depth=3
	jmp	.LBB67_695
.LBB67_695:                             # %if.end3386
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB67_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB67_699
.LBB67_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB67_732
.LBB67_699:                             # %if.then3398
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB67_701:                             # %for.cond3422
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_703 Depth 5
                                        #             Child Loop BB67_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB67_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB67_701 Depth=4
	movl	$0, -24(%rbp)
.LBB67_703:                             # %for.cond3426
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        #         Parent Loop BB67_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB67_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB67_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB67_703 Depth=5
	movl	$0, -20(%rbp)
.LBB67_705:                             # %for.cond3430
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        #         Parent Loop BB67_701 Depth=4
                                        #           Parent Loop BB67_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB67_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB67_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB67_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_705
.LBB67_708:                             # %for.end3453
                                        #   in Loop: Header=BB67_703 Depth=5
	jmp	.LBB67_709
.LBB67_709:                             # %for.inc3454
                                        #   in Loop: Header=BB67_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_703
.LBB67_710:                             # %for.end3456
                                        #   in Loop: Header=BB67_701 Depth=4
	jmp	.LBB67_711
.LBB67_711:                             # %for.inc3457
                                        #   in Loop: Header=BB67_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_701
.LBB67_712:                             # %for.end3459
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_713:                             # %for.cond3460
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB67_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_715:                             # %for.cond3465
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        #         Parent Loop BB67_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB67_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB67_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_715
.LBB67_718:                             # %for.end3494
                                        #   in Loop: Header=BB67_713 Depth=4
	jmp	.LBB67_719
.LBB67_719:                             # %for.inc3495
                                        #   in Loop: Header=BB67_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_713
.LBB67_720:                             # %for.end3497
                                        #   in Loop: Header=BB67_603 Depth=3
	jmp	.LBB67_721
.LBB67_721:                             # %if.end3498
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_723:                             # %for.cond3502
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB67_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_725:                             # %for.cond3507
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_603 Depth=3
                                        #         Parent Loop BB67_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB67_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB67_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_725
.LBB67_728:                             # %for.end3562
                                        #   in Loop: Header=BB67_723 Depth=4
	jmp	.LBB67_729
.LBB67_729:                             # %for.inc3563
                                        #   in Loop: Header=BB67_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_723
.LBB67_730:                             # %for.end3565
                                        #   in Loop: Header=BB67_603 Depth=3
	jmp	.LBB67_731
.LBB67_731:                             # %if.end3566
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB67_732:                             # %if.end3567
                                        #   in Loop: Header=BB67_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB67_733:                             # %if.end3568
                                        #   in Loop: Header=BB67_603 Depth=3
	jmp	.LBB67_734
.LBB67_734:                             # %for.inc3569
                                        #   in Loop: Header=BB67_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB67_603
.LBB67_735:                             # %for.end3571
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-180(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB67_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB67_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB67_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB67_739
.LBB67_738:                             # %cond.true3588
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB67_740
.LBB67_739:                             # %cond.false3589
                                        #   in Loop: Header=BB67_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB67_740
.LBB67_740:                             # %cond.end3590
                                        #   in Loop: Header=BB67_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB67_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB67_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB67_743
.LBB67_742:                             # %cond.true3599
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB67_744
.LBB67_743:                             # %cond.false3600
                                        #   in Loop: Header=BB67_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB67_744
.LBB67_744:                             # %cond.end3601
                                        #   in Loop: Header=BB67_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB67_745:                             # %for.cond3619
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_747 Depth 4
                                        #           Child Loop BB67_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB67_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB67_745 Depth=3
	movl	$0, -24(%rbp)
.LBB67_747:                             # %for.cond3623
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB67_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB67_747 Depth=4
	movl	$0, -20(%rbp)
.LBB67_749:                             # %for.cond3627
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_745 Depth=3
                                        #         Parent Loop BB67_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB67_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB67_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB67_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_749
.LBB67_752:                             # %for.end3650
                                        #   in Loop: Header=BB67_747 Depth=4
	jmp	.LBB67_753
.LBB67_753:                             # %for.inc3651
                                        #   in Loop: Header=BB67_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_747
.LBB67_754:                             # %for.end3653
                                        #   in Loop: Header=BB67_745 Depth=3
	jmp	.LBB67_755
.LBB67_755:                             # %for.inc3654
                                        #   in Loop: Header=BB67_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_745
.LBB67_756:                             # %for.end3656
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_757:                             # %for.cond3657
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB67_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_759:                             # %for.cond3662
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB67_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB67_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_759
.LBB67_762:                             # %for.end3691
                                        #   in Loop: Header=BB67_757 Depth=3
	jmp	.LBB67_763
.LBB67_763:                             # %for.inc3692
                                        #   in Loop: Header=BB67_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_757
.LBB67_764:                             # %for.end3694
                                        #   in Loop: Header=BB67_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_766:                             # %for.cond3698
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB67_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_768:                             # %for.cond3703
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB67_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB67_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_768
.LBB67_771:                             # %for.end3758
                                        #   in Loop: Header=BB67_766 Depth=3
	jmp	.LBB67_772
.LBB67_772:                             # %for.inc3759
                                        #   in Loop: Header=BB67_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_766
.LBB67_773:                             # %for.end3761
                                        #   in Loop: Header=BB67_601 Depth=2
	jmp	.LBB67_774
.LBB67_774:                             # %if.end3762
                                        #   in Loop: Header=BB67_601 Depth=2
	jmp	.LBB67_775
.LBB67_775:                             # %if.end3763
                                        #   in Loop: Header=BB67_601 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB67_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB67_777:                             # %if.end3769
                                        #   in Loop: Header=BB67_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_778:                             # %for.cond3781
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB67_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_780:                             # %for.cond3786
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB67_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB67_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_780
.LBB67_783:                             # %for.end3797
                                        #   in Loop: Header=BB67_778 Depth=3
	jmp	.LBB67_784
.LBB67_784:                             # %for.inc3798
                                        #   in Loop: Header=BB67_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_778
.LBB67_785:                             # %for.end3800
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_786:                             # %for.cond3802
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB67_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB67_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_786
.LBB67_789:                             # %for.end3811
                                        #   in Loop: Header=BB67_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB67_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_791:                             # %for.cond3819
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB67_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_793:                             # %for.cond3824
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_601 Depth=2
                                        #       Parent Loop BB67_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB67_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB67_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_793
.LBB67_796:                             # %for.end3844
                                        #   in Loop: Header=BB67_791 Depth=3
	jmp	.LBB67_797
.LBB67_797:                             # %for.inc3845
                                        #   in Loop: Header=BB67_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_791
.LBB67_798:                             # %for.end3847
                                        #   in Loop: Header=BB67_601 Depth=2
	jmp	.LBB67_799
.LBB67_799:                             # %if.end3848
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB67_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_601
.LBB67_801:                             # %for.end3860
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_802
.LBB67_802:                             # %if.end3861
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB67_803:                             # %for.cond3862
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB67_803 Depth=2
	movl	$0, -24(%rbp)
.LBB67_805:                             # %for.cond3866
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB67_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB67_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_805
.LBB67_808:                             # %for.end3890
                                        #   in Loop: Header=BB67_803 Depth=2
	jmp	.LBB67_809
.LBB67_809:                             # %for.inc3891
                                        #   in Loop: Header=BB67_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_803
.LBB67_810:                             # %for.end3893
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB67_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB67_825
.LBB67_813:                             # %if.then3902
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB67_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_822
.LBB67_816:                             # %if.else3910
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB67_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB67_821
.LBB67_818:                             # %if.else3915
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB67_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_820:                             # %if.end3922
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_821
.LBB67_821:                             # %if.end3923
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_822
.LBB67_822:                             # %if.end3924
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_824
.LBB67_823:                             # %if.else3925
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_824:                             # %if.end3927
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_825
.LBB67_825:                             # %if.end3928
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_827
.LBB67_826:                             # %if.else3929
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB67_827:                             # %if.end3930
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB67_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB67_830
.LBB67_829:                             # %if.then3938
                                        #   in Loop: Header=BB67_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB67_830:                             # %if.end3939
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_832
.LBB67_831:                             # %if.else3940
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB67_832:                             # %if.end3941
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB67_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB67_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-304(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB67_835:                             # %for.cond3949
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_853 Depth 3
                                        #         Child Loop BB67_908 Depth 4
                                        #           Child Loop BB67_911 Depth 5
                                        #             Child Loop BB67_913 Depth 6
                                        #           Child Loop BB67_920 Depth 5
                                        #             Child Loop BB67_922 Depth 6
                                        #         Child Loop BB67_955 Depth 4
                                        #           Child Loop BB67_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB67_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB67_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB67_846
.LBB67_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB67_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB67_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB67_846
.LBB67_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB67_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB67_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB67_846
.LBB67_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB67_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB67_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB67_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB67_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB67_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB67_835 Depth=2
	cmpl	$0, -304(%rbp)
	jne	.LBB67_847
.LBB67_846:                             # %if.then3982
                                        #   in Loop: Header=BB67_835 Depth=2
	jmp	.LBB67_976
.LBB67_847:                             # %if.end3983
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB67_835 Depth=2
	movl	$11, -300(%rbp)
	jmp	.LBB67_850
.LBB67_849:                             # %if.else3987
                                        #   in Loop: Header=BB67_835 Depth=2
	movl	$8, -300(%rbp)
.LBB67_850:                             # %if.end3988
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB67_852:                             # %if.end3994
                                        #   in Loop: Header=BB67_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB67_853:                             # %for.cond3995
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_908 Depth 4
                                        #           Child Loop BB67_911 Depth 5
                                        #             Child Loop BB67_913 Depth 6
                                        #           Child Loop BB67_920 Depth 5
                                        #             Child Loop BB67_922 Depth 6
                                        #         Child Loop BB67_955 Depth 4
                                        #           Child Loop BB67_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-300(%rbp), %eax
	jge	.LBB67_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB67_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB67_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB67_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB67_857:                             # %if.end4010
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB67_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB67_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB67_866
.LBB67_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB67_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB67_866
.LBB67_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB67_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB67_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB67_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -304(%rbp)
	jne	.LBB67_867
.LBB67_866:                             # %if.then4032
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_974
.LBB67_867:                             # %if.end4033
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_869
.LBB67_868:                             # %if.else4034
                                        #   in Loop: Header=BB67_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB67_869:                             # %if.end4037
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB67_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB67_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB67_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB67_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB67_877:                             # %if.end4066
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_878
.LBB67_878:                             # %if.end4067
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB67_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB67_880:                             # %if.end4072
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB67_881:                             # %if.end4074
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB67_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB67_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB67_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB67_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB67_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB67_887:                             # %if.end4092
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_888
.LBB67_888:                             # %if.end4093
                                        #   in Loop: Header=BB67_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB67_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB67_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB67_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB67_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_902
.LBB67_893:                             # %if.else4110
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB67_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB67_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB67_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_901
.LBB67_897:                             # %if.else4120
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB67_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB67_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB67_900:                             # %if.end4128
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_901
.LBB67_901:                             # %if.end4129
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_902
.LBB67_902:                             # %if.end4130
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_903
.LBB67_903:                             # %if.end4131
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB67_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB67_947
.LBB67_907:                             # %if.then4146
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_908
.LBB67_908:                             # %while.body
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        #       Parent Loop BB67_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_911 Depth 5
                                        #             Child Loop BB67_913 Depth 6
                                        #           Child Loop BB67_920 Depth 5
                                        #             Child Loop BB67_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB67_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB67_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB67_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB67_908 Depth=4
	movl	$0, -20(%rbp)
.LBB67_911:                             # %for.cond4153
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        #       Parent Loop BB67_853 Depth=3
                                        #         Parent Loop BB67_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB67_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB67_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB67_911 Depth=5
	movl	$0, -24(%rbp)
.LBB67_913:                             # %for.cond4157
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        #       Parent Loop BB67_853 Depth=3
                                        #         Parent Loop BB67_908 Depth=4
                                        #           Parent Loop BB67_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB67_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB67_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB67_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_913
.LBB67_916:                             # %for.end4182
                                        #   in Loop: Header=BB67_911 Depth=5
	jmp	.LBB67_917
.LBB67_917:                             # %for.inc4183
                                        #   in Loop: Header=BB67_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_911
.LBB67_918:                             # %for.end4185
                                        #   in Loop: Header=BB67_908 Depth=4
	jmp	.LBB67_928
.LBB67_919:                             # %if.else4186
                                        #   in Loop: Header=BB67_908 Depth=4
	movl	$0, -20(%rbp)
.LBB67_920:                             # %for.cond4187
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        #       Parent Loop BB67_853 Depth=3
                                        #         Parent Loop BB67_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB67_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB67_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB67_920 Depth=5
	movl	$0, -24(%rbp)
.LBB67_922:                             # %for.cond4191
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        #       Parent Loop BB67_853 Depth=3
                                        #         Parent Loop BB67_908 Depth=4
                                        #           Parent Loop BB67_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB67_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB67_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB67_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_922
.LBB67_925:                             # %for.end4215
                                        #   in Loop: Header=BB67_920 Depth=5
	jmp	.LBB67_926
.LBB67_926:                             # %for.inc4216
                                        #   in Loop: Header=BB67_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_920
.LBB67_927:                             # %for.end4218
                                        #   in Loop: Header=BB67_908 Depth=4
	jmp	.LBB67_928
.LBB67_928:                             # %if.end4219
                                        #   in Loop: Header=BB67_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB67_929:                             # %if.end4220
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB67_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB67_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB67_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB67_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB67_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB67_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB67_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB67_908 Depth=4
	jmp	.LBB67_908
.LBB67_935:                             # %if.else4236
                                        #   in Loop: Header=BB67_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB67_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB67_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB67_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB67_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB67_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_934
.LBB67_940:                             # %if.else4250
                                        #   in Loop: Header=BB67_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB67_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB67_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB67_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB67_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB67_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_934
.LBB67_944:                             # %if.else4262
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB67_946
.LBB67_945:                             # %if.else4264
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_946
.LBB67_946:                             # %while.end
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_947
.LBB67_947:                             # %if.end4265
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB67_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB67_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB67_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB67_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB67_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB67_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB67_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	$0, -20(%rbp)
.LBB67_955:                             # %for.cond4288
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        #       Parent Loop BB67_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB67_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB67_955 Depth=4
	movl	$0, -24(%rbp)
.LBB67_957:                             # %for.cond4292
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_835 Depth=2
                                        #       Parent Loop BB67_853 Depth=3
                                        #         Parent Loop BB67_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB67_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB67_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB67_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_957
.LBB67_960:                             # %for.end4316
                                        #   in Loop: Header=BB67_955 Depth=4
	jmp	.LBB67_961
.LBB67_961:                             # %for.inc4317
                                        #   in Loop: Header=BB67_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_955
.LBB67_962:                             # %for.end4319
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB67_963:                             # %if.end4320
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_964
.LBB67_964:                             # %if.end4321
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_965
.LBB67_965:                             # %if.end4322
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB67_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB67_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB67_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB67_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB67_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB67_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB67_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB67_972:                             # %if.end4356
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_973
.LBB67_973:                             # %if.end4357
                                        #   in Loop: Header=BB67_853 Depth=3
	jmp	.LBB67_974
.LBB67_974:                             # %for.inc4358
                                        #   in Loop: Header=BB67_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB67_853
.LBB67_975:                             # %for.end4360
                                        #   in Loop: Header=BB67_835 Depth=2
	jmp	.LBB67_976
.LBB67_976:                             # %for.inc4361
                                        #   in Loop: Header=BB67_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB67_835
.LBB67_977:                             # %for.end4364
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1082
.LBB67_978:                             # %if.else4365
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB67_980:                             # %if.end4371
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB67_981:                             # %for.cond4372
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1014 Depth 3
                                        #         Child Loop BB67_1017 Depth 4
                                        #           Child Loop BB67_1019 Depth 5
                                        #         Child Loop BB67_1026 Depth 4
                                        #           Child Loop BB67_1028 Depth 5
                                        #       Child Loop BB67_1061 Depth 3
                                        #         Child Loop BB67_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB67_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB67_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB67_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB67_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB67_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB67_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB67_990:                             # %if.end4407
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_991
.LBB67_991:                             # %if.end4408
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB67_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB67_993:                             # %if.end4413
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB67_994:                             # %if.end4415
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB67_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB67_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB67_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB67_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_1008
.LBB67_999:                             # %if.else4433
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB67_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB67_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB67_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_1007
.LBB67_1003:                            # %if.else4443
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB67_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB67_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB67_1006:                            # %if.end4451
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1007
.LBB67_1007:                            # %if.end4452
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1008
.LBB67_1008:                            # %if.end4453
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1009
.LBB67_1009:                            # %if.end4454
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB67_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB67_1053
.LBB67_1013:                            # %if.then4470
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1014
.LBB67_1014:                            # %while.body4471
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_1017 Depth 4
                                        #           Child Loop BB67_1019 Depth 5
                                        #         Child Loop BB67_1026 Depth 4
                                        #           Child Loop BB67_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB67_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB67_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB67_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB67_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB67_1017:                            # %for.cond4478
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_981 Depth=2
                                        #       Parent Loop BB67_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB67_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB67_1019:                            # %for.cond4482
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_981 Depth=2
                                        #       Parent Loop BB67_1014 Depth=3
                                        #         Parent Loop BB67_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB67_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB67_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1019
.LBB67_1022:                            # %for.end4507
                                        #   in Loop: Header=BB67_1017 Depth=4
	jmp	.LBB67_1023
.LBB67_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB67_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1017
.LBB67_1024:                            # %for.end4510
                                        #   in Loop: Header=BB67_1014 Depth=3
	jmp	.LBB67_1034
.LBB67_1025:                            # %if.else4511
                                        #   in Loop: Header=BB67_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB67_1026:                            # %for.cond4512
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_981 Depth=2
                                        #       Parent Loop BB67_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB67_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB67_1028:                            # %for.cond4516
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_981 Depth=2
                                        #       Parent Loop BB67_1014 Depth=3
                                        #         Parent Loop BB67_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB67_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB67_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1028
.LBB67_1031:                            # %for.end4540
                                        #   in Loop: Header=BB67_1026 Depth=4
	jmp	.LBB67_1032
.LBB67_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB67_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1026
.LBB67_1033:                            # %for.end4543
                                        #   in Loop: Header=BB67_1014 Depth=3
	jmp	.LBB67_1034
.LBB67_1034:                            # %if.end4544
                                        #   in Loop: Header=BB67_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB67_1035:                            # %if.end4545
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB67_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB67_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB67_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB67_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB67_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB67_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB67_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB67_1014 Depth=3
	jmp	.LBB67_1014
.LBB67_1041:                            # %if.else4561
                                        #   in Loop: Header=BB67_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB67_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB67_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB67_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB67_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB67_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_1040
.LBB67_1046:                            # %if.else4575
                                        #   in Loop: Header=BB67_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB67_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB67_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB67_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB67_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB67_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_1040
.LBB67_1050:                            # %if.else4587
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB67_1052
.LBB67_1051:                            # %if.else4589
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1052
.LBB67_1052:                            # %while.end4590
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1053
.LBB67_1053:                            # %if.end4591
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB67_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB67_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB67_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB67_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB67_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB67_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB67_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1061:                            # %for.cond4615
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB67_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB67_1063:                            # %for.cond4619
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_981 Depth=2
                                        #       Parent Loop BB67_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB67_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB67_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1063
.LBB67_1066:                            # %for.end4643
                                        #   in Loop: Header=BB67_1061 Depth=3
	jmp	.LBB67_1067
.LBB67_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB67_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1061
.LBB67_1068:                            # %for.end4646
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB67_1069:                            # %if.end4647
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1070
.LBB67_1070:                            # %if.end4648
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1071
.LBB67_1071:                            # %if.end4649
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB67_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB67_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB67_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB67_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB67_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB67_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB67_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB67_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB67_1078:                            # %if.end4683
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1079
.LBB67_1079:                            # %if.end4684
                                        #   in Loop: Header=BB67_981 Depth=2
	jmp	.LBB67_1080
.LBB67_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB67_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB67_981
.LBB67_1081:                            # %for.end4687
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1082
.LBB67_1082:                            # %if.end4688
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1284
.LBB67_1083:                            # %if.else4689
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -316(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB67_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB67_1085:                            # %if.end4695
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB67_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB67_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -252(%rbp)
	je	.LBB67_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB67_1090
	jmp	.LBB67_1089
.LBB67_1089:                            # %if.then4702
                                        #   in Loop: Header=BB67_171 Depth=1
	subl	$2, %eax
	je	.LBB67_1097
	jmp	.LBB67_1098
.LBB67_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB67_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB67_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB67_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB67_1095
.LBB67_1094:                            # %if.then4716
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB67_1096
.LBB67_1095:                            # %if.else4717
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_1096:                            # %if.end4718
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1099
.LBB67_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB67_1099
.LBB67_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1101
.LBB67_1100:                            # %if.else4722
                                        #   in Loop: Header=BB67_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB67_1101:                            # %if.end4724
                                        #   in Loop: Header=BB67_171 Depth=1
	vmovsd	.LCPI67_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI67_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB67_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB67_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB67_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_1110
.LBB67_1106:                            # %if.else4743
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB67_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB67_1109
.LBB67_1108:                            # %if.else4748
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_1109:                            # %if.end4750
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1110
.LBB67_1110:                            # %if.end4751
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1112
.LBB67_1111:                            # %if.else4752
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_1112:                            # %if.end4754
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -20(%rbp)
.LBB67_1113:                            # %for.cond4755
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB67_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB67_1115:                            # %for.cond4759
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB67_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB67_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1115
.LBB67_1118:                            # %for.end4785
                                        #   in Loop: Header=BB67_1113 Depth=2
	jmp	.LBB67_1119
.LBB67_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB67_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1113
.LBB67_1120:                            # %for.end4788
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB67_1122
.LBB67_1121:                            # %if.else4789
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB67_1122:                            # %if.end4792
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1123
.LBB67_1123:                            # %if.end4793
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB67_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB67_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -20(%rbp)
.LBB67_1127:                            # %for.cond4806
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1129 Depth 3
                                        #         Child Loop BB67_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB67_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB67_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB67_1129:                            # %for.cond4810
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB67_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB67_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB67_1131:                            # %for.cond4814
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1127 Depth=2
                                        #       Parent Loop BB67_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB67_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB67_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB67_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB67_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB67_1134:                            # %if.end4826
                                        #   in Loop: Header=BB67_1131 Depth=4
	jmp	.LBB67_1135
.LBB67_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB67_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_1131
.LBB67_1136:                            # %for.end4829
                                        #   in Loop: Header=BB67_1129 Depth=3
	jmp	.LBB67_1137
.LBB67_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB67_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1129
.LBB67_1138:                            # %for.end4832
                                        #   in Loop: Header=BB67_1127 Depth=2
	jmp	.LBB67_1139
.LBB67_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB67_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1127
.LBB67_1140:                            # %for.end4835
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	$0, -24(%rbp)
.LBB67_1141:                            # %for.cond4840
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB67_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1143:                            # %for.cond4844
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB67_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB67_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1143
.LBB67_1146:                            # %for.end4877
                                        #   in Loop: Header=BB67_1141 Depth=2
	jmp	.LBB67_1147
.LBB67_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB67_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1141
.LBB67_1148:                            # %for.end4880
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1149
.LBB67_1149:                            # %if.end4881
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB67_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB67_1151:                            # %if.end4889
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -24(%rbp)
.LBB67_1152:                            # %for.cond4890
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB67_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1154:                            # %for.cond4894
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB67_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB67_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1154
.LBB67_1157:                            # %for.end4913
                                        #   in Loop: Header=BB67_1152 Depth=2
	jmp	.LBB67_1158
.LBB67_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB67_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1152
.LBB67_1159:                            # %for.end4916
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -20(%rbp)
.LBB67_1160:                            # %for.cond4917
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB67_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB67_1162:                            # %for.cond4921
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB67_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB67_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1162
.LBB67_1165:                            # %for.end4947
                                        #   in Loop: Header=BB67_1160 Depth=2
	jmp	.LBB67_1166
.LBB67_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB67_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1160
.LBB67_1167:                            # %for.end4950
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB67_1169
.LBB67_1168:                            # %if.else4952
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB67_1169:                            # %if.end4954
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1170
.LBB67_1170:                            # %if.end4955
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB67_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB67_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -20(%rbp)
.LBB67_1174:                            # %for.cond4968
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1176 Depth 3
                                        #         Child Loop BB67_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB67_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB67_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB67_1176:                            # %for.cond4972
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB67_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB67_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB67_1178:                            # %for.cond4976
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1174 Depth=2
                                        #       Parent Loop BB67_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB67_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB67_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB67_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB67_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB67_1181:                            # %if.end4988
                                        #   in Loop: Header=BB67_1178 Depth=4
	jmp	.LBB67_1182
.LBB67_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB67_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_1178
.LBB67_1183:                            # %for.end4991
                                        #   in Loop: Header=BB67_1176 Depth=3
	jmp	.LBB67_1184
.LBB67_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB67_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1176
.LBB67_1185:                            # %for.end4994
                                        #   in Loop: Header=BB67_1174 Depth=2
	jmp	.LBB67_1186
.LBB67_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB67_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1174
.LBB67_1187:                            # %for.end4997
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
.LBB67_1188:                            # %if.end5002
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB67_1189:                            # %for.cond5004
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB67_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB67_1191:                            # %for.cond5008
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB67_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB67_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1191
.LBB67_1194:                            # %for.end5034
                                        #   in Loop: Header=BB67_1189 Depth=2
	jmp	.LBB67_1195
.LBB67_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB67_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1189
.LBB67_1196:                            # %for.end5037
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB67_1198
.LBB67_1197:                            # %if.else5039
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB67_1198:                            # %if.end5043
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1199
.LBB67_1199:                            # %if.end5044
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB67_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB67_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -20(%rbp)
.LBB67_1202:                            # %for.cond5053
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB67_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB67_1204:                            # %for.cond5057
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB67_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB67_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1204
.LBB67_1207:                            # %for.end5084
                                        #   in Loop: Header=BB67_1202 Depth=2
	jmp	.LBB67_1208
.LBB67_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB67_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1202
.LBB67_1209:                            # %for.end5087
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -24(%rbp)
.LBB67_1211:                            # %for.cond5091
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB67_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1213:                            # %for.cond5095
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB67_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movl	-224(%rbp), %eax
	subl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-220(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB67_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1213
.LBB67_1216:                            # %for.end5194
                                        #   in Loop: Header=BB67_1211 Depth=2
	jmp	.LBB67_1217
.LBB67_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB67_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1211
.LBB67_1218:                            # %for.end5197
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1219
.LBB67_1219:                            # %if.end5198
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -24(%rbp)
.LBB67_1221:                            # %for.cond5204
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB67_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1223:                            # %for.cond5208
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB67_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB67_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1223
.LBB67_1226:                            # %for.end5232
                                        #   in Loop: Header=BB67_1221 Depth=2
	jmp	.LBB67_1227
.LBB67_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB67_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1221
.LBB67_1228:                            # %for.end5235
                                        #   in Loop: Header=BB67_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB67_1229:                            # %for.cond5237
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB67_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1231:                            # %for.cond5241
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB67_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB67_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1231
.LBB67_1234:                            # %for.end5265
                                        #   in Loop: Header=BB67_1229 Depth=2
	jmp	.LBB67_1235
.LBB67_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB67_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1229
.LBB67_1236:                            # %for.end5268
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB67_1237:                            # %for.cond5270
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB67_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1239:                            # %for.cond5274
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB67_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB67_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1239
.LBB67_1242:                            # %for.end5289
                                        #   in Loop: Header=BB67_1237 Depth=2
	jmp	.LBB67_1243
.LBB67_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB67_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1237
.LBB67_1244:                            # %for.end5292
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB67_1245:                            # %for.cond5296
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB67_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB67_1247:                            # %for.cond5300
                                        #   Parent Loop BB67_171 Depth=1
                                        #     Parent Loop BB67_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -220(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -172(%rbp)
	movl	-172(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -224(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-172(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB67_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB67_1251
.LBB67_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB67_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB67_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB67_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB67_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB67_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_1257
.LBB67_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	movl	-172(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB67_1256
.LBB67_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB67_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB67_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB67_1247 Depth=3
.LBB67_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB67_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB67_1260
.LBB67_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB67_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB67_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB67_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB67_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB67_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_1266
.LBB67_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB67_1265
.LBB67_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB67_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB67_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB67_1247 Depth=3
.LBB67_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB67_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB67_1269
.LBB67_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB67_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB67_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB67_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB67_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB67_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_1275
.LBB67_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB67_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB67_1274
.LBB67_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB67_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB67_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB67_1247 Depth=3
.LBB67_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB67_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB67_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1247
.LBB67_1277:                            # %for.end5546
                                        #   in Loop: Header=BB67_1245 Depth=2
	jmp	.LBB67_1278
.LBB67_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB67_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1245
.LBB67_1279:                            # %for.end5549
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1280
.LBB67_1280:                            # %if.end5550
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1282
.LBB67_1281:                            # %if.else5551
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB67_1282:                            # %if.end5554
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1283
.LBB67_1283:                            # %if.end5555
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1284
.LBB67_1284:                            # %if.end5556
                                        #   in Loop: Header=BB67_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB67_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB67_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB67_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB67_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB67_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB67_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -264(%rbp)
.LBB67_1289:                            # %if.end5574
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_1290
.LBB67_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
	jmp	.LBB67_171
.LBB67_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB67_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB67_1295
.LBB67_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB67_1299
.LBB67_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB67_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB67_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB67_1298:                            # %if.end5597
	jmp	.LBB67_1299
.LBB67_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB67_1395
.LBB67_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB67_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB67_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB67_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB67_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB67_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB67_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB67_1308:                            # %for.cond5623
                                        #   Parent Loop BB67_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB67_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB67_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_1308
.LBB67_1311:                            # %for.end5639
                                        #   in Loop: Header=BB67_1306 Depth=1
	jmp	.LBB67_1312
.LBB67_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB67_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1306
.LBB67_1313:                            # %for.end5642
	jmp	.LBB67_1370
.LBB67_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB67_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB67_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB67_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB67_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB67_1318:                            # %for.cond5651
                                        #   Parent Loop BB67_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB67_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB67_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB67_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_1318
.LBB67_1321:                            # %for.end5680
                                        #   in Loop: Header=BB67_1316 Depth=1
	jmp	.LBB67_1322
.LBB67_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB67_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1316
.LBB67_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB67_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB67_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB67_1326:                            # %for.cond5688
                                        #   Parent Loop BB67_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB67_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB67_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1326
.LBB67_1329:                            # %for.end5707
                                        #   in Loop: Header=BB67_1324 Depth=1
	jmp	.LBB67_1330
.LBB67_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB67_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1324
.LBB67_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB67_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB67_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB67_1335:                            # %for.cond5718
                                        #   Parent Loop BB67_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB67_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB67_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1335
.LBB67_1338:                            # %for.end5752
                                        #   in Loop: Header=BB67_1333 Depth=1
	jmp	.LBB67_1339
.LBB67_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB67_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1333
.LBB67_1340:                            # %for.end5755
	jmp	.LBB67_1341
.LBB67_1341:                            # %if.end5756
	jmp	.LBB67_1342
.LBB67_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB67_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB67_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB67_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB67_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB67_1347:                            # %for.cond5772
                                        #   Parent Loop BB67_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB67_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB67_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_1347
.LBB67_1350:                            # %for.end5788
                                        #   in Loop: Header=BB67_1345 Depth=1
	jmp	.LBB67_1351
.LBB67_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB67_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1345
.LBB67_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB67_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB67_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB67_1356
# %bb.1355:                             # %if.then5800
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB67_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB67_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB67_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB67_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB67_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB67_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB67_1362:                            # %for.cond5816
                                        #   Parent Loop BB67_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB67_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB67_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB67_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_1362
.LBB67_1365:                            # %for.end5842
                                        #   in Loop: Header=BB67_1360 Depth=1
	jmp	.LBB67_1366
.LBB67_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB67_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_1360
.LBB67_1367:                            # %for.end5845
	jmp	.LBB67_1368
.LBB67_1368:                            # %if.end5846
	jmp	.LBB67_1369
.LBB67_1369:                            # %if.end5847
	jmp	.LBB67_1370
.LBB67_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB67_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB67_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -284(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB67_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB67_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB67_1382
.LBB67_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_1382
# %bb.1381:                             # %if.then5884
	leaq	-284(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB67_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB67_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB67_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB67_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB67_1392
.LBB67_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB67_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB67_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB67_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB67_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB67_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB67_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB67_1394:                            # %if.end5973
	jmp	.LBB67_1395
.LBB67_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB67_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB67_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB67_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB67_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB67_1401
.LBB67_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB67_1402
.LBB67_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB67_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB67_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB67_1406
.LBB67_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB67_1406:                            # %if.end6019
	jmp	.LBB67_1407
.LBB67_1407:                            # %if.end6020
	jmp	.LBB67_1408
.LBB67_1408:                            # %if.end6021
	jmp	.LBB67_1409
.LBB67_1409:                            # %if.end6022
	jmp	.LBB67_1410
.LBB67_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB67_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB67_1413
.LBB67_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB67_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB67_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB67_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB67_1420
	jmp	.LBB67_1428
.LBB67_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB67_1428
	jmp	.LBB67_1420
.LBB67_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB67_1420
	jmp	.LBB67_1428
.LBB67_1420:                            # %land.lhs.true6050
	movq	-440(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB67_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB67_1425
	jmp	.LBB67_1428
.LBB67_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_1424
# %bb.1423:                             # %cond.true6058
	movq	-440(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB67_1428
	jmp	.LBB67_1425
.LBB67_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB67_1425
	jmp	.LBB67_1428
.LBB67_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-288(%rbp), %eax
	je	.LBB67_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB67_1427:                            # %if.end6068
	jmp	.LBB67_1428
.LBB67_1428:                            # %if.end6069
	jmp	.LBB67_1429
.LBB67_1429:                            # %if.end6070
	jmp	.LBB67_1430
.LBB67_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB67_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB67_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB67_1452
.LBB67_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB67_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -264(%rbp)
	jne	.LBB67_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB67_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB67_1437:                            # %lor.end6142
.LBB67_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB67_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB67_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB67_1441:                            # %lor.end6166
.LBB67_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB67_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB67_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB67_1445:                            # %lor.end6191
.LBB67_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB67_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB67_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB67_1449:                            # %lor.end6216
.LBB67_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB67_1451:                            # %if.end6232
	jmp	.LBB67_1452
.LBB67_1452:                            # %if.end6233
	jmp	.LBB67_1464
.LBB67_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB67_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB67_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB67_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB67_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB67_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB67_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB67_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB67_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB67_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB67_1463:                            # %if.end6319
	jmp	.LBB67_1464
.LBB67_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB67_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB67_1466:                            # %if.end6327
	cmpl	$1674892148, -412(%rbp) # imm = 0x63D4D374
	jne	.LBB67_1468
.LBB67_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_1467
.Lfunc_end67:
	.size	encode_one_macroblock.38, .Lfunc_end67-encode_one_macroblock.38
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.39 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.39
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.39,@function
Mode_Decision_for_Intra4x4Macroblock.39: # @Mode_Decision_for_Intra4x4Macroblock.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1904482187, -20(%rbp)  # imm = 0x7184178B
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB68_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB68_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_4:                               # %if.end
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_1
.LBB68_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1904482187, -20(%rbp)  # imm = 0x7184178B
	jne	.LBB68_8
.LBB68_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_7
.Lfunc_end68:
	.size	Mode_Decision_for_Intra4x4Macroblock.39, .Lfunc_end68-Mode_Decision_for_Intra4x4Macroblock.39
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.40 # -- Begin function RDCost_for_4x4Blocks_Chroma.40
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.40,@function
RDCost_for_4x4Blocks_Chroma.40:         # @RDCost_for_4x4Blocks_Chroma.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$850575330, -56(%rbp)   # imm = 0x32B2BFE2
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB69_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB69_3
.LBB69_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB69_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB69_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB69_18
.LBB69_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB69_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB69_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB69_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB69_8:                               # %land.end
                                        #   in Loop: Header=BB69_6 Depth=1
	testb	$1, %al
	jne	.LBB69_9
	jmp	.LBB69_17
.LBB69_9:                               # %for.body
                                        #   in Loop: Header=BB69_6 Depth=1
	movq	-88(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-112(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB69_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB69_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB69_12
.LBB69_11:                              # %if.else54
                                        #   in Loop: Header=BB69_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB69_12:                              # %if.end55
                                        #   in Loop: Header=BB69_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB69_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB69_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB69_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB69_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB69_15:                              # %lor.end
                                        #   in Loop: Header=BB69_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB69_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB69_6
.LBB69_17:                              # %for.end
	jmp	.LBB69_18
.LBB69_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$850575330, -56(%rbp)   # imm = 0x32B2BFE2
	jne	.LBB69_20
.LBB69_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_19
.Lfunc_end69:
	.size	RDCost_for_4x4Blocks_Chroma.40, .Lfunc_end69-RDCost_for_4x4Blocks_Chroma.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.41
.LCPI70_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.41
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.41,@function
RDCost_for_macroblocks.41:              # @RDCost_for_macroblocks.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1505127372, -92(%rbp)  # imm = 0x59B66BCC
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB70_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB70_3
.LBB70_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB70_3
.LBB70_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB70_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB70_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB70_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB70_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
.LBB70_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$0, -16(%rbp)
.LBB70_10:                              # %for.cond17
                                        #   Parent Loop BB70_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB70_10 Depth=2
	movq	direct_pdir, %rax
	movl	-96(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB70_177
.LBB70_13:                              # %if.end
                                        #   in Loop: Header=BB70_10 Depth=2
	jmp	.LBB70_14
.LBB70_14:                              # %for.inc
                                        #   in Loop: Header=BB70_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_10
.LBB70_15:                              # %for.end
                                        #   in Loop: Header=BB70_8 Depth=1
	jmp	.LBB70_16
.LBB70_16:                              # %for.inc30
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_8
.LBB70_17:                              # %for.end32
	jmp	.LBB70_18
.LBB70_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB70_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB70_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB70_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB70_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB70_177
.LBB70_23:                              # %if.end46
	jmp	.LBB70_76
.LBB70_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB70_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB70_75
.LBB70_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB70_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB70_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB70_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_31 Depth 2
                                        #       Child Loop BB70_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB70_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB70_29 Depth=1
	movl	$0, -16(%rbp)
.LBB70_31:                              # %for.cond61
                                        #   Parent Loop BB70_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB70_31 Depth=2
	movl	$0, -24(%rbp)
.LBB70_33:                              # %for.cond65
                                        #   Parent Loop BB70_29 Depth=1
                                        #     Parent Loop BB70_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB70_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB70_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB70_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB70_33 Depth=3
	movl	$2, -40(%rbp)
.LBB70_36:                              # %if.end77
                                        #   in Loop: Header=BB70_33 Depth=3
	jmp	.LBB70_37
.LBB70_37:                              # %for.inc78
                                        #   in Loop: Header=BB70_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB70_33
.LBB70_38:                              # %for.end80
                                        #   in Loop: Header=BB70_31 Depth=2
	jmp	.LBB70_39
.LBB70_39:                              # %for.inc81
                                        #   in Loop: Header=BB70_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_31
.LBB70_40:                              # %for.end83
                                        #   in Loop: Header=BB70_29 Depth=1
	jmp	.LBB70_41
.LBB70_41:                              # %for.inc84
                                        #   in Loop: Header=BB70_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_29
.LBB70_42:                              # %for.end86
	movl	$0, -32(%rbp)
.LBB70_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB70_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB70_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB70_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB70_43
.LBB70_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB70_47:                              # %if.end97
	jmp	.LBB70_74
.LBB70_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB70_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB70_73
.LBB70_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB70_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB70_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB70_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_55 Depth 2
                                        #       Child Loop BB70_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB70_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB70_53 Depth=1
	movl	$0, -16(%rbp)
.LBB70_55:                              # %for.cond115
                                        #   Parent Loop BB70_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB70_55 Depth=2
	movl	$0, -24(%rbp)
.LBB70_57:                              # %for.cond119
                                        #   Parent Loop BB70_53 Depth=1
                                        #     Parent Loop BB70_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB70_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB70_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB70_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB70_57 Depth=3
	movl	$2, -40(%rbp)
.LBB70_60:                              # %if.end131
                                        #   in Loop: Header=BB70_57 Depth=3
	jmp	.LBB70_61
.LBB70_61:                              # %for.inc132
                                        #   in Loop: Header=BB70_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB70_57
.LBB70_62:                              # %for.end134
                                        #   in Loop: Header=BB70_55 Depth=2
	jmp	.LBB70_63
.LBB70_63:                              # %for.inc135
                                        #   in Loop: Header=BB70_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_55
.LBB70_64:                              # %for.end137
                                        #   in Loop: Header=BB70_53 Depth=1
	jmp	.LBB70_65
.LBB70_65:                              # %for.inc138
                                        #   in Loop: Header=BB70_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_53
.LBB70_66:                              # %for.end140
	movl	$0, -32(%rbp)
.LBB70_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB70_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB70_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB70_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB70_67
.LBB70_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB70_71:                              # %if.end152
	jmp	.LBB70_72
.LBB70_72:                              # %if.end153
	jmp	.LBB70_73
.LBB70_73:                              # %if.end154
	jmp	.LBB70_74
.LBB70_74:                              # %if.end155
	jmp	.LBB70_75
.LBB70_75:                              # %if.end156
	jmp	.LBB70_76
.LBB70_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB70_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB70_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB70_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB70_81
.LBB70_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB70_81
.LBB70_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB70_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB70_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB70_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB70_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB70_84 Depth=1
	movl	$0, -16(%rbp)
.LBB70_86:                              # %for.cond179
                                        #   Parent Loop BB70_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB70_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB70_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB70_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_86
.LBB70_89:                              # %for.end196
                                        #   in Loop: Header=BB70_84 Depth=1
	jmp	.LBB70_90
.LBB70_90:                              # %for.inc197
                                        #   in Loop: Header=BB70_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_84
.LBB70_91:                              # %for.end199
	jmp	.LBB70_101
.LBB70_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB70_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB70_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB70_93 Depth=1
	movl	$0, -16(%rbp)
.LBB70_95:                              # %for.cond205
                                        #   Parent Loop BB70_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB70_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB70_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB70_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_95
.LBB70_98:                              # %for.end220
                                        #   in Loop: Header=BB70_93 Depth=1
	jmp	.LBB70_99
.LBB70_99:                              # %for.inc221
                                        #   in Loop: Header=BB70_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_93
.LBB70_100:                             # %for.end223
	jmp	.LBB70_101
.LBB70_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB70_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB70_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB70_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB70_107
.LBB70_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB70_107
# %bb.106:                              # %if.then238
	leaq	-28(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB70_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB70_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB70_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB70_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB70_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB70_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_114 Depth 2
                                        #       Child Loop BB70_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB70_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB70_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB70_114:                             # %for.cond259
                                        #   Parent Loop BB70_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB70_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB70_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB70_116:                             # %for.cond263
                                        #   Parent Loop BB70_112 Depth=1
                                        #     Parent Loop BB70_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB70_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB70_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_116
.LBB70_119:                             # %for.end291
                                        #   in Loop: Header=BB70_114 Depth=2
	jmp	.LBB70_120
.LBB70_120:                             # %for.inc292
                                        #   in Loop: Header=BB70_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_114
.LBB70_121:                             # %for.end294
                                        #   in Loop: Header=BB70_112 Depth=1
	jmp	.LBB70_122
.LBB70_122:                             # %for.inc295
                                        #   in Loop: Header=BB70_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB70_112
.LBB70_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB70_133
.LBB70_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB70_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB70_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB70_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB70_127:                             # %for.cond306
                                        #   Parent Loop BB70_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB70_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB70_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_127
.LBB70_130:                             # %for.end334
                                        #   in Loop: Header=BB70_125 Depth=1
	jmp	.LBB70_131
.LBB70_131:                             # %for.inc335
                                        #   in Loop: Header=BB70_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_125
.LBB70_132:                             # %for.end337
	jmp	.LBB70_133
.LBB70_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB70_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB70_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB70_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB70_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB70_137:                             # %for.cond347
                                        #   Parent Loop BB70_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB70_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB70_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_137
.LBB70_140:                             # %for.end398
                                        #   in Loop: Header=BB70_135 Depth=1
	jmp	.LBB70_141
.LBB70_141:                             # %for.inc399
                                        #   in Loop: Header=BB70_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_135
.LBB70_142:                             # %for.end401
	jmp	.LBB70_143
.LBB70_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -104(%rbp)
	je	.LBB70_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB70_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB70_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB70_148
.LBB70_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB70_149
.LBB70_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-28(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB70_149:                             # %if.end422
	jmp	.LBB70_151
.LBB70_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB70_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI70_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB70_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI70_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB70_154
.LBB70_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB70_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB70_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB70_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB70_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB70_159
.LBB70_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB70_177
.LBB70_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB70_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB70_165
	jmp	.LBB70_176
.LBB70_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB70_176
	jmp	.LBB70_165
.LBB70_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB70_165
	jmp	.LBB70_176
.LBB70_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB70_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB70_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB70_171
	jmp	.LBB70_174
.LBB70_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB70_174
	jmp	.LBB70_171
.LBB70_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB70_171
	jmp	.LBB70_174
.LBB70_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB70_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB70_177
.LBB70_173:                             # %if.end482
	jmp	.LBB70_174
.LBB70_174:                             # %if.end483
	jmp	.LBB70_175
.LBB70_175:                             # %if.end484
	jmp	.LBB70_176
.LBB70_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB70_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$1505127372, -92(%rbp)  # imm = 0x59B66BCC
	jne	.LBB70_179
.LBB70_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_178
.Lfunc_end70:
	.size	RDCost_for_macroblocks.41, .Lfunc_end70-RDCost_for_macroblocks.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.42
.LCPI71_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI71_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.42
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.42,@function
Mode_Decision_for_8x8IntraBlocks.42:    # @Mode_Decision_for_8x8IntraBlocks.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$284085451, -20(%rbp)   # imm = 0x10EECCCB
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB71_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB71_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$1, -16(%rbp)
.LBB71_4:                               # %if.end
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_1
.LBB71_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$284085451, -20(%rbp)   # imm = 0x10EECCCB
	jne	.LBB71_8
.LBB71_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_7
.Lfunc_end71:
	.size	Mode_Decision_for_8x8IntraBlocks.42, .Lfunc_end71-Mode_Decision_for_8x8IntraBlocks.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.43
.LCPI72_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.43
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.43,@function
RDCost_for_8x8blocks.43:                # @RDCost_for_8x8blocks.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$389530674, -160(%rbp)  # imm = 0x1737C432
	movq	%rdi, -144(%rbp)
	movq	%rsi, -200(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, -164(%rbp)
	je	.LBB72_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB72_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -124(%rbp)
	je	.LBB72_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB72_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -184(%rbp)
	jmp	.LBB72_139
.LBB72_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB72_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB72_8
.LBB72_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB72_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB72_19
.LBB72_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB72_13
.LBB72_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB72_14
.LBB72_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB72_14
.LBB72_14:                              # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB72_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB72_17
.LBB72_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB72_18
.LBB72_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB72_18
.LBB72_18:                              # %cond.end82
	movl	%eax, -156(%rbp)
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-156(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB72_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB72_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB72_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_23 Depth 2
                                        #       Child Loop BB72_25 Depth 3
                                        #     Child Loop BB72_31 Depth 2
                                        #       Child Loop BB72_33 Depth 3
                                        #     Child Loop BB72_39 Depth 2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB72_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -12(%rbp)
.LBB72_23:                              # %for.cond96
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB72_23 Depth=2
	movl	$0, -16(%rbp)
.LBB72_25:                              # %for.cond100
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB72_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB72_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_25
.LBB72_28:                              # %for.end
                                        #   in Loop: Header=BB72_23 Depth=2
	jmp	.LBB72_29
.LBB72_29:                              # %for.inc114
                                        #   in Loop: Header=BB72_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_23
.LBB72_30:                              # %for.end116
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB72_31:                              # %for.cond120
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB72_31 Depth=2
	movl	$0, -16(%rbp)
.LBB72_33:                              # %for.cond124
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB72_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB72_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_33
.LBB72_36:                              # %for.end152
                                        #   in Loop: Header=BB72_31 Depth=2
	jmp	.LBB72_37
.LBB72_37:                              # %for.inc153
                                        #   in Loop: Header=BB72_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_31
.LBB72_38:                              # %for.end155
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB72_39:                              # %for.cond159
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	$0, -16(%rbp)
.LBB72_41:                              # %for.cond163
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB72_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB72_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_41
.LBB72_44:                              # %for.end180
                                        #   in Loop: Header=BB72_39 Depth=2
	jmp	.LBB72_45
.LBB72_45:                              # %for.inc181
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_39
.LBB72_46:                              # %for.end183
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_47
.LBB72_47:                              # %for.inc184
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB72_21
.LBB72_48:                              # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB72_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB72_51:                              # %for.cond192
                                        #   Parent Loop BB72_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -120(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-120(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-120(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB72_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_55
.LBB72_54:                              # %cond.false229
                                        #   in Loop: Header=BB72_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB72_55:                              # %cond.end235
                                        #   in Loop: Header=BB72_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB72_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB72_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB72_61
.LBB72_57:                              # %cond.false241
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB72_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_60
.LBB72_59:                              # %cond.false250
                                        #   in Loop: Header=BB72_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB72_60:                              # %cond.end256
                                        #   in Loop: Header=BB72_51 Depth=2
.LBB72_61:                              # %cond.end258
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB72_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB72_64
.LBB72_63:                              # %cond.false276
                                        #   in Loop: Header=BB72_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB72_64:                              # %cond.end282
                                        #   in Loop: Header=BB72_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB72_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB72_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_70
.LBB72_66:                              # %cond.false288
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB72_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_69
.LBB72_68:                              # %cond.false297
                                        #   in Loop: Header=BB72_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB72_69:                              # %cond.end303
                                        #   in Loop: Header=BB72_51 Depth=2
.LBB72_70:                              # %cond.end305
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB72_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB72_73
.LBB72_72:                              # %cond.false325
                                        #   in Loop: Header=BB72_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB72_73:                              # %cond.end331
                                        #   in Loop: Header=BB72_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB72_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB72_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB72_79
.LBB72_75:                              # %cond.false337
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB72_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB72_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_78
.LBB72_77:                              # %cond.false346
                                        #   in Loop: Header=BB72_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB72_78:                              # %cond.end352
                                        #   in Loop: Header=BB72_51 Depth=2
.LBB72_79:                              # %cond.end354
                                        #   in Loop: Header=BB72_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB72_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_51
.LBB72_81:                              # %for.end369
                                        #   in Loop: Header=BB72_49 Depth=1
	jmp	.LBB72_82
.LBB72_82:                              # %for.inc370
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_49
.LBB72_83:                              # %for.end372
	jmp	.LBB72_84
.LBB72_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB72_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB72_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB72_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB72_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB72_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB72_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_92 Depth 2
                                        #       Child Loop BB72_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB72_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB72_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB72_92:                              # %for.cond395
                                        #   Parent Loop BB72_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB72_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB72_94:                              # %for.cond403
                                        #   Parent Loop BB72_90 Depth=1
                                        #     Parent Loop BB72_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB72_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB72_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_94
.LBB72_97:                              # %for.end429
                                        #   in Loop: Header=BB72_92 Depth=2
	jmp	.LBB72_98
.LBB72_98:                              # %for.inc430
                                        #   in Loop: Header=BB72_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_92
.LBB72_99:                              # %for.end432
                                        #   in Loop: Header=BB72_90 Depth=1
	jmp	.LBB72_100
.LBB72_100:                             # %for.inc433
                                        #   in Loop: Header=BB72_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB72_90
.LBB72_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB72_113
.LBB72_102:                             # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB72_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB72_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB72_105:                             # %for.cond447
                                        #   Parent Loop BB72_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB72_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB72_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB72_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB72_108:                             # %if.end524
                                        #   in Loop: Header=BB72_105 Depth=2
	jmp	.LBB72_109
.LBB72_109:                             # %for.inc525
                                        #   in Loop: Header=BB72_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_105
.LBB72_110:                             # %for.end527
                                        #   in Loop: Header=BB72_103 Depth=1
	jmp	.LBB72_111
.LBB72_111:                             # %for.inc528
                                        #   in Loop: Header=BB72_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_103
.LBB72_112:                             # %for.end530
	jmp	.LBB72_113
.LBB72_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_115
# %bb.114:                              # %if.then534
	movl	-128(%rbp), %edi
	movl	-172(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB72_116
.LBB72_115:                             # %if.else536
	movl	-128(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB72_116:                             # %if.end547
	cmpl	$0, -124(%rbp)
	jne	.LBB72_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB72_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB72_121
.LBB72_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB72_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB72_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB72_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB72_126
.LBB72_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB72_126:                             # %if.end583
	jmp	.LBB72_127
.LBB72_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB72_130
.LBB72_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB72_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB72_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB72_133
.LBB72_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB72_133:                             # %if.end612
	jmp	.LBB72_134
.LBB72_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB72_136
# %bb.135:                              # %if.then617
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB72_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB72_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB72_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
.LBB72_139:                             # %return
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$389530674, -160(%rbp)  # imm = 0x1737C432
	jne	.LBB72_141
.LBB72_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB72_140
.Lfunc_end72:
	.size	RDCost_for_8x8blocks.43, .Lfunc_end72-RDCost_for_8x8blocks.43
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.44         # -- Begin function RestoreMV8x8.44
	.p2align	4, 0x90
	.type	RestoreMV8x8.44,@function
RestoreMV8x8.44:                        # @RestoreMV8x8.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$969381886, -16(%rbp)   # imm = 0x39C797FE
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_4:                               # %for.end
	cmpl	$969381886, -16(%rbp)   # imm = 0x39C797FE
	jne	.LBB73_6
.LBB73_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_5
.Lfunc_end73:
	.size	RestoreMV8x8.44, .Lfunc_end73-RestoreMV8x8.44
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.45 # -- Begin function GetBestTransformP8x8.45
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.45,@function
GetBestTransformP8x8.45:                # @GetBestTransformP8x8.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$186534510, -64(%rbp)   # imm = 0xB1E4A6E
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB74_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB74_25
.LBB74_2:                               # %if.end
	movl	$0, -32(%rbp)
.LBB74_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_5 Depth 2
                                        #       Child Loop BB74_7 Depth 3
                                        #         Child Loop BB74_9 Depth 4
                                        #           Child Loop BB74_11 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB74_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB74_3 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB74_5:                               # %for.cond3
                                        #   Parent Loop BB74_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_7 Depth 3
                                        #         Child Loop BB74_9 Depth 4
                                        #           Child Loop BB74_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB74_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB74_7:                               # %for.cond7
                                        #   Parent Loop BB74_3 Depth=1
                                        #     Parent Loop BB74_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_9 Depth 4
                                        #           Child Loop BB74_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB74_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB74_9:                               # %for.cond12
                                        #   Parent Loop BB74_3 Depth=1
                                        #     Parent Loop BB74_5 Depth=2
                                        #       Parent Loop BB74_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB74_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB74_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB74_9 Depth=4
	movl	$0, -12(%rbp)
.LBB74_11:                              # %for.cond15
                                        #   Parent Loop BB74_3 Depth=1
                                        #     Parent Loop BB74_5 Depth=2
                                        #       Parent Loop BB74_7 Depth=3
                                        #         Parent Loop BB74_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB74_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB74_11 Depth=5
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB74_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB74_11
.LBB74_14:                              # %for.end
                                        #   in Loop: Header=BB74_9 Depth=4
	jmp	.LBB74_15
.LBB74_15:                              # %for.inc51
                                        #   in Loop: Header=BB74_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_9
.LBB74_16:                              # %for.end53
                                        #   in Loop: Header=BB74_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB74_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_7
.LBB74_18:                              # %for.end57
                                        #   in Loop: Header=BB74_5 Depth=2
	jmp	.LBB74_19
.LBB74_19:                              # %for.inc58
                                        #   in Loop: Header=BB74_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_5
.LBB74_20:                              # %for.end60
                                        #   in Loop: Header=BB74_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB74_3 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB74_3
.LBB74_22:                              # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB74_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB74_25
.LBB74_24:                              # %if.else
	movl	$0, -44(%rbp)
.LBB74_25:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$186534510, -64(%rbp)   # imm = 0xB1E4A6E
	jne	.LBB74_27
.LBB74_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_26
.Lfunc_end74:
	.size	GetBestTransformP8x8.45, .Lfunc_end74-GetBestTransformP8x8.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.46
.LCPI75_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI75_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.46
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.46,@function
Mode_Decision_for_4x4IntraBlocks.46:    # @Mode_Decision_for_4x4IntraBlocks.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI75_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1240062408, -168(%rbp) # imm = 0x49E9D9C8
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -160(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB75_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB75_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB75_4
.LBB75_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB75_4
.LBB75_4:                               # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB75_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB75_7
.LBB75_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB75_7
.LBB75_7:                               # %cond.end31
	movl	%eax, -232(%rbp)
.LBB75_8:                               # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB75_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB75_11
.LBB75_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB75_11
.LBB75_11:                              # %cond.end42
	movl	%eax, -108(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB75_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB75_14
.LBB75_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB75_14
.LBB75_14:                              # %cond.end55
	movl	%eax, -116(%rbp)
	cmpl	$0, -108(%rbp)
	jl	.LBB75_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -116(%rbp)
	jge	.LBB75_17
.LBB75_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB75_21
.LBB75_17:                              # %cond.false59
	movl	-108(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB75_19
# %bb.18:                               # %cond.true61
	movl	-108(%rbp), %eax
	jmp	.LBB75_20
.LBB75_19:                              # %cond.false62
	movl	-116(%rbp), %eax
.LBB75_20:                              # %cond.end63
.LBB75_21:                              # %cond.end65
	movl	%eax, -92(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-156(%rbp), %rdx
	leaq	-176(%rbp), %rcx
	leaq	-172(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB75_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_49 Depth 2
                                        #       Child Loop BB75_51 Depth 3
                                        #     Child Loop BB75_64 Depth 2
                                        #       Child Loop BB75_66 Depth 3
                                        #     Child Loop BB75_73 Depth 2
                                        #       Child Loop BB75_75 Depth 3
                                        #     Child Loop BB75_81 Depth 2
                                        #       Child Loop BB75_83 Depth 3
                                        #     Child Loop BB75_91 Depth 2
                                        #       Child Loop BB75_93 Depth 3
                                        #     Child Loop BB75_99 Depth 2
                                        #       Child Loop BB75_101 Depth 3
                                        #     Child Loop BB75_107 Depth 2
                                        #       Child Loop BB75_109 Depth 3
                                        #     Child Loop BB75_115 Depth 2
                                        #       Child Loop BB75_117 Depth 3
                                        #     Child Loop BB75_123 Depth 2
                                        #       Child Loop BB75_125 Depth 3
                                        #     Child Loop BB75_131 Depth 2
                                        #       Child Loop BB75_133 Depth 3
                                        #     Child Loop BB75_166 Depth 2
                                        #       Child Loop BB75_168 Depth 3
                                        #     Child Loop BB75_175 Depth 2
                                        #       Child Loop BB75_177 Depth 3
                                        #     Child Loop BB75_183 Depth 2
                                        #       Child Loop BB75_185 Depth 3
                                        #     Child Loop BB75_191 Depth 2
                                        #       Child Loop BB75_193 Depth 3
                                        #     Child Loop BB75_199 Depth 2
                                        #       Child Loop BB75_201 Depth 3
                                        #         Child Loop BB75_203 Depth 4
                                        #     Child Loop BB75_211 Depth 2
                                        #       Child Loop BB75_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB75_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB75_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB75_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB75_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB75_28
.LBB75_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$0, -176(%rbp)
	movb	$1, %al
	jne	.LBB75_32
.LBB75_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB75_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB75_31
.LBB75_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$0, -156(%rbp)
	movb	$1, %al
	jne	.LBB75_32
.LBB75_31:                              # %lor.rhs
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$0, -172(%rbp)
	setne	%al
.LBB75_32:                              # %lor.end
                                        #   in Loop: Header=BB75_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB75_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_46
.LBB75_34:                              # %if.then86
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB75_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB75_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB75_38
.LBB75_37:                              # %if.then92
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_223
.LBB75_38:                              # %if.end93
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB75_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB75_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB75_42
.LBB75_41:                              # %if.then99
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_223
.LBB75_42:                              # %if.end100
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB75_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB75_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_223
.LBB75_45:                              # %if.end105
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_46
.LBB75_46:                              # %if.end106
                                        #   in Loop: Header=BB75_22 Depth=1
	cmpl	$0, -180(%rbp)
	je	.LBB75_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB75_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB75_49:                              # %for.cond111
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB75_49 Depth=2
	movl	$0, -12(%rbp)
.LBB75_51:                              # %for.cond114
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB75_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB75_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB75_51
.LBB75_54:                              # %for.end
                                        #   in Loop: Header=BB75_49 Depth=2
	jmp	.LBB75_55
.LBB75_55:                              # %for.inc133
                                        #   in Loop: Header=BB75_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_49
.LBB75_56:                              # %for.end135
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jne	.LBB75_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB75_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_59
.LBB75_58:                              # %cond.false139
                                        #   in Loop: Header=BB75_22 Depth=1
	vmovsd	.LCPI75_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB75_59:                              # %cond.end142
                                        #   in Loop: Header=BB75_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB75_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB75_61:                              # %if.end148
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_221
.LBB75_62:                              # %if.else
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB75_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_64:                              # %for.cond151
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB75_64 Depth=2
	movl	$0, -12(%rbp)
.LBB75_66:                              # %for.cond155
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB75_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB75_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_66
.LBB75_69:                              # %for.end194
                                        #   in Loop: Header=BB75_64 Depth=2
	jmp	.LBB75_70
.LBB75_70:                              # %for.inc195
                                        #   in Loop: Header=BB75_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_64
.LBB75_71:                              # %for.end197
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_73:                              # %for.cond202
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB75_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB75_73 Depth=2
	movl	$0, -12(%rbp)
.LBB75_75:                              # %for.cond206
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB75_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB75_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB75_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_75
.LBB75_78:                              # %for.end224
                                        #   in Loop: Header=BB75_73 Depth=2
	jmp	.LBB75_79
.LBB75_79:                              # %for.inc225
                                        #   in Loop: Header=BB75_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_73
.LBB75_80:                              # %for.end227
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -20(%rbp)
.LBB75_81:                              # %for.cond228
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB75_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB75_81 Depth=2
	movl	$0, -24(%rbp)
.LBB75_83:                              # %for.cond232
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB75_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB75_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB75_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_83
.LBB75_86:                              # %for.end249
                                        #   in Loop: Header=BB75_81 Depth=2
	jmp	.LBB75_87
.LBB75_87:                              # %for.inc250
                                        #   in Loop: Header=BB75_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_81
.LBB75_88:                              # %for.end252
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB75_89:                              # %if.end253
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB75_220
.LBB75_90:                              # %if.else254
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_91:                              # %for.cond255
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB75_91 Depth=2
	movl	$0, -12(%rbp)
.LBB75_93:                              # %for.cond259
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB75_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB75_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_93
.LBB75_96:                              # %for.end345
                                        #   in Loop: Header=BB75_91 Depth=2
	jmp	.LBB75_97
.LBB75_97:                              # %for.inc346
                                        #   in Loop: Header=BB75_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_91
.LBB75_98:                              # %for.end348
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_99:                              # %for.cond349
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB75_99 Depth=2
	movl	$0, -12(%rbp)
.LBB75_101:                             # %for.cond353
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB75_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB75_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_101
.LBB75_104:                             # %for.end368
                                        #   in Loop: Header=BB75_99 Depth=2
	jmp	.LBB75_105
.LBB75_105:                             # %for.inc369
                                        #   in Loop: Header=BB75_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_99
.LBB75_106:                             # %for.end371
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB75_107:                             # %for.cond374
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB75_107 Depth=2
	movl	$0, -12(%rbp)
.LBB75_109:                             # %for.cond378
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB75_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB75_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_109
.LBB75_112:                             # %for.end402
                                        #   in Loop: Header=BB75_107 Depth=2
	jmp	.LBB75_113
.LBB75_113:                             # %for.inc403
                                        #   in Loop: Header=BB75_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_107
.LBB75_114:                             # %for.end405
                                        #   in Loop: Header=BB75_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB75_115:                             # %for.cond409
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB75_115 Depth=2
	movl	$0, -12(%rbp)
.LBB75_117:                             # %for.cond413
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB75_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB75_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_117
.LBB75_120:                             # %for.end437
                                        #   in Loop: Header=BB75_115 Depth=2
	jmp	.LBB75_121
.LBB75_121:                             # %for.inc438
                                        #   in Loop: Header=BB75_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_115
.LBB75_122:                             # %for.end440
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB75_123:                             # %for.cond444
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB75_123 Depth=2
	movl	$0, -12(%rbp)
.LBB75_125:                             # %for.cond448
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB75_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_125
.LBB75_128:                             # %for.end463
                                        #   in Loop: Header=BB75_123 Depth=2
	jmp	.LBB75_129
.LBB75_129:                             # %for.inc464
                                        #   in Loop: Header=BB75_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_123
.LBB75_130:                             # %for.end466
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_131:                             # %for.cond467
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB75_131 Depth=2
	movl	$0, -12(%rbp)
.LBB75_133:                             # %for.cond471
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB75_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB75_137
.LBB75_136:                             # %cond.false516
                                        #   in Loop: Header=BB75_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB75_137:                             # %cond.end529
                                        #   in Loop: Header=BB75_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB75_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB75_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB75_143
.LBB75_139:                             # %cond.false535
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB75_142
.LBB75_141:                             # %cond.false551
                                        #   in Loop: Header=BB75_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB75_142:                             # %cond.end564
                                        #   in Loop: Header=BB75_133 Depth=3
.LBB75_143:                             # %cond.end566
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB75_146
.LBB75_145:                             # %cond.false588
                                        #   in Loop: Header=BB75_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB75_146:                             # %cond.end598
                                        #   in Loop: Header=BB75_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB75_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB75_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_152
.LBB75_148:                             # %cond.false604
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB75_151
.LBB75_150:                             # %cond.false617
                                        #   in Loop: Header=BB75_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB75_151:                             # %cond.end627
                                        #   in Loop: Header=BB75_133 Depth=3
.LBB75_152:                             # %cond.end629
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB75_155
.LBB75_154:                             # %cond.false655
                                        #   in Loop: Header=BB75_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB75_155:                             # %cond.end668
                                        #   in Loop: Header=BB75_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB75_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB75_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB75_161
.LBB75_157:                             # %cond.false674
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB75_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB75_160
.LBB75_159:                             # %cond.false690
                                        #   in Loop: Header=BB75_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB75_160:                             # %cond.end703
                                        #   in Loop: Header=BB75_133 Depth=3
.LBB75_161:                             # %cond.end705
                                        #   in Loop: Header=BB75_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB75_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_133
.LBB75_163:                             # %for.end718
                                        #   in Loop: Header=BB75_131 Depth=2
	jmp	.LBB75_164
.LBB75_164:                             # %for.inc719
                                        #   in Loop: Header=BB75_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_131
.LBB75_165:                             # %for.end721
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB75_166:                             # %for.cond722
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB75_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB75_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB75_168:                             # %for.cond726
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB75_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB75_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_168
.LBB75_171:                             # %for.end831
                                        #   in Loop: Header=BB75_166 Depth=2
	jmp	.LBB75_172
.LBB75_172:                             # %for.inc832
                                        #   in Loop: Header=BB75_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_166
.LBB75_173:                             # %for.end834
                                        #   in Loop: Header=BB75_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-96(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_175:                             # %for.cond842
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB75_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB75_175 Depth=2
	movl	$0, -12(%rbp)
.LBB75_177:                             # %for.cond846
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB75_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB75_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB75_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_177
.LBB75_180:                             # %for.end865
                                        #   in Loop: Header=BB75_175 Depth=2
	jmp	.LBB75_181
.LBB75_181:                             # %for.inc866
                                        #   in Loop: Header=BB75_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_175
.LBB75_182:                             # %for.end868
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_183:                             # %for.cond869
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB75_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB75_183 Depth=2
	movl	$0, -12(%rbp)
.LBB75_185:                             # %for.cond873
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB75_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB75_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB75_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_185
.LBB75_188:                             # %for.end893
                                        #   in Loop: Header=BB75_183 Depth=2
	jmp	.LBB75_189
.LBB75_189:                             # %for.inc894
                                        #   in Loop: Header=BB75_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_183
.LBB75_190:                             # %for.end896
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -16(%rbp)
.LBB75_191:                             # %for.cond897
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB75_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB75_191 Depth=2
	movl	$0, -12(%rbp)
.LBB75_193:                             # %for.cond901
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB75_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB75_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB75_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_193
.LBB75_196:                             # %for.end921
                                        #   in Loop: Header=BB75_191 Depth=2
	jmp	.LBB75_197
.LBB75_197:                             # %for.inc922
                                        #   in Loop: Header=BB75_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_191
.LBB75_198:                             # %for.end924
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -12(%rbp)
.LBB75_199:                             # %for.cond925
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_201 Depth 3
                                        #         Child Loop BB75_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB75_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB75_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB75_201:                             # %for.cond985
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB75_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB75_201 Depth=3
	movl	$0, -24(%rbp)
.LBB75_203:                             # %for.cond989
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_199 Depth=2
                                        #       Parent Loop BB75_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB75_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB75_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB75_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_203
.LBB75_206:                             # %for.end1011
                                        #   in Loop: Header=BB75_201 Depth=3
	jmp	.LBB75_207
.LBB75_207:                             # %for.inc1012
                                        #   in Loop: Header=BB75_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_201
.LBB75_208:                             # %for.end1014
                                        #   in Loop: Header=BB75_199 Depth=2
	jmp	.LBB75_209
.LBB75_209:                             # %for.inc1015
                                        #   in Loop: Header=BB75_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_199
.LBB75_210:                             # %for.end1017
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	$0, -20(%rbp)
.LBB75_211:                             # %for.cond1018
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB75_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB75_211 Depth=2
	movl	$0, -24(%rbp)
.LBB75_213:                             # %for.cond1022
                                        #   Parent Loop BB75_22 Depth=1
                                        #     Parent Loop BB75_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB75_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB75_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB75_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_213
.LBB75_216:                             # %for.end1040
                                        #   in Loop: Header=BB75_211 Depth=2
	jmp	.LBB75_217
.LBB75_217:                             # %for.inc1041
                                        #   in Loop: Header=BB75_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_211
.LBB75_218:                             # %for.end1043
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB75_219:                             # %if.end1044
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_220
.LBB75_220:                             # %if.end1045
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_221
.LBB75_221:                             # %if.end1046
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_222
.LBB75_222:                             # %if.end1047
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_223
.LBB75_223:                             # %for.inc1048
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB75_22
.LBB75_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-184(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-160(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB75_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB75_230
.LBB75_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB75_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB75_229
.LBB75_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB75_229:                             # %cond.end1065
.LBB75_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB75_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB75_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB75_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB75_233 Depth=1
	movl	$0, -12(%rbp)
.LBB75_235:                             # %for.cond1087
                                        #   Parent Loop BB75_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB75_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB75_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_235
.LBB75_238:                             # %for.end1128
                                        #   in Loop: Header=BB75_233 Depth=1
	jmp	.LBB75_239
.LBB75_239:                             # %for.inc1129
                                        #   in Loop: Header=BB75_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_233
.LBB75_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-164(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB75_317
.LBB75_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB75_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB75_242 Depth=1
	movl	$0, -12(%rbp)
.LBB75_244:                             # %for.cond1138
                                        #   Parent Loop BB75_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB75_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB75_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_244
.LBB75_247:                             # %for.end1226
                                        #   in Loop: Header=BB75_242 Depth=1
	jmp	.LBB75_248
.LBB75_248:                             # %for.inc1227
                                        #   in Loop: Header=BB75_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_242
.LBB75_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB75_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB75_250 Depth=1
	movl	$0, -12(%rbp)
.LBB75_252:                             # %for.cond1234
                                        #   Parent Loop BB75_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB75_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB75_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_252
.LBB75_255:                             # %for.end1249
                                        #   in Loop: Header=BB75_250 Depth=1
	jmp	.LBB75_256
.LBB75_256:                             # %for.inc1250
                                        #   in Loop: Header=BB75_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_250
.LBB75_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-164(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB75_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB75_258 Depth=1
	movl	$0, -12(%rbp)
.LBB75_260:                             # %for.cond1258
                                        #   Parent Loop BB75_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB75_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB75_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_260
.LBB75_263:                             # %for.end1282
                                        #   in Loop: Header=BB75_258 Depth=1
	jmp	.LBB75_264
.LBB75_264:                             # %for.inc1283
                                        #   in Loop: Header=BB75_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_258
.LBB75_265:                             # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB75_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB75_266 Depth=1
	movl	$0, -12(%rbp)
.LBB75_268:                             # %for.cond1328
                                        #   Parent Loop BB75_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB75_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB75_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_268
.LBB75_271:                             # %for.end1352
                                        #   in Loop: Header=BB75_266 Depth=1
	jmp	.LBB75_272
.LBB75_272:                             # %for.inc1353
                                        #   in Loop: Header=BB75_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_266
.LBB75_273:                             # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB75_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB75_274 Depth=1
	movl	$0, -12(%rbp)
.LBB75_276:                             # %for.cond1398
                                        #   Parent Loop BB75_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB75_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB75_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_276
.LBB75_279:                             # %for.end1413
                                        #   in Loop: Header=BB75_274 Depth=1
	jmp	.LBB75_280
.LBB75_280:                             # %for.inc1414
                                        #   in Loop: Header=BB75_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_274
.LBB75_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB75_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB75_282 Depth=1
	movl	$0, -12(%rbp)
.LBB75_284:                             # %for.cond1421
                                        #   Parent Loop BB75_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB75_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_288
.LBB75_287:                             # %cond.false1467
                                        #   in Loop: Header=BB75_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB75_288:                             # %cond.end1480
                                        #   in Loop: Header=BB75_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB75_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB75_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB75_294
.LBB75_290:                             # %cond.false1486
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_293
.LBB75_292:                             # %cond.false1502
                                        #   in Loop: Header=BB75_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB75_293:                             # %cond.end1515
                                        #   in Loop: Header=BB75_284 Depth=2
.LBB75_294:                             # %cond.end1517
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB75_297
.LBB75_296:                             # %cond.false1541
                                        #   in Loop: Header=BB75_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB75_297:                             # %cond.end1551
                                        #   in Loop: Header=BB75_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB75_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB75_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_303
.LBB75_299:                             # %cond.false1557
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_302
.LBB75_301:                             # %cond.false1570
                                        #   in Loop: Header=BB75_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB75_302:                             # %cond.end1580
                                        #   in Loop: Header=BB75_284 Depth=2
.LBB75_303:                             # %cond.end1582
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB75_306
.LBB75_305:                             # %cond.false1608
                                        #   in Loop: Header=BB75_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB75_306:                             # %cond.end1621
                                        #   in Loop: Header=BB75_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB75_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB75_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB75_312
.LBB75_308:                             # %cond.false1627
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB75_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_311
.LBB75_310:                             # %cond.false1643
                                        #   in Loop: Header=BB75_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB75_311:                             # %cond.end1656
                                        #   in Loop: Header=BB75_284 Depth=2
.LBB75_312:                             # %cond.end1658
                                        #   in Loop: Header=BB75_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB75_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_284
.LBB75_314:                             # %for.end1671
                                        #   in Loop: Header=BB75_282 Depth=1
	jmp	.LBB75_315
.LBB75_315:                             # %for.inc1672
                                        #   in Loop: Header=BB75_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_282
.LBB75_316:                             # %for.end1674
	jmp	.LBB75_317
.LBB75_317:                             # %if.end1675
	jmp	.LBB75_367
.LBB75_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB75_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB75_319 Depth=1
	movl	$0, -12(%rbp)
.LBB75_321:                             # %for.cond1681
                                        #   Parent Loop BB75_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB75_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB75_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB75_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_321
.LBB75_324:                             # %for.end1700
                                        #   in Loop: Header=BB75_319 Depth=1
	jmp	.LBB75_325
.LBB75_325:                             # %for.inc1701
                                        #   in Loop: Header=BB75_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_319
.LBB75_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB75_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB75_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB75_328 Depth=1
	movl	$0, -12(%rbp)
.LBB75_330:                             # %for.cond1711
                                        #   Parent Loop BB75_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB75_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB75_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB75_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_330
.LBB75_333:                             # %for.end1731
                                        #   in Loop: Header=BB75_328 Depth=1
	jmp	.LBB75_334
.LBB75_334:                             # %for.inc1732
                                        #   in Loop: Header=BB75_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_328
.LBB75_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB75_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB75_336 Depth=1
	movl	$0, -12(%rbp)
.LBB75_338:                             # %for.cond1739
                                        #   Parent Loop BB75_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB75_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB75_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB75_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_338
.LBB75_341:                             # %for.end1759
                                        #   in Loop: Header=BB75_336 Depth=1
	jmp	.LBB75_342
.LBB75_342:                             # %for.inc1760
                                        #   in Loop: Header=BB75_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_336
.LBB75_343:                             # %for.end1762
	jmp	.LBB75_344
.LBB75_344:                             # %if.end1763
	movl	$0, -20(%rbp)
.LBB75_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB75_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB75_345 Depth=1
	movl	$0, -24(%rbp)
.LBB75_347:                             # %for.cond1768
                                        #   Parent Loop BB75_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB75_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB75_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB75_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_347
.LBB75_350:                             # %for.end1800
                                        #   in Loop: Header=BB75_345 Depth=1
	jmp	.LBB75_351
.LBB75_351:                             # %for.inc1801
                                        #   in Loop: Header=BB75_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_345
.LBB75_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB75_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB75_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_356 Depth 2
                                        #       Child Loop BB75_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB75_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB75_354 Depth=1
	movl	$0, -20(%rbp)
.LBB75_356:                             # %for.cond1811
                                        #   Parent Loop BB75_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB75_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB75_356 Depth=2
	movl	$0, -24(%rbp)
.LBB75_358:                             # %for.cond1815
                                        #   Parent Loop BB75_354 Depth=1
                                        #     Parent Loop BB75_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB75_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB75_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB75_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_358
.LBB75_361:                             # %for.end1837
                                        #   in Loop: Header=BB75_356 Depth=2
	jmp	.LBB75_362
.LBB75_362:                             # %for.inc1838
                                        #   in Loop: Header=BB75_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_356
.LBB75_363:                             # %for.end1840
                                        #   in Loop: Header=BB75_354 Depth=1
	jmp	.LBB75_364
.LBB75_364:                             # %for.inc1841
                                        #   in Loop: Header=BB75_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_354
.LBB75_365:                             # %for.end1843
	jmp	.LBB75_366
.LBB75_366:                             # %if.end1844
	jmp	.LBB75_367
.LBB75_367:                             # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$1240062408, -168(%rbp) # imm = 0x49E9D9C8
	jne	.LBB75_369
.LBB75_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_368
.Lfunc_end75:
	.size	Mode_Decision_for_4x4IntraBlocks.46, .Lfunc_end75-Mode_Decision_for_4x4IntraBlocks.46
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.47 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.47
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.47,@function
Mode_Decision_for_Intra4x4Macroblock.47: # @Mode_Decision_for_Intra4x4Macroblock.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$570763171, -20(%rbp)   # imm = 0x220527A3
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB76_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB76_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_4:                               # %if.end
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$570763171, -20(%rbp)   # imm = 0x220527A3
	jne	.LBB76_8
.LBB76_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_7
.Lfunc_end76:
	.size	Mode_Decision_for_Intra4x4Macroblock.47, .Lfunc_end76-Mode_Decision_for_Intra4x4Macroblock.47
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.48 # -- Begin function SetRefAndMotionVectors.48
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.48,@function
SetRefAndMotionVectors.48:              # @SetRefAndMotionVectors.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$442075570, -72(%rbp)   # imm = 0x1A5989B2
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB77_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB77_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB77_4
.LBB77_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB77_5
.LBB77_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB77_5
.LBB77_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB77_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB77_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB77_9
.LBB77_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB77_9
.LBB77_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB77_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB77_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_13:                              # %for.cond34
                                        #   Parent Loop BB77_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB77_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB77_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_13
.LBB77_16:                              # %for.end
                                        #   in Loop: Header=BB77_11 Depth=1
	jmp	.LBB77_17
.LBB77_17:                              # %for.inc117
                                        #   in Loop: Header=BB77_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_11
.LBB77_18:                              # %for.end119
	jmp	.LBB77_64
.LBB77_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB77_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB77_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_23:                              # %for.cond126
                                        #   Parent Loop BB77_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB77_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB77_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_23
.LBB77_26:                              # %for.end211
                                        #   in Loop: Header=BB77_21 Depth=1
	jmp	.LBB77_27
.LBB77_27:                              # %for.inc212
                                        #   in Loop: Header=BB77_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_21
.LBB77_28:                              # %for.end214
	jmp	.LBB77_64
.LBB77_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB77_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_32:                              # %for.cond219
                                        #   Parent Loop BB77_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB77_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB77_35:                              # %if.end255
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB77_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB77_46
.LBB77_37:                              # %if.then261
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB77_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB77_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB77_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB77_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB77_43
.LBB77_42:                              # %cond.false274
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB77_43:                              # %cond.end275
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB77_45
.LBB77_44:                              # %if.else342
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB77_45:                              # %if.end424
                                        #   in Loop: Header=BB77_32 Depth=2
	jmp	.LBB77_47
.LBB77_46:                              # %if.else425
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB77_47:                              # %if.end468
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB77_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB77_58
.LBB77_49:                              # %if.then474
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB77_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB77_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB77_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB77_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB77_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB77_55
.LBB77_54:                              # %cond.false490
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB77_55:                              # %cond.end492
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB77_57
.LBB77_56:                              # %if.else559
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB77_57:                              # %if.end641
                                        #   in Loop: Header=BB77_32 Depth=2
	jmp	.LBB77_59
.LBB77_58:                              # %if.else642
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB77_59:                              # %if.end685
                                        #   in Loop: Header=BB77_32 Depth=2
	jmp	.LBB77_60
.LBB77_60:                              # %for.inc686
                                        #   in Loop: Header=BB77_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_32
.LBB77_61:                              # %for.end688
                                        #   in Loop: Header=BB77_30 Depth=1
	jmp	.LBB77_62
.LBB77_62:                              # %for.inc689
                                        #   in Loop: Header=BB77_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_30
.LBB77_63:                              # %for.end691
	jmp	.LBB77_64
.LBB77_64:                              # %if.end692
	cmpl	$442075570, -72(%rbp)   # imm = 0x1A5989B2
	jne	.LBB77_66
.LBB77_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_65
.Lfunc_end77:
	.size	SetRefAndMotionVectors.48, .Lfunc_end77-SetRefAndMotionVectors.48
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.49           # -- Begin function StoreMV8x8.49
	.p2align	4, 0x90
	.type	StoreMV8x8.49,@function
StoreMV8x8.49:                          # @StoreMV8x8.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1781638945, -12(%rbp)  # imm = 0x6A31A721
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB78_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_4:                               # %for.end
	cmpl	$1781638945, -12(%rbp)  # imm = 0x6A31A721
	jne	.LBB78_6
.LBB78_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_5
.Lfunc_end78:
	.size	StoreMV8x8.49, .Lfunc_end78-StoreMV8x8.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.50
.LCPI79_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI79_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.50
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.50,@function
Mode_Decision_for_4x4IntraBlocks.50:    # @Mode_Decision_for_4x4IntraBlocks.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI79_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1934729298, -184(%rbp) # imm = 0x7351A052
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -156(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB79_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB79_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_4
.LBB79_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB79_4
.LBB79_4:                               # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB79_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_7
.LBB79_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB79_7
.LBB79_7:                               # %cond.end31
	movl	%eax, -232(%rbp)
.LBB79_8:                               # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB79_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_11
.LBB79_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_11
.LBB79_11:                              # %cond.end42
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB79_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_14
.LBB79_14:                              # %cond.end55
	movl	%eax, -112(%rbp)
	cmpl	$0, -116(%rbp)
	jl	.LBB79_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -112(%rbp)
	jge	.LBB79_17
.LBB79_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB79_21
.LBB79_17:                              # %cond.false59
	movl	-116(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB79_19
# %bb.18:                               # %cond.true61
	movl	-116(%rbp), %eax
	jmp	.LBB79_20
.LBB79_19:                              # %cond.false62
	movl	-112(%rbp), %eax
.LBB79_20:                              # %cond.end63
.LBB79_21:                              # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-176(%rbp), %rdx
	leaq	-180(%rbp), %rcx
	leaq	-172(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB79_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_49 Depth 2
                                        #       Child Loop BB79_51 Depth 3
                                        #     Child Loop BB79_64 Depth 2
                                        #       Child Loop BB79_66 Depth 3
                                        #     Child Loop BB79_73 Depth 2
                                        #       Child Loop BB79_75 Depth 3
                                        #     Child Loop BB79_81 Depth 2
                                        #       Child Loop BB79_83 Depth 3
                                        #     Child Loop BB79_91 Depth 2
                                        #       Child Loop BB79_93 Depth 3
                                        #     Child Loop BB79_99 Depth 2
                                        #       Child Loop BB79_101 Depth 3
                                        #     Child Loop BB79_107 Depth 2
                                        #       Child Loop BB79_109 Depth 3
                                        #     Child Loop BB79_115 Depth 2
                                        #       Child Loop BB79_117 Depth 3
                                        #     Child Loop BB79_123 Depth 2
                                        #       Child Loop BB79_125 Depth 3
                                        #     Child Loop BB79_131 Depth 2
                                        #       Child Loop BB79_133 Depth 3
                                        #     Child Loop BB79_166 Depth 2
                                        #       Child Loop BB79_168 Depth 3
                                        #     Child Loop BB79_175 Depth 2
                                        #       Child Loop BB79_177 Depth 3
                                        #     Child Loop BB79_183 Depth 2
                                        #       Child Loop BB79_185 Depth 3
                                        #     Child Loop BB79_191 Depth 2
                                        #       Child Loop BB79_193 Depth 3
                                        #     Child Loop BB79_199 Depth 2
                                        #       Child Loop BB79_201 Depth 3
                                        #         Child Loop BB79_203 Depth 4
                                        #     Child Loop BB79_211 Depth 2
                                        #       Child Loop BB79_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB79_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB79_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB79_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB79_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB79_28
.LBB79_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$0, -180(%rbp)
	movb	$1, %al
	jne	.LBB79_32
.LBB79_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB79_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB79_31
.LBB79_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$0, -176(%rbp)
	movb	$1, %al
	jne	.LBB79_32
.LBB79_31:                              # %lor.rhs
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$0, -172(%rbp)
	setne	%al
.LBB79_32:                              # %lor.end
                                        #   in Loop: Header=BB79_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB79_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_46
.LBB79_34:                              # %if.then86
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB79_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB79_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB79_38
.LBB79_37:                              # %if.then92
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_223
.LBB79_38:                              # %if.end93
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB79_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB79_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB79_42
.LBB79_41:                              # %if.then99
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_223
.LBB79_42:                              # %if.end100
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB79_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB79_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_223
.LBB79_45:                              # %if.end105
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_46
.LBB79_46:                              # %if.end106
                                        #   in Loop: Header=BB79_22 Depth=1
	cmpl	$0, -168(%rbp)
	je	.LBB79_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB79_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB79_49:                              # %for.cond111
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB79_49 Depth=2
	movl	$0, -12(%rbp)
.LBB79_51:                              # %for.cond114
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB79_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB79_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB79_51
.LBB79_54:                              # %for.end
                                        #   in Loop: Header=BB79_49 Depth=2
	jmp	.LBB79_55
.LBB79_55:                              # %for.inc133
                                        #   in Loop: Header=BB79_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_49
.LBB79_56:                              # %for.end135
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB79_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB79_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_59
.LBB79_58:                              # %cond.false139
                                        #   in Loop: Header=BB79_22 Depth=1
	vmovsd	.LCPI79_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB79_59:                              # %cond.end142
                                        #   in Loop: Header=BB79_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB79_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB79_61:                              # %if.end148
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_221
.LBB79_62:                              # %if.else
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB79_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_64:                              # %for.cond151
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB79_64 Depth=2
	movl	$0, -12(%rbp)
.LBB79_66:                              # %for.cond155
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB79_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB79_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_66
.LBB79_69:                              # %for.end194
                                        #   in Loop: Header=BB79_64 Depth=2
	jmp	.LBB79_70
.LBB79_70:                              # %for.inc195
                                        #   in Loop: Header=BB79_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_64
.LBB79_71:                              # %for.end197
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_73:                              # %for.cond202
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB79_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB79_73 Depth=2
	movl	$0, -12(%rbp)
.LBB79_75:                              # %for.cond206
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB79_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB79_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB79_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_75
.LBB79_78:                              # %for.end224
                                        #   in Loop: Header=BB79_73 Depth=2
	jmp	.LBB79_79
.LBB79_79:                              # %for.inc225
                                        #   in Loop: Header=BB79_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_73
.LBB79_80:                              # %for.end227
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -24(%rbp)
.LBB79_81:                              # %for.cond228
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB79_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB79_81 Depth=2
	movl	$0, -20(%rbp)
.LBB79_83:                              # %for.cond232
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB79_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB79_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB79_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_83
.LBB79_86:                              # %for.end249
                                        #   in Loop: Header=BB79_81 Depth=2
	jmp	.LBB79_87
.LBB79_87:                              # %for.inc250
                                        #   in Loop: Header=BB79_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_81
.LBB79_88:                              # %for.end252
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB79_89:                              # %if.end253
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB79_220
.LBB79_90:                              # %if.else254
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_91:                              # %for.cond255
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB79_91 Depth=2
	movl	$0, -12(%rbp)
.LBB79_93:                              # %for.cond259
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB79_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB79_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_93
.LBB79_96:                              # %for.end345
                                        #   in Loop: Header=BB79_91 Depth=2
	jmp	.LBB79_97
.LBB79_97:                              # %for.inc346
                                        #   in Loop: Header=BB79_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_91
.LBB79_98:                              # %for.end348
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_99:                              # %for.cond349
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB79_99 Depth=2
	movl	$0, -12(%rbp)
.LBB79_101:                             # %for.cond353
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB79_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB79_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_101
.LBB79_104:                             # %for.end368
                                        #   in Loop: Header=BB79_99 Depth=2
	jmp	.LBB79_105
.LBB79_105:                             # %for.inc369
                                        #   in Loop: Header=BB79_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_99
.LBB79_106:                             # %for.end371
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB79_107:                             # %for.cond374
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB79_107 Depth=2
	movl	$0, -12(%rbp)
.LBB79_109:                             # %for.cond378
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB79_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB79_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_109
.LBB79_112:                             # %for.end402
                                        #   in Loop: Header=BB79_107 Depth=2
	jmp	.LBB79_113
.LBB79_113:                             # %for.inc403
                                        #   in Loop: Header=BB79_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_107
.LBB79_114:                             # %for.end405
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB79_115:                             # %for.cond409
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB79_115 Depth=2
	movl	$0, -12(%rbp)
.LBB79_117:                             # %for.cond413
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB79_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB79_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_117
.LBB79_120:                             # %for.end437
                                        #   in Loop: Header=BB79_115 Depth=2
	jmp	.LBB79_121
.LBB79_121:                             # %for.inc438
                                        #   in Loop: Header=BB79_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_115
.LBB79_122:                             # %for.end440
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB79_123:                             # %for.cond444
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB79_123 Depth=2
	movl	$0, -12(%rbp)
.LBB79_125:                             # %for.cond448
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB79_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB79_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_125
.LBB79_128:                             # %for.end463
                                        #   in Loop: Header=BB79_123 Depth=2
	jmp	.LBB79_129
.LBB79_129:                             # %for.inc464
                                        #   in Loop: Header=BB79_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_123
.LBB79_130:                             # %for.end466
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_131:                             # %for.cond467
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB79_131 Depth=2
	movl	$0, -12(%rbp)
.LBB79_133:                             # %for.cond471
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB79_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_137
.LBB79_136:                             # %cond.false516
                                        #   in Loop: Header=BB79_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB79_137:                             # %cond.end529
                                        #   in Loop: Header=BB79_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB79_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB79_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB79_143
.LBB79_139:                             # %cond.false535
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB79_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_142
.LBB79_141:                             # %cond.false551
                                        #   in Loop: Header=BB79_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB79_142:                             # %cond.end564
                                        #   in Loop: Header=BB79_133 Depth=3
.LBB79_143:                             # %cond.end566
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB79_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB79_146
.LBB79_145:                             # %cond.false588
                                        #   in Loop: Header=BB79_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB79_146:                             # %cond.end598
                                        #   in Loop: Header=BB79_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB79_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB79_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_152
.LBB79_148:                             # %cond.false604
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB79_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_151
.LBB79_150:                             # %cond.false617
                                        #   in Loop: Header=BB79_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB79_151:                             # %cond.end627
                                        #   in Loop: Header=BB79_133 Depth=3
.LBB79_152:                             # %cond.end629
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB79_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB79_155
.LBB79_154:                             # %cond.false655
                                        #   in Loop: Header=BB79_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB79_155:                             # %cond.end668
                                        #   in Loop: Header=BB79_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB79_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB79_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB79_161
.LBB79_157:                             # %cond.false674
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB79_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB79_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_160
.LBB79_159:                             # %cond.false690
                                        #   in Loop: Header=BB79_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB79_160:                             # %cond.end703
                                        #   in Loop: Header=BB79_133 Depth=3
.LBB79_161:                             # %cond.end705
                                        #   in Loop: Header=BB79_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB79_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_133
.LBB79_163:                             # %for.end718
                                        #   in Loop: Header=BB79_131 Depth=2
	jmp	.LBB79_164
.LBB79_164:                             # %for.inc719
                                        #   in Loop: Header=BB79_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_131
.LBB79_165:                             # %for.end721
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB79_166:                             # %for.cond722
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB79_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB79_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB79_168:                             # %for.cond726
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB79_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB79_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_168
.LBB79_171:                             # %for.end831
                                        #   in Loop: Header=BB79_166 Depth=2
	jmp	.LBB79_172
.LBB79_172:                             # %for.inc832
                                        #   in Loop: Header=BB79_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_166
.LBB79_173:                             # %for.end834
                                        #   in Loop: Header=BB79_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-96(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_175:                             # %for.cond842
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB79_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB79_175 Depth=2
	movl	$0, -12(%rbp)
.LBB79_177:                             # %for.cond846
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB79_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB79_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB79_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_177
.LBB79_180:                             # %for.end865
                                        #   in Loop: Header=BB79_175 Depth=2
	jmp	.LBB79_181
.LBB79_181:                             # %for.inc866
                                        #   in Loop: Header=BB79_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_175
.LBB79_182:                             # %for.end868
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_183:                             # %for.cond869
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB79_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB79_183 Depth=2
	movl	$0, -12(%rbp)
.LBB79_185:                             # %for.cond873
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB79_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB79_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB79_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_185
.LBB79_188:                             # %for.end893
                                        #   in Loop: Header=BB79_183 Depth=2
	jmp	.LBB79_189
.LBB79_189:                             # %for.inc894
                                        #   in Loop: Header=BB79_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_183
.LBB79_190:                             # %for.end896
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -16(%rbp)
.LBB79_191:                             # %for.cond897
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB79_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB79_191 Depth=2
	movl	$0, -12(%rbp)
.LBB79_193:                             # %for.cond901
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB79_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB79_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB79_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_193
.LBB79_196:                             # %for.end921
                                        #   in Loop: Header=BB79_191 Depth=2
	jmp	.LBB79_197
.LBB79_197:                             # %for.inc922
                                        #   in Loop: Header=BB79_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_191
.LBB79_198:                             # %for.end924
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -12(%rbp)
.LBB79_199:                             # %for.cond925
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_201 Depth 3
                                        #         Child Loop BB79_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB79_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB79_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB79_201:                             # %for.cond985
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB79_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB79_201 Depth=3
	movl	$0, -20(%rbp)
.LBB79_203:                             # %for.cond989
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_199 Depth=2
                                        #       Parent Loop BB79_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB79_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB79_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB79_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_203
.LBB79_206:                             # %for.end1011
                                        #   in Loop: Header=BB79_201 Depth=3
	jmp	.LBB79_207
.LBB79_207:                             # %for.inc1012
                                        #   in Loop: Header=BB79_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_201
.LBB79_208:                             # %for.end1014
                                        #   in Loop: Header=BB79_199 Depth=2
	jmp	.LBB79_209
.LBB79_209:                             # %for.inc1015
                                        #   in Loop: Header=BB79_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_199
.LBB79_210:                             # %for.end1017
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	$0, -24(%rbp)
.LBB79_211:                             # %for.cond1018
                                        #   Parent Loop BB79_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB79_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB79_211 Depth=2
	movl	$0, -20(%rbp)
.LBB79_213:                             # %for.cond1022
                                        #   Parent Loop BB79_22 Depth=1
                                        #     Parent Loop BB79_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB79_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB79_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB79_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_213
.LBB79_216:                             # %for.end1040
                                        #   in Loop: Header=BB79_211 Depth=2
	jmp	.LBB79_217
.LBB79_217:                             # %for.inc1041
                                        #   in Loop: Header=BB79_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_211
.LBB79_218:                             # %for.end1043
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB79_219:                             # %if.end1044
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_220
.LBB79_220:                             # %if.end1045
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_221
.LBB79_221:                             # %if.end1046
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_222
.LBB79_222:                             # %if.end1047
                                        #   in Loop: Header=BB79_22 Depth=1
	jmp	.LBB79_223
.LBB79_223:                             # %for.inc1048
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB79_22
.LBB79_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-160(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-156(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB79_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_230
.LBB79_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB79_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB79_229
.LBB79_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB79_229:                             # %cond.end1065
.LBB79_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB79_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB79_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB79_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB79_233 Depth=1
	movl	$0, -12(%rbp)
.LBB79_235:                             # %for.cond1087
                                        #   Parent Loop BB79_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB79_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB79_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_235
.LBB79_238:                             # %for.end1128
                                        #   in Loop: Header=BB79_233 Depth=1
	jmp	.LBB79_239
.LBB79_239:                             # %for.inc1129
                                        #   in Loop: Header=BB79_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_233
.LBB79_240:                             # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-164(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	jmp	.LBB79_317
.LBB79_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB79_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB79_242 Depth=1
	movl	$0, -12(%rbp)
.LBB79_244:                             # %for.cond1138
                                        #   Parent Loop BB79_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB79_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB79_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_244
.LBB79_247:                             # %for.end1226
                                        #   in Loop: Header=BB79_242 Depth=1
	jmp	.LBB79_248
.LBB79_248:                             # %for.inc1227
                                        #   in Loop: Header=BB79_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_242
.LBB79_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB79_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB79_250 Depth=1
	movl	$0, -12(%rbp)
.LBB79_252:                             # %for.cond1234
                                        #   Parent Loop BB79_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB79_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB79_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_252
.LBB79_255:                             # %for.end1249
                                        #   in Loop: Header=BB79_250 Depth=1
	jmp	.LBB79_256
.LBB79_256:                             # %for.inc1250
                                        #   in Loop: Header=BB79_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_250
.LBB79_257:                             # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-164(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB79_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB79_258 Depth=1
	movl	$0, -12(%rbp)
.LBB79_260:                             # %for.cond1258
                                        #   Parent Loop BB79_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB79_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB79_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_260
.LBB79_263:                             # %for.end1282
                                        #   in Loop: Header=BB79_258 Depth=1
	jmp	.LBB79_264
.LBB79_264:                             # %for.inc1283
                                        #   in Loop: Header=BB79_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_258
.LBB79_265:                             # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB79_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB79_266 Depth=1
	movl	$0, -12(%rbp)
.LBB79_268:                             # %for.cond1328
                                        #   Parent Loop BB79_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB79_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB79_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_268
.LBB79_271:                             # %for.end1352
                                        #   in Loop: Header=BB79_266 Depth=1
	jmp	.LBB79_272
.LBB79_272:                             # %for.inc1353
                                        #   in Loop: Header=BB79_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_266
.LBB79_273:                             # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB79_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB79_274 Depth=1
	movl	$0, -12(%rbp)
.LBB79_276:                             # %for.cond1398
                                        #   Parent Loop BB79_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB79_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB79_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_276
.LBB79_279:                             # %for.end1413
                                        #   in Loop: Header=BB79_274 Depth=1
	jmp	.LBB79_280
.LBB79_280:                             # %for.inc1414
                                        #   in Loop: Header=BB79_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_274
.LBB79_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB79_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB79_282 Depth=1
	movl	$0, -12(%rbp)
.LBB79_284:                             # %for.cond1421
                                        #   Parent Loop BB79_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB79_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_288
.LBB79_287:                             # %cond.false1467
                                        #   in Loop: Header=BB79_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB79_288:                             # %cond.end1480
                                        #   in Loop: Header=BB79_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB79_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB79_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB79_294
.LBB79_290:                             # %cond.false1486
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB79_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_293
.LBB79_292:                             # %cond.false1502
                                        #   in Loop: Header=BB79_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB79_293:                             # %cond.end1515
                                        #   in Loop: Header=BB79_284 Depth=2
.LBB79_294:                             # %cond.end1517
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB79_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB79_297
.LBB79_296:                             # %cond.false1541
                                        #   in Loop: Header=BB79_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB79_297:                             # %cond.end1551
                                        #   in Loop: Header=BB79_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB79_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB79_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_303
.LBB79_299:                             # %cond.false1557
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB79_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_302
.LBB79_301:                             # %cond.false1570
                                        #   in Loop: Header=BB79_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB79_302:                             # %cond.end1580
                                        #   in Loop: Header=BB79_284 Depth=2
.LBB79_303:                             # %cond.end1582
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB79_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB79_306
.LBB79_305:                             # %cond.false1608
                                        #   in Loop: Header=BB79_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB79_306:                             # %cond.end1621
                                        #   in Loop: Header=BB79_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB79_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB79_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB79_312
.LBB79_308:                             # %cond.false1627
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB79_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB79_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_311
.LBB79_310:                             # %cond.false1643
                                        #   in Loop: Header=BB79_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB79_311:                             # %cond.end1656
                                        #   in Loop: Header=BB79_284 Depth=2
.LBB79_312:                             # %cond.end1658
                                        #   in Loop: Header=BB79_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB79_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_284
.LBB79_314:                             # %for.end1671
                                        #   in Loop: Header=BB79_282 Depth=1
	jmp	.LBB79_315
.LBB79_315:                             # %for.inc1672
                                        #   in Loop: Header=BB79_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_282
.LBB79_316:                             # %for.end1674
	jmp	.LBB79_317
.LBB79_317:                             # %if.end1675
	jmp	.LBB79_367
.LBB79_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB79_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB79_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB79_319 Depth=1
	movl	$0, -12(%rbp)
.LBB79_321:                             # %for.cond1681
                                        #   Parent Loop BB79_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB79_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB79_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB79_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_321
.LBB79_324:                             # %for.end1700
                                        #   in Loop: Header=BB79_319 Depth=1
	jmp	.LBB79_325
.LBB79_325:                             # %for.inc1701
                                        #   in Loop: Header=BB79_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_319
.LBB79_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB79_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB79_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB79_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB79_328 Depth=1
	movl	$0, -12(%rbp)
.LBB79_330:                             # %for.cond1711
                                        #   Parent Loop BB79_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB79_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB79_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB79_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_330
.LBB79_333:                             # %for.end1731
                                        #   in Loop: Header=BB79_328 Depth=1
	jmp	.LBB79_334
.LBB79_334:                             # %for.inc1732
                                        #   in Loop: Header=BB79_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_328
.LBB79_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB79_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB79_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB79_336 Depth=1
	movl	$0, -12(%rbp)
.LBB79_338:                             # %for.cond1739
                                        #   Parent Loop BB79_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB79_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB79_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB79_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_338
.LBB79_341:                             # %for.end1759
                                        #   in Loop: Header=BB79_336 Depth=1
	jmp	.LBB79_342
.LBB79_342:                             # %for.inc1760
                                        #   in Loop: Header=BB79_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_336
.LBB79_343:                             # %for.end1762
	jmp	.LBB79_344
.LBB79_344:                             # %if.end1763
	movl	$0, -24(%rbp)
.LBB79_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB79_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB79_345 Depth=1
	movl	$0, -20(%rbp)
.LBB79_347:                             # %for.cond1768
                                        #   Parent Loop BB79_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB79_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB79_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB79_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_347
.LBB79_350:                             # %for.end1800
                                        #   in Loop: Header=BB79_345 Depth=1
	jmp	.LBB79_351
.LBB79_351:                             # %for.inc1801
                                        #   in Loop: Header=BB79_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_345
.LBB79_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB79_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB79_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_356 Depth 2
                                        #       Child Loop BB79_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB79_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB79_354 Depth=1
	movl	$0, -24(%rbp)
.LBB79_356:                             # %for.cond1811
                                        #   Parent Loop BB79_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB79_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB79_356 Depth=2
	movl	$0, -20(%rbp)
.LBB79_358:                             # %for.cond1815
                                        #   Parent Loop BB79_354 Depth=1
                                        #     Parent Loop BB79_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB79_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB79_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB79_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_358
.LBB79_361:                             # %for.end1837
                                        #   in Loop: Header=BB79_356 Depth=2
	jmp	.LBB79_362
.LBB79_362:                             # %for.inc1838
                                        #   in Loop: Header=BB79_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_356
.LBB79_363:                             # %for.end1840
                                        #   in Loop: Header=BB79_354 Depth=1
	jmp	.LBB79_364
.LBB79_364:                             # %for.inc1841
                                        #   in Loop: Header=BB79_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_354
.LBB79_365:                             # %for.end1843
	jmp	.LBB79_366
.LBB79_366:                             # %if.end1844
	jmp	.LBB79_367
.LBB79_367:                             # %if.end1845
	movl	-92(%rbp), %ebx
	cmpl	$1934729298, -184(%rbp) # imm = 0x7351A052
	jne	.LBB79_369
.LBB79_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_368
.Lfunc_end79:
	.size	Mode_Decision_for_4x4IntraBlocks.50, .Lfunc_end79-Mode_Decision_for_4x4IntraBlocks.50
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.51 # -- Begin function RDCost_for_4x4IntraBlocks.51
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.51,@function
RDCost_for_4x4IntraBlocks.51:           # @RDCost_for_4x4IntraBlocks.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$267247904, -80(%rbp)   # imm = 0xFEDE120
	movq	%rdi, -136(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	$0, -72(%rbp)
	movl	-56(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB80_10
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB80_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_4 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB80_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_4:                               # %for.cond15
                                        #   Parent Loop BB80_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB80_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-76(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-152(%rbp), %rdx
	movl	-68(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB80_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_4
.LBB80_7:                               # %for.end
                                        #   in Loop: Header=BB80_2 Depth=1
	jmp	.LBB80_8
.LBB80_8:                               # %for.inc33
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_2
.LBB80_9:                               # %for.end35
	jmp	.LBB80_10
.LBB80_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-48(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB80_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB80_16
.LBB80_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB80_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB80_15
.LBB80_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB80_15:                              # %cond.end
.LBB80_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB80_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB80_18:                              # %if.end50
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB80_21
.LBB80_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB80_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_23
# %bb.22:                               # %if.then66
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_24
.LBB80_23:                              # %if.else69
	movl	-16(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB80_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB80_27
.LBB80_26:                              # %if.else81
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB80_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$267247904, -80(%rbp)   # imm = 0xFEDE120
	jne	.LBB80_29
.LBB80_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB80_28
.Lfunc_end80:
	.size	RDCost_for_4x4IntraBlocks.51, .Lfunc_end80-RDCost_for_4x4IntraBlocks.51
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.52 # -- Begin function RDCost_for_4x4IntraBlocks.52
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.52,@function
RDCost_for_4x4IntraBlocks.52:           # @RDCost_for_4x4IntraBlocks.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1000986437, -76(%rbp)  # imm = 0x3BA9D745
	movq	%rdi, -112(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -128(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	$0, -80(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-80(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB81_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB81_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB81_4:                               # %for.cond15
                                        #   Parent Loop BB81_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB81_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-144(%rbp), %rdx
	movl	-72(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB81_4 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_4
.LBB81_7:                               # %for.end
                                        #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_8
.LBB81_8:                               # %for.inc33
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_2
.LBB81_9:                               # %for.end35
	jmp	.LBB81_10
.LBB81_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-48(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB81_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB81_16
.LBB81_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB81_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB81_15
.LBB81_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB81_15:                              # %cond.end
.LBB81_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB81_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB81_18:                              # %if.end50
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB81_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB81_21
.LBB81_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB81_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB81_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_24
.LBB81_23:                              # %if.else69
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB81_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB81_27
.LBB81_26:                              # %if.else81
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB81_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1000986437, -76(%rbp)  # imm = 0x3BA9D745
	jne	.LBB81_29
.LBB81_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB81_28
.Lfunc_end81:
	.size	RDCost_for_4x4IntraBlocks.52, .Lfunc_end81-RDCost_for_4x4IntraBlocks.52
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.53 # -- Begin function StoreNewMotionVectorsBlock8x8.53
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.53,@function
StoreNewMotionVectorsBlock8x8.53:       # @StoreNewMotionVectorsBlock8x8.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$837835553, -72(%rbp)   # imm = 0x31F05B21
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB82_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB82_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_4:                               # %for.cond6
                                        #   Parent Loop BB82_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB82_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB82_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB82_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_4
.LBB82_7:                               # %for.end
                                        #   in Loop: Header=BB82_2 Depth=1
	jmp	.LBB82_8
.LBB82_8:                               # %for.inc39
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_2
.LBB82_9:                               # %for.end41
	jmp	.LBB82_61
.LBB82_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB82_20
# %bb.11:                               # %if.then42
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB82_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB82_12 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_14:                              # %for.cond46
                                        #   Parent Loop BB82_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB82_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB82_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB82_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_14
.LBB82_17:                              # %for.end119
                                        #   in Loop: Header=BB82_12 Depth=1
	jmp	.LBB82_18
.LBB82_18:                              # %for.inc120
                                        #   in Loop: Header=BB82_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_12
.LBB82_19:                              # %for.end122
	jmp	.LBB82_61
.LBB82_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB82_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB82_31
.LBB82_22:                              # %if.then125
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB82_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_25:                              # %for.cond129
                                        #   Parent Loop BB82_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB82_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB82_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB82_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_25
.LBB82_28:                              # %for.end206
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_29
.LBB82_29:                              # %for.inc207
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_23
.LBB82_30:                              # %for.end209
	jmp	.LBB82_40
.LBB82_31:                              # %if.else210
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB82_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_34:                              # %for.cond214
                                        #   Parent Loop BB82_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB82_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB82_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB82_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_34
.LBB82_37:                              # %for.end235
                                        #   in Loop: Header=BB82_32 Depth=1
	jmp	.LBB82_38
.LBB82_38:                              # %for.inc236
                                        #   in Loop: Header=BB82_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_32
.LBB82_39:                              # %for.end238
	jmp	.LBB82_40
.LBB82_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB82_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB82_51
.LBB82_42:                              # %if.then243
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB82_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB82_43 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_45:                              # %for.cond247
                                        #   Parent Loop BB82_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB82_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB82_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB82_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_45
.LBB82_48:                              # %for.end324
                                        #   in Loop: Header=BB82_43 Depth=1
	jmp	.LBB82_49
.LBB82_49:                              # %for.inc325
                                        #   in Loop: Header=BB82_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_43
.LBB82_50:                              # %for.end327
	jmp	.LBB82_60
.LBB82_51:                              # %if.else328
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB82_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB82_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_54:                              # %for.cond332
                                        #   Parent Loop BB82_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB82_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB82_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB82_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_54
.LBB82_57:                              # %for.end353
                                        #   in Loop: Header=BB82_52 Depth=1
	jmp	.LBB82_58
.LBB82_58:                              # %for.inc354
                                        #   in Loop: Header=BB82_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_52
.LBB82_59:                              # %for.end356
	jmp	.LBB82_60
.LBB82_60:                              # %if.end357
	jmp	.LBB82_61
.LBB82_61:                              # %if.end358
	cmpl	$837835553, -72(%rbp)   # imm = 0x31F05B21
	jne	.LBB82_63
.LBB82_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_62
.Lfunc_end82:
	.size	StoreNewMotionVectorsBlock8x8.53, .Lfunc_end82-StoreNewMotionVectorsBlock8x8.53
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.54 # -- Begin function SetRefAndMotionVectors.54
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.54,@function
SetRefAndMotionVectors.54:              # @SetRefAndMotionVectors.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$894692492, -72(%rbp)   # imm = 0x3553EC8C
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB83_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB83_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB83_4
.LBB83_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB83_5
.LBB83_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB83_5
.LBB83_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB83_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB83_9
.LBB83_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB83_9
.LBB83_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB83_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB83_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_13:                              # %for.cond34
                                        #   Parent Loop BB83_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB83_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB83_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_13
.LBB83_16:                              # %for.end
                                        #   in Loop: Header=BB83_11 Depth=1
	jmp	.LBB83_17
.LBB83_17:                              # %for.inc117
                                        #   in Loop: Header=BB83_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_11
.LBB83_18:                              # %for.end119
	jmp	.LBB83_64
.LBB83_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB83_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB83_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_23:                              # %for.cond126
                                        #   Parent Loop BB83_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB83_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB83_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_23
.LBB83_26:                              # %for.end211
                                        #   in Loop: Header=BB83_21 Depth=1
	jmp	.LBB83_27
.LBB83_27:                              # %for.inc212
                                        #   in Loop: Header=BB83_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_21
.LBB83_28:                              # %for.end214
	jmp	.LBB83_64
.LBB83_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB83_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_32:                              # %for.cond219
                                        #   Parent Loop BB83_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB83_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB83_35:                              # %if.end255
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB83_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB83_46
.LBB83_37:                              # %if.then261
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB83_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB83_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB83_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB83_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB83_43
.LBB83_42:                              # %cond.false274
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB83_43:                              # %cond.end275
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB83_45
.LBB83_44:                              # %if.else342
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB83_45:                              # %if.end424
                                        #   in Loop: Header=BB83_32 Depth=2
	jmp	.LBB83_47
.LBB83_46:                              # %if.else425
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB83_47:                              # %if.end468
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB83_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB83_58
.LBB83_49:                              # %if.then474
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB83_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB83_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB83_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB83_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB83_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB83_55
.LBB83_54:                              # %cond.false490
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB83_55:                              # %cond.end492
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB83_57
.LBB83_56:                              # %if.else559
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB83_57:                              # %if.end641
                                        #   in Loop: Header=BB83_32 Depth=2
	jmp	.LBB83_59
.LBB83_58:                              # %if.else642
                                        #   in Loop: Header=BB83_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB83_59:                              # %if.end685
                                        #   in Loop: Header=BB83_32 Depth=2
	jmp	.LBB83_60
.LBB83_60:                              # %for.inc686
                                        #   in Loop: Header=BB83_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_32
.LBB83_61:                              # %for.end688
                                        #   in Loop: Header=BB83_30 Depth=1
	jmp	.LBB83_62
.LBB83_62:                              # %for.inc689
                                        #   in Loop: Header=BB83_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_30
.LBB83_63:                              # %for.end691
	jmp	.LBB83_64
.LBB83_64:                              # %if.end692
	cmpl	$894692492, -72(%rbp)   # imm = 0x3553EC8C
	jne	.LBB83_66
.LBB83_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_65
.Lfunc_end83:
	.size	SetRefAndMotionVectors.54, .Lfunc_end83-SetRefAndMotionVectors.54
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.55 # -- Begin function SetCoeffAndReconstruction8x8.55
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.55,@function
SetCoeffAndReconstruction8x8.55:        # @SetCoeffAndReconstruction8x8.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$377933955, -40(%rbp)   # imm = 0x1686D083
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB84_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB84_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB84_4
.LBB84_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB84_4
.LBB84_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB84_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB84_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB84_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB84_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_6
.LBB84_9:                               # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB84_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB84_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB84_11 Depth=1
	movl	$0, -4(%rbp)
.LBB84_13:                              # %for.cond20
                                        #   Parent Loop BB84_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB84_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB84_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_13
.LBB84_16:                              # %for.end52
                                        #   in Loop: Header=BB84_11 Depth=1
	jmp	.LBB84_17
.LBB84_17:                              # %for.inc53
                                        #   in Loop: Header=BB84_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_11
.LBB84_18:                              # %for.end55
	jmp	.LBB84_28
.LBB84_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB84_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB84_20 Depth=1
	movl	$0, -4(%rbp)
.LBB84_22:                              # %for.cond60
                                        #   Parent Loop BB84_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB84_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB84_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_22
.LBB84_25:                              # %for.end86
                                        #   in Loop: Header=BB84_20 Depth=1
	jmp	.LBB84_26
.LBB84_26:                              # %for.inc87
                                        #   in Loop: Header=BB84_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_20
.LBB84_27:                              # %for.end89
	jmp	.LBB84_28
.LBB84_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB84_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB84_29 Depth=1
	movl	$0, -4(%rbp)
.LBB84_31:                              # %for.cond94
                                        #   Parent Loop BB84_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB84_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB84_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB84_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB84_35
.LBB84_34:                              # %cond.false127
                                        #   in Loop: Header=BB84_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB84_35
.LBB84_35:                              # %cond.end128
                                        #   in Loop: Header=BB84_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB84_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_31
.LBB84_37:                              # %for.end141
                                        #   in Loop: Header=BB84_29 Depth=1
	jmp	.LBB84_38
.LBB84_38:                              # %for.inc142
                                        #   in Loop: Header=BB84_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_29
.LBB84_39:                              # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB84_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB84_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB84_41 Depth=1
	movl	$0, -4(%rbp)
.LBB84_43:                              # %for.cond151
                                        #   Parent Loop BB84_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB84_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB84_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB84_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB84_47
.LBB84_46:                              # %cond.false185
                                        #   in Loop: Header=BB84_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB84_47
.LBB84_47:                              # %cond.end186
                                        #   in Loop: Header=BB84_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB84_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_43
.LBB84_49:                              # %for.end200
                                        #   in Loop: Header=BB84_41 Depth=1
	jmp	.LBB84_50
.LBB84_50:                              # %for.inc201
                                        #   in Loop: Header=BB84_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_41
.LBB84_51:                              # %for.end203
	jmp	.LBB84_52
.LBB84_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB84_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_55 Depth 2
                                        #       Child Loop BB84_57 Depth 3
                                        #         Child Loop BB84_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB84_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB84_53 Depth=1
	movl	$0, -12(%rbp)
.LBB84_55:                              # %for.cond209
                                        #   Parent Loop BB84_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_57 Depth 3
                                        #         Child Loop BB84_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB84_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB84_55 Depth=2
	movl	$0, -8(%rbp)
.LBB84_57:                              # %for.cond213
                                        #   Parent Loop BB84_53 Depth=1
                                        #     Parent Loop BB84_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB84_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB84_57 Depth=3
	movl	$0, -4(%rbp)
.LBB84_59:                              # %for.cond217
                                        #   Parent Loop BB84_53 Depth=1
                                        #     Parent Loop BB84_55 Depth=2
                                        #       Parent Loop BB84_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB84_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB84_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB84_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_59
.LBB84_62:                              # %for.end239
                                        #   in Loop: Header=BB84_57 Depth=3
	jmp	.LBB84_63
.LBB84_63:                              # %for.inc240
                                        #   in Loop: Header=BB84_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_57
.LBB84_64:                              # %for.end242
                                        #   in Loop: Header=BB84_55 Depth=2
	jmp	.LBB84_65
.LBB84_65:                              # %for.inc243
                                        #   in Loop: Header=BB84_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_55
.LBB84_66:                              # %for.end245
                                        #   in Loop: Header=BB84_53 Depth=1
	jmp	.LBB84_67
.LBB84_67:                              # %for.inc246
                                        #   in Loop: Header=BB84_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_53
.LBB84_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB84_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB84_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB84_83
.LBB84_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB84_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB84_72 Depth=1
	movl	$0, -4(%rbp)
.LBB84_74:                              # %for.cond262
                                        #   Parent Loop BB84_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB84_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB84_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_78
.LBB84_77:                              # %if.else278
                                        #   in Loop: Header=BB84_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB84_78:                              # %if.end283
                                        #   in Loop: Header=BB84_74 Depth=2
	jmp	.LBB84_79
.LBB84_79:                              # %for.inc284
                                        #   in Loop: Header=BB84_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_74
.LBB84_80:                              # %for.end286
                                        #   in Loop: Header=BB84_72 Depth=1
	jmp	.LBB84_81
.LBB84_81:                              # %for.inc287
                                        #   in Loop: Header=BB84_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_72
.LBB84_82:                              # %for.end289
	jmp	.LBB84_95
.LBB84_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB84_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB84_84 Depth=1
	movl	$0, -4(%rbp)
.LBB84_86:                              # %for.cond297
                                        #   Parent Loop BB84_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB84_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB84_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_90
.LBB84_89:                              # %if.else317
                                        #   in Loop: Header=BB84_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB84_90:                              # %if.end326
                                        #   in Loop: Header=BB84_86 Depth=2
	jmp	.LBB84_91
.LBB84_91:                              # %for.inc327
                                        #   in Loop: Header=BB84_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_86
.LBB84_92:                              # %for.end329
                                        #   in Loop: Header=BB84_84 Depth=1
	jmp	.LBB84_93
.LBB84_93:                              # %for.inc330
                                        #   in Loop: Header=BB84_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_84
.LBB84_94:                              # %for.end332
	jmp	.LBB84_95
.LBB84_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB84_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB84_96 Depth=1
	movl	$0, -4(%rbp)
.LBB84_98:                              # %for.cond338
                                        #   Parent Loop BB84_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB84_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB84_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_98
.LBB84_101:                             # %for.end384
                                        #   in Loop: Header=BB84_96 Depth=1
	jmp	.LBB84_102
.LBB84_102:                             # %for.inc385
                                        #   in Loop: Header=BB84_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_96
.LBB84_103:                             # %for.end387
	jmp	.LBB84_157
.LBB84_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB84_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_107 Depth 2
                                        #       Child Loop BB84_109 Depth 3
                                        #         Child Loop BB84_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB84_105 Depth=1
	movl	$0, -12(%rbp)
.LBB84_107:                             # %for.cond394
                                        #   Parent Loop BB84_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_109 Depth 3
                                        #         Child Loop BB84_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB84_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB84_107 Depth=2
	movl	$0, -8(%rbp)
.LBB84_109:                             # %for.cond398
                                        #   Parent Loop BB84_105 Depth=1
                                        #     Parent Loop BB84_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB84_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB84_109 Depth=3
	movl	$0, -4(%rbp)
.LBB84_111:                             # %for.cond402
                                        #   Parent Loop BB84_105 Depth=1
                                        #     Parent Loop BB84_107 Depth=2
                                        #       Parent Loop BB84_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB84_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB84_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB84_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_111
.LBB84_114:                             # %for.end425
                                        #   in Loop: Header=BB84_109 Depth=3
	jmp	.LBB84_115
.LBB84_115:                             # %for.inc426
                                        #   in Loop: Header=BB84_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_109
.LBB84_116:                             # %for.end428
                                        #   in Loop: Header=BB84_107 Depth=2
	jmp	.LBB84_117
.LBB84_117:                             # %for.inc429
                                        #   in Loop: Header=BB84_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_107
.LBB84_118:                             # %for.end431
                                        #   in Loop: Header=BB84_105 Depth=1
	jmp	.LBB84_119
.LBB84_119:                             # %for.inc432
                                        #   in Loop: Header=BB84_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_105
.LBB84_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB84_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB84_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB84_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB84_136
.LBB84_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB84_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB84_125 Depth=1
	movl	$0, -4(%rbp)
.LBB84_127:                             # %for.cond458
                                        #   Parent Loop BB84_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB84_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB84_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_131
.LBB84_130:                             # %if.else478
                                        #   in Loop: Header=BB84_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB84_131:                             # %if.end483
                                        #   in Loop: Header=BB84_127 Depth=2
	jmp	.LBB84_132
.LBB84_132:                             # %for.inc484
                                        #   in Loop: Header=BB84_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_127
.LBB84_133:                             # %for.end486
                                        #   in Loop: Header=BB84_125 Depth=1
	jmp	.LBB84_134
.LBB84_134:                             # %for.inc487
                                        #   in Loop: Header=BB84_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_125
.LBB84_135:                             # %for.end489
	jmp	.LBB84_148
.LBB84_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB84_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB84_137 Depth=1
	movl	$0, -4(%rbp)
.LBB84_139:                             # %for.cond498
                                        #   Parent Loop BB84_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB84_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB84_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_143
.LBB84_142:                             # %if.else518
                                        #   in Loop: Header=BB84_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB84_143:                             # %if.end527
                                        #   in Loop: Header=BB84_139 Depth=2
	jmp	.LBB84_144
.LBB84_144:                             # %for.inc528
                                        #   in Loop: Header=BB84_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_139
.LBB84_145:                             # %for.end530
                                        #   in Loop: Header=BB84_137 Depth=1
	jmp	.LBB84_146
.LBB84_146:                             # %for.inc531
                                        #   in Loop: Header=BB84_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_137
.LBB84_147:                             # %for.end533
	jmp	.LBB84_148
.LBB84_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB84_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB84_149 Depth=1
	movl	$0, -4(%rbp)
.LBB84_151:                             # %for.cond539
                                        #   Parent Loop BB84_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB84_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB84_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_151
.LBB84_154:                             # %for.end585
                                        #   in Loop: Header=BB84_149 Depth=1
	jmp	.LBB84_155
.LBB84_155:                             # %for.inc586
                                        #   in Loop: Header=BB84_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_149
.LBB84_156:                             # %for.end588
	jmp	.LBB84_157
.LBB84_157:                             # %if.end589
	cmpl	$377933955, -40(%rbp)   # imm = 0x1686D083
	jne	.LBB84_159
.LBB84_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_158
.Lfunc_end84:
	.size	SetCoeffAndReconstruction8x8.55, .Lfunc_end84-SetCoeffAndReconstruction8x8.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.56
.LCPI85_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI85_1:
	.quad	4622945017495814144     # double 12
.LCPI85_2:
	.quad	4607182418800017408     # double 1
.LCPI85_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI85_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI85_5:
	.quad	4611686018427387904     # double 2
.LCPI85_6:
	.quad	4613937818241073152     # double 3
.LCPI85_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI85_8:
	.quad	4616189618054758400     # double 4
.LCPI85_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI85_10:
	.quad	4618441417868443648     # double 6
.LCPI85_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI85_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI85_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI85_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI85_15:
	.quad	4602678819172646912     # double 0.5
.LCPI85_16:
	.quad	4679240012837945344     # double 65536
.LCPI85_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI85_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.56
	.p2align	4, 0x90
	.type	encode_one_macroblock.56,@function
encode_one_macroblock.56:               # @encode_one_macroblock.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2126386274, -416(%rbp) # imm = 0x7EBE1462
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -268(%rbp)
	movl	$0, -180(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -316(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_4
.LBB85_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB85_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB85_5
.LBB85_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB85_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -320(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -408(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB85_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB85_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB85_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB85_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB85_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB85_11:                              # %land.end
.LBB85_12:                              # %lor.end36
.LBB85_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -312(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB85_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB85_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB85_17:                              # %lor.end51
.LBB85_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB85_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB85_21
.LBB85_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB85_21
.LBB85_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB85_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB85_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -288(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -288(%rbp)
	je	.LBB85_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB85_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB85_27
.LBB85_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB85_27:                              # %if.end
	jmp	.LBB85_29
.LBB85_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB85_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB85_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB85_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB85_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB85_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB85_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB85_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB85_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB85_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB85_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB85_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB85_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB85_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB85_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB85_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-408(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB85_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB85_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB85_53 Depth=1
	movl	$0, -56(%rbp)
.LBB85_55:                              # %for.cond156
                                        #   Parent Loop BB85_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB85_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB85_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB85_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB85_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB85_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB85_59:                              # %if.end183
                                        #   in Loop: Header=BB85_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB85_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB85_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB85_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB85_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB85_62:                              # %if.end202
                                        #   in Loop: Header=BB85_55 Depth=2
	jmp	.LBB85_63
.LBB85_63:                              # %for.inc
                                        #   in Loop: Header=BB85_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_55
.LBB85_64:                              # %for.end
                                        #   in Loop: Header=BB85_53 Depth=1
	jmp	.LBB85_65
.LBB85_65:                              # %for.inc203
                                        #   in Loop: Header=BB85_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB85_53
.LBB85_66:                              # %for.end205
	jmp	.LBB85_93
.LBB85_67:                              # %if.else206
	cmpl	$0, -288(%rbp)
	je	.LBB85_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB85_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB85_69 Depth=1
	movl	$0, -56(%rbp)
.LBB85_71:                              # %for.cond215
                                        #   Parent Loop BB85_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB85_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB85_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB85_75:                              # %if.end244
                                        #   in Loop: Header=BB85_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB85_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB85_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB85_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB85_78:                              # %if.end263
                                        #   in Loop: Header=BB85_71 Depth=2
	jmp	.LBB85_79
.LBB85_79:                              # %for.inc264
                                        #   in Loop: Header=BB85_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_71
.LBB85_80:                              # %for.end266
                                        #   in Loop: Header=BB85_69 Depth=1
	jmp	.LBB85_81
.LBB85_81:                              # %for.inc267
                                        #   in Loop: Header=BB85_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB85_69
.LBB85_82:                              # %for.end269
	jmp	.LBB85_92
.LBB85_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB85_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB85_84 Depth=1
	movl	$0, -56(%rbp)
.LBB85_86:                              # %for.cond277
                                        #   Parent Loop BB85_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB85_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB85_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_86
.LBB85_89:                              # %for.end290
                                        #   in Loop: Header=BB85_84 Depth=1
	jmp	.LBB85_90
.LBB85_90:                              # %for.inc291
                                        #   in Loop: Header=BB85_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB85_84
.LBB85_91:                              # %for.end293
	jmp	.LBB85_92
.LBB85_92:                              # %if.end294
	jmp	.LBB85_93
.LBB85_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI85_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB85_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB85_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB85_99
.LBB85_98:                              # %if.else315
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB85_99:                              # %if.end326
	jmp	.LBB85_159
.LBB85_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB85_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI85_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB85_104
.LBB85_103:                             # %cond.false336
	vmovsd	.LCPI85_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB85_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB85_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI85_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB85_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_109
.LBB85_108:                             # %cond.false357
	vmovsd	.LCPI85_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_109:                             # %cond.end359
	vmovsd	.LCPI85_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI85_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_115
.LBB85_111:                             # %cond.false364
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_114
.LBB85_113:                             # %cond.false369
	vmovsd	.LCPI85_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_114:                             # %cond.end371
.LBB85_115:                             # %cond.end373
	jmp	.LBB85_129
.LBB85_116:                             # %cond.false375
	cmpl	$0, -320(%rbp)
	je	.LBB85_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_120
.LBB85_119:                             # %cond.false382
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_120:                             # %cond.end384
	vmovsd	.LCPI85_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI85_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_126
.LBB85_122:                             # %cond.false389
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_125
.LBB85_124:                             # %cond.false394
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_125:                             # %cond.end396
.LBB85_126:                             # %cond.end398
	jmp	.LBB85_128
.LBB85_127:                             # %cond.false400
	vmovsd	.LCPI85_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_128
.LBB85_128:                             # %cond.end401
.LBB85_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB85_146
.LBB85_130:                             # %if.else406
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI85_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB85_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI85_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_145
.LBB85_132:                             # %cond.false415
	cmpl	$0, -320(%rbp)
	je	.LBB85_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_136
.LBB85_135:                             # %cond.false422
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_136:                             # %cond.end424
	vmovsd	.LCPI85_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI85_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_142
.LBB85_138:                             # %cond.false429
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB85_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI85_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_141
.LBB85_140:                             # %cond.false434
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB85_141:                             # %cond.end436
.LBB85_142:                             # %cond.end438
	jmp	.LBB85_144
.LBB85_143:                             # %cond.false440
	vmovsd	.LCPI85_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB85_144
.LBB85_144:                             # %cond.end441
.LBB85_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB85_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB85_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI85_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI85_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB85_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI85_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB85_152
.LBB85_151:                             # %cond.false465
	vmovsd	.LCPI85_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB85_152:                             # %cond.end473
	vmovsd	.LCPI85_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_153:                             # %if.end477
	jmp	.LBB85_158
.LBB85_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB85_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI85_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_157:                             # %if.end487
	jmp	.LBB85_158
.LBB85_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB85_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI85_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB85_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB85_166
.LBB85_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB85_165
.LBB85_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB85_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB85_166:                             # %if.end510
	vmovsd	.LCPI85_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI85_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB85_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB85_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB85_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB85_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB85_167
.LBB85_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB85_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_181 Depth 2
                                        #       Child Loop BB85_184 Depth 3
                                        #         Child Loop BB85_190 Depth 4
                                        #         Child Loop BB85_210 Depth 4
                                        #         Child Loop BB85_300 Depth 4
                                        #           Child Loop BB85_302 Depth 5
                                        #         Child Loop BB85_309 Depth 4
                                        #           Child Loop BB85_311 Depth 5
                                        #         Child Loop BB85_326 Depth 4
                                        #           Child Loop BB85_328 Depth 5
                                        #         Child Loop BB85_335 Depth 4
                                        #           Child Loop BB85_337 Depth 5
                                        #         Child Loop BB85_355 Depth 4
                                        #           Child Loop BB85_357 Depth 5
                                        #         Child Loop BB85_374 Depth 4
                                        #           Child Loop BB85_376 Depth 5
                                        #     Child Loop BB85_416 Depth 2
                                        #       Child Loop BB85_418 Depth 3
                                        #         Child Loop BB85_445 Depth 4
                                        #         Child Loop BB85_464 Depth 4
                                        #           Child Loop BB85_466 Depth 5
                                        #         Child Loop BB85_473 Depth 4
                                        #         Child Loop BB85_508 Depth 4
                                        #           Child Loop BB85_510 Depth 5
                                        #         Child Loop BB85_532 Depth 4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
                                        #         Child Loop BB85_544 Depth 4
                                        #           Child Loop BB85_546 Depth 5
                                        #       Child Loop BB85_569 Depth 3
                                        #         Child Loop BB85_571 Depth 4
                                        #           Child Loop BB85_573 Depth 5
                                        #       Child Loop BB85_581 Depth 3
                                        #         Child Loop BB85_583 Depth 4
                                        #     Child Loop BB85_601 Depth 2
                                        #       Child Loop BB85_603 Depth 3
                                        #         Child Loop BB85_614 Depth 4
                                        #         Child Loop BB85_633 Depth 4
                                        #           Child Loop BB85_635 Depth 5
                                        #         Child Loop BB85_642 Depth 4
                                        #         Child Loop BB85_677 Depth 4
                                        #           Child Loop BB85_679 Depth 5
                                        #         Child Loop BB85_701 Depth 4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
                                        #         Child Loop BB85_713 Depth 4
                                        #           Child Loop BB85_715 Depth 5
                                        #         Child Loop BB85_723 Depth 4
                                        #           Child Loop BB85_725 Depth 5
                                        #       Child Loop BB85_745 Depth 3
                                        #         Child Loop BB85_747 Depth 4
                                        #           Child Loop BB85_749 Depth 5
                                        #       Child Loop BB85_757 Depth 3
                                        #         Child Loop BB85_759 Depth 4
                                        #       Child Loop BB85_766 Depth 3
                                        #         Child Loop BB85_768 Depth 4
                                        #       Child Loop BB85_778 Depth 3
                                        #         Child Loop BB85_780 Depth 4
                                        #       Child Loop BB85_786 Depth 3
                                        #       Child Loop BB85_791 Depth 3
                                        #         Child Loop BB85_793 Depth 4
                                        #     Child Loop BB85_803 Depth 2
                                        #       Child Loop BB85_805 Depth 3
                                        #     Child Loop BB85_835 Depth 2
                                        #       Child Loop BB85_853 Depth 3
                                        #         Child Loop BB85_908 Depth 4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
                                        #         Child Loop BB85_955 Depth 4
                                        #           Child Loop BB85_957 Depth 5
                                        #     Child Loop BB85_981 Depth 2
                                        #       Child Loop BB85_1014 Depth 3
                                        #         Child Loop BB85_1017 Depth 4
                                        #           Child Loop BB85_1019 Depth 5
                                        #         Child Loop BB85_1026 Depth 4
                                        #           Child Loop BB85_1028 Depth 5
                                        #       Child Loop BB85_1061 Depth 3
                                        #         Child Loop BB85_1063 Depth 4
                                        #     Child Loop BB85_1113 Depth 2
                                        #       Child Loop BB85_1115 Depth 3
                                        #     Child Loop BB85_1127 Depth 2
                                        #       Child Loop BB85_1129 Depth 3
                                        #         Child Loop BB85_1131 Depth 4
                                        #     Child Loop BB85_1141 Depth 2
                                        #       Child Loop BB85_1143 Depth 3
                                        #     Child Loop BB85_1152 Depth 2
                                        #       Child Loop BB85_1154 Depth 3
                                        #     Child Loop BB85_1160 Depth 2
                                        #       Child Loop BB85_1162 Depth 3
                                        #     Child Loop BB85_1174 Depth 2
                                        #       Child Loop BB85_1176 Depth 3
                                        #         Child Loop BB85_1178 Depth 4
                                        #     Child Loop BB85_1189 Depth 2
                                        #       Child Loop BB85_1191 Depth 3
                                        #     Child Loop BB85_1202 Depth 2
                                        #       Child Loop BB85_1204 Depth 3
                                        #     Child Loop BB85_1211 Depth 2
                                        #       Child Loop BB85_1213 Depth 3
                                        #     Child Loop BB85_1221 Depth 2
                                        #       Child Loop BB85_1223 Depth 3
                                        #     Child Loop BB85_1229 Depth 2
                                        #       Child Loop BB85_1231 Depth 3
                                        #     Child Loop BB85_1237 Depth 2
                                        #       Child Loop BB85_1239 Depth 3
                                        #     Child Loop BB85_1245 Depth 2
                                        #       Child Loop BB85_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB85_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$2, -312(%rbp)
	jne	.LBB85_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB85_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB85_176
.LBB85_175:                             # %if.else534
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB85_176:                             # %if.end536
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_177
.LBB85_177:                             # %if.end537
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB85_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB85_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB85_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB85_180:                             # %if.end542
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB85_181:                             # %for.cond543
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_184 Depth 3
                                        #         Child Loop BB85_190 Depth 4
                                        #         Child Loop BB85_210 Depth 4
                                        #         Child Loop BB85_300 Depth 4
                                        #           Child Loop BB85_302 Depth 5
                                        #         Child Loop BB85_309 Depth 4
                                        #           Child Loop BB85_311 Depth 5
                                        #         Child Loop BB85_326 Depth 4
                                        #           Child Loop BB85_328 Depth 5
                                        #         Child Loop BB85_335 Depth 4
                                        #           Child Loop BB85_337 Depth 5
                                        #         Child Loop BB85_355 Depth 4
                                        #           Child Loop BB85_357 Depth 5
                                        #         Child Loop BB85_374 Depth 4
                                        #           Child Loop BB85_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB85_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB85_184:                             # %for.cond554
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_190 Depth 4
                                        #         Child Loop BB85_210 Depth 4
                                        #         Child Loop BB85_300 Depth 4
                                        #           Child Loop BB85_302 Depth 5
                                        #         Child Loop BB85_309 Depth 4
                                        #           Child Loop BB85_311 Depth 5
                                        #         Child Loop BB85_326 Depth 4
                                        #           Child Loop BB85_328 Depth 5
                                        #         Child Loop BB85_335 Depth 4
                                        #           Child Loop BB85_337 Depth 5
                                        #         Child Loop BB85_355 Depth 4
                                        #           Child Loop BB85_357 Depth 5
                                        #         Child Loop BB85_374 Depth 4
                                        #           Child Loop BB85_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB85_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB85_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB85_187:                             # %land.end566
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB85_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB85_189:                             # %land.end574
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB85_190:                             # %for.cond577
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB85_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB85_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB85_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB85_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB85_206
.LBB85_194:                             # %if.then594
                                        #   in Loop: Header=BB85_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB85_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_198
.LBB85_197:                             # %cond.false604
                                        #   in Loop: Header=BB85_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_198:                             # %cond.end607
                                        #   in Loop: Header=BB85_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_203
.LBB85_199:                             # %cond.false610
                                        #   in Loop: Header=BB85_190 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB85_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_202
.LBB85_201:                             # %cond.false617
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	$1, %eax
	jmp	.LBB85_202
.LBB85_202:                             # %cond.end618
                                        #   in Loop: Header=BB85_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_203:                             # %cond.end623
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB85_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB85_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB85_205:                             # %if.end636
                                        #   in Loop: Header=BB85_190 Depth=4
	jmp	.LBB85_206
.LBB85_206:                             # %if.end637
                                        #   in Loop: Header=BB85_190 Depth=4
	jmp	.LBB85_207
.LBB85_207:                             # %for.inc638
                                        #   in Loop: Header=BB85_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_190
.LBB85_208:                             # %for.end640
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB85_210:                             # %for.cond643
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB85_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB85_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_215
.LBB85_214:                             # %cond.false660
                                        #   in Loop: Header=BB85_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_215:                             # %cond.end663
                                        #   in Loop: Header=BB85_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_220
.LBB85_216:                             # %cond.false667
                                        #   in Loop: Header=BB85_210 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB85_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_219
.LBB85_218:                             # %cond.false674
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	$1, %eax
	jmp	.LBB85_219
.LBB85_219:                             # %cond.end675
                                        #   in Loop: Header=BB85_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_220:                             # %cond.end680
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB85_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB85_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB85_222:                             # %if.end693
                                        #   in Loop: Header=BB85_210 Depth=4
	jmp	.LBB85_223
.LBB85_223:                             # %for.inc694
                                        #   in Loop: Header=BB85_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_210
.LBB85_224:                             # %for.end696
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_228
.LBB85_227:                             # %cond.false706
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_228:                             # %cond.end709
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_231
.LBB85_230:                             # %cond.false719
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_231:                             # %cond.end721
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_236
.LBB85_232:                             # %cond.false726
                                        #   in Loop: Header=BB85_184 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB85_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB85_235
.LBB85_234:                             # %cond.false733
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$1, %eax
	jmp	.LBB85_235
.LBB85_235:                             # %cond.end734
                                        #   in Loop: Header=BB85_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_236:                             # %cond.end739
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB85_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_243
.LBB85_242:                             # %cond.false761
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB85_243:                             # %cond.end763
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_246
.LBB85_245:                             # %cond.false773
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_246:                             # %cond.end775
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_248
.LBB85_247:                             # %cond.false780
                                        #   in Loop: Header=BB85_184 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_248:                             # %cond.end784
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_252
.LBB85_251:                             # %cond.false797
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB85_252:                             # %cond.end799
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB85_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_255
.LBB85_254:                             # %cond.false809
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_255:                             # %cond.end811
                                        #   in Loop: Header=BB85_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_257
.LBB85_256:                             # %cond.false816
                                        #   in Loop: Header=BB85_184 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_257:                             # %cond.end820
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	%eax, -188(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB85_259
.LBB85_258:                             # %if.else824
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
.LBB85_259:                             # %if.end825
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB85_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB85_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_285
.LBB85_266:                             # %if.else845
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB85_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB85_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB85_284
.LBB85_271:                             # %if.else859
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB85_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB85_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB85_283
.LBB85_276:                             # %if.else876
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jg	.LBB85_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB85_282
.LBB85_281:                             # %if.else893
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-188(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB85_282:                             # %if.end898
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_283
.LBB85_283:                             # %if.end899
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_284
.LBB85_284:                             # %if.end900
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_285
.LBB85_285:                             # %if.end901
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_295
.LBB85_286:                             # %if.else902
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_294
.LBB85_289:                             # %if.else910
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB85_293
.LBB85_292:                             # %if.else918
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB85_293:                             # %if.end920
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_294
.LBB85_294:                             # %if.end921
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_295
.LBB85_295:                             # %if.end922
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_297
.LBB85_296:                             # %if.else923
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_297:                             # %if.end925
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB85_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB85_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_300:                             # %for.cond933
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB85_300 Depth=4
	movl	$0, -20(%rbp)
.LBB85_302:                             # %for.cond937
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB85_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB85_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_302
.LBB85_305:                             # %for.end999
                                        #   in Loop: Header=BB85_300 Depth=4
	jmp	.LBB85_306
.LBB85_306:                             # %for.inc1000
                                        #   in Loop: Header=BB85_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_300
.LBB85_307:                             # %for.end1002
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_323
.LBB85_308:                             # %if.else1003
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_309:                             # %for.cond1004
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB85_309 Depth=4
	movl	$0, -20(%rbp)
.LBB85_311:                             # %for.cond1008
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB85_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB85_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB85_316
.LBB85_315:                             # %cond.false1024
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB85_316:                             # %cond.end1025
                                        #   in Loop: Header=BB85_311 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB85_318
.LBB85_317:                             # %if.else1111
                                        #   in Loop: Header=BB85_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_318:                             # %if.end1217
                                        #   in Loop: Header=BB85_311 Depth=5
	jmp	.LBB85_319
.LBB85_319:                             # %for.inc1218
                                        #   in Loop: Header=BB85_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_311
.LBB85_320:                             # %for.end1220
                                        #   in Loop: Header=BB85_309 Depth=4
	jmp	.LBB85_321
.LBB85_321:                             # %for.inc1221
                                        #   in Loop: Header=BB85_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_309
.LBB85_322:                             # %for.end1223
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_323
.LBB85_323:                             # %if.end1224
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB85_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_326:                             # %for.cond1231
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB85_326 Depth=4
	movl	$0, -20(%rbp)
.LBB85_328:                             # %for.cond1235
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB85_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB85_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_328
.LBB85_331:                             # %for.end1303
                                        #   in Loop: Header=BB85_326 Depth=4
	jmp	.LBB85_332
.LBB85_332:                             # %for.inc1304
                                        #   in Loop: Header=BB85_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_326
.LBB85_333:                             # %for.end1306
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_351
.LBB85_334:                             # %if.else1307
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	$0, -24(%rbp)
.LBB85_335:                             # %for.cond1308
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB85_335 Depth=4
	movl	$0, -20(%rbp)
.LBB85_337:                             # %for.cond1312
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB85_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB85_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB85_342
.LBB85_341:                             # %cond.false1330
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB85_342:                             # %cond.end1332
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB85_346
.LBB85_343:                             # %if.else1419
                                        #   in Loop: Header=BB85_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB85_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_345:                             # %if.end1529
                                        #   in Loop: Header=BB85_337 Depth=5
	jmp	.LBB85_346
.LBB85_346:                             # %if.end1530
                                        #   in Loop: Header=BB85_337 Depth=5
	jmp	.LBB85_347
.LBB85_347:                             # %for.inc1531
                                        #   in Loop: Header=BB85_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_337
.LBB85_348:                             # %for.end1533
                                        #   in Loop: Header=BB85_335 Depth=4
	jmp	.LBB85_349
.LBB85_349:                             # %for.inc1534
                                        #   in Loop: Header=BB85_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_335
.LBB85_350:                             # %for.end1536
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_351
.LBB85_351:                             # %if.end1537
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_352
.LBB85_352:                             # %if.end1538
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_393
.LBB85_353:                             # %if.else1539
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB85_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB85_355:                             # %for.cond1546
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB85_355 Depth=4
	movl	$0, -20(%rbp)
.LBB85_357:                             # %for.cond1550
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB85_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB85_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB85_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB85_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_361
.LBB85_360:                             # %if.else1596
                                        #   in Loop: Header=BB85_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_361:                             # %if.end1676
                                        #   in Loop: Header=BB85_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB85_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB85_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB85_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_367
.LBB85_364:                             # %if.else1721
                                        #   in Loop: Header=BB85_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB85_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_366:                             # %if.end1805
                                        #   in Loop: Header=BB85_357 Depth=5
	jmp	.LBB85_367
.LBB85_367:                             # %if.end1806
                                        #   in Loop: Header=BB85_357 Depth=5
	jmp	.LBB85_368
.LBB85_368:                             # %if.end1807
                                        #   in Loop: Header=BB85_357 Depth=5
	jmp	.LBB85_369
.LBB85_369:                             # %for.inc1808
                                        #   in Loop: Header=BB85_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_357
.LBB85_370:                             # %for.end1810
                                        #   in Loop: Header=BB85_355 Depth=4
	jmp	.LBB85_371
.LBB85_371:                             # %for.inc1811
                                        #   in Loop: Header=BB85_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_355
.LBB85_372:                             # %for.end1813
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_392
.LBB85_373:                             # %if.else1814
                                        #   in Loop: Header=BB85_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB85_374:                             # %for.cond1818
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB85_374 Depth=4
	movl	$0, -20(%rbp)
.LBB85_376:                             # %for.cond1822
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_181 Depth=2
                                        #       Parent Loop BB85_184 Depth=3
                                        #         Parent Loop BB85_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB85_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB85_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB85_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_380
.LBB85_379:                             # %if.else1868
                                        #   in Loop: Header=BB85_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_380:                             # %if.end1948
                                        #   in Loop: Header=BB85_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB85_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB85_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB85_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_386
.LBB85_383:                             # %if.else1993
                                        #   in Loop: Header=BB85_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB85_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB85_385:                             # %if.end2077
                                        #   in Loop: Header=BB85_376 Depth=5
	jmp	.LBB85_386
.LBB85_386:                             # %if.end2078
                                        #   in Loop: Header=BB85_376 Depth=5
	jmp	.LBB85_387
.LBB85_387:                             # %if.end2079
                                        #   in Loop: Header=BB85_376 Depth=5
	jmp	.LBB85_388
.LBB85_388:                             # %for.inc2080
                                        #   in Loop: Header=BB85_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_376
.LBB85_389:                             # %for.end2082
                                        #   in Loop: Header=BB85_374 Depth=4
	jmp	.LBB85_390
.LBB85_390:                             # %for.inc2083
                                        #   in Loop: Header=BB85_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_374
.LBB85_391:                             # %for.end2085
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_392
.LBB85_392:                             # %if.end2086
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_393
.LBB85_393:                             # %if.end2087
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB85_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB85_399
.LBB85_395:                             # %if.else2106
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB85_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB85_398
.LBB85_397:                             # %if.else2131
                                        #   in Loop: Header=BB85_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB85_398:                             # %if.end2132
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_399
.LBB85_399:                             # %if.end2133
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB85_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB85_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB85_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB85_402:                             # %if.end2143
                                        #   in Loop: Header=BB85_184 Depth=3
	jmp	.LBB85_403
.LBB85_403:                             # %for.inc2144
                                        #   in Loop: Header=BB85_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_184
.LBB85_404:                             # %for.end2146
                                        #   in Loop: Header=BB85_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB85_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB85_407:                             # %if.end2155
                                        #   in Loop: Header=BB85_181 Depth=2
	jmp	.LBB85_408
.LBB85_408:                             # %if.end2156
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB85_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -316(%rbp)
.LBB85_410:                             # %if.end2161
                                        #   in Loop: Header=BB85_181 Depth=2
	jmp	.LBB85_411
.LBB85_411:                             # %if.end2162
                                        #   in Loop: Header=BB85_181 Depth=2
	jmp	.LBB85_412
.LBB85_412:                             # %for.inc2163
                                        #   in Loop: Header=BB85_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB85_181
.LBB85_413:                             # %for.end2165
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB85_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB85_416:                             # %for.cond2172
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_418 Depth 3
                                        #         Child Loop BB85_445 Depth 4
                                        #         Child Loop BB85_464 Depth 4
                                        #           Child Loop BB85_466 Depth 5
                                        #         Child Loop BB85_473 Depth 4
                                        #         Child Loop BB85_508 Depth 4
                                        #           Child Loop BB85_510 Depth 5
                                        #         Child Loop BB85_532 Depth 4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
                                        #         Child Loop BB85_544 Depth 4
                                        #           Child Loop BB85_546 Depth 5
                                        #       Child Loop BB85_569 Depth 3
                                        #         Child Loop BB85_571 Depth 4
                                        #           Child Loop BB85_573 Depth 5
                                        #       Child Loop BB85_581 Depth 3
                                        #         Child Loop BB85_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB85_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB85_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB85_418:                             # %for.cond2184
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_445 Depth 4
                                        #         Child Loop BB85_464 Depth 4
                                        #           Child Loop BB85_466 Depth 5
                                        #         Child Loop BB85_473 Depth 4
                                        #         Child Loop BB85_508 Depth 4
                                        #           Child Loop BB85_510 Depth 5
                                        #         Child Loop BB85_532 Depth 4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
                                        #         Child Loop BB85_544 Depth 4
                                        #           Child Loop BB85_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB85_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB85_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_423
.LBB85_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_557
.LBB85_423:                             # %if.then2201
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB85_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$0, -220(%rbp)
	movl	$0, -228(%rbp)
	movl	-28(%rbp), %edi
	leaq	-228(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -220(%rbp)
	cmpl	$2147483647, -220(%rbp) # imm = 0x7FFFFFFF
	je	.LBB85_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB85_428
.LBB85_427:                             # %if.then2214
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB85_429
.LBB85_428:                             # %if.else2215
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-220(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-228(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB85_429:                             # %if.end2218
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB85_431
	jmp	.LBB85_430
.LBB85_430:                             # %if.end2218
                                        #   in Loop: Header=BB85_418 Depth=3
	subl	$2, %eax
	je	.LBB85_438
	jmp	.LBB85_439
.LBB85_431:                             # %sw.bb
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-228(%rbp), %eax
	cmpl	-220(%rbp), %eax
	jl	.LBB85_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB85_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB85_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB85_436
.LBB85_435:                             # %if.then2231
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_437
.LBB85_436:                             # %if.else2232
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_437:                             # %if.end2233
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_440
.LBB85_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_440
.LBB85_439:                             # %sw.default
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_440:                             # %sw.epilog
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-184(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB85_442:                             # %if.end2240
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB85_443:                             # %if.end2242
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB85_518
.LBB85_444:                             # %if.else2278
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB85_445:                             # %for.cond2279
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB85_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB85_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB85_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB85_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB85_461
.LBB85_449:                             # %if.then2296
                                        #   in Loop: Header=BB85_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB85_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_453
.LBB85_452:                             # %cond.false2306
                                        #   in Loop: Header=BB85_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_453:                             # %cond.end2309
                                        #   in Loop: Header=BB85_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_458
.LBB85_454:                             # %cond.false2313
                                        #   in Loop: Header=BB85_445 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB85_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_457
.LBB85_456:                             # %cond.false2320
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	$1, %eax
	jmp	.LBB85_457
.LBB85_457:                             # %cond.end2321
                                        #   in Loop: Header=BB85_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_458:                             # %cond.end2326
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB85_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB85_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB85_460:                             # %if.end2339
                                        #   in Loop: Header=BB85_445 Depth=4
	jmp	.LBB85_461
.LBB85_461:                             # %if.end2340
                                        #   in Loop: Header=BB85_445 Depth=4
	jmp	.LBB85_462
.LBB85_462:                             # %for.inc2341
                                        #   in Loop: Header=BB85_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_445
.LBB85_463:                             # %for.end2343
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$0, -24(%rbp)
.LBB85_464:                             # %for.cond2344
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB85_464 Depth=4
	movl	$0, -20(%rbp)
.LBB85_466:                             # %for.cond2348
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB85_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB85_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_466
.LBB85_469:                             # %for.end2405
                                        #   in Loop: Header=BB85_464 Depth=4
	jmp	.LBB85_470
.LBB85_470:                             # %for.inc2406
                                        #   in Loop: Header=BB85_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_464
.LBB85_471:                             # %for.end2408
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB85_473:                             # %for.cond2411
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB85_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB85_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_478
.LBB85_477:                             # %cond.false2428
                                        #   in Loop: Header=BB85_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_478:                             # %cond.end2431
                                        #   in Loop: Header=BB85_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_483
.LBB85_479:                             # %cond.false2435
                                        #   in Loop: Header=BB85_473 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB85_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_482
.LBB85_481:                             # %cond.false2442
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	$1, %eax
	jmp	.LBB85_482
.LBB85_482:                             # %cond.end2443
                                        #   in Loop: Header=BB85_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_483:                             # %cond.end2448
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB85_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB85_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB85_485:                             # %if.end2461
                                        #   in Loop: Header=BB85_473 Depth=4
	jmp	.LBB85_486
.LBB85_486:                             # %for.inc2462
                                        #   in Loop: Header=BB85_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_473
.LBB85_487:                             # %for.end2464
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_491
.LBB85_490:                             # %cond.false2474
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_491:                             # %cond.end2477
                                        #   in Loop: Header=BB85_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_494
.LBB85_493:                             # %cond.false2487
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_494:                             # %cond.end2489
                                        #   in Loop: Header=BB85_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_499
.LBB85_495:                             # %cond.false2494
                                        #   in Loop: Header=BB85_418 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB85_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB85_498
.LBB85_497:                             # %cond.false2501
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$1, %eax
	jmp	.LBB85_498
.LBB85_498:                             # %cond.end2502
                                        #   in Loop: Header=BB85_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_499:                             # %cond.end2507
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB85_507
.LBB85_502:                             # %if.else2517
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB85_506
.LBB85_505:                             # %if.else2524
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB85_506:                             # %if.end2525
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_507
.LBB85_507:                             # %if.end2526
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	$0, -24(%rbp)
.LBB85_508:                             # %for.cond2527
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB85_508 Depth=4
	movl	$0, -20(%rbp)
.LBB85_510:                             # %for.cond2531
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB85_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB85_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_510
.LBB85_513:                             # %for.end2567
                                        #   in Loop: Header=BB85_508 Depth=4
	jmp	.LBB85_514
.LBB85_514:                             # %for.inc2568
                                        #   in Loop: Header=BB85_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_508
.LBB85_515:                             # %for.end2570
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_517
.LBB85_516:                             # %if.else2571
                                        #   in Loop: Header=BB85_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_517:                             # %if.end2572
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_518
.LBB85_518:                             # %if.end2573
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB85_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-268(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB85_526
.LBB85_520:                             # %if.else2578
                                        #   in Loop: Header=BB85_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB85_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB85_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB85_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_524
.LBB85_523:                             # %cond.false2592
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB85_524:                             # %cond.end2597
                                        #   in Loop: Header=BB85_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB85_525:                             # %if.end2603
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_526
.LBB85_526:                             # %if.end2604
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB85_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB85_530
.LBB85_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB85_556
.LBB85_530:                             # %if.then2616
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -184(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-268(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_532:                             # %for.cond2638
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_534 Depth 5
                                        #             Child Loop BB85_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB85_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB85_532 Depth=4
	movl	$0, -24(%rbp)
.LBB85_534:                             # %for.cond2642
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB85_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB85_534 Depth=5
	movl	$0, -20(%rbp)
.LBB85_536:                             # %for.cond2646
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_532 Depth=4
                                        #           Parent Loop BB85_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB85_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB85_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB85_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_536
.LBB85_539:                             # %for.end2668
                                        #   in Loop: Header=BB85_534 Depth=5
	jmp	.LBB85_540
.LBB85_540:                             # %for.inc2669
                                        #   in Loop: Header=BB85_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_534
.LBB85_541:                             # %for.end2671
                                        #   in Loop: Header=BB85_532 Depth=4
	jmp	.LBB85_542
.LBB85_542:                             # %for.inc2672
                                        #   in Loop: Header=BB85_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_532
.LBB85_543:                             # %for.end2674
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_544:                             # %for.cond2675
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB85_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_546:                             # %for.cond2680
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_418 Depth=3
                                        #         Parent Loop BB85_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB85_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB85_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB85_550
.LBB85_549:                             # %if.else2705
                                        #   in Loop: Header=BB85_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB85_550:                             # %if.end2754
                                        #   in Loop: Header=BB85_546 Depth=5
	jmp	.LBB85_551
.LBB85_551:                             # %for.inc2755
                                        #   in Loop: Header=BB85_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_546
.LBB85_552:                             # %for.end2757
                                        #   in Loop: Header=BB85_544 Depth=4
	jmp	.LBB85_553
.LBB85_553:                             # %for.inc2758
                                        #   in Loop: Header=BB85_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_544
.LBB85_554:                             # %for.end2760
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_555
.LBB85_555:                             # %if.end2761
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB85_556:                             # %if.end2762
                                        #   in Loop: Header=BB85_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB85_557:                             # %if.end2763
                                        #   in Loop: Header=BB85_418 Depth=3
	jmp	.LBB85_558
.LBB85_558:                             # %for.inc2764
                                        #   in Loop: Header=BB85_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_418
.LBB85_559:                             # %for.end2766
                                        #   in Loop: Header=BB85_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-184(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB85_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB85_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_563
.LBB85_562:                             # %cond.true2782
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB85_564
.LBB85_563:                             # %cond.false2783
                                        #   in Loop: Header=BB85_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB85_564
.LBB85_564:                             # %cond.end2784
                                        #   in Loop: Header=BB85_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB85_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB85_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_567
.LBB85_566:                             # %cond.true2793
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB85_568
.LBB85_567:                             # %cond.false2794
                                        #   in Loop: Header=BB85_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB85_568
.LBB85_568:                             # %cond.end2795
                                        #   in Loop: Header=BB85_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_569:                             # %for.cond2813
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_571 Depth 4
                                        #           Child Loop BB85_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB85_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB85_569 Depth=3
	movl	$0, -24(%rbp)
.LBB85_571:                             # %for.cond2817
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB85_571 Depth=4
	movl	$0, -20(%rbp)
.LBB85_573:                             # %for.cond2821
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_569 Depth=3
                                        #         Parent Loop BB85_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB85_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB85_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB85_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_573
.LBB85_576:                             # %for.end2844
                                        #   in Loop: Header=BB85_571 Depth=4
	jmp	.LBB85_577
.LBB85_577:                             # %for.inc2845
                                        #   in Loop: Header=BB85_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_571
.LBB85_578:                             # %for.end2847
                                        #   in Loop: Header=BB85_569 Depth=3
	jmp	.LBB85_579
.LBB85_579:                             # %for.inc2848
                                        #   in Loop: Header=BB85_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_569
.LBB85_580:                             # %for.end2850
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_581:                             # %for.cond2851
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB85_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_583:                             # %for.cond2856
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_416 Depth=2
                                        #       Parent Loop BB85_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB85_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB85_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB85_587
.LBB85_586:                             # %if.else2886
                                        #   in Loop: Header=BB85_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB85_587:                             # %if.end2935
                                        #   in Loop: Header=BB85_583 Depth=4
	jmp	.LBB85_588
.LBB85_588:                             # %for.inc2936
                                        #   in Loop: Header=BB85_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_583
.LBB85_589:                             # %for.end2938
                                        #   in Loop: Header=BB85_581 Depth=3
	jmp	.LBB85_590
.LBB85_590:                             # %for.inc2939
                                        #   in Loop: Header=BB85_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_581
.LBB85_591:                             # %for.end2941
                                        #   in Loop: Header=BB85_416 Depth=2
	jmp	.LBB85_592
.LBB85_592:                             # %if.end2942
                                        #   in Loop: Header=BB85_416 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB85_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB85_594:                             # %if.end2948
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB85_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB85_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB85_596:                             # %if.end2974
                                        #   in Loop: Header=BB85_416 Depth=2
	jmp	.LBB85_597
.LBB85_597:                             # %for.inc2975
                                        #   in Loop: Header=BB85_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_416
.LBB85_598:                             # %for.end2977
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_599:                             # %if.end2980
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB85_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB85_601:                             # %for.cond2985
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_603 Depth 3
                                        #         Child Loop BB85_614 Depth 4
                                        #         Child Loop BB85_633 Depth 4
                                        #           Child Loop BB85_635 Depth 5
                                        #         Child Loop BB85_642 Depth 4
                                        #         Child Loop BB85_677 Depth 4
                                        #           Child Loop BB85_679 Depth 5
                                        #         Child Loop BB85_701 Depth 4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
                                        #         Child Loop BB85_713 Depth 4
                                        #           Child Loop BB85_715 Depth 5
                                        #         Child Loop BB85_723 Depth 4
                                        #           Child Loop BB85_725 Depth 5
                                        #       Child Loop BB85_745 Depth 3
                                        #         Child Loop BB85_747 Depth 4
                                        #           Child Loop BB85_749 Depth 5
                                        #       Child Loop BB85_757 Depth 3
                                        #         Child Loop BB85_759 Depth 4
                                        #       Child Loop BB85_766 Depth 3
                                        #         Child Loop BB85_768 Depth 4
                                        #       Child Loop BB85_778 Depth 3
                                        #         Child Loop BB85_780 Depth 4
                                        #       Child Loop BB85_786 Depth 3
                                        #       Child Loop BB85_791 Depth 3
                                        #         Child Loop BB85_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB85_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB85_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB85_603:                             # %for.cond2997
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_614 Depth 4
                                        #         Child Loop BB85_633 Depth 4
                                        #           Child Loop BB85_635 Depth 5
                                        #         Child Loop BB85_642 Depth 4
                                        #         Child Loop BB85_677 Depth 4
                                        #           Child Loop BB85_679 Depth 5
                                        #         Child Loop BB85_701 Depth 4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
                                        #         Child Loop BB85_713 Depth 4
                                        #           Child Loop BB85_715 Depth 5
                                        #         Child Loop BB85_723 Depth 4
                                        #           Child Loop BB85_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB85_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB85_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB85_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-228(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB85_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB85_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB85_610
.LBB85_609:                             # %if.then3019
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB85_611
.LBB85_610:                             # %if.else3020
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB85_611:                             # %if.end3022
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB85_612:                             # %if.end3024
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB85_687
.LBB85_613:                             # %if.else3060
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB85_614:                             # %for.cond3061
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB85_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB85_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB85_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB85_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB85_630
.LBB85_618:                             # %if.then3078
                                        #   in Loop: Header=BB85_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB85_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_622
.LBB85_621:                             # %cond.false3088
                                        #   in Loop: Header=BB85_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_622:                             # %cond.end3091
                                        #   in Loop: Header=BB85_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_627
.LBB85_623:                             # %cond.false3095
                                        #   in Loop: Header=BB85_614 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB85_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_626
.LBB85_625:                             # %cond.false3102
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	$1, %eax
	jmp	.LBB85_626
.LBB85_626:                             # %cond.end3103
                                        #   in Loop: Header=BB85_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_627:                             # %cond.end3108
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB85_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB85_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB85_629:                             # %if.end3121
                                        #   in Loop: Header=BB85_614 Depth=4
	jmp	.LBB85_630
.LBB85_630:                             # %if.end3122
                                        #   in Loop: Header=BB85_614 Depth=4
	jmp	.LBB85_631
.LBB85_631:                             # %for.inc3123
                                        #   in Loop: Header=BB85_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_614
.LBB85_632:                             # %for.end3125
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$0, -24(%rbp)
.LBB85_633:                             # %for.cond3126
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB85_633 Depth=4
	movl	$0, -20(%rbp)
.LBB85_635:                             # %for.cond3130
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB85_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB85_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_635
.LBB85_638:                             # %for.end3187
                                        #   in Loop: Header=BB85_633 Depth=4
	jmp	.LBB85_639
.LBB85_639:                             # %for.inc3188
                                        #   in Loop: Header=BB85_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_633
.LBB85_640:                             # %for.end3190
                                        #   in Loop: Header=BB85_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB85_642:                             # %for.cond3193
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB85_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB85_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB85_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_647
.LBB85_646:                             # %cond.false3210
                                        #   in Loop: Header=BB85_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_647:                             # %cond.end3213
                                        #   in Loop: Header=BB85_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB85_652
.LBB85_648:                             # %cond.false3217
                                        #   in Loop: Header=BB85_642 Depth=4
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB85_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB85_651
.LBB85_650:                             # %cond.false3224
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	$1, %eax
	jmp	.LBB85_651
.LBB85_651:                             # %cond.end3225
                                        #   in Loop: Header=BB85_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_652:                             # %cond.end3230
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB85_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB85_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB85_654:                             # %if.end3243
                                        #   in Loop: Header=BB85_642 Depth=4
	jmp	.LBB85_655
.LBB85_655:                             # %for.inc3244
                                        #   in Loop: Header=BB85_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB85_642
.LBB85_656:                             # %for.end3246
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB85_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_660
.LBB85_659:                             # %cond.false3256
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB85_660:                             # %cond.end3259
                                        #   in Loop: Header=BB85_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB85_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB85_663
.LBB85_662:                             # %cond.false3269
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB85_663:                             # %cond.end3271
                                        #   in Loop: Header=BB85_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB85_668
.LBB85_664:                             # %cond.false3276
                                        #   in Loop: Header=BB85_603 Depth=3
	vmovsd	.LCPI85_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB85_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB85_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB85_667
.LBB85_666:                             # %cond.false3283
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$1, %eax
	jmp	.LBB85_667
.LBB85_667:                             # %cond.end3284
                                        #   in Loop: Header=BB85_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB85_668:                             # %cond.end3289
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB85_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB85_676
.LBB85_671:                             # %if.else3299
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB85_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB85_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB85_675
.LBB85_674:                             # %if.else3306
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB85_675:                             # %if.end3307
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_676
.LBB85_676:                             # %if.end3308
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	$0, -24(%rbp)
.LBB85_677:                             # %for.cond3309
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB85_677 Depth=4
	movl	$0, -20(%rbp)
.LBB85_679:                             # %for.cond3313
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB85_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB85_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_679
.LBB85_682:                             # %for.end3349
                                        #   in Loop: Header=BB85_677 Depth=4
	jmp	.LBB85_683
.LBB85_683:                             # %for.inc3350
                                        #   in Loop: Header=BB85_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_677
.LBB85_684:                             # %for.end3352
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_686
.LBB85_685:                             # %if.else3353
                                        #   in Loop: Header=BB85_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_686:                             # %if.end3354
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_687
.LBB85_687:                             # %if.end3355
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB85_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-268(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB85_695
.LBB85_689:                             # %if.else3360
                                        #   in Loop: Header=BB85_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB85_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB85_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB85_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_693
.LBB85_692:                             # %cond.false3374
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB85_693:                             # %cond.end3379
                                        #   in Loop: Header=BB85_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB85_694:                             # %if.end3385
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_695
.LBB85_695:                             # %if.end3386
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB85_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB85_699
.LBB85_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB85_732
.LBB85_699:                             # %if.then3398
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -184(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-268(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_701:                             # %for.cond3422
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_703 Depth 5
                                        #             Child Loop BB85_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB85_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB85_701 Depth=4
	movl	$0, -24(%rbp)
.LBB85_703:                             # %for.cond3426
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB85_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB85_703 Depth=5
	movl	$0, -20(%rbp)
.LBB85_705:                             # %for.cond3430
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_701 Depth=4
                                        #           Parent Loop BB85_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB85_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB85_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB85_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_705
.LBB85_708:                             # %for.end3453
                                        #   in Loop: Header=BB85_703 Depth=5
	jmp	.LBB85_709
.LBB85_709:                             # %for.inc3454
                                        #   in Loop: Header=BB85_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_703
.LBB85_710:                             # %for.end3456
                                        #   in Loop: Header=BB85_701 Depth=4
	jmp	.LBB85_711
.LBB85_711:                             # %for.inc3457
                                        #   in Loop: Header=BB85_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_701
.LBB85_712:                             # %for.end3459
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_713:                             # %for.cond3460
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB85_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_715:                             # %for.cond3465
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB85_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB85_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_715
.LBB85_718:                             # %for.end3494
                                        #   in Loop: Header=BB85_713 Depth=4
	jmp	.LBB85_719
.LBB85_719:                             # %for.inc3495
                                        #   in Loop: Header=BB85_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_713
.LBB85_720:                             # %for.end3497
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_721
.LBB85_721:                             # %if.end3498
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_723:                             # %for.cond3502
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB85_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_725:                             # %for.cond3507
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_603 Depth=3
                                        #         Parent Loop BB85_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB85_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB85_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_725
.LBB85_728:                             # %for.end3562
                                        #   in Loop: Header=BB85_723 Depth=4
	jmp	.LBB85_729
.LBB85_729:                             # %for.inc3563
                                        #   in Loop: Header=BB85_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_723
.LBB85_730:                             # %for.end3565
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_731
.LBB85_731:                             # %if.end3566
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB85_732:                             # %if.end3567
                                        #   in Loop: Header=BB85_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB85_733:                             # %if.end3568
                                        #   in Loop: Header=BB85_603 Depth=3
	jmp	.LBB85_734
.LBB85_734:                             # %for.inc3569
                                        #   in Loop: Header=BB85_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_603
.LBB85_735:                             # %for.end3571
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-184(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB85_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB85_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB85_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_739
.LBB85_738:                             # %cond.true3588
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB85_740
.LBB85_739:                             # %cond.false3589
                                        #   in Loop: Header=BB85_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB85_740
.LBB85_740:                             # %cond.end3590
                                        #   in Loop: Header=BB85_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB85_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB85_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB85_743
.LBB85_742:                             # %cond.true3599
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB85_744
.LBB85_743:                             # %cond.false3600
                                        #   in Loop: Header=BB85_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB85_744
.LBB85_744:                             # %cond.end3601
                                        #   in Loop: Header=BB85_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB85_745:                             # %for.cond3619
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_747 Depth 4
                                        #           Child Loop BB85_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB85_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB85_745 Depth=3
	movl	$0, -24(%rbp)
.LBB85_747:                             # %for.cond3623
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB85_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB85_747 Depth=4
	movl	$0, -20(%rbp)
.LBB85_749:                             # %for.cond3627
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_745 Depth=3
                                        #         Parent Loop BB85_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB85_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB85_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB85_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_749
.LBB85_752:                             # %for.end3650
                                        #   in Loop: Header=BB85_747 Depth=4
	jmp	.LBB85_753
.LBB85_753:                             # %for.inc3651
                                        #   in Loop: Header=BB85_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_747
.LBB85_754:                             # %for.end3653
                                        #   in Loop: Header=BB85_745 Depth=3
	jmp	.LBB85_755
.LBB85_755:                             # %for.inc3654
                                        #   in Loop: Header=BB85_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_745
.LBB85_756:                             # %for.end3656
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_757:                             # %for.cond3657
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB85_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_759:                             # %for.cond3662
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB85_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB85_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_759
.LBB85_762:                             # %for.end3691
                                        #   in Loop: Header=BB85_757 Depth=3
	jmp	.LBB85_763
.LBB85_763:                             # %for.inc3692
                                        #   in Loop: Header=BB85_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_757
.LBB85_764:                             # %for.end3694
                                        #   in Loop: Header=BB85_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_766:                             # %for.cond3698
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB85_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_768:                             # %for.cond3703
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB85_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB85_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_768
.LBB85_771:                             # %for.end3758
                                        #   in Loop: Header=BB85_766 Depth=3
	jmp	.LBB85_772
.LBB85_772:                             # %for.inc3759
                                        #   in Loop: Header=BB85_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_766
.LBB85_773:                             # %for.end3761
                                        #   in Loop: Header=BB85_601 Depth=2
	jmp	.LBB85_774
.LBB85_774:                             # %if.end3762
                                        #   in Loop: Header=BB85_601 Depth=2
	jmp	.LBB85_775
.LBB85_775:                             # %if.end3763
                                        #   in Loop: Header=BB85_601 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB85_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB85_777:                             # %if.end3769
                                        #   in Loop: Header=BB85_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_778:                             # %for.cond3781
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB85_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_780:                             # %for.cond3786
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB85_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB85_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_780
.LBB85_783:                             # %for.end3797
                                        #   in Loop: Header=BB85_778 Depth=3
	jmp	.LBB85_784
.LBB85_784:                             # %for.inc3798
                                        #   in Loop: Header=BB85_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_778
.LBB85_785:                             # %for.end3800
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_786:                             # %for.cond3802
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB85_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB85_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_786
.LBB85_789:                             # %for.end3811
                                        #   in Loop: Header=BB85_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB85_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_791:                             # %for.cond3819
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB85_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_793:                             # %for.cond3824
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_601 Depth=2
                                        #       Parent Loop BB85_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB85_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB85_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_793
.LBB85_796:                             # %for.end3844
                                        #   in Loop: Header=BB85_791 Depth=3
	jmp	.LBB85_797
.LBB85_797:                             # %for.inc3845
                                        #   in Loop: Header=BB85_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_791
.LBB85_798:                             # %for.end3847
                                        #   in Loop: Header=BB85_601 Depth=2
	jmp	.LBB85_799
.LBB85_799:                             # %if.end3848
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB85_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_601
.LBB85_801:                             # %for.end3860
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_802
.LBB85_802:                             # %if.end3861
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB85_803:                             # %for.cond3862
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB85_803 Depth=2
	movl	$0, -24(%rbp)
.LBB85_805:                             # %for.cond3866
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB85_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB85_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_805
.LBB85_808:                             # %for.end3890
                                        #   in Loop: Header=BB85_803 Depth=2
	jmp	.LBB85_809
.LBB85_809:                             # %for.inc3891
                                        #   in Loop: Header=BB85_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_803
.LBB85_810:                             # %for.end3893
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB85_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB85_825
.LBB85_813:                             # %if.then3902
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB85_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_822
.LBB85_816:                             # %if.else3910
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB85_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB85_821
.LBB85_818:                             # %if.else3915
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB85_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_820:                             # %if.end3922
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_821
.LBB85_821:                             # %if.end3923
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_822
.LBB85_822:                             # %if.end3924
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_824
.LBB85_823:                             # %if.else3925
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_824:                             # %if.end3927
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_825
.LBB85_825:                             # %if.end3928
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_827
.LBB85_826:                             # %if.else3929
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB85_827:                             # %if.end3930
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_830
.LBB85_829:                             # %if.then3938
                                        #   in Loop: Header=BB85_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB85_830:                             # %if.end3939
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_832
.LBB85_831:                             # %if.else3940
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB85_832:                             # %if.end3941
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB85_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB85_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-308(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB85_835:                             # %for.cond3949
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_853 Depth 3
                                        #         Child Loop BB85_908 Depth 4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
                                        #         Child Loop BB85_955 Depth 4
                                        #           Child Loop BB85_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB85_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB85_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB85_846
.LBB85_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB85_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB85_846
.LBB85_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB85_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB85_846
.LBB85_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB85_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB85_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB85_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB85_835 Depth=2
	cmpl	$0, -308(%rbp)
	jne	.LBB85_847
.LBB85_846:                             # %if.then3982
                                        #   in Loop: Header=BB85_835 Depth=2
	jmp	.LBB85_976
.LBB85_847:                             # %if.end3983
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB85_835 Depth=2
	movl	$11, -300(%rbp)
	jmp	.LBB85_850
.LBB85_849:                             # %if.else3987
                                        #   in Loop: Header=BB85_835 Depth=2
	movl	$8, -300(%rbp)
.LBB85_850:                             # %if.end3988
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB85_852:                             # %if.end3994
                                        #   in Loop: Header=BB85_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB85_853:                             # %for.cond3995
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_908 Depth 4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
                                        #         Child Loop BB85_955 Depth 4
                                        #           Child Loop BB85_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-300(%rbp), %eax
	jge	.LBB85_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB85_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB85_857:                             # %if.end4010
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB85_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB85_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB85_866
.LBB85_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB85_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB85_866
.LBB85_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB85_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB85_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB85_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -308(%rbp)
	jne	.LBB85_867
.LBB85_866:                             # %if.then4032
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_974
.LBB85_867:                             # %if.end4033
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_869
.LBB85_868:                             # %if.else4034
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB85_869:                             # %if.end4037
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB85_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB85_877:                             # %if.end4066
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_878
.LBB85_878:                             # %if.end4067
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB85_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB85_880:                             # %if.end4072
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB85_881:                             # %if.end4074
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB85_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB85_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB85_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB85_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB85_887:                             # %if.end4092
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_888
.LBB85_888:                             # %if.end4093
                                        #   in Loop: Header=BB85_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB85_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB85_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_902
.LBB85_893:                             # %if.else4110
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_901
.LBB85_897:                             # %if.else4120
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB85_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB85_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_900:                             # %if.end4128
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_901
.LBB85_901:                             # %if.end4129
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_902
.LBB85_902:                             # %if.end4130
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_903
.LBB85_903:                             # %if.end4131
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB85_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB85_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB85_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB85_947
.LBB85_907:                             # %if.then4146
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_908
.LBB85_908:                             # %while.body
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_911 Depth 5
                                        #             Child Loop BB85_913 Depth 6
                                        #           Child Loop BB85_920 Depth 5
                                        #             Child Loop BB85_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB85_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB85_908 Depth=4
	movl	$0, -20(%rbp)
.LBB85_911:                             # %for.cond4153
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB85_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB85_911 Depth=5
	movl	$0, -24(%rbp)
.LBB85_913:                             # %for.cond4157
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        #           Parent Loop BB85_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB85_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB85_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB85_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_913
.LBB85_916:                             # %for.end4182
                                        #   in Loop: Header=BB85_911 Depth=5
	jmp	.LBB85_917
.LBB85_917:                             # %for.inc4183
                                        #   in Loop: Header=BB85_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_911
.LBB85_918:                             # %for.end4185
                                        #   in Loop: Header=BB85_908 Depth=4
	jmp	.LBB85_928
.LBB85_919:                             # %if.else4186
                                        #   in Loop: Header=BB85_908 Depth=4
	movl	$0, -20(%rbp)
.LBB85_920:                             # %for.cond4187
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB85_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB85_920 Depth=5
	movl	$0, -24(%rbp)
.LBB85_922:                             # %for.cond4191
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_908 Depth=4
                                        #           Parent Loop BB85_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB85_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB85_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB85_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_922
.LBB85_925:                             # %for.end4215
                                        #   in Loop: Header=BB85_920 Depth=5
	jmp	.LBB85_926
.LBB85_926:                             # %for.inc4216
                                        #   in Loop: Header=BB85_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_920
.LBB85_927:                             # %for.end4218
                                        #   in Loop: Header=BB85_908 Depth=4
	jmp	.LBB85_928
.LBB85_928:                             # %if.end4219
                                        #   in Loop: Header=BB85_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_929:                             # %if.end4220
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB85_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB85_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB85_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB85_908 Depth=4
	jmp	.LBB85_908
.LBB85_935:                             # %if.else4236
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB85_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB85_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_934
.LBB85_940:                             # %if.else4250
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB85_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB85_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB85_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB85_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_934
.LBB85_944:                             # %if.else4262
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB85_946
.LBB85_945:                             # %if.else4264
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_946
.LBB85_946:                             # %while.end
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_947
.LBB85_947:                             # %if.end4265
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB85_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB85_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB85_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB85_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	$0, -20(%rbp)
.LBB85_955:                             # %for.cond4288
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB85_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB85_955 Depth=4
	movl	$0, -24(%rbp)
.LBB85_957:                             # %for.cond4292
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_835 Depth=2
                                        #       Parent Loop BB85_853 Depth=3
                                        #         Parent Loop BB85_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB85_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB85_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB85_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_957
.LBB85_960:                             # %for.end4316
                                        #   in Loop: Header=BB85_955 Depth=4
	jmp	.LBB85_961
.LBB85_961:                             # %for.inc4317
                                        #   in Loop: Header=BB85_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_955
.LBB85_962:                             # %for.end4319
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_963:                             # %if.end4320
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_964
.LBB85_964:                             # %if.end4321
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_965
.LBB85_965:                             # %if.end4322
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB85_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB85_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB85_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB85_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB85_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB85_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB85_972:                             # %if.end4356
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_973
.LBB85_973:                             # %if.end4357
                                        #   in Loop: Header=BB85_853 Depth=3
	jmp	.LBB85_974
.LBB85_974:                             # %for.inc4358
                                        #   in Loop: Header=BB85_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_853
.LBB85_975:                             # %for.end4360
                                        #   in Loop: Header=BB85_835 Depth=2
	jmp	.LBB85_976
.LBB85_976:                             # %for.inc4361
                                        #   in Loop: Header=BB85_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB85_835
.LBB85_977:                             # %for.end4364
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1082
.LBB85_978:                             # %if.else4365
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB85_980:                             # %if.end4371
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB85_981:                             # %for.cond4372
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1014 Depth 3
                                        #         Child Loop BB85_1017 Depth 4
                                        #           Child Loop BB85_1019 Depth 5
                                        #         Child Loop BB85_1026 Depth 4
                                        #           Child Loop BB85_1028 Depth 5
                                        #       Child Loop BB85_1061 Depth 3
                                        #         Child Loop BB85_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB85_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB85_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB85_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB85_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB85_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB85_990:                             # %if.end4407
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_991
.LBB85_991:                             # %if.end4408
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB85_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB85_993:                             # %if.end4413
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB85_994:                             # %if.end4415
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB85_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB85_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB85_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1008
.LBB85_999:                             # %if.else4433
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB85_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB85_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1007
.LBB85_1003:                            # %if.else4443
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB85_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB85_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_1006:                            # %if.end4451
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1007
.LBB85_1007:                            # %if.end4452
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1008
.LBB85_1008:                            # %if.end4453
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1009
.LBB85_1009:                            # %if.end4454
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB85_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB85_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB85_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB85_1053
.LBB85_1013:                            # %if.then4470
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1014
.LBB85_1014:                            # %while.body4471
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1017 Depth 4
                                        #           Child Loop BB85_1019 Depth 5
                                        #         Child Loop BB85_1026 Depth 4
                                        #           Child Loop BB85_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB85_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB85_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB85_1017:                            # %for.cond4478
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB85_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB85_1019:                            # %for.cond4482
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        #         Parent Loop BB85_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB85_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB85_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1019
.LBB85_1022:                            # %for.end4507
                                        #   in Loop: Header=BB85_1017 Depth=4
	jmp	.LBB85_1023
.LBB85_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB85_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1017
.LBB85_1024:                            # %for.end4510
                                        #   in Loop: Header=BB85_1014 Depth=3
	jmp	.LBB85_1034
.LBB85_1025:                            # %if.else4511
                                        #   in Loop: Header=BB85_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB85_1026:                            # %for.cond4512
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB85_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB85_1028:                            # %for.cond4516
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1014 Depth=3
                                        #         Parent Loop BB85_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB85_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB85_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1028
.LBB85_1031:                            # %for.end4540
                                        #   in Loop: Header=BB85_1026 Depth=4
	jmp	.LBB85_1032
.LBB85_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB85_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1026
.LBB85_1033:                            # %for.end4543
                                        #   in Loop: Header=BB85_1014 Depth=3
	jmp	.LBB85_1034
.LBB85_1034:                            # %if.end4544
                                        #   in Loop: Header=BB85_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_1035:                            # %if.end4545
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB85_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB85_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB85_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB85_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB85_1014 Depth=3
	jmp	.LBB85_1014
.LBB85_1041:                            # %if.else4561
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB85_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB85_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1040
.LBB85_1046:                            # %if.else4575
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB85_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB85_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB85_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB85_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB85_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1040
.LBB85_1050:                            # %if.else4587
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB85_1052
.LBB85_1051:                            # %if.else4589
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1052
.LBB85_1052:                            # %while.end4590
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1053
.LBB85_1053:                            # %if.end4591
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB85_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB85_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB85_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB85_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB85_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB85_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB85_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1061:                            # %for.cond4615
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB85_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB85_1063:                            # %for.cond4619
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_981 Depth=2
                                        #       Parent Loop BB85_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB85_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB85_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1063
.LBB85_1066:                            # %for.end4643
                                        #   in Loop: Header=BB85_1061 Depth=3
	jmp	.LBB85_1067
.LBB85_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB85_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1061
.LBB85_1068:                            # %for.end4646
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB85_1069:                            # %if.end4647
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1070
.LBB85_1070:                            # %if.end4648
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1071
.LBB85_1071:                            # %if.end4649
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB85_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB85_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB85_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB85_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB85_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB85_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB85_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB85_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB85_1078:                            # %if.end4683
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1079
.LBB85_1079:                            # %if.end4684
                                        #   in Loop: Header=BB85_981 Depth=2
	jmp	.LBB85_1080
.LBB85_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB85_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB85_981
.LBB85_1081:                            # %for.end4687
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1082
.LBB85_1082:                            # %if.end4688
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1284
.LBB85_1083:                            # %if.else4689
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -304(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB85_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB85_1085:                            # %if.end4695
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB85_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB85_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -256(%rbp)
	je	.LBB85_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB85_1090
	jmp	.LBB85_1089
.LBB85_1089:                            # %if.then4702
                                        #   in Loop: Header=BB85_171 Depth=1
	subl	$2, %eax
	je	.LBB85_1097
	jmp	.LBB85_1098
.LBB85_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB85_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB85_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB85_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB85_1095
.LBB85_1094:                            # %if.then4716
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_1096
.LBB85_1095:                            # %if.else4717
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_1096:                            # %if.end4718
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1099
.LBB85_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_1099
.LBB85_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB85_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1101
.LBB85_1100:                            # %if.else4722
                                        #   in Loop: Header=BB85_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB85_1101:                            # %if.end4724
                                        #   in Loop: Header=BB85_171 Depth=1
	vmovsd	.LCPI85_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI85_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB85_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB85_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB85_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1110
.LBB85_1106:                            # %if.else4743
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB85_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB85_1109
.LBB85_1108:                            # %if.else4748
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1109:                            # %if.end4750
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1110
.LBB85_1110:                            # %if.end4751
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1112
.LBB85_1111:                            # %if.else4752
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1112:                            # %if.end4754
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1113:                            # %for.cond4755
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB85_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1115:                            # %for.cond4759
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB85_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB85_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1115
.LBB85_1118:                            # %for.end4785
                                        #   in Loop: Header=BB85_1113 Depth=2
	jmp	.LBB85_1119
.LBB85_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB85_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1113
.LBB85_1120:                            # %for.end4788
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB85_1122
.LBB85_1121:                            # %if.else4789
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB85_1122:                            # %if.end4792
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1123
.LBB85_1123:                            # %if.end4793
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB85_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB85_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1127:                            # %for.cond4806
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1129 Depth 3
                                        #         Child Loop BB85_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB85_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB85_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1129:                            # %for.cond4810
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB85_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB85_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB85_1131:                            # %for.cond4814
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1127 Depth=2
                                        #       Parent Loop BB85_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB85_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB85_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB85_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB85_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB85_1134:                            # %if.end4826
                                        #   in Loop: Header=BB85_1131 Depth=4
	jmp	.LBB85_1135
.LBB85_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB85_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1131
.LBB85_1136:                            # %for.end4829
                                        #   in Loop: Header=BB85_1129 Depth=3
	jmp	.LBB85_1137
.LBB85_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB85_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1129
.LBB85_1138:                            # %for.end4832
                                        #   in Loop: Header=BB85_1127 Depth=2
	jmp	.LBB85_1139
.LBB85_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB85_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1127
.LBB85_1140:                            # %for.end4835
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	$0, -24(%rbp)
.LBB85_1141:                            # %for.cond4840
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB85_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1143:                            # %for.cond4844
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB85_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB85_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1143
.LBB85_1146:                            # %for.end4877
                                        #   in Loop: Header=BB85_1141 Depth=2
	jmp	.LBB85_1147
.LBB85_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB85_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1141
.LBB85_1148:                            # %for.end4880
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1149
.LBB85_1149:                            # %if.end4881
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB85_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB85_1151:                            # %if.end4889
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1152:                            # %for.cond4890
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB85_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1154:                            # %for.cond4894
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB85_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB85_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1154
.LBB85_1157:                            # %for.end4913
                                        #   in Loop: Header=BB85_1152 Depth=2
	jmp	.LBB85_1158
.LBB85_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB85_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1152
.LBB85_1159:                            # %for.end4916
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1160:                            # %for.cond4917
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB85_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1162:                            # %for.cond4921
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB85_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB85_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1162
.LBB85_1165:                            # %for.end4947
                                        #   in Loop: Header=BB85_1160 Depth=2
	jmp	.LBB85_1166
.LBB85_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB85_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1160
.LBB85_1167:                            # %for.end4950
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB85_1169
.LBB85_1168:                            # %if.else4952
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB85_1169:                            # %if.end4954
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1170
.LBB85_1170:                            # %if.end4955
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB85_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB85_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1174:                            # %for.cond4968
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1176 Depth 3
                                        #         Child Loop BB85_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB85_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB85_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1176:                            # %for.cond4972
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB85_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB85_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB85_1178:                            # %for.cond4976
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1174 Depth=2
                                        #       Parent Loop BB85_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB85_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB85_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB85_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB85_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB85_1181:                            # %if.end4988
                                        #   in Loop: Header=BB85_1178 Depth=4
	jmp	.LBB85_1182
.LBB85_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB85_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1178
.LBB85_1183:                            # %for.end4991
                                        #   in Loop: Header=BB85_1176 Depth=3
	jmp	.LBB85_1184
.LBB85_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB85_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1176
.LBB85_1185:                            # %for.end4994
                                        #   in Loop: Header=BB85_1174 Depth=2
	jmp	.LBB85_1186
.LBB85_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB85_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1174
.LBB85_1187:                            # %for.end4997
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
.LBB85_1188:                            # %if.end5002
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB85_1189:                            # %for.cond5004
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB85_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1191:                            # %for.cond5008
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB85_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB85_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1191
.LBB85_1194:                            # %for.end5034
                                        #   in Loop: Header=BB85_1189 Depth=2
	jmp	.LBB85_1195
.LBB85_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB85_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1189
.LBB85_1196:                            # %for.end5037
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB85_1198
.LBB85_1197:                            # %if.else5039
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB85_1198:                            # %if.end5043
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1199
.LBB85_1199:                            # %if.end5044
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB85_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB85_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1202:                            # %for.cond5053
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB85_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB85_1204:                            # %for.cond5057
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB85_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB85_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1204
.LBB85_1207:                            # %for.end5084
                                        #   in Loop: Header=BB85_1202 Depth=2
	jmp	.LBB85_1208
.LBB85_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB85_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1202
.LBB85_1209:                            # %for.end5087
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1211:                            # %for.cond5091
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB85_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1213:                            # %for.cond5095
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB85_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movl	-224(%rbp), %eax
	subl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-212(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB85_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1213
.LBB85_1216:                            # %for.end5194
                                        #   in Loop: Header=BB85_1211 Depth=2
	jmp	.LBB85_1217
.LBB85_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB85_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1211
.LBB85_1218:                            # %for.end5197
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1219
.LBB85_1219:                            # %if.end5198
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1221:                            # %for.cond5204
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB85_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1223:                            # %for.cond5208
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB85_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB85_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1223
.LBB85_1226:                            # %for.end5232
                                        #   in Loop: Header=BB85_1221 Depth=2
	jmp	.LBB85_1227
.LBB85_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB85_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1221
.LBB85_1228:                            # %for.end5235
                                        #   in Loop: Header=BB85_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB85_1229:                            # %for.cond5237
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB85_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1231:                            # %for.cond5241
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB85_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB85_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1231
.LBB85_1234:                            # %for.end5265
                                        #   in Loop: Header=BB85_1229 Depth=2
	jmp	.LBB85_1235
.LBB85_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB85_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1229
.LBB85_1236:                            # %for.end5268
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB85_1237:                            # %for.cond5270
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB85_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1239:                            # %for.cond5274
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB85_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB85_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1239
.LBB85_1242:                            # %for.end5289
                                        #   in Loop: Header=BB85_1237 Depth=2
	jmp	.LBB85_1243
.LBB85_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB85_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1237
.LBB85_1244:                            # %for.end5292
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB85_1245:                            # %for.cond5296
                                        #   Parent Loop BB85_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB85_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB85_1247:                            # %for.cond5300
                                        #   Parent Loop BB85_171 Depth=1
                                        #     Parent Loop BB85_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -212(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -176(%rbp)
	movl	-176(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -224(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-176(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB85_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1251
.LBB85_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB85_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB85_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB85_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB85_1257
.LBB85_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movl	-176(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1256
.LBB85_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB85_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB85_1247 Depth=3
.LBB85_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB85_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_1260
.LBB85_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB85_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB85_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB85_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_1266
.LBB85_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1265
.LBB85_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB85_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB85_1247 Depth=3
.LBB85_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB85_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB85_1269
.LBB85_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB85_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB85_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB85_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB85_1275
.LBB85_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB85_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB85_1274
.LBB85_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB85_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB85_1247 Depth=3
.LBB85_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB85_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB85_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1247
.LBB85_1277:                            # %for.end5546
                                        #   in Loop: Header=BB85_1245 Depth=2
	jmp	.LBB85_1278
.LBB85_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB85_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1245
.LBB85_1279:                            # %for.end5549
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1280
.LBB85_1280:                            # %if.end5550
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1282
.LBB85_1281:                            # %if.else5551
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB85_1282:                            # %if.end5554
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1283
.LBB85_1283:                            # %if.end5555
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1284
.LBB85_1284:                            # %if.end5556
                                        #   in Loop: Header=BB85_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB85_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB85_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB85_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB85_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB85_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB85_1289:                            # %if.end5574
                                        #   in Loop: Header=BB85_171 Depth=1
	jmp	.LBB85_1290
.LBB85_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB85_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB85_171
.LBB85_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB85_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB85_1295
.LBB85_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB85_1299
.LBB85_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB85_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB85_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB85_1298:                            # %if.end5597
	jmp	.LBB85_1299
.LBB85_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB85_1395
.LBB85_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB85_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB85_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB85_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB85_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB85_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB85_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB85_1308:                            # %for.cond5623
                                        #   Parent Loop BB85_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB85_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB85_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1308
.LBB85_1311:                            # %for.end5639
                                        #   in Loop: Header=BB85_1306 Depth=1
	jmp	.LBB85_1312
.LBB85_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB85_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1306
.LBB85_1313:                            # %for.end5642
	jmp	.LBB85_1370
.LBB85_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB85_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB85_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB85_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB85_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1318:                            # %for.cond5651
                                        #   Parent Loop BB85_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB85_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB85_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB85_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1318
.LBB85_1321:                            # %for.end5680
                                        #   in Loop: Header=BB85_1316 Depth=1
	jmp	.LBB85_1322
.LBB85_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB85_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1316
.LBB85_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB85_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB85_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1326:                            # %for.cond5688
                                        #   Parent Loop BB85_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB85_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB85_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1326
.LBB85_1329:                            # %for.end5707
                                        #   in Loop: Header=BB85_1324 Depth=1
	jmp	.LBB85_1330
.LBB85_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB85_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1324
.LBB85_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB85_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB85_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB85_1335:                            # %for.cond5718
                                        #   Parent Loop BB85_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB85_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB85_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1335
.LBB85_1338:                            # %for.end5752
                                        #   in Loop: Header=BB85_1333 Depth=1
	jmp	.LBB85_1339
.LBB85_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB85_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1333
.LBB85_1340:                            # %for.end5755
	jmp	.LBB85_1341
.LBB85_1341:                            # %if.end5756
	jmp	.LBB85_1342
.LBB85_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB85_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB85_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB85_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB85_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB85_1347:                            # %for.cond5772
                                        #   Parent Loop BB85_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB85_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB85_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB85_1347
.LBB85_1350:                            # %for.end5788
                                        #   in Loop: Header=BB85_1345 Depth=1
	jmp	.LBB85_1351
.LBB85_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB85_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1345
.LBB85_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB85_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB85_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB85_1356
# %bb.1355:                             # %if.then5800
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB85_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB85_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB85_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB85_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB85_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB85_1362:                            # %for.cond5816
                                        #   Parent Loop BB85_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB85_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB85_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB85_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_1362
.LBB85_1365:                            # %for.end5842
                                        #   in Loop: Header=BB85_1360 Depth=1
	jmp	.LBB85_1366
.LBB85_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB85_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1360
.LBB85_1367:                            # %for.end5845
	jmp	.LBB85_1368
.LBB85_1368:                            # %if.end5846
	jmp	.LBB85_1369
.LBB85_1369:                            # %if.end5847
	jmp	.LBB85_1370
.LBB85_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB85_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB85_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB85_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB85_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -284(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB85_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB85_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB85_1382
.LBB85_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_1382
# %bb.1381:                             # %if.then5884
	leaq	-284(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB85_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB85_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB85_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_1392
.LBB85_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB85_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB85_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB85_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB85_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB85_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB85_1394:                            # %if.end5973
	jmp	.LBB85_1395
.LBB85_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB85_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB85_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB85_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB85_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB85_1401
.LBB85_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB85_1402
.LBB85_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB85_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB85_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB85_1406
.LBB85_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB85_1406:                            # %if.end6019
	jmp	.LBB85_1407
.LBB85_1407:                            # %if.end6020
	jmp	.LBB85_1408
.LBB85_1408:                            # %if.end6021
	jmp	.LBB85_1409
.LBB85_1409:                            # %if.end6022
	jmp	.LBB85_1410
.LBB85_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB85_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB85_1413
.LBB85_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB85_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB85_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB85_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB85_1420
	jmp	.LBB85_1428
.LBB85_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1428
	jmp	.LBB85_1420
.LBB85_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB85_1420
	jmp	.LBB85_1428
.LBB85_1420:                            # %land.lhs.true6050
	movq	-424(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB85_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB85_1425
	jmp	.LBB85_1428
.LBB85_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_1424
# %bb.1423:                             # %cond.true6058
	movq	-424(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB85_1428
	jmp	.LBB85_1425
.LBB85_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB85_1425
	jmp	.LBB85_1428
.LBB85_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-288(%rbp), %eax
	je	.LBB85_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB85_1427:                            # %if.end6068
	jmp	.LBB85_1428
.LBB85_1428:                            # %if.end6069
	jmp	.LBB85_1429
.LBB85_1429:                            # %if.end6070
	jmp	.LBB85_1430
.LBB85_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB85_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB85_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB85_1452
.LBB85_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB85_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB85_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1437:                            # %lor.end6142
.LBB85_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB85_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB85_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB85_1441:                            # %lor.end6166
.LBB85_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB85_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1445:                            # %lor.end6191
.LBB85_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB85_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB85_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB85_1449:                            # %lor.end6216
.LBB85_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB85_1451:                            # %if.end6232
	jmp	.LBB85_1452
.LBB85_1452:                            # %if.end6233
	jmp	.LBB85_1464
.LBB85_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB85_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB85_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB85_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB85_1463:                            # %if.end6319
	jmp	.LBB85_1464
.LBB85_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB85_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB85_1466:                            # %if.end6327
	cmpl	$2126386274, -416(%rbp) # imm = 0x7EBE1462
	jne	.LBB85_1468
.LBB85_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_1467
.Lfunc_end85:
	.size	encode_one_macroblock.56, .Lfunc_end85-encode_one_macroblock.56
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.57 # -- Begin function field_flag_inference.57
	.p2align	4, 0x90
	.type	field_flag_inference.57,@function
field_flag_inference.57:                # @field_flag_inference.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$785860384, -28(%rbp)   # imm = 0x2ED74720
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB86_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_6
.LBB86_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB86_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_5
.LBB86_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB86_5:                               # %if.end
	jmp	.LBB86_6
.LBB86_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$785860384, -28(%rbp)   # imm = 0x2ED74720
	jne	.LBB86_8
.LBB86_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_7
.Lfunc_end86:
	.size	field_flag_inference.57, .Lfunc_end86-field_flag_inference.57
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.58 # -- Begin function CheckReliabilityOfRef.58
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.58,@function
CheckReliabilityOfRef.58:               # @CheckReliabilityOfRef.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1158187868, -108(%rbp) # imm = 0x45088B5C
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB87_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB87_6
.LBB87_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB87_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB87_5
.LBB87_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB87_5
.LBB87_5:                               # %cond.end
.LBB87_6:                               # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB87_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB87_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB87_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB87_14
.LBB87_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB87_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB87_13
.LBB87_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB87_13
.LBB87_13:                              # %cond.end20
.LBB87_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB87_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB87_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB87_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_19 Depth 2
                                        #       Child Loop BB87_23 Depth 3
                                        #         Child Loop BB87_25 Depth 4
                                        #       Child Loop BB87_53 Depth 3
                                        #         Child Loop BB87_55 Depth 4
                                        #           Child Loop BB87_66 Depth 5
                                        #       Child Loop BB87_87 Depth 3
                                        #         Child Loop BB87_89 Depth 4
                                        #           Child Loop BB87_100 Depth 5
                                        #       Child Loop BB87_121 Depth 3
                                        #         Child Loop BB87_123 Depth 4
                                        #           Child Loop BB87_125 Depth 5
                                        #             Child Loop BB87_136 Depth 6
                                        #       Child Loop BB87_159 Depth 3
                                        #         Child Loop BB87_161 Depth 4
                                        #           Child Loop BB87_163 Depth 5
                                        #             Child Loop BB87_174 Depth 6
                                        #       Child Loop BB87_196 Depth 3
                                        #         Child Loop BB87_198 Depth 4
                                        #           Child Loop BB87_212 Depth 5
                                        #           Child Loop BB87_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB87_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB87_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB87_19:                              # %for.cond31
                                        #   Parent Loop BB87_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_23 Depth 3
                                        #         Child Loop BB87_25 Depth 4
                                        #       Child Loop BB87_53 Depth 3
                                        #         Child Loop BB87_55 Depth 4
                                        #           Child Loop BB87_66 Depth 5
                                        #       Child Loop BB87_87 Depth 3
                                        #         Child Loop BB87_89 Depth 4
                                        #           Child Loop BB87_100 Depth 5
                                        #       Child Loop BB87_121 Depth 3
                                        #         Child Loop BB87_123 Depth 4
                                        #           Child Loop BB87_125 Depth 5
                                        #             Child Loop BB87_136 Depth 6
                                        #       Child Loop BB87_159 Depth 3
                                        #         Child Loop BB87_161 Depth 4
                                        #           Child Loop BB87_163 Depth 5
                                        #             Child Loop BB87_174 Depth 6
                                        #       Child Loop BB87_196 Depth 3
                                        #         Child Loop BB87_198 Depth 4
                                        #           Child Loop BB87_212 Depth 5
                                        #           Child Loop BB87_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB87_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB87_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-32(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB87_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB87_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB87_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	$0, -16(%rbp)
.LBB87_23:                              # %for.cond75
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB87_23 Depth=3
	movl	$0, -12(%rbp)
.LBB87_25:                              # %for.cond79
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB87_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB87_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB87_29
.LBB87_28:                              # %cond.false87
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB87_29:                              # %cond.end89
                                        #   in Loop: Header=BB87_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB87_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB87_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_35
.LBB87_31:                              # %cond.false94
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB87_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB87_34
.LBB87_33:                              # %cond.false99
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB87_34:                              # %cond.end101
                                        #   in Loop: Header=BB87_25 Depth=4
.LBB87_35:                              # %cond.end103
                                        #   in Loop: Header=BB87_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB87_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB87_38
.LBB87_37:                              # %cond.false111
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB87_38:                              # %cond.end113
                                        #   in Loop: Header=BB87_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB87_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB87_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_44
.LBB87_40:                              # %cond.false118
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB87_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB87_43
.LBB87_42:                              # %cond.false123
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB87_43:                              # %cond.end125
                                        #   in Loop: Header=BB87_25 Depth=4
.LBB87_44:                              # %cond.end127
                                        #   in Loop: Header=BB87_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB87_267
.LBB87_46:                              # %if.end
                                        #   in Loop: Header=BB87_25 Depth=4
	jmp	.LBB87_47
.LBB87_47:                              # %for.inc
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_25
.LBB87_48:                              # %for.end
                                        #   in Loop: Header=BB87_23 Depth=3
	jmp	.LBB87_49
.LBB87_49:                              # %for.inc135
                                        #   in Loop: Header=BB87_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_23
.LBB87_50:                              # %for.end137
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_262
.LBB87_51:                              # %if.else
                                        #   in Loop: Header=BB87_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB87_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	$0, -16(%rbp)
.LBB87_53:                              # %for.cond141
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_55 Depth 4
                                        #           Child Loop BB87_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB87_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB87_53 Depth=3
	movl	$0, -12(%rbp)
.LBB87_55:                              # %for.cond145
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB87_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB87_59
.LBB87_58:                              # %cond.false153
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_59:                              # %cond.end155
                                        #   in Loop: Header=BB87_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB87_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB87_65
.LBB87_61:                              # %cond.false160
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB87_64
.LBB87_63:                              # %cond.false165
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_64:                              # %cond.end167
                                        #   in Loop: Header=BB87_55 Depth=4
.LBB87_65:                              # %cond.end169
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB87_66:                              # %for.cond171
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_53 Depth=3
                                        #         Parent Loop BB87_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB87_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB87_70
.LBB87_69:                              # %cond.false180
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB87_70:                              # %cond.end183
                                        #   in Loop: Header=BB87_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB87_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB87_76
.LBB87_72:                              # %cond.false188
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB87_75
.LBB87_74:                              # %cond.false194
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB87_75:                              # %cond.end197
                                        #   in Loop: Header=BB87_66 Depth=5
.LBB87_76:                              # %cond.end199
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB87_267
.LBB87_78:                              # %if.end209
                                        #   in Loop: Header=BB87_66 Depth=5
	jmp	.LBB87_79
.LBB87_79:                              # %for.inc210
                                        #   in Loop: Header=BB87_66 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_66
.LBB87_80:                              # %for.end212
                                        #   in Loop: Header=BB87_55 Depth=4
	jmp	.LBB87_81
.LBB87_81:                              # %for.inc213
                                        #   in Loop: Header=BB87_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_55
.LBB87_82:                              # %for.end215
                                        #   in Loop: Header=BB87_53 Depth=3
	jmp	.LBB87_83
.LBB87_83:                              # %for.inc216
                                        #   in Loop: Header=BB87_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_53
.LBB87_84:                              # %for.end218
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_261
.LBB87_85:                              # %if.else219
                                        #   in Loop: Header=BB87_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB87_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	$0, -16(%rbp)
.LBB87_87:                              # %for.cond223
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_89 Depth 4
                                        #           Child Loop BB87_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB87_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB87_87 Depth=3
	movl	$0, -12(%rbp)
.LBB87_89:                              # %for.cond227
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB87_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB87_93
.LBB87_92:                              # %cond.false235
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_93:                              # %cond.end237
                                        #   in Loop: Header=BB87_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB87_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB87_99
.LBB87_95:                              # %cond.false242
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB87_98
.LBB87_97:                              # %cond.false247
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_98:                              # %cond.end249
                                        #   in Loop: Header=BB87_89 Depth=4
.LBB87_99:                              # %cond.end251
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB87_100:                             # %for.cond253
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_87 Depth=3
                                        #         Parent Loop BB87_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB87_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB87_104
.LBB87_103:                             # %cond.false262
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_104:                             # %cond.end265
                                        #   in Loop: Header=BB87_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB87_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB87_110
.LBB87_106:                             # %cond.false270
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB87_109
.LBB87_108:                             # %cond.false276
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_109:                             # %cond.end279
                                        #   in Loop: Header=BB87_100 Depth=5
.LBB87_110:                             # %cond.end281
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB87_267
.LBB87_112:                             # %if.end291
                                        #   in Loop: Header=BB87_100 Depth=5
	jmp	.LBB87_113
.LBB87_113:                             # %for.inc292
                                        #   in Loop: Header=BB87_100 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_100
.LBB87_114:                             # %for.end294
                                        #   in Loop: Header=BB87_89 Depth=4
	jmp	.LBB87_115
.LBB87_115:                             # %for.inc295
                                        #   in Loop: Header=BB87_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_89
.LBB87_116:                             # %for.end297
                                        #   in Loop: Header=BB87_87 Depth=3
	jmp	.LBB87_117
.LBB87_117:                             # %for.inc298
                                        #   in Loop: Header=BB87_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_87
.LBB87_118:                             # %for.end300
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_260
.LBB87_119:                             # %if.else301
                                        #   in Loop: Header=BB87_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB87_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	$0, -16(%rbp)
.LBB87_121:                             # %for.cond305
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_123 Depth 4
                                        #           Child Loop BB87_125 Depth 5
                                        #             Child Loop BB87_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB87_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB87_121 Depth=3
	movl	$0, -12(%rbp)
.LBB87_123:                             # %for.cond309
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_125 Depth 5
                                        #             Child Loop BB87_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB87_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB87_123 Depth=4
	movl	$-2, -20(%rbp)
.LBB87_125:                             # %for.cond313
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_121 Depth=3
                                        #         Parent Loop BB87_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB87_136 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB87_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB87_129
.LBB87_128:                             # %cond.false322
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_129:                             # %cond.end325
                                        #   in Loop: Header=BB87_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB87_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB87_135
.LBB87_131:                             # %cond.false330
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB87_134
.LBB87_133:                             # %cond.false336
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_134:                             # %cond.end339
                                        #   in Loop: Header=BB87_125 Depth=5
.LBB87_135:                             # %cond.end341
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB87_136:                             # %for.cond343
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_121 Depth=3
                                        #         Parent Loop BB87_123 Depth=4
                                        #           Parent Loop BB87_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB87_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB87_140
.LBB87_139:                             # %cond.false352
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_140:                             # %cond.end355
                                        #   in Loop: Header=BB87_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB87_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB87_146
.LBB87_142:                             # %cond.false360
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB87_145
.LBB87_144:                             # %cond.false366
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_145:                             # %cond.end369
                                        #   in Loop: Header=BB87_136 Depth=6
.LBB87_146:                             # %cond.end371
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB87_267
.LBB87_148:                             # %if.end381
                                        #   in Loop: Header=BB87_136 Depth=6
	jmp	.LBB87_149
.LBB87_149:                             # %for.inc382
                                        #   in Loop: Header=BB87_136 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_136
.LBB87_150:                             # %for.end384
                                        #   in Loop: Header=BB87_125 Depth=5
	jmp	.LBB87_151
.LBB87_151:                             # %for.inc385
                                        #   in Loop: Header=BB87_125 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_125
.LBB87_152:                             # %for.end387
                                        #   in Loop: Header=BB87_123 Depth=4
	jmp	.LBB87_153
.LBB87_153:                             # %for.inc388
                                        #   in Loop: Header=BB87_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_123
.LBB87_154:                             # %for.end390
                                        #   in Loop: Header=BB87_121 Depth=3
	jmp	.LBB87_155
.LBB87_155:                             # %for.inc391
                                        #   in Loop: Header=BB87_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_121
.LBB87_156:                             # %for.end393
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_259
.LBB87_157:                             # %if.else394
                                        #   in Loop: Header=BB87_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB87_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	$0, -16(%rbp)
.LBB87_159:                             # %for.cond398
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_161 Depth 4
                                        #           Child Loop BB87_163 Depth 5
                                        #             Child Loop BB87_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB87_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB87_159 Depth=3
	movl	$0, -12(%rbp)
.LBB87_161:                             # %for.cond402
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_163 Depth 5
                                        #             Child Loop BB87_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB87_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB87_161 Depth=4
	movl	$-2, -24(%rbp)
.LBB87_163:                             # %for.cond406
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_159 Depth=3
                                        #         Parent Loop BB87_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB87_174 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB87_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB87_167
.LBB87_166:                             # %cond.false415
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_167:                             # %cond.end418
                                        #   in Loop: Header=BB87_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB87_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB87_173
.LBB87_169:                             # %cond.false423
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB87_172
.LBB87_171:                             # %cond.false429
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_172:                             # %cond.end432
                                        #   in Loop: Header=BB87_163 Depth=5
.LBB87_173:                             # %cond.end434
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB87_174:                             # %for.cond436
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_159 Depth=3
                                        #         Parent Loop BB87_161 Depth=4
                                        #           Parent Loop BB87_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB87_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB87_178
.LBB87_177:                             # %cond.false445
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_178:                             # %cond.end448
                                        #   in Loop: Header=BB87_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB87_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB87_184
.LBB87_180:                             # %cond.false453
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB87_183
.LBB87_182:                             # %cond.false459
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_183:                             # %cond.end462
                                        #   in Loop: Header=BB87_174 Depth=6
.LBB87_184:                             # %cond.end464
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB87_267
.LBB87_186:                             # %if.end474
                                        #   in Loop: Header=BB87_174 Depth=6
	jmp	.LBB87_187
.LBB87_187:                             # %for.inc475
                                        #   in Loop: Header=BB87_174 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_174
.LBB87_188:                             # %for.end477
                                        #   in Loop: Header=BB87_163 Depth=5
	jmp	.LBB87_189
.LBB87_189:                             # %for.inc478
                                        #   in Loop: Header=BB87_163 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_163
.LBB87_190:                             # %for.end480
                                        #   in Loop: Header=BB87_161 Depth=4
	jmp	.LBB87_191
.LBB87_191:                             # %for.inc481
                                        #   in Loop: Header=BB87_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_161
.LBB87_192:                             # %for.end483
                                        #   in Loop: Header=BB87_159 Depth=3
	jmp	.LBB87_193
.LBB87_193:                             # %for.inc484
                                        #   in Loop: Header=BB87_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_159
.LBB87_194:                             # %for.end486
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_258
.LBB87_195:                             # %if.else487
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	$0, -16(%rbp)
.LBB87_196:                             # %for.cond488
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_198 Depth 4
                                        #           Child Loop BB87_212 Depth 5
                                        #           Child Loop BB87_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB87_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB87_196 Depth=3
	movl	$0, -12(%rbp)
.LBB87_198:                             # %for.cond492
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_212 Depth 5
                                        #           Child Loop BB87_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB87_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB87_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB87_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB87_202
.LBB87_201:                             # %cond.false500
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB87_202:                             # %cond.end503
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB87_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB87_205
.LBB87_204:                             # %cond.false508
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-48(%rbp), %eax
.LBB87_205:                             # %cond.end509
                                        #   in Loop: Header=BB87_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB87_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB87_211
.LBB87_207:                             # %cond.false514
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB87_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB87_210
.LBB87_209:                             # %cond.false518
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-48(%rbp), %eax
.LBB87_210:                             # %cond.end519
                                        #   in Loop: Header=BB87_198 Depth=4
.LBB87_211:                             # %cond.end521
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB87_212:                             # %for.cond523
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_196 Depth=3
                                        #         Parent Loop BB87_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB87_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB87_216
.LBB87_215:                             # %cond.false532
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_216:                             # %cond.end535
                                        #   in Loop: Header=BB87_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB87_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB87_222
.LBB87_218:                             # %cond.false540
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB87_221
.LBB87_220:                             # %cond.false546
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB87_221:                             # %cond.end549
                                        #   in Loop: Header=BB87_212 Depth=5
.LBB87_222:                             # %cond.end551
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB87_267
.LBB87_224:                             # %if.end561
                                        #   in Loop: Header=BB87_212 Depth=5
	jmp	.LBB87_225
.LBB87_225:                             # %for.inc562
                                        #   in Loop: Header=BB87_212 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_212
.LBB87_226:                             # %for.end564
                                        #   in Loop: Header=BB87_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB87_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB87_229
.LBB87_228:                             # %cond.false569
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB87_229:                             # %cond.end572
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB87_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB87_232
.LBB87_231:                             # %cond.false577
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-44(%rbp), %eax
.LBB87_232:                             # %cond.end578
                                        #   in Loop: Header=BB87_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB87_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB87_238
.LBB87_234:                             # %cond.false583
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB87_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB87_237
.LBB87_236:                             # %cond.false587
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-44(%rbp), %eax
.LBB87_237:                             # %cond.end588
                                        #   in Loop: Header=BB87_198 Depth=4
.LBB87_238:                             # %cond.end590
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB87_239:                             # %for.cond592
                                        #   Parent Loop BB87_17 Depth=1
                                        #     Parent Loop BB87_19 Depth=2
                                        #       Parent Loop BB87_196 Depth=3
                                        #         Parent Loop BB87_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB87_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB87_243
.LBB87_242:                             # %cond.false601
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_243:                             # %cond.end604
                                        #   in Loop: Header=BB87_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB87_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB87_249
.LBB87_245:                             # %cond.false609
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB87_248
.LBB87_247:                             # %cond.false615
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_248:                             # %cond.end618
                                        #   in Loop: Header=BB87_239 Depth=5
.LBB87_249:                             # %cond.end620
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB87_267
.LBB87_251:                             # %if.end630
                                        #   in Loop: Header=BB87_239 Depth=5
	jmp	.LBB87_252
.LBB87_252:                             # %for.inc631
                                        #   in Loop: Header=BB87_239 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_239
.LBB87_253:                             # %for.end633
                                        #   in Loop: Header=BB87_198 Depth=4
	jmp	.LBB87_254
.LBB87_254:                             # %for.inc634
                                        #   in Loop: Header=BB87_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_198
.LBB87_255:                             # %for.end636
                                        #   in Loop: Header=BB87_196 Depth=3
	jmp	.LBB87_256
.LBB87_256:                             # %for.inc637
                                        #   in Loop: Header=BB87_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_196
.LBB87_257:                             # %for.end639
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_258
.LBB87_258:                             # %if.end640
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_259
.LBB87_259:                             # %if.end641
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_260
.LBB87_260:                             # %if.end642
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_261
.LBB87_261:                             # %if.end643
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_262
.LBB87_262:                             # %if.end644
                                        #   in Loop: Header=BB87_19 Depth=2
	jmp	.LBB87_263
.LBB87_263:                             # %for.inc645
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB87_19
.LBB87_264:                             # %for.end647
                                        #   in Loop: Header=BB87_17 Depth=1
	jmp	.LBB87_265
.LBB87_265:                             # %for.inc648
                                        #   in Loop: Header=BB87_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB87_17
.LBB87_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB87_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$1158187868, -108(%rbp) # imm = 0x45088B5C
	jne	.LBB87_269
.LBB87_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_268
.Lfunc_end87:
	.size	CheckReliabilityOfRef.58, .Lfunc_end87-CheckReliabilityOfRef.58
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.59 # -- Begin function RDCost_for_4x4Blocks_Chroma.59
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.59,@function
RDCost_for_4x4Blocks_Chroma.59:         # @RDCost_for_4x4Blocks_Chroma.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1154737561, -56(%rbp)  # imm = 0x44D3E599
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB88_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB88_3
.LBB88_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB88_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB88_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB88_18
.LBB88_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB88_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB88_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB88_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB88_8:                               # %land.end
                                        #   in Loop: Header=BB88_6 Depth=1
	testb	$1, %al
	jne	.LBB88_9
	jmp	.LBB88_17
.LBB88_9:                               # %for.body
                                        #   in Loop: Header=BB88_6 Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB88_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB88_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB88_12
.LBB88_11:                              # %if.else54
                                        #   in Loop: Header=BB88_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB88_12:                              # %if.end55
                                        #   in Loop: Header=BB88_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB88_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB88_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB88_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB88_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB88_15:                              # %lor.end
                                        #   in Loop: Header=BB88_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB88_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB88_6
.LBB88_17:                              # %for.end
	jmp	.LBB88_18
.LBB88_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1154737561, -56(%rbp)  # imm = 0x44D3E599
	jne	.LBB88_20
.LBB88_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_19
.Lfunc_end88:
	.size	RDCost_for_4x4Blocks_Chroma.59, .Lfunc_end88-RDCost_for_4x4Blocks_Chroma.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.60
.LCPI89_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI89_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.60
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.60,@function
Mode_Decision_for_8x8IntraBlocks.60:    # @Mode_Decision_for_8x8IntraBlocks.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI89_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI89_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1752975490, -28(%rbp)  # imm = 0x687C4882
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB89_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB89_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	$1, -16(%rbp)
.LBB89_4:                               # %if.end
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_1
.LBB89_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1752975490, -28(%rbp)  # imm = 0x687C4882
	jne	.LBB89_8
.LBB89_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_7
.Lfunc_end89:
	.size	Mode_Decision_for_8x8IntraBlocks.60, .Lfunc_end89-Mode_Decision_for_8x8IntraBlocks.60
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.61 # -- Begin function CheckReliabilityOfRef.61
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.61,@function
CheckReliabilityOfRef.61:               # @CheckReliabilityOfRef.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$68119187, -108(%rbp)   # imm = 0x40F6A93
	movl	%edi, -80(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB90_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB90_6
.LBB90_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB90_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB90_5
.LBB90_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB90_5
.LBB90_5:                               # %cond.end
.LBB90_6:                               # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB90_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB90_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB90_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB90_14
.LBB90_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB90_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB90_13
.LBB90_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB90_13
.LBB90_13:                              # %cond.end20
.LBB90_14:                              # %cond.end22
	movl	%edx, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB90_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB90_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB90_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_19 Depth 2
                                        #       Child Loop BB90_23 Depth 3
                                        #         Child Loop BB90_25 Depth 4
                                        #       Child Loop BB90_53 Depth 3
                                        #         Child Loop BB90_55 Depth 4
                                        #           Child Loop BB90_66 Depth 5
                                        #       Child Loop BB90_87 Depth 3
                                        #         Child Loop BB90_89 Depth 4
                                        #           Child Loop BB90_100 Depth 5
                                        #       Child Loop BB90_121 Depth 3
                                        #         Child Loop BB90_123 Depth 4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
                                        #       Child Loop BB90_159 Depth 3
                                        #         Child Loop BB90_161 Depth 4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
                                        #       Child Loop BB90_196 Depth 3
                                        #         Child Loop BB90_198 Depth 4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB90_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB90_17 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB90_19:                              # %for.cond31
                                        #   Parent Loop BB90_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_23 Depth 3
                                        #         Child Loop BB90_25 Depth 4
                                        #       Child Loop BB90_53 Depth 3
                                        #         Child Loop BB90_55 Depth 4
                                        #           Child Loop BB90_66 Depth 5
                                        #       Child Loop BB90_87 Depth 3
                                        #         Child Loop BB90_89 Depth 4
                                        #           Child Loop BB90_100 Depth 5
                                        #       Child Loop BB90_121 Depth 3
                                        #         Child Loop BB90_123 Depth 4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
                                        #       Child Loop BB90_159 Depth 3
                                        #         Child Loop BB90_161 Depth 4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
                                        #       Child Loop BB90_196 Depth 3
                                        #         Child Loop BB90_198 Depth 4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB90_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB90_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-28(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB90_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB90_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -12(%rbp)
.LBB90_23:                              # %for.cond75
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB90_23 Depth=3
	movl	$0, -16(%rbp)
.LBB90_25:                              # %for.cond79
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB90_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB90_29
.LBB90_28:                              # %cond.false87
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB90_29:                              # %cond.end89
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB90_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB90_35
.LBB90_31:                              # %cond.false94
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB90_34
.LBB90_33:                              # %cond.false99
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB90_34:                              # %cond.end101
                                        #   in Loop: Header=BB90_25 Depth=4
.LBB90_35:                              # %cond.end103
                                        #   in Loop: Header=BB90_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB90_38
.LBB90_37:                              # %cond.false111
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB90_38:                              # %cond.end113
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB90_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB90_44
.LBB90_40:                              # %cond.false118
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB90_43
.LBB90_42:                              # %cond.false123
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB90_43:                              # %cond.end125
                                        #   in Loop: Header=BB90_25 Depth=4
.LBB90_44:                              # %cond.end127
                                        #   in Loop: Header=BB90_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_46:                              # %if.end
                                        #   in Loop: Header=BB90_25 Depth=4
	jmp	.LBB90_47
.LBB90_47:                              # %for.inc
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_25
.LBB90_48:                              # %for.end
                                        #   in Loop: Header=BB90_23 Depth=3
	jmp	.LBB90_49
.LBB90_49:                              # %for.inc135
                                        #   in Loop: Header=BB90_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_23
.LBB90_50:                              # %for.end137
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_262
.LBB90_51:                              # %if.else
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB90_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -12(%rbp)
.LBB90_53:                              # %for.cond141
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_55 Depth 4
                                        #           Child Loop BB90_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB90_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB90_53 Depth=3
	movl	$0, -16(%rbp)
.LBB90_55:                              # %for.cond145
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB90_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_59
.LBB90_58:                              # %cond.false153
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_59:                              # %cond.end155
                                        #   in Loop: Header=BB90_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB90_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_65
.LBB90_61:                              # %cond.false160
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_64
.LBB90_63:                              # %cond.false165
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_64:                              # %cond.end167
                                        #   in Loop: Header=BB90_55 Depth=4
.LBB90_65:                              # %cond.end169
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB90_66:                              # %for.cond171
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_53 Depth=3
                                        #         Parent Loop BB90_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB90_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_70
.LBB90_69:                              # %cond.false180
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB90_70:                              # %cond.end183
                                        #   in Loop: Header=BB90_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB90_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_76
.LBB90_72:                              # %cond.false188
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_75
.LBB90_74:                              # %cond.false194
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB90_75:                              # %cond.end197
                                        #   in Loop: Header=BB90_66 Depth=5
.LBB90_76:                              # %cond.end199
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_78:                              # %if.end209
                                        #   in Loop: Header=BB90_66 Depth=5
	jmp	.LBB90_79
.LBB90_79:                              # %for.inc210
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_66
.LBB90_80:                              # %for.end212
                                        #   in Loop: Header=BB90_55 Depth=4
	jmp	.LBB90_81
.LBB90_81:                              # %for.inc213
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_55
.LBB90_82:                              # %for.end215
                                        #   in Loop: Header=BB90_53 Depth=3
	jmp	.LBB90_83
.LBB90_83:                              # %for.inc216
                                        #   in Loop: Header=BB90_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_53
.LBB90_84:                              # %for.end218
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_261
.LBB90_85:                              # %if.else219
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB90_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -12(%rbp)
.LBB90_87:                              # %for.cond223
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_89 Depth 4
                                        #           Child Loop BB90_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB90_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB90_87 Depth=3
	movl	$0, -16(%rbp)
.LBB90_89:                              # %for.cond227
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB90_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_93
.LBB90_92:                              # %cond.false235
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_93:                              # %cond.end237
                                        #   in Loop: Header=BB90_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB90_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_99
.LBB90_95:                              # %cond.false242
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_98
.LBB90_97:                              # %cond.false247
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_98:                              # %cond.end249
                                        #   in Loop: Header=BB90_89 Depth=4
.LBB90_99:                              # %cond.end251
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB90_100:                             # %for.cond253
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_87 Depth=3
                                        #         Parent Loop BB90_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB90_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_104
.LBB90_103:                             # %cond.false262
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_104:                             # %cond.end265
                                        #   in Loop: Header=BB90_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB90_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_110
.LBB90_106:                             # %cond.false270
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_109
.LBB90_108:                             # %cond.false276
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_109:                             # %cond.end279
                                        #   in Loop: Header=BB90_100 Depth=5
.LBB90_110:                             # %cond.end281
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_112:                             # %if.end291
                                        #   in Loop: Header=BB90_100 Depth=5
	jmp	.LBB90_113
.LBB90_113:                             # %for.inc292
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB90_100
.LBB90_114:                             # %for.end294
                                        #   in Loop: Header=BB90_89 Depth=4
	jmp	.LBB90_115
.LBB90_115:                             # %for.inc295
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_89
.LBB90_116:                             # %for.end297
                                        #   in Loop: Header=BB90_87 Depth=3
	jmp	.LBB90_117
.LBB90_117:                             # %for.inc298
                                        #   in Loop: Header=BB90_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_87
.LBB90_118:                             # %for.end300
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_260
.LBB90_119:                             # %if.else301
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB90_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -12(%rbp)
.LBB90_121:                             # %for.cond305
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_123 Depth 4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB90_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB90_121 Depth=3
	movl	$0, -16(%rbp)
.LBB90_123:                             # %for.cond309
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB90_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB90_123 Depth=4
	movl	$-2, -24(%rbp)
.LBB90_125:                             # %for.cond313
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_121 Depth=3
                                        #         Parent Loop BB90_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB90_136 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB90_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_129
.LBB90_128:                             # %cond.false322
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_129:                             # %cond.end325
                                        #   in Loop: Header=BB90_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB90_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_135
.LBB90_131:                             # %cond.false330
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_134
.LBB90_133:                             # %cond.false336
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_134:                             # %cond.end339
                                        #   in Loop: Header=BB90_125 Depth=5
.LBB90_135:                             # %cond.end341
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB90_136:                             # %for.cond343
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_121 Depth=3
                                        #         Parent Loop BB90_123 Depth=4
                                        #           Parent Loop BB90_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB90_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB90_140
.LBB90_139:                             # %cond.false352
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_140:                             # %cond.end355
                                        #   in Loop: Header=BB90_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB90_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB90_146
.LBB90_142:                             # %cond.false360
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB90_145
.LBB90_144:                             # %cond.false366
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_145:                             # %cond.end369
                                        #   in Loop: Header=BB90_136 Depth=6
.LBB90_146:                             # %cond.end371
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_148:                             # %if.end381
                                        #   in Loop: Header=BB90_136 Depth=6
	jmp	.LBB90_149
.LBB90_149:                             # %for.inc382
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_136
.LBB90_150:                             # %for.end384
                                        #   in Loop: Header=BB90_125 Depth=5
	jmp	.LBB90_151
.LBB90_151:                             # %for.inc385
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB90_125
.LBB90_152:                             # %for.end387
                                        #   in Loop: Header=BB90_123 Depth=4
	jmp	.LBB90_153
.LBB90_153:                             # %for.inc388
                                        #   in Loop: Header=BB90_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_123
.LBB90_154:                             # %for.end390
                                        #   in Loop: Header=BB90_121 Depth=3
	jmp	.LBB90_155
.LBB90_155:                             # %for.inc391
                                        #   in Loop: Header=BB90_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_121
.LBB90_156:                             # %for.end393
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_259
.LBB90_157:                             # %if.else394
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB90_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -12(%rbp)
.LBB90_159:                             # %for.cond398
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_161 Depth 4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB90_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB90_159 Depth=3
	movl	$0, -16(%rbp)
.LBB90_161:                             # %for.cond402
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB90_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB90_161 Depth=4
	movl	$-2, -32(%rbp)
.LBB90_163:                             # %for.cond406
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_159 Depth=3
                                        #         Parent Loop BB90_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB90_174 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB90_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_167
.LBB90_166:                             # %cond.false415
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_167:                             # %cond.end418
                                        #   in Loop: Header=BB90_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB90_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_173
.LBB90_169:                             # %cond.false423
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_172
.LBB90_171:                             # %cond.false429
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_172:                             # %cond.end432
                                        #   in Loop: Header=BB90_163 Depth=5
.LBB90_173:                             # %cond.end434
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB90_174:                             # %for.cond436
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_159 Depth=3
                                        #         Parent Loop BB90_161 Depth=4
                                        #           Parent Loop BB90_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB90_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB90_178
.LBB90_177:                             # %cond.false445
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_178:                             # %cond.end448
                                        #   in Loop: Header=BB90_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB90_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB90_184
.LBB90_180:                             # %cond.false453
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB90_183
.LBB90_182:                             # %cond.false459
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_183:                             # %cond.end462
                                        #   in Loop: Header=BB90_174 Depth=6
.LBB90_184:                             # %cond.end464
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_186:                             # %if.end474
                                        #   in Loop: Header=BB90_174 Depth=6
	jmp	.LBB90_187
.LBB90_187:                             # %for.inc475
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB90_174
.LBB90_188:                             # %for.end477
                                        #   in Loop: Header=BB90_163 Depth=5
	jmp	.LBB90_189
.LBB90_189:                             # %for.inc478
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_163
.LBB90_190:                             # %for.end480
                                        #   in Loop: Header=BB90_161 Depth=4
	jmp	.LBB90_191
.LBB90_191:                             # %for.inc481
                                        #   in Loop: Header=BB90_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_161
.LBB90_192:                             # %for.end483
                                        #   in Loop: Header=BB90_159 Depth=3
	jmp	.LBB90_193
.LBB90_193:                             # %for.inc484
                                        #   in Loop: Header=BB90_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_159
.LBB90_194:                             # %for.end486
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_258
.LBB90_195:                             # %if.else487
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -12(%rbp)
.LBB90_196:                             # %for.cond488
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_198 Depth 4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB90_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB90_196 Depth=3
	movl	$0, -16(%rbp)
.LBB90_198:                             # %for.cond492
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB90_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB90_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB90_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB90_202
.LBB90_201:                             # %cond.false500
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB90_202:                             # %cond.end503
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB90_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_205
.LBB90_204:                             # %cond.false508
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-44(%rbp), %eax
.LBB90_205:                             # %cond.end509
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_211
.LBB90_207:                             # %cond.false514
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB90_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_210
.LBB90_209:                             # %cond.false518
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-44(%rbp), %eax
.LBB90_210:                             # %cond.end519
                                        #   in Loop: Header=BB90_198 Depth=4
.LBB90_211:                             # %cond.end521
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB90_212:                             # %for.cond523
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_196 Depth=3
                                        #         Parent Loop BB90_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB90_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_216
.LBB90_215:                             # %cond.false532
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_216:                             # %cond.end535
                                        #   in Loop: Header=BB90_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB90_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_222
.LBB90_218:                             # %cond.false540
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_221
.LBB90_220:                             # %cond.false546
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_221:                             # %cond.end549
                                        #   in Loop: Header=BB90_212 Depth=5
.LBB90_222:                             # %cond.end551
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_224:                             # %if.end561
                                        #   in Loop: Header=BB90_212 Depth=5
	jmp	.LBB90_225
.LBB90_225:                             # %for.inc562
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_212
.LBB90_226:                             # %for.end564
                                        #   in Loop: Header=BB90_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB90_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB90_229
.LBB90_228:                             # %cond.false569
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB90_229:                             # %cond.end572
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB90_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_232
.LBB90_231:                             # %cond.false577
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-48(%rbp), %eax
.LBB90_232:                             # %cond.end578
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_238
.LBB90_234:                             # %cond.false583
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB90_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_237
.LBB90_236:                             # %cond.false587
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-48(%rbp), %eax
.LBB90_237:                             # %cond.end588
                                        #   in Loop: Header=BB90_198 Depth=4
.LBB90_238:                             # %cond.end590
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB90_239:                             # %for.cond592
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_196 Depth=3
                                        #         Parent Loop BB90_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB90_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_243
.LBB90_242:                             # %cond.false601
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_243:                             # %cond.end604
                                        #   in Loop: Header=BB90_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB90_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_249
.LBB90_245:                             # %cond.false609
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_248
.LBB90_247:                             # %cond.false615
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_248:                             # %cond.end618
                                        #   in Loop: Header=BB90_239 Depth=5
.LBB90_249:                             # %cond.end620
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_251:                             # %if.end630
                                        #   in Loop: Header=BB90_239 Depth=5
	jmp	.LBB90_252
.LBB90_252:                             # %for.inc631
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB90_239
.LBB90_253:                             # %for.end633
                                        #   in Loop: Header=BB90_198 Depth=4
	jmp	.LBB90_254
.LBB90_254:                             # %for.inc634
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_198
.LBB90_255:                             # %for.end636
                                        #   in Loop: Header=BB90_196 Depth=3
	jmp	.LBB90_256
.LBB90_256:                             # %for.inc637
                                        #   in Loop: Header=BB90_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_196
.LBB90_257:                             # %for.end639
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_258
.LBB90_258:                             # %if.end640
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_259
.LBB90_259:                             # %if.end641
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_260
.LBB90_260:                             # %if.end642
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_261
.LBB90_261:                             # %if.end643
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_262
.LBB90_262:                             # %if.end644
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_263
.LBB90_263:                             # %for.inc645
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB90_19
.LBB90_264:                             # %for.end647
                                        #   in Loop: Header=BB90_17 Depth=1
	jmp	.LBB90_265
.LBB90_265:                             # %for.inc648
                                        #   in Loop: Header=BB90_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB90_17
.LBB90_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB90_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$68119187, -108(%rbp)   # imm = 0x40F6A93
	jne	.LBB90_269
.LBB90_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_268
.Lfunc_end90:
	.size	CheckReliabilityOfRef.61, .Lfunc_end90-CheckReliabilityOfRef.61
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.62      # -- Begin function StoreMVBlock8x8.62
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.62,@function
StoreMVBlock8x8.62:                     # @StoreMVBlock8x8.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1430199726, -68(%rbp)  # imm = 0x553F1DAE
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB91_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB91_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB91_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_5:                               # %for.cond7
                                        #   Parent Loop BB91_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB91_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB91_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_5
.LBB91_8:                               # %for.end
                                        #   in Loop: Header=BB91_3 Depth=1
	jmp	.LBB91_9
.LBB91_9:                               # %for.inc76
                                        #   in Loop: Header=BB91_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_3
.LBB91_10:                              # %for.end78
	jmp	.LBB91_11
.LBB91_11:                              # %if.end
	jmp	.LBB91_46
.LBB91_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB91_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB91_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_16:                              # %for.cond84
                                        #   Parent Loop BB91_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB91_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB91_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_16
.LBB91_19:                              # %for.end161
                                        #   in Loop: Header=BB91_14 Depth=1
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc162
                                        #   in Loop: Header=BB91_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end164
	jmp	.LBB91_45
.LBB91_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB91_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_26:                              # %for.cond171
                                        #   Parent Loop BB91_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB91_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_26
.LBB91_29:                              # %for.end248
                                        #   in Loop: Header=BB91_24 Depth=1
	jmp	.LBB91_30
.LBB91_30:                              # %for.inc249
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_24
.LBB91_31:                              # %for.end251
	jmp	.LBB91_44
.LBB91_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB91_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_36:                              # %for.cond258
                                        #   Parent Loop BB91_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB91_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB91_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end407
                                        #   in Loop: Header=BB91_34 Depth=1
	jmp	.LBB91_40
.LBB91_40:                              # %for.inc408
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_34
.LBB91_41:                              # %for.end410
	jmp	.LBB91_43
.LBB91_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB91_43:                              # %if.end412
	jmp	.LBB91_44
.LBB91_44:                              # %if.end413
	jmp	.LBB91_45
.LBB91_45:                              # %if.end414
	jmp	.LBB91_46
.LBB91_46:                              # %if.end415
	cmpl	$1430199726, -68(%rbp)  # imm = 0x553F1DAE
	jne	.LBB91_48
.LBB91_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_47
.Lfunc_end91:
	.size	StoreMVBlock8x8.62, .Lfunc_end91-StoreMVBlock8x8.62
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.63 # -- Begin function store_macroblock_parameters.63
	.p2align	4, 0x90
	.type	store_macroblock_parameters.63,@function
store_macroblock_parameters.63:         # @store_macroblock_parameters.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$360847000, -36(%rbp)   # imm = 0x15821698
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB92_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB92_3
.LBB92_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB92_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB92_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB92_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB92_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB92_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_4
.LBB92_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB92_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB92_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB92_10:                              # %for.cond20
                                        #   Parent Loop BB92_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB92_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB92_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_10
.LBB92_13:                              # %for.end39
                                        #   in Loop: Header=BB92_8 Depth=1
	jmp	.LBB92_14
.LBB92_14:                              # %for.inc40
                                        #   in Loop: Header=BB92_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_8
.LBB92_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB92_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB92_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB92_16 Depth=1
	movl	$0, -8(%rbp)
.LBB92_18:                              # %for.cond47
                                        #   Parent Loop BB92_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB92_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB92_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB92_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_18
.LBB92_21:                              # %for.end70
                                        #   in Loop: Header=BB92_16 Depth=1
	jmp	.LBB92_22
.LBB92_22:                              # %for.inc71
                                        #   in Loop: Header=BB92_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_16
.LBB92_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB92_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB92_24 Depth=1
	movl	$0, -4(%rbp)
.LBB92_26:                              # %for.cond78
                                        #   Parent Loop BB92_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB92_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB92_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_26
.LBB92_29:                              # %for.end94
                                        #   in Loop: Header=BB92_24 Depth=1
	jmp	.LBB92_30
.LBB92_30:                              # %for.inc95
                                        #   in Loop: Header=BB92_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_24
.LBB92_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB92_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB92_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB92_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB92_33 Depth=1
	movl	$0, -4(%rbp)
.LBB92_35:                              # %for.cond105
                                        #   Parent Loop BB92_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB92_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB92_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB92_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_35
.LBB92_38:                              # %for.end136
                                        #   in Loop: Header=BB92_33 Depth=1
	jmp	.LBB92_39
.LBB92_39:                              # %for.inc137
                                        #   in Loop: Header=BB92_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_33
.LBB92_40:                              # %for.end139
	jmp	.LBB92_41
.LBB92_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB92_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_46 Depth 2
                                        #       Child Loop BB92_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB92_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB92_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB92_46:                              # %for.cond152
                                        #   Parent Loop BB92_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB92_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB92_48:                              # %for.cond159
                                        #   Parent Loop BB92_44 Depth=1
                                        #     Parent Loop BB92_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB92_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB92_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_48
.LBB92_51:                              # %for.end179
                                        #   in Loop: Header=BB92_46 Depth=2
	jmp	.LBB92_52
.LBB92_52:                              # %for.inc180
                                        #   in Loop: Header=BB92_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_46
.LBB92_53:                              # %for.end182
                                        #   in Loop: Header=BB92_44 Depth=1
	jmp	.LBB92_54
.LBB92_54:                              # %for.inc183
                                        #   in Loop: Header=BB92_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_44
.LBB92_55:                              # %for.end185
	jmp	.LBB92_56
.LBB92_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB92_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB92_59
.LBB92_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB92_60
.LBB92_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB92_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB92_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB92_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB92_61 Depth=1
	movl	$0, -4(%rbp)
.LBB92_63:                              # %for.cond197
                                        #   Parent Loop BB92_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB92_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB92_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB92_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB92_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB92_66:                              # %if.end230
                                        #   in Loop: Header=BB92_63 Depth=2
	jmp	.LBB92_67
.LBB92_67:                              # %for.inc231
                                        #   in Loop: Header=BB92_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_63
.LBB92_68:                              # %for.end233
                                        #   in Loop: Header=BB92_61 Depth=1
	jmp	.LBB92_69
.LBB92_69:                              # %for.inc234
                                        #   in Loop: Header=BB92_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_61
.LBB92_70:                              # %for.end236
	cmpl	$360847000, -36(%rbp)   # imm = 0x15821698
	jne	.LBB92_72
.LBB92_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_71
.Lfunc_end92:
	.size	store_macroblock_parameters.63, .Lfunc_end92-store_macroblock_parameters.63
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.64 # -- Begin function CheckReliabilityOfRef.64
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.64,@function
CheckReliabilityOfRef.64:               # @CheckReliabilityOfRef.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1348829652, -108(%rbp) # imm = 0x506581D4
	movl	%edi, -80(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB93_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB93_6
.LBB93_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB93_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB93_5
.LBB93_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB93_5
.LBB93_5:                               # %cond.end
.LBB93_6:                               # %cond.end6
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB93_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB93_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB93_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB93_14
.LBB93_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB93_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB93_13
.LBB93_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB93_13
.LBB93_13:                              # %cond.end20
.LBB93_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB93_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB93_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB93_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_19 Depth 2
                                        #       Child Loop BB93_23 Depth 3
                                        #         Child Loop BB93_25 Depth 4
                                        #       Child Loop BB93_53 Depth 3
                                        #         Child Loop BB93_55 Depth 4
                                        #           Child Loop BB93_66 Depth 5
                                        #       Child Loop BB93_87 Depth 3
                                        #         Child Loop BB93_89 Depth 4
                                        #           Child Loop BB93_100 Depth 5
                                        #       Child Loop BB93_121 Depth 3
                                        #         Child Loop BB93_123 Depth 4
                                        #           Child Loop BB93_125 Depth 5
                                        #             Child Loop BB93_136 Depth 6
                                        #       Child Loop BB93_159 Depth 3
                                        #         Child Loop BB93_161 Depth 4
                                        #           Child Loop BB93_163 Depth 5
                                        #             Child Loop BB93_174 Depth 6
                                        #       Child Loop BB93_196 Depth 3
                                        #         Child Loop BB93_198 Depth 4
                                        #           Child Loop BB93_212 Depth 5
                                        #           Child Loop BB93_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB93_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB93_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB93_19:                              # %for.cond31
                                        #   Parent Loop BB93_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_23 Depth 3
                                        #         Child Loop BB93_25 Depth 4
                                        #       Child Loop BB93_53 Depth 3
                                        #         Child Loop BB93_55 Depth 4
                                        #           Child Loop BB93_66 Depth 5
                                        #       Child Loop BB93_87 Depth 3
                                        #         Child Loop BB93_89 Depth 4
                                        #           Child Loop BB93_100 Depth 5
                                        #       Child Loop BB93_121 Depth 3
                                        #         Child Loop BB93_123 Depth 4
                                        #           Child Loop BB93_125 Depth 5
                                        #             Child Loop BB93_136 Depth 6
                                        #       Child Loop BB93_159 Depth 3
                                        #         Child Loop BB93_161 Depth 4
                                        #           Child Loop BB93_163 Depth 5
                                        #             Child Loop BB93_174 Depth 6
                                        #       Child Loop BB93_196 Depth 3
                                        #         Child Loop BB93_198 Depth 4
                                        #           Child Loop BB93_212 Depth 5
                                        #           Child Loop BB93_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB93_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB93_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB93_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB93_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB93_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB93_19 Depth=2
	movl	$0, -12(%rbp)
.LBB93_23:                              # %for.cond75
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB93_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB93_23 Depth=3
	movl	$0, -16(%rbp)
.LBB93_25:                              # %for.cond79
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB93_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB93_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB93_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB93_29
.LBB93_28:                              # %cond.false87
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB93_29:                              # %cond.end89
                                        #   in Loop: Header=BB93_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB93_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB93_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_35
.LBB93_31:                              # %cond.false94
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB93_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB93_34
.LBB93_33:                              # %cond.false99
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB93_34:                              # %cond.end101
                                        #   in Loop: Header=BB93_25 Depth=4
.LBB93_35:                              # %cond.end103
                                        #   in Loop: Header=BB93_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB93_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB93_38
.LBB93_37:                              # %cond.false111
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB93_38:                              # %cond.end113
                                        #   in Loop: Header=BB93_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB93_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB93_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_44
.LBB93_40:                              # %cond.false118
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB93_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB93_43
.LBB93_42:                              # %cond.false123
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB93_43:                              # %cond.end125
                                        #   in Loop: Header=BB93_25 Depth=4
.LBB93_44:                              # %cond.end127
                                        #   in Loop: Header=BB93_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB93_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB93_267
.LBB93_46:                              # %if.end
                                        #   in Loop: Header=BB93_25 Depth=4
	jmp	.LBB93_47
.LBB93_47:                              # %for.inc
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_25
.LBB93_48:                              # %for.end
                                        #   in Loop: Header=BB93_23 Depth=3
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc135
                                        #   in Loop: Header=BB93_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_23
.LBB93_50:                              # %for.end137
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_262
.LBB93_51:                              # %if.else
                                        #   in Loop: Header=BB93_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB93_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB93_19 Depth=2
	movl	$0, -12(%rbp)
.LBB93_53:                              # %for.cond141
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_55 Depth 4
                                        #           Child Loop BB93_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB93_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB93_53 Depth=3
	movl	$0, -16(%rbp)
.LBB93_55:                              # %for.cond145
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB93_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB93_59
.LBB93_58:                              # %cond.false153
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_59:                              # %cond.end155
                                        #   in Loop: Header=BB93_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB93_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB93_65
.LBB93_61:                              # %cond.false160
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB93_64
.LBB93_63:                              # %cond.false165
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_64:                              # %cond.end167
                                        #   in Loop: Header=BB93_55 Depth=4
.LBB93_65:                              # %cond.end169
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB93_66:                              # %for.cond171
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_53 Depth=3
                                        #         Parent Loop BB93_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB93_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB93_70
.LBB93_69:                              # %cond.false180
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB93_70:                              # %cond.end183
                                        #   in Loop: Header=BB93_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB93_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB93_76
.LBB93_72:                              # %cond.false188
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB93_75
.LBB93_74:                              # %cond.false194
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB93_75:                              # %cond.end197
                                        #   in Loop: Header=BB93_66 Depth=5
.LBB93_76:                              # %cond.end199
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB93_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB93_267
.LBB93_78:                              # %if.end209
                                        #   in Loop: Header=BB93_66 Depth=5
	jmp	.LBB93_79
.LBB93_79:                              # %for.inc210
                                        #   in Loop: Header=BB93_66 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_66
.LBB93_80:                              # %for.end212
                                        #   in Loop: Header=BB93_55 Depth=4
	jmp	.LBB93_81
.LBB93_81:                              # %for.inc213
                                        #   in Loop: Header=BB93_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_55
.LBB93_82:                              # %for.end215
                                        #   in Loop: Header=BB93_53 Depth=3
	jmp	.LBB93_83
.LBB93_83:                              # %for.inc216
                                        #   in Loop: Header=BB93_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_53
.LBB93_84:                              # %for.end218
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_261
.LBB93_85:                              # %if.else219
                                        #   in Loop: Header=BB93_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB93_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB93_19 Depth=2
	movl	$0, -12(%rbp)
.LBB93_87:                              # %for.cond223
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_89 Depth 4
                                        #           Child Loop BB93_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB93_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB93_87 Depth=3
	movl	$0, -16(%rbp)
.LBB93_89:                              # %for.cond227
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB93_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB93_93
.LBB93_92:                              # %cond.false235
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_93:                              # %cond.end237
                                        #   in Loop: Header=BB93_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB93_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB93_99
.LBB93_95:                              # %cond.false242
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB93_98
.LBB93_97:                              # %cond.false247
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_98:                              # %cond.end249
                                        #   in Loop: Header=BB93_89 Depth=4
.LBB93_99:                              # %cond.end251
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB93_100:                             # %for.cond253
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_87 Depth=3
                                        #         Parent Loop BB93_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB93_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB93_104
.LBB93_103:                             # %cond.false262
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_104:                             # %cond.end265
                                        #   in Loop: Header=BB93_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB93_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB93_110
.LBB93_106:                             # %cond.false270
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB93_109
.LBB93_108:                             # %cond.false276
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_109:                             # %cond.end279
                                        #   in Loop: Header=BB93_100 Depth=5
.LBB93_110:                             # %cond.end281
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB93_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB93_267
.LBB93_112:                             # %if.end291
                                        #   in Loop: Header=BB93_100 Depth=5
	jmp	.LBB93_113
.LBB93_113:                             # %for.inc292
                                        #   in Loop: Header=BB93_100 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_100
.LBB93_114:                             # %for.end294
                                        #   in Loop: Header=BB93_89 Depth=4
	jmp	.LBB93_115
.LBB93_115:                             # %for.inc295
                                        #   in Loop: Header=BB93_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_89
.LBB93_116:                             # %for.end297
                                        #   in Loop: Header=BB93_87 Depth=3
	jmp	.LBB93_117
.LBB93_117:                             # %for.inc298
                                        #   in Loop: Header=BB93_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_87
.LBB93_118:                             # %for.end300
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_260
.LBB93_119:                             # %if.else301
                                        #   in Loop: Header=BB93_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB93_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB93_19 Depth=2
	movl	$0, -12(%rbp)
.LBB93_121:                             # %for.cond305
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_123 Depth 4
                                        #           Child Loop BB93_125 Depth 5
                                        #             Child Loop BB93_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB93_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB93_121 Depth=3
	movl	$0, -16(%rbp)
.LBB93_123:                             # %for.cond309
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_125 Depth 5
                                        #             Child Loop BB93_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB93_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB93_123 Depth=4
	movl	$-2, -28(%rbp)
.LBB93_125:                             # %for.cond313
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_121 Depth=3
                                        #         Parent Loop BB93_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB93_136 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB93_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB93_129
.LBB93_128:                             # %cond.false322
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_129:                             # %cond.end325
                                        #   in Loop: Header=BB93_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB93_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB93_135
.LBB93_131:                             # %cond.false330
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB93_134
.LBB93_133:                             # %cond.false336
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_134:                             # %cond.end339
                                        #   in Loop: Header=BB93_125 Depth=5
.LBB93_135:                             # %cond.end341
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB93_136:                             # %for.cond343
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_121 Depth=3
                                        #         Parent Loop BB93_123 Depth=4
                                        #           Parent Loop BB93_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB93_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB93_140
.LBB93_139:                             # %cond.false352
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_140:                             # %cond.end355
                                        #   in Loop: Header=BB93_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB93_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB93_146
.LBB93_142:                             # %cond.false360
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB93_145
.LBB93_144:                             # %cond.false366
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_145:                             # %cond.end369
                                        #   in Loop: Header=BB93_136 Depth=6
.LBB93_146:                             # %cond.end371
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB93_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB93_267
.LBB93_148:                             # %if.end381
                                        #   in Loop: Header=BB93_136 Depth=6
	jmp	.LBB93_149
.LBB93_149:                             # %for.inc382
                                        #   in Loop: Header=BB93_136 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_136
.LBB93_150:                             # %for.end384
                                        #   in Loop: Header=BB93_125 Depth=5
	jmp	.LBB93_151
.LBB93_151:                             # %for.inc385
                                        #   in Loop: Header=BB93_125 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_125
.LBB93_152:                             # %for.end387
                                        #   in Loop: Header=BB93_123 Depth=4
	jmp	.LBB93_153
.LBB93_153:                             # %for.inc388
                                        #   in Loop: Header=BB93_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_123
.LBB93_154:                             # %for.end390
                                        #   in Loop: Header=BB93_121 Depth=3
	jmp	.LBB93_155
.LBB93_155:                             # %for.inc391
                                        #   in Loop: Header=BB93_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_121
.LBB93_156:                             # %for.end393
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_259
.LBB93_157:                             # %if.else394
                                        #   in Loop: Header=BB93_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB93_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB93_19 Depth=2
	movl	$0, -12(%rbp)
.LBB93_159:                             # %for.cond398
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_161 Depth 4
                                        #           Child Loop BB93_163 Depth 5
                                        #             Child Loop BB93_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB93_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB93_159 Depth=3
	movl	$0, -16(%rbp)
.LBB93_161:                             # %for.cond402
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_163 Depth 5
                                        #             Child Loop BB93_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB93_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB93_161 Depth=4
	movl	$-2, -24(%rbp)
.LBB93_163:                             # %for.cond406
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_159 Depth=3
                                        #         Parent Loop BB93_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB93_174 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB93_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB93_167
.LBB93_166:                             # %cond.false415
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_167:                             # %cond.end418
                                        #   in Loop: Header=BB93_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB93_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB93_173
.LBB93_169:                             # %cond.false423
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB93_172
.LBB93_171:                             # %cond.false429
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_172:                             # %cond.end432
                                        #   in Loop: Header=BB93_163 Depth=5
.LBB93_173:                             # %cond.end434
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB93_174:                             # %for.cond436
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_159 Depth=3
                                        #         Parent Loop BB93_161 Depth=4
                                        #           Parent Loop BB93_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB93_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB93_178
.LBB93_177:                             # %cond.false445
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_178:                             # %cond.end448
                                        #   in Loop: Header=BB93_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB93_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB93_184
.LBB93_180:                             # %cond.false453
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB93_183
.LBB93_182:                             # %cond.false459
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_183:                             # %cond.end462
                                        #   in Loop: Header=BB93_174 Depth=6
.LBB93_184:                             # %cond.end464
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB93_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB93_267
.LBB93_186:                             # %if.end474
                                        #   in Loop: Header=BB93_174 Depth=6
	jmp	.LBB93_187
.LBB93_187:                             # %for.inc475
                                        #   in Loop: Header=BB93_174 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_174
.LBB93_188:                             # %for.end477
                                        #   in Loop: Header=BB93_163 Depth=5
	jmp	.LBB93_189
.LBB93_189:                             # %for.inc478
                                        #   in Loop: Header=BB93_163 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_163
.LBB93_190:                             # %for.end480
                                        #   in Loop: Header=BB93_161 Depth=4
	jmp	.LBB93_191
.LBB93_191:                             # %for.inc481
                                        #   in Loop: Header=BB93_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_161
.LBB93_192:                             # %for.end483
                                        #   in Loop: Header=BB93_159 Depth=3
	jmp	.LBB93_193
.LBB93_193:                             # %for.inc484
                                        #   in Loop: Header=BB93_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_159
.LBB93_194:                             # %for.end486
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_258
.LBB93_195:                             # %if.else487
                                        #   in Loop: Header=BB93_19 Depth=2
	movl	$0, -12(%rbp)
.LBB93_196:                             # %for.cond488
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_198 Depth 4
                                        #           Child Loop BB93_212 Depth 5
                                        #           Child Loop BB93_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB93_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB93_196 Depth=3
	movl	$0, -16(%rbp)
.LBB93_198:                             # %for.cond492
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_212 Depth 5
                                        #           Child Loop BB93_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB93_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB93_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB93_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB93_202
.LBB93_201:                             # %cond.false500
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB93_202:                             # %cond.end503
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB93_205
.LBB93_204:                             # %cond.false508
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-48(%rbp), %eax
.LBB93_205:                             # %cond.end509
                                        #   in Loop: Header=BB93_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB93_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB93_211
.LBB93_207:                             # %cond.false514
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB93_210
.LBB93_209:                             # %cond.false518
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-48(%rbp), %eax
.LBB93_210:                             # %cond.end519
                                        #   in Loop: Header=BB93_198 Depth=4
.LBB93_211:                             # %cond.end521
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB93_212:                             # %for.cond523
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_196 Depth=3
                                        #         Parent Loop BB93_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB93_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB93_216
.LBB93_215:                             # %cond.false532
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_216:                             # %cond.end535
                                        #   in Loop: Header=BB93_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB93_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB93_222
.LBB93_218:                             # %cond.false540
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB93_221
.LBB93_220:                             # %cond.false546
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB93_221:                             # %cond.end549
                                        #   in Loop: Header=BB93_212 Depth=5
.LBB93_222:                             # %cond.end551
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB93_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB93_267
.LBB93_224:                             # %if.end561
                                        #   in Loop: Header=BB93_212 Depth=5
	jmp	.LBB93_225
.LBB93_225:                             # %for.inc562
                                        #   in Loop: Header=BB93_212 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_212
.LBB93_226:                             # %for.end564
                                        #   in Loop: Header=BB93_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB93_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB93_229
.LBB93_228:                             # %cond.false569
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB93_229:                             # %cond.end572
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB93_232
.LBB93_231:                             # %cond.false577
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-44(%rbp), %eax
.LBB93_232:                             # %cond.end578
                                        #   in Loop: Header=BB93_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB93_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB93_238
.LBB93_234:                             # %cond.false583
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB93_237
.LBB93_236:                             # %cond.false587
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-44(%rbp), %eax
.LBB93_237:                             # %cond.end588
                                        #   in Loop: Header=BB93_198 Depth=4
.LBB93_238:                             # %cond.end590
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB93_239:                             # %for.cond592
                                        #   Parent Loop BB93_17 Depth=1
                                        #     Parent Loop BB93_19 Depth=2
                                        #       Parent Loop BB93_196 Depth=3
                                        #         Parent Loop BB93_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB93_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB93_243
.LBB93_242:                             # %cond.false601
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_243:                             # %cond.end604
                                        #   in Loop: Header=BB93_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB93_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB93_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB93_249
.LBB93_245:                             # %cond.false609
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB93_248
.LBB93_247:                             # %cond.false615
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB93_248:                             # %cond.end618
                                        #   in Loop: Header=BB93_239 Depth=5
.LBB93_249:                             # %cond.end620
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB93_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB93_267
.LBB93_251:                             # %if.end630
                                        #   in Loop: Header=BB93_239 Depth=5
	jmp	.LBB93_252
.LBB93_252:                             # %for.inc631
                                        #   in Loop: Header=BB93_239 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_239
.LBB93_253:                             # %for.end633
                                        #   in Loop: Header=BB93_198 Depth=4
	jmp	.LBB93_254
.LBB93_254:                             # %for.inc634
                                        #   in Loop: Header=BB93_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_198
.LBB93_255:                             # %for.end636
                                        #   in Loop: Header=BB93_196 Depth=3
	jmp	.LBB93_256
.LBB93_256:                             # %for.inc637
                                        #   in Loop: Header=BB93_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_196
.LBB93_257:                             # %for.end639
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_258
.LBB93_258:                             # %if.end640
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_259
.LBB93_259:                             # %if.end641
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_260
.LBB93_260:                             # %if.end642
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_261
.LBB93_261:                             # %if.end643
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_262
.LBB93_262:                             # %if.end644
                                        #   in Loop: Header=BB93_19 Depth=2
	jmp	.LBB93_263
.LBB93_263:                             # %for.inc645
                                        #   in Loop: Header=BB93_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB93_19
.LBB93_264:                             # %for.end647
                                        #   in Loop: Header=BB93_17 Depth=1
	jmp	.LBB93_265
.LBB93_265:                             # %for.inc648
                                        #   in Loop: Header=BB93_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB93_17
.LBB93_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB93_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$1348829652, -108(%rbp) # imm = 0x506581D4
	jne	.LBB93_269
.LBB93_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_268
.Lfunc_end93:
	.size	CheckReliabilityOfRef.64, .Lfunc_end93-CheckReliabilityOfRef.64
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.65    # -- Begin function RestoreMVBlock8x8.65
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.65,@function
RestoreMVBlock8x8.65:                   # @RestoreMVBlock8x8.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1663463963, -68(%rbp)  # imm = 0x6326721B
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB94_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB94_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB94_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB94_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_5:                               # %for.cond7
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB94_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB94_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_5
.LBB94_8:                               # %for.end
                                        #   in Loop: Header=BB94_3 Depth=1
	jmp	.LBB94_9
.LBB94_9:                               # %for.inc76
                                        #   in Loop: Header=BB94_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_3
.LBB94_10:                              # %for.end78
	jmp	.LBB94_11
.LBB94_11:                              # %if.end
	jmp	.LBB94_46
.LBB94_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB94_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB94_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_16:                              # %for.cond84
                                        #   Parent Loop BB94_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB94_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB94_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_16
.LBB94_19:                              # %for.end161
                                        #   in Loop: Header=BB94_14 Depth=1
	jmp	.LBB94_20
.LBB94_20:                              # %for.inc162
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_14
.LBB94_21:                              # %for.end164
	jmp	.LBB94_45
.LBB94_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB94_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB94_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB94_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_26:                              # %for.cond171
                                        #   Parent Loop BB94_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB94_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB94_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_26
.LBB94_29:                              # %for.end248
                                        #   in Loop: Header=BB94_24 Depth=1
	jmp	.LBB94_30
.LBB94_30:                              # %for.inc249
                                        #   in Loop: Header=BB94_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_24
.LBB94_31:                              # %for.end251
	jmp	.LBB94_44
.LBB94_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB94_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB94_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB94_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_36:                              # %for.cond258
                                        #   Parent Loop BB94_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB94_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB94_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_36
.LBB94_39:                              # %for.end407
                                        #   in Loop: Header=BB94_34 Depth=1
	jmp	.LBB94_40
.LBB94_40:                              # %for.inc408
                                        #   in Loop: Header=BB94_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_34
.LBB94_41:                              # %for.end410
	jmp	.LBB94_43
.LBB94_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB94_43:                              # %if.end412
	jmp	.LBB94_44
.LBB94_44:                              # %if.end413
	jmp	.LBB94_45
.LBB94_45:                              # %if.end414
	jmp	.LBB94_46
.LBB94_46:                              # %if.end415
	cmpl	$1663463963, -68(%rbp)  # imm = 0x6326721B
	jne	.LBB94_48
.LBB94_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_47
.Lfunc_end94:
	.size	RestoreMVBlock8x8.65, .Lfunc_end94-RestoreMVBlock8x8.65
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.66           # -- Begin function StoreMV8x8.66
	.p2align	4, 0x90
	.type	StoreMV8x8.66,@function
StoreMV8x8.66:                          # @StoreMV8x8.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1867678587, -16(%rbp)  # imm = 0x6F52837B
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB95_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_1
.LBB95_4:                               # %for.end
	cmpl	$1867678587, -16(%rbp)  # imm = 0x6F52837B
	jne	.LBB95_6
.LBB95_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_5
.Lfunc_end95:
	.size	StoreMV8x8.66, .Lfunc_end95-StoreMV8x8.66
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.67      # -- Begin function StoreMVBlock8x8.67
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.67,@function
StoreMVBlock8x8.67:                     # @StoreMVBlock8x8.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$70828296, -68(%rbp)    # imm = 0x438C108
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB96_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB96_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB96_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_5:                               # %for.cond7
                                        #   Parent Loop BB96_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB96_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB96_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_5
.LBB96_8:                               # %for.end
                                        #   in Loop: Header=BB96_3 Depth=1
	jmp	.LBB96_9
.LBB96_9:                               # %for.inc76
                                        #   in Loop: Header=BB96_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_3
.LBB96_10:                              # %for.end78
	jmp	.LBB96_11
.LBB96_11:                              # %if.end
	jmp	.LBB96_46
.LBB96_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB96_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB96_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_16:                              # %for.cond84
                                        #   Parent Loop BB96_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB96_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_16
.LBB96_19:                              # %for.end161
                                        #   in Loop: Header=BB96_14 Depth=1
	jmp	.LBB96_20
.LBB96_20:                              # %for.inc162
                                        #   in Loop: Header=BB96_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_14
.LBB96_21:                              # %for.end164
	jmp	.LBB96_45
.LBB96_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB96_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB96_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_26:                              # %for.cond171
                                        #   Parent Loop BB96_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB96_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB96_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_26
.LBB96_29:                              # %for.end248
                                        #   in Loop: Header=BB96_24 Depth=1
	jmp	.LBB96_30
.LBB96_30:                              # %for.inc249
                                        #   in Loop: Header=BB96_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_24
.LBB96_31:                              # %for.end251
	jmp	.LBB96_44
.LBB96_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB96_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB96_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB96_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_36:                              # %for.cond258
                                        #   Parent Loop BB96_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB96_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB96_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB96_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_36
.LBB96_39:                              # %for.end407
                                        #   in Loop: Header=BB96_34 Depth=1
	jmp	.LBB96_40
.LBB96_40:                              # %for.inc408
                                        #   in Loop: Header=BB96_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_34
.LBB96_41:                              # %for.end410
	jmp	.LBB96_43
.LBB96_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB96_43:                              # %if.end412
	jmp	.LBB96_44
.LBB96_44:                              # %if.end413
	jmp	.LBB96_45
.LBB96_45:                              # %if.end414
	jmp	.LBB96_46
.LBB96_46:                              # %if.end415
	cmpl	$70828296, -68(%rbp)    # imm = 0x438C108
	jne	.LBB96_48
.LBB96_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_47
.Lfunc_end96:
	.size	StoreMVBlock8x8.67, .Lfunc_end96-StoreMVBlock8x8.67
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.68
.LCPI97_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.68
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.68,@function
RDCost_for_8x8blocks.68:                # @RDCost_for_8x8blocks.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1904205276, -164(%rbp) # imm = 0x717FDDDC
	movq	%rdi, -136(%rbp)
	movq	%rsi, -192(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -128(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB97_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB97_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -120(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -120(%rbp)
	je	.LBB97_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB97_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI97_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -208(%rbp)
	jmp	.LBB97_139
.LBB97_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-192(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB97_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB97_8
.LBB97_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB97_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-128(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB97_19
.LBB97_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB97_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB97_13
.LBB97_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB97_14
.LBB97_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB97_14
.LBB97_14:                              # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB97_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB97_17
.LBB97_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB97_18
.LBB97_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB97_18
.LBB97_18:                              # %cond.end82
	movl	%eax, -172(%rbp)
	movq	-192(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-172(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-128(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB97_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB97_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB97_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_23 Depth 2
                                        #       Child Loop BB97_25 Depth 3
                                        #     Child Loop BB97_31 Depth 2
                                        #       Child Loop BB97_33 Depth 3
                                        #     Child Loop BB97_39 Depth 2
                                        #       Child Loop BB97_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB97_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB97_23:                              # %for.cond96
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB97_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB97_23 Depth=2
	movl	$0, -16(%rbp)
.LBB97_25:                              # %for.cond100
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB97_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB97_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB97_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_25
.LBB97_28:                              # %for.end
                                        #   in Loop: Header=BB97_23 Depth=2
	jmp	.LBB97_29
.LBB97_29:                              # %for.inc114
                                        #   in Loop: Header=BB97_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_23
.LBB97_30:                              # %for.end116
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB97_31:                              # %for.cond120
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB97_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB97_31 Depth=2
	movl	$0, -16(%rbp)
.LBB97_33:                              # %for.cond124
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB97_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB97_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB97_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_33
.LBB97_36:                              # %for.end152
                                        #   in Loop: Header=BB97_31 Depth=2
	jmp	.LBB97_37
.LBB97_37:                              # %for.inc153
                                        #   in Loop: Header=BB97_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_31
.LBB97_38:                              # %for.end155
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB97_39:                              # %for.cond159
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB97_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB97_39 Depth=2
	movl	$0, -16(%rbp)
.LBB97_41:                              # %for.cond163
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB97_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB97_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB97_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_41
.LBB97_44:                              # %for.end180
                                        #   in Loop: Header=BB97_39 Depth=2
	jmp	.LBB97_45
.LBB97_45:                              # %for.inc181
                                        #   in Loop: Header=BB97_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_39
.LBB97_46:                              # %for.end183
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_47
.LBB97_47:                              # %for.inc184
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB97_21
.LBB97_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB97_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_51:                              # %for.cond192
                                        #   Parent Loop BB97_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -116(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-116(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-116(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB97_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_55
.LBB97_54:                              # %cond.false229
                                        #   in Loop: Header=BB97_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB97_55:                              # %cond.end235
                                        #   in Loop: Header=BB97_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB97_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB97_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB97_61
.LBB97_57:                              # %cond.false241
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB97_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_60
.LBB97_59:                              # %cond.false250
                                        #   in Loop: Header=BB97_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB97_60:                              # %cond.end256
                                        #   in Loop: Header=BB97_51 Depth=2
.LBB97_61:                              # %cond.end258
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB97_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB97_64
.LBB97_63:                              # %cond.false276
                                        #   in Loop: Header=BB97_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB97_64:                              # %cond.end282
                                        #   in Loop: Header=BB97_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB97_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB97_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_70
.LBB97_66:                              # %cond.false288
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB97_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_69
.LBB97_68:                              # %cond.false297
                                        #   in Loop: Header=BB97_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB97_69:                              # %cond.end303
                                        #   in Loop: Header=BB97_51 Depth=2
.LBB97_70:                              # %cond.end305
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB97_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB97_73
.LBB97_72:                              # %cond.false325
                                        #   in Loop: Header=BB97_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB97_73:                              # %cond.end331
                                        #   in Loop: Header=BB97_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB97_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB97_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB97_79
.LBB97_75:                              # %cond.false337
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB97_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB97_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_78
.LBB97_77:                              # %cond.false346
                                        #   in Loop: Header=BB97_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB97_78:                              # %cond.end352
                                        #   in Loop: Header=BB97_51 Depth=2
.LBB97_79:                              # %cond.end354
                                        #   in Loop: Header=BB97_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB97_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_51
.LBB97_81:                              # %for.end369
                                        #   in Loop: Header=BB97_49 Depth=1
	jmp	.LBB97_82
.LBB97_82:                              # %for.inc370
                                        #   in Loop: Header=BB97_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_49
.LBB97_83:                              # %for.end372
	jmp	.LBB97_84
.LBB97_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB97_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB97_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB97_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB97_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB97_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB97_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_92 Depth 2
                                        #       Child Loop BB97_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB97_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB97_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_92:                              # %for.cond395
                                        #   Parent Loop BB97_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB97_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_94:                              # %for.cond403
                                        #   Parent Loop BB97_90 Depth=1
                                        #     Parent Loop BB97_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB97_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB97_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_94
.LBB97_97:                              # %for.end429
                                        #   in Loop: Header=BB97_92 Depth=2
	jmp	.LBB97_98
.LBB97_98:                              # %for.inc430
                                        #   in Loop: Header=BB97_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_92
.LBB97_99:                              # %for.end432
                                        #   in Loop: Header=BB97_90 Depth=1
	jmp	.LBB97_100
.LBB97_100:                             # %for.inc433
                                        #   in Loop: Header=BB97_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_90
.LBB97_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB97_113
.LBB97_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB97_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_105:                             # %for.cond447
                                        #   Parent Loop BB97_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB97_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB97_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB97_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB97_108:                             # %if.end524
                                        #   in Loop: Header=BB97_105 Depth=2
	jmp	.LBB97_109
.LBB97_109:                             # %for.inc525
                                        #   in Loop: Header=BB97_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_105
.LBB97_110:                             # %for.end527
                                        #   in Loop: Header=BB97_103 Depth=1
	jmp	.LBB97_111
.LBB97_111:                             # %for.inc528
                                        #   in Loop: Header=BB97_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_103
.LBB97_112:                             # %for.end530
	jmp	.LBB97_113
.LBB97_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_115
# %bb.114:                              # %if.then534
	movl	-124(%rbp), %edi
	movl	-160(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB97_116
.LBB97_115:                             # %if.else536
	movl	-124(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB97_116:                             # %if.end547
	cmpl	$0, -120(%rbp)
	jne	.LBB97_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB97_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB97_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB97_121
.LBB97_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB97_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB97_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB97_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB97_126
.LBB97_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB97_126:                             # %if.end583
	jmp	.LBB97_127
.LBB97_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB97_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB97_130
.LBB97_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB97_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB97_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB97_133
.LBB97_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB97_133:                             # %if.end612
	jmp	.LBB97_134
.LBB97_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB97_136
# %bb.135:                              # %if.then617
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB97_136:                             # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB97_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB97_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp)
.LBB97_139:                             # %return
	vmovsd	-208(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1904205276, -164(%rbp) # imm = 0x717FDDDC
	jne	.LBB97_141
.LBB97_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB97_140
.Lfunc_end97:
	.size	RDCost_for_8x8blocks.68, .Lfunc_end97-RDCost_for_8x8blocks.68
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.69 # -- Begin function Intra16x16_Mode_Decision.69
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.69,@function
Intra16x16_Mode_Decision.69:            # @Intra16x16_Mode_Decision.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1610519453, -56(%rbp)  # imm = 0x5FFE939D
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB98_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB98_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB98_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB98_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB98_4 Depth=1
	movl	$0, -8(%rbp)
.LBB98_6:                               # %for.cond4
                                        #   Parent Loop BB98_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB98_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB98_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB98_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_6
.LBB98_9:                               # %for.end
                                        #   in Loop: Header=BB98_4 Depth=1
	jmp	.LBB98_10
.LBB98_10:                              # %for.inc87
                                        #   in Loop: Header=BB98_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_4
.LBB98_11:                              # %for.end89
	jmp	.LBB98_12
.LBB98_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB98_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB98_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB98_14 Depth=1
	movl	$0, -8(%rbp)
.LBB98_16:                              # %for.cond99
                                        #   Parent Loop BB98_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB98_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB98_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB98_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_16
.LBB98_19:                              # %for.end123
                                        #   in Loop: Header=BB98_14 Depth=1
	jmp	.LBB98_20
.LBB98_20:                              # %for.inc124
                                        #   in Loop: Header=BB98_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_14
.LBB98_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB98_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB98_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB98_22 Depth=1
	movl	$0, -8(%rbp)
.LBB98_24:                              # %for.cond132
                                        #   Parent Loop BB98_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB98_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB98_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB98_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_24
.LBB98_27:                              # %for.end156
                                        #   in Loop: Header=BB98_22 Depth=1
	jmp	.LBB98_28
.LBB98_28:                              # %for.inc157
                                        #   in Loop: Header=BB98_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_22
.LBB98_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB98_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB98_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB98_30 Depth=1
	movl	$0, -8(%rbp)
.LBB98_32:                              # %for.cond165
                                        #   Parent Loop BB98_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB98_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB98_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB98_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_32
.LBB98_35:                              # %for.end180
                                        #   in Loop: Header=BB98_30 Depth=1
	jmp	.LBB98_36
.LBB98_36:                              # %for.inc181
                                        #   in Loop: Header=BB98_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_30
.LBB98_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB98_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB98_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB98_38 Depth=1
	movl	$0, -8(%rbp)
.LBB98_40:                              # %for.cond190
                                        #   Parent Loop BB98_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB98_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -28(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB98_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB98_44
.LBB98_43:                              # %cond.false
                                        #   in Loop: Header=BB98_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB98_44:                              # %cond.end
                                        #   in Loop: Header=BB98_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB98_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB98_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB98_50
.LBB98_46:                              # %cond.false246
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB98_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB98_49
.LBB98_48:                              # %cond.false260
                                        #   in Loop: Header=BB98_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB98_49:                              # %cond.end271
                                        #   in Loop: Header=BB98_40 Depth=2
.LBB98_50:                              # %cond.end273
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB98_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB98_53
.LBB98_52:                              # %cond.false295
                                        #   in Loop: Header=BB98_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB98_53:                              # %cond.end305
                                        #   in Loop: Header=BB98_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB98_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB98_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_59
.LBB98_55:                              # %cond.false311
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB98_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB98_58
.LBB98_57:                              # %cond.false324
                                        #   in Loop: Header=BB98_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB98_58:                              # %cond.end334
                                        #   in Loop: Header=BB98_40 Depth=2
.LBB98_59:                              # %cond.end336
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB98_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB98_62
.LBB98_61:                              # %cond.false359
                                        #   in Loop: Header=BB98_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB98_62:                              # %cond.end370
                                        #   in Loop: Header=BB98_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB98_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB98_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB98_68
.LBB98_64:                              # %cond.false376
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB98_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB98_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB98_67
.LBB98_66:                              # %cond.false390
                                        #   in Loop: Header=BB98_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB98_67:                              # %cond.end401
                                        #   in Loop: Header=BB98_40 Depth=2
.LBB98_68:                              # %cond.end403
                                        #   in Loop: Header=BB98_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB98_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_40
.LBB98_70:                              # %for.end416
                                        #   in Loop: Header=BB98_38 Depth=1
	jmp	.LBB98_71
.LBB98_71:                              # %for.inc417
                                        #   in Loop: Header=BB98_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_38
.LBB98_72:                              # %for.end419
	jmp	.LBB98_73
.LBB98_73:                              # %if.end420
	cmpl	$1610519453, -56(%rbp)  # imm = 0x5FFE939D
	jne	.LBB98_75
.LBB98_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_74
.Lfunc_end98:
	.size	Intra16x16_Mode_Decision.69, .Lfunc_end98-Intra16x16_Mode_Decision.69
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.70 # -- Begin function SetModesAndRefframeForBlocks.70
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.70,@function
SetModesAndRefframeForBlocks.70:        # @SetModesAndRefframeForBlocks.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$567733387, -40(%rbp)   # imm = 0x21D6EC8B
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB99_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB99_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB99_4
.LBB99_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB99_4
.LBB99_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB99_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB99_7
.LBB99_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB99_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB99_42
# %bb.8:                                # %if.end
	movq	.LJTI99_0(,%rax,8), %rax
	jmpq	*%rax
.LBB99_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB99_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB99_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB99_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB99_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB99_14
.LBB99_13:                              # %cond.false26
                                        #   in Loop: Header=BB99_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB99_14
.LBB99_14:                              # %cond.end27
                                        #   in Loop: Header=BB99_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB99_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_10
.LBB99_16:                              # %for.end
	jmp	.LBB99_43
.LBB99_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB99_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB99_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB99_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_18
.LBB99_21:                              # %for.end49
	jmp	.LBB99_43
.LBB99_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB99_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB99_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB99_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_23
.LBB99_26:                              # %for.end71
	jmp	.LBB99_43
.LBB99_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB99_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB99_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB99_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_28
.LBB99_31:                              # %for.end85
	jmp	.LBB99_43
.LBB99_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB99_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB99_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB99_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_33
.LBB99_36:                              # %for.end99
	jmp	.LBB99_43
.LBB99_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB99_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB99_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB99_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_38
.LBB99_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB99_43
.LBB99_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB99_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB99_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB99_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB99_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB99_70
.LBB99_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB99_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB99_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB99_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB99_49 Depth=1
	movl	$0, -4(%rbp)
.LBB99_51:                              # %for.cond131
                                        #   Parent Loop BB99_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB99_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB99_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB99_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB99_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB99_55
.LBB99_54:                              # %if.else174
                                        #   in Loop: Header=BB99_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB99_55:                              # %if.end195
                                        #   in Loop: Header=BB99_51 Depth=2
	jmp	.LBB99_56
.LBB99_56:                              # %for.inc196
                                        #   in Loop: Header=BB99_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_51
.LBB99_57:                              # %for.end198
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_58
.LBB99_58:                              # %for.inc199
                                        #   in Loop: Header=BB99_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_49
.LBB99_59:                              # %for.end201
	jmp	.LBB99_69
.LBB99_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB99_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB99_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB99_61 Depth=1
	movl	$0, -4(%rbp)
.LBB99_63:                              # %for.cond207
                                        #   Parent Loop BB99_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB99_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB99_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB99_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_63
.LBB99_66:                              # %for.end227
                                        #   in Loop: Header=BB99_61 Depth=1
	jmp	.LBB99_67
.LBB99_67:                              # %for.inc228
                                        #   in Loop: Header=BB99_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_61
.LBB99_68:                              # %for.end230
	jmp	.LBB99_69
.LBB99_69:                              # %if.end231
	jmp	.LBB99_127
.LBB99_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB99_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB99_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB99_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB99_72 Depth=1
	movl	$0, -4(%rbp)
.LBB99_74:                              # %for.cond239
                                        #   Parent Loop BB99_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB99_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB99_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB99_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB99_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB99_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB99_105
.LBB99_78:                              # %if.else298
                                        #   in Loop: Header=BB99_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB99_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB99_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB99_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB99_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB99_90
.LBB99_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB99_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB99_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB99_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB99_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB99_90
.LBB99_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB99_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB99_90
.LBB99_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB99_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB99_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB99_90
.LBB99_89:                              # %if.then356
                                        #   in Loop: Header=BB99_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB99_104
.LBB99_90:                              # %if.else377
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB99_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB99_96
.LBB99_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB99_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB99_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB99_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB99_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB99_96
.LBB99_95:                              # %cond.true404
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB99_97
.LBB99_96:                              # %cond.false410
                                        #   in Loop: Header=BB99_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB99_97
.LBB99_97:                              # %cond.end411
                                        #   in Loop: Header=BB99_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB99_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB99_102
.LBB99_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB99_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB99_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB99_102
.LBB99_101:                             # %cond.true448
                                        #   in Loop: Header=BB99_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB99_103
.LBB99_102:                             # %cond.false454
                                        #   in Loop: Header=BB99_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB99_103
.LBB99_103:                             # %cond.end455
                                        #   in Loop: Header=BB99_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB99_104:                             # %if.end468
                                        #   in Loop: Header=BB99_74 Depth=2
	jmp	.LBB99_105
.LBB99_105:                             # %if.end469
                                        #   in Loop: Header=BB99_74 Depth=2
	jmp	.LBB99_106
.LBB99_106:                             # %for.inc470
                                        #   in Loop: Header=BB99_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_74
.LBB99_107:                             # %for.end472
                                        #   in Loop: Header=BB99_72 Depth=1
	jmp	.LBB99_108
.LBB99_108:                             # %for.inc473
                                        #   in Loop: Header=BB99_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_72
.LBB99_109:                             # %for.end475
	jmp	.LBB99_126
.LBB99_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB99_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB99_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB99_111 Depth=1
	movl	$0, -4(%rbp)
.LBB99_113:                             # %for.cond481
                                        #   Parent Loop BB99_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB99_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB99_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB99_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB99_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB99_120
.LBB99_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB99_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB99_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB99_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB99_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB99_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB99_120
.LBB99_119:                             # %cond.true519
                                        #   in Loop: Header=BB99_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB99_121
.LBB99_120:                             # %cond.false525
                                        #   in Loop: Header=BB99_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB99_121
.LBB99_121:                             # %cond.end526
                                        #   in Loop: Header=BB99_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB99_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_113
.LBB99_123:                             # %for.end541
                                        #   in Loop: Header=BB99_111 Depth=1
	jmp	.LBB99_124
.LBB99_124:                             # %for.inc542
                                        #   in Loop: Header=BB99_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_111
.LBB99_125:                             # %for.end544
	jmp	.LBB99_126
.LBB99_126:                             # %if.end545
	jmp	.LBB99_127
.LBB99_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB99_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB99_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB99_128 Depth=1
	movl	$0, -4(%rbp)
.LBB99_130:                             # %for.cond551
                                        #   Parent Loop BB99_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB99_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB99_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB99_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB99_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB99_134
.LBB99_133:                             # %cond.false584
                                        #   in Loop: Header=BB99_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB99_134
.LBB99_134:                             # %cond.end585
                                        #   in Loop: Header=BB99_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB99_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_130
.LBB99_136:                             # %for.end598
                                        #   in Loop: Header=BB99_128 Depth=1
	jmp	.LBB99_137
.LBB99_137:                             # %for.inc599
                                        #   in Loop: Header=BB99_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_128
.LBB99_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB99_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB99_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB99_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB99_140 Depth=1
	movl	$0, -4(%rbp)
.LBB99_142:                             # %for.cond608
                                        #   Parent Loop BB99_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB99_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB99_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB99_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB99_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB99_146
.LBB99_145:                             # %cond.false642
                                        #   in Loop: Header=BB99_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB99_146
.LBB99_146:                             # %cond.end643
                                        #   in Loop: Header=BB99_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB99_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_142
.LBB99_148:                             # %for.end657
                                        #   in Loop: Header=BB99_140 Depth=1
	jmp	.LBB99_149
.LBB99_149:                             # %for.inc658
                                        #   in Loop: Header=BB99_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_140
.LBB99_150:                             # %for.end660
	jmp	.LBB99_151
.LBB99_151:                             # %if.end661
	cmpl	$567733387, -40(%rbp)   # imm = 0x21D6EC8B
	jne	.LBB99_153
.LBB99_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_152
.Lfunc_end99:
	.size	SetModesAndRefframeForBlocks.70, .Lfunc_end99-SetModesAndRefframeForBlocks.70
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI99_0:
	.quad	.LBB99_9
	.quad	.LBB99_17
	.quad	.LBB99_17
	.quad	.LBB99_17
	.quad	.LBB99_42
	.quad	.LBB99_42
	.quad	.LBB99_42
	.quad	.LBB99_42
	.quad	.LBB99_22
	.quad	.LBB99_27
	.quad	.LBB99_32
	.quad	.LBB99_42
	.quad	.LBB99_42
	.quad	.LBB99_37
                                        # -- End function
	.text
	.globl	StoreMV8x8.71           # -- Begin function StoreMV8x8.71
	.p2align	4, 0x90
	.type	StoreMV8x8.71,@function
StoreMV8x8.71:                          # @StoreMV8x8.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1086681376, -8(%rbp)   # imm = 0x40C57120
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB100_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_1
.LBB100_4:                              # %for.end
	cmpl	$1086681376, -8(%rbp)   # imm = 0x40C57120
	jne	.LBB100_6
.LBB100_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_5
.Lfunc_end100:
	.size	StoreMV8x8.71, .Lfunc_end100-StoreMV8x8.71
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.72           # -- Begin function StoreMV8x8.72
	.p2align	4, 0x90
	.type	StoreMV8x8.72,@function
StoreMV8x8.72:                          # @StoreMV8x8.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1908126242, -16(%rbp)  # imm = 0x71BBB222
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB101_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_1
.LBB101_4:                              # %for.end
	cmpl	$1908126242, -16(%rbp)  # imm = 0x71BBB222
	jne	.LBB101_6
.LBB101_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_5
.Lfunc_end101:
	.size	StoreMV8x8.72, .Lfunc_end101-StoreMV8x8.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.73
.LCPI102_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI102_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.73
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.73,@function
Mode_Decision_for_4x4IntraBlocks.73:    # @Mode_Decision_for_4x4IntraBlocks.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI102_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1053005265, -176(%rbp) # imm = 0x3EC395D1
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -164(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -172(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB102_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB102_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_4
.LBB102_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB102_4
.LBB102_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB102_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_7
.LBB102_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB102_7
.LBB102_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB102_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB102_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_11
.LBB102_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_11
.LBB102_11:                             # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB102_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_14
.LBB102_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_14
.LBB102_14:                             # %cond.end55
	movl	%eax, -116(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB102_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -116(%rbp)
	jge	.LBB102_17
.LBB102_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB102_21
.LBB102_17:                             # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB102_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB102_20
.LBB102_19:                             # %cond.false62
	movl	-116(%rbp), %eax
.LBB102_20:                             # %cond.end63
.LBB102_21:                             # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-184(%rbp), %rdx
	leaq	-180(%rbp), %rcx
	leaq	-168(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB102_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_49 Depth 2
                                        #       Child Loop BB102_51 Depth 3
                                        #     Child Loop BB102_64 Depth 2
                                        #       Child Loop BB102_66 Depth 3
                                        #     Child Loop BB102_73 Depth 2
                                        #       Child Loop BB102_75 Depth 3
                                        #     Child Loop BB102_81 Depth 2
                                        #       Child Loop BB102_83 Depth 3
                                        #     Child Loop BB102_91 Depth 2
                                        #       Child Loop BB102_93 Depth 3
                                        #     Child Loop BB102_99 Depth 2
                                        #       Child Loop BB102_101 Depth 3
                                        #     Child Loop BB102_107 Depth 2
                                        #       Child Loop BB102_109 Depth 3
                                        #     Child Loop BB102_115 Depth 2
                                        #       Child Loop BB102_117 Depth 3
                                        #     Child Loop BB102_123 Depth 2
                                        #       Child Loop BB102_125 Depth 3
                                        #     Child Loop BB102_131 Depth 2
                                        #       Child Loop BB102_133 Depth 3
                                        #     Child Loop BB102_166 Depth 2
                                        #       Child Loop BB102_168 Depth 3
                                        #     Child Loop BB102_175 Depth 2
                                        #       Child Loop BB102_177 Depth 3
                                        #     Child Loop BB102_183 Depth 2
                                        #       Child Loop BB102_185 Depth 3
                                        #     Child Loop BB102_191 Depth 2
                                        #       Child Loop BB102_193 Depth 3
                                        #     Child Loop BB102_199 Depth 2
                                        #       Child Loop BB102_201 Depth 3
                                        #         Child Loop BB102_203 Depth 4
                                        #     Child Loop BB102_211 Depth 2
                                        #       Child Loop BB102_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB102_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB102_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB102_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB102_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB102_28
.LBB102_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$0, -180(%rbp)
	movb	$1, %al
	jne	.LBB102_32
.LBB102_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB102_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB102_31
.LBB102_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB102_32
.LBB102_31:                             # %lor.rhs
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$0, -168(%rbp)
	setne	%al
.LBB102_32:                             # %lor.end
                                        #   in Loop: Header=BB102_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB102_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB102_46
.LBB102_34:                             # %if.then86
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB102_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB102_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB102_38
.LBB102_37:                             # %if.then92
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_223
.LBB102_38:                             # %if.end93
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB102_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB102_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB102_42
.LBB102_41:                             # %if.then99
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_223
.LBB102_42:                             # %if.end100
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB102_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB102_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_223
.LBB102_45:                             # %if.end105
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_46
.LBB102_46:                             # %if.end106
                                        #   in Loop: Header=BB102_22 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB102_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -112(%rbp)
.LBB102_49:                             # %for.cond111
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB102_49 Depth=2
	movl	$0, -12(%rbp)
.LBB102_51:                             # %for.cond114
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB102_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB102_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB102_51
.LBB102_54:                             # %for.end
                                        #   in Loop: Header=BB102_49 Depth=2
	jmp	.LBB102_55
.LBB102_55:                             # %for.inc133
                                        #   in Loop: Header=BB102_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_49
.LBB102_56:                             # %for.end135
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB102_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB102_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_59
.LBB102_58:                             # %cond.false139
                                        #   in Loop: Header=BB102_22 Depth=1
	vmovsd	.LCPI102_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_59:                             # %cond.end142
                                        #   in Loop: Header=BB102_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB102_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB102_61:                             # %if.end148
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_221
.LBB102_62:                             # %if.else
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB102_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_64:                             # %for.cond151
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB102_64 Depth=2
	movl	$0, -12(%rbp)
.LBB102_66:                             # %for.cond155
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB102_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB102_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_66
.LBB102_69:                             # %for.end194
                                        #   in Loop: Header=BB102_64 Depth=2
	jmp	.LBB102_70
.LBB102_70:                             # %for.inc195
                                        #   in Loop: Header=BB102_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_64
.LBB102_71:                             # %for.end197
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_73:                             # %for.cond202
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB102_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB102_73 Depth=2
	movl	$0, -12(%rbp)
.LBB102_75:                             # %for.cond206
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB102_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB102_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB102_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_75
.LBB102_78:                             # %for.end224
                                        #   in Loop: Header=BB102_73 Depth=2
	jmp	.LBB102_79
.LBB102_79:                             # %for.inc225
                                        #   in Loop: Header=BB102_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_73
.LBB102_80:                             # %for.end227
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -20(%rbp)
.LBB102_81:                             # %for.cond228
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB102_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB102_81 Depth=2
	movl	$0, -24(%rbp)
.LBB102_83:                             # %for.cond232
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB102_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB102_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB102_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_83
.LBB102_86:                             # %for.end249
                                        #   in Loop: Header=BB102_81 Depth=2
	jmp	.LBB102_87
.LBB102_87:                             # %for.inc250
                                        #   in Loop: Header=BB102_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_81
.LBB102_88:                             # %for.end252
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_89:                             # %if.end253
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB102_220
.LBB102_90:                             # %if.else254
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_91:                             # %for.cond255
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB102_91 Depth=2
	movl	$0, -12(%rbp)
.LBB102_93:                             # %for.cond259
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB102_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB102_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_93
.LBB102_96:                             # %for.end345
                                        #   in Loop: Header=BB102_91 Depth=2
	jmp	.LBB102_97
.LBB102_97:                             # %for.inc346
                                        #   in Loop: Header=BB102_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_91
.LBB102_98:                             # %for.end348
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_99:                             # %for.cond349
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB102_99 Depth=2
	movl	$0, -12(%rbp)
.LBB102_101:                            # %for.cond353
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB102_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB102_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_101
.LBB102_104:                            # %for.end368
                                        #   in Loop: Header=BB102_99 Depth=2
	jmp	.LBB102_105
.LBB102_105:                            # %for.inc369
                                        #   in Loop: Header=BB102_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_99
.LBB102_106:                            # %for.end371
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB102_107:                            # %for.cond374
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB102_107 Depth=2
	movl	$0, -12(%rbp)
.LBB102_109:                            # %for.cond378
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB102_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB102_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_109
.LBB102_112:                            # %for.end402
                                        #   in Loop: Header=BB102_107 Depth=2
	jmp	.LBB102_113
.LBB102_113:                            # %for.inc403
                                        #   in Loop: Header=BB102_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_107
.LBB102_114:                            # %for.end405
                                        #   in Loop: Header=BB102_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB102_115:                            # %for.cond409
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB102_115 Depth=2
	movl	$0, -12(%rbp)
.LBB102_117:                            # %for.cond413
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB102_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB102_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_117
.LBB102_120:                            # %for.end437
                                        #   in Loop: Header=BB102_115 Depth=2
	jmp	.LBB102_121
.LBB102_121:                            # %for.inc438
                                        #   in Loop: Header=BB102_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_115
.LBB102_122:                            # %for.end440
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB102_123:                            # %for.cond444
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB102_123 Depth=2
	movl	$0, -12(%rbp)
.LBB102_125:                            # %for.cond448
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB102_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB102_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_125
.LBB102_128:                            # %for.end463
                                        #   in Loop: Header=BB102_123 Depth=2
	jmp	.LBB102_129
.LBB102_129:                            # %for.inc464
                                        #   in Loop: Header=BB102_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_123
.LBB102_130:                            # %for.end466
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_131:                            # %for.cond467
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB102_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB102_131 Depth=2
	movl	$0, -12(%rbp)
.LBB102_133:                            # %for.cond471
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB102_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB102_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_137
.LBB102_136:                            # %cond.false516
                                        #   in Loop: Header=BB102_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB102_137:                            # %cond.end529
                                        #   in Loop: Header=BB102_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB102_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB102_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB102_143
.LBB102_139:                            # %cond.false535
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_142
.LBB102_141:                            # %cond.false551
                                        #   in Loop: Header=BB102_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_142:                            # %cond.end564
                                        #   in Loop: Header=BB102_133 Depth=3
.LBB102_143:                            # %cond.end566
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB102_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_146
.LBB102_145:                            # %cond.false588
                                        #   in Loop: Header=BB102_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB102_146:                            # %cond.end598
                                        #   in Loop: Header=BB102_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB102_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB102_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_152
.LBB102_148:                            # %cond.false604
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_151
.LBB102_150:                            # %cond.false617
                                        #   in Loop: Header=BB102_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_151:                            # %cond.end627
                                        #   in Loop: Header=BB102_133 Depth=3
.LBB102_152:                            # %cond.end629
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB102_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_155
.LBB102_154:                            # %cond.false655
                                        #   in Loop: Header=BB102_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB102_155:                            # %cond.end668
                                        #   in Loop: Header=BB102_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB102_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB102_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB102_161
.LBB102_157:                            # %cond.false674
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB102_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_160
.LBB102_159:                            # %cond.false690
                                        #   in Loop: Header=BB102_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_160:                            # %cond.end703
                                        #   in Loop: Header=BB102_133 Depth=3
.LBB102_161:                            # %cond.end705
                                        #   in Loop: Header=BB102_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB102_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_133
.LBB102_163:                            # %for.end718
                                        #   in Loop: Header=BB102_131 Depth=2
	jmp	.LBB102_164
.LBB102_164:                            # %for.inc719
                                        #   in Loop: Header=BB102_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_131
.LBB102_165:                            # %for.end721
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB102_166:                            # %for.cond722
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB102_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB102_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_168:                            # %for.cond726
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB102_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB102_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_168
.LBB102_171:                            # %for.end831
                                        #   in Loop: Header=BB102_166 Depth=2
	jmp	.LBB102_172
.LBB102_172:                            # %for.inc832
                                        #   in Loop: Header=BB102_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_166
.LBB102_173:                            # %for.end834
                                        #   in Loop: Header=BB102_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_175:                            # %for.cond842
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB102_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB102_175 Depth=2
	movl	$0, -12(%rbp)
.LBB102_177:                            # %for.cond846
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB102_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB102_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB102_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_177
.LBB102_180:                            # %for.end865
                                        #   in Loop: Header=BB102_175 Depth=2
	jmp	.LBB102_181
.LBB102_181:                            # %for.inc866
                                        #   in Loop: Header=BB102_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_175
.LBB102_182:                            # %for.end868
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_183:                            # %for.cond869
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB102_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB102_183 Depth=2
	movl	$0, -12(%rbp)
.LBB102_185:                            # %for.cond873
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB102_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB102_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB102_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_185
.LBB102_188:                            # %for.end893
                                        #   in Loop: Header=BB102_183 Depth=2
	jmp	.LBB102_189
.LBB102_189:                            # %for.inc894
                                        #   in Loop: Header=BB102_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_183
.LBB102_190:                            # %for.end896
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -16(%rbp)
.LBB102_191:                            # %for.cond897
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB102_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB102_191 Depth=2
	movl	$0, -12(%rbp)
.LBB102_193:                            # %for.cond901
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB102_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB102_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB102_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_193
.LBB102_196:                            # %for.end921
                                        #   in Loop: Header=BB102_191 Depth=2
	jmp	.LBB102_197
.LBB102_197:                            # %for.inc922
                                        #   in Loop: Header=BB102_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_191
.LBB102_198:                            # %for.end924
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -12(%rbp)
.LBB102_199:                            # %for.cond925
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_201 Depth 3
                                        #         Child Loop BB102_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB102_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB102_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB102_201:                            # %for.cond985
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB102_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB102_201 Depth=3
	movl	$0, -24(%rbp)
.LBB102_203:                            # %for.cond989
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_199 Depth=2
                                        #       Parent Loop BB102_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB102_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB102_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB102_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_203
.LBB102_206:                            # %for.end1011
                                        #   in Loop: Header=BB102_201 Depth=3
	jmp	.LBB102_207
.LBB102_207:                            # %for.inc1012
                                        #   in Loop: Header=BB102_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_201
.LBB102_208:                            # %for.end1014
                                        #   in Loop: Header=BB102_199 Depth=2
	jmp	.LBB102_209
.LBB102_209:                            # %for.inc1015
                                        #   in Loop: Header=BB102_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_199
.LBB102_210:                            # %for.end1017
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	$0, -20(%rbp)
.LBB102_211:                            # %for.cond1018
                                        #   Parent Loop BB102_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB102_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB102_211 Depth=2
	movl	$0, -24(%rbp)
.LBB102_213:                            # %for.cond1022
                                        #   Parent Loop BB102_22 Depth=1
                                        #     Parent Loop BB102_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB102_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB102_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB102_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_213
.LBB102_216:                            # %for.end1040
                                        #   in Loop: Header=BB102_211 Depth=2
	jmp	.LBB102_217
.LBB102_217:                            # %for.inc1041
                                        #   in Loop: Header=BB102_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_211
.LBB102_218:                            # %for.end1043
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_219:                            # %if.end1044
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_220
.LBB102_220:                            # %if.end1045
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_221
.LBB102_221:                            # %if.end1046
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_222
.LBB102_222:                            # %if.end1047
                                        #   in Loop: Header=BB102_22 Depth=1
	jmp	.LBB102_223
.LBB102_223:                            # %for.inc1048
                                        #   in Loop: Header=BB102_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_22
.LBB102_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-164(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-172(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB102_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_230
.LBB102_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB102_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB102_229
.LBB102_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB102_229:                            # %cond.end1065
.LBB102_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB102_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB102_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB102_233 Depth=1
	movl	$0, -12(%rbp)
.LBB102_235:                            # %for.cond1087
                                        #   Parent Loop BB102_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB102_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB102_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB102_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_235
.LBB102_238:                            # %for.end1128
                                        #   in Loop: Header=BB102_233 Depth=1
	jmp	.LBB102_239
.LBB102_239:                            # %for.inc1129
                                        #   in Loop: Header=BB102_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_233
.LBB102_240:                            # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-156(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	jmp	.LBB102_317
.LBB102_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB102_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB102_242 Depth=1
	movl	$0, -12(%rbp)
.LBB102_244:                            # %for.cond1138
                                        #   Parent Loop BB102_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB102_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB102_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB102_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_244
.LBB102_247:                            # %for.end1226
                                        #   in Loop: Header=BB102_242 Depth=1
	jmp	.LBB102_248
.LBB102_248:                            # %for.inc1227
                                        #   in Loop: Header=BB102_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_242
.LBB102_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB102_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB102_250 Depth=1
	movl	$0, -12(%rbp)
.LBB102_252:                            # %for.cond1234
                                        #   Parent Loop BB102_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB102_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB102_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB102_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_252
.LBB102_255:                            # %for.end1249
                                        #   in Loop: Header=BB102_250 Depth=1
	jmp	.LBB102_256
.LBB102_256:                            # %for.inc1250
                                        #   in Loop: Header=BB102_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_250
.LBB102_257:                            # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-156(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB102_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB102_258 Depth=1
	movl	$0, -12(%rbp)
.LBB102_260:                            # %for.cond1258
                                        #   Parent Loop BB102_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB102_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB102_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB102_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_260
.LBB102_263:                            # %for.end1282
                                        #   in Loop: Header=BB102_258 Depth=1
	jmp	.LBB102_264
.LBB102_264:                            # %for.inc1283
                                        #   in Loop: Header=BB102_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_258
.LBB102_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB102_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB102_266 Depth=1
	movl	$0, -12(%rbp)
.LBB102_268:                            # %for.cond1328
                                        #   Parent Loop BB102_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB102_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB102_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB102_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_268
.LBB102_271:                            # %for.end1352
                                        #   in Loop: Header=BB102_266 Depth=1
	jmp	.LBB102_272
.LBB102_272:                            # %for.inc1353
                                        #   in Loop: Header=BB102_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_266
.LBB102_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB102_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB102_274 Depth=1
	movl	$0, -12(%rbp)
.LBB102_276:                            # %for.cond1398
                                        #   Parent Loop BB102_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB102_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB102_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB102_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_276
.LBB102_279:                            # %for.end1413
                                        #   in Loop: Header=BB102_274 Depth=1
	jmp	.LBB102_280
.LBB102_280:                            # %for.inc1414
                                        #   in Loop: Header=BB102_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_274
.LBB102_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB102_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB102_282 Depth=1
	movl	$0, -12(%rbp)
.LBB102_284:                            # %for.cond1421
                                        #   Parent Loop BB102_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB102_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB102_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_288
.LBB102_287:                            # %cond.false1467
                                        #   in Loop: Header=BB102_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB102_288:                            # %cond.end1480
                                        #   in Loop: Header=BB102_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB102_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB102_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB102_294
.LBB102_290:                            # %cond.false1486
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_293
.LBB102_292:                            # %cond.false1502
                                        #   in Loop: Header=BB102_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_293:                            # %cond.end1515
                                        #   in Loop: Header=BB102_284 Depth=2
.LBB102_294:                            # %cond.end1517
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB102_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB102_297
.LBB102_296:                            # %cond.false1541
                                        #   in Loop: Header=BB102_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB102_297:                            # %cond.end1551
                                        #   in Loop: Header=BB102_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB102_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB102_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_303
.LBB102_299:                            # %cond.false1557
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_302
.LBB102_301:                            # %cond.false1570
                                        #   in Loop: Header=BB102_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_302:                            # %cond.end1580
                                        #   in Loop: Header=BB102_284 Depth=2
.LBB102_303:                            # %cond.end1582
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB102_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB102_306
.LBB102_305:                            # %cond.false1608
                                        #   in Loop: Header=BB102_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB102_306:                            # %cond.end1621
                                        #   in Loop: Header=BB102_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB102_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB102_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB102_312
.LBB102_308:                            # %cond.false1627
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB102_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_311
.LBB102_310:                            # %cond.false1643
                                        #   in Loop: Header=BB102_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_311:                            # %cond.end1656
                                        #   in Loop: Header=BB102_284 Depth=2
.LBB102_312:                            # %cond.end1658
                                        #   in Loop: Header=BB102_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB102_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_284
.LBB102_314:                            # %for.end1671
                                        #   in Loop: Header=BB102_282 Depth=1
	jmp	.LBB102_315
.LBB102_315:                            # %for.inc1672
                                        #   in Loop: Header=BB102_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_282
.LBB102_316:                            # %for.end1674
	jmp	.LBB102_317
.LBB102_317:                            # %if.end1675
	jmp	.LBB102_367
.LBB102_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB102_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB102_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB102_319 Depth=1
	movl	$0, -12(%rbp)
.LBB102_321:                            # %for.cond1681
                                        #   Parent Loop BB102_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB102_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB102_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB102_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_321
.LBB102_324:                            # %for.end1700
                                        #   in Loop: Header=BB102_319 Depth=1
	jmp	.LBB102_325
.LBB102_325:                            # %for.inc1701
                                        #   in Loop: Header=BB102_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_319
.LBB102_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB102_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB102_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB102_328 Depth=1
	movl	$0, -12(%rbp)
.LBB102_330:                            # %for.cond1711
                                        #   Parent Loop BB102_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB102_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB102_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB102_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_330
.LBB102_333:                            # %for.end1731
                                        #   in Loop: Header=BB102_328 Depth=1
	jmp	.LBB102_334
.LBB102_334:                            # %for.inc1732
                                        #   in Loop: Header=BB102_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_328
.LBB102_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB102_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB102_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB102_336 Depth=1
	movl	$0, -12(%rbp)
.LBB102_338:                            # %for.cond1739
                                        #   Parent Loop BB102_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB102_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB102_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB102_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_338
.LBB102_341:                            # %for.end1759
                                        #   in Loop: Header=BB102_336 Depth=1
	jmp	.LBB102_342
.LBB102_342:                            # %for.inc1760
                                        #   in Loop: Header=BB102_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_336
.LBB102_343:                            # %for.end1762
	jmp	.LBB102_344
.LBB102_344:                            # %if.end1763
	movl	$0, -20(%rbp)
.LBB102_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB102_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB102_345 Depth=1
	movl	$0, -24(%rbp)
.LBB102_347:                            # %for.cond1768
                                        #   Parent Loop BB102_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB102_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB102_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB102_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_347
.LBB102_350:                            # %for.end1800
                                        #   in Loop: Header=BB102_345 Depth=1
	jmp	.LBB102_351
.LBB102_351:                            # %for.inc1801
                                        #   in Loop: Header=BB102_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_345
.LBB102_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB102_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_356 Depth 2
                                        #       Child Loop BB102_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB102_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB102_354 Depth=1
	movl	$0, -20(%rbp)
.LBB102_356:                            # %for.cond1811
                                        #   Parent Loop BB102_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB102_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB102_356 Depth=2
	movl	$0, -24(%rbp)
.LBB102_358:                            # %for.cond1815
                                        #   Parent Loop BB102_354 Depth=1
                                        #     Parent Loop BB102_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB102_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB102_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB102_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_358
.LBB102_361:                            # %for.end1837
                                        #   in Loop: Header=BB102_356 Depth=2
	jmp	.LBB102_362
.LBB102_362:                            # %for.inc1838
                                        #   in Loop: Header=BB102_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_356
.LBB102_363:                            # %for.end1840
                                        #   in Loop: Header=BB102_354 Depth=1
	jmp	.LBB102_364
.LBB102_364:                            # %for.inc1841
                                        #   in Loop: Header=BB102_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_354
.LBB102_365:                            # %for.end1843
	jmp	.LBB102_366
.LBB102_366:                            # %if.end1844
	jmp	.LBB102_367
.LBB102_367:                            # %if.end1845
	movl	-92(%rbp), %ebx
	cmpl	$1053005265, -176(%rbp) # imm = 0x3EC395D1
	jne	.LBB102_369
.LBB102_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_368
.Lfunc_end102:
	.size	Mode_Decision_for_4x4IntraBlocks.73, .Lfunc_end102-Mode_Decision_for_4x4IntraBlocks.73
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.74       # -- Begin function UpdatePixelMap.74
	.p2align	4, 0x90
	.type	UpdatePixelMap.74,@function
UpdatePixelMap.74:                      # @UpdatePixelMap.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1181727894, -28(%rbp)  # imm = 0x466FBC96
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB103_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	$0, -4(%rbp)
.LBB103_4:                              # %for.cond2
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc7
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end9
	jmp	.LBB103_41
.LBB103_10:                             # %if.else
	movl	$0, -16(%rbp)
.LBB103_11:                             # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_13 Depth 2
                                        #       Child Loop BB103_16 Depth 3
                                        #         Child Loop BB103_18 Depth 4
                                        #       Child Loop BB103_25 Depth 3
                                        #         Child Loop BB103_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB103_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	$0, -12(%rbp)
.LBB103_13:                             # %for.cond14
                                        #   Parent Loop BB103_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_16 Depth 3
                                        #         Child Loop BB103_18 Depth 4
                                        #       Child Loop BB103_25 Depth 3
                                        #         Child Loop BB103_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB103_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB103_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB103_16:                             # %for.cond27
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB103_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB103_18:                             # %for.cond31
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        #       Parent Loop BB103_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB103_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB103_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB103_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_18
.LBB103_21:                             # %for.end40
                                        #   in Loop: Header=BB103_16 Depth=3
	jmp	.LBB103_22
.LBB103_22:                             # %for.inc41
                                        #   in Loop: Header=BB103_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_16
.LBB103_23:                             # %for.end43
                                        #   in Loop: Header=BB103_13 Depth=2
	jmp	.LBB103_36
.LBB103_24:                             # %if.else44
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB103_25:                             # %for.cond46
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB103_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB103_27:                             # %for.cond50
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        #       Parent Loop BB103_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB103_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB103_31
.LBB103_30:                             # %cond.false
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB103_31:                             # %cond.end
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB103_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_27
.LBB103_33:                             # %for.end76
                                        #   in Loop: Header=BB103_25 Depth=3
	jmp	.LBB103_34
.LBB103_34:                             # %for.inc77
                                        #   in Loop: Header=BB103_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_25
.LBB103_35:                             # %for.end79
                                        #   in Loop: Header=BB103_13 Depth=2
	jmp	.LBB103_36
.LBB103_36:                             # %if.end
                                        #   in Loop: Header=BB103_13 Depth=2
	jmp	.LBB103_37
.LBB103_37:                             # %for.inc80
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_13
.LBB103_38:                             # %for.end82
                                        #   in Loop: Header=BB103_11 Depth=1
	jmp	.LBB103_39
.LBB103_39:                             # %for.inc83
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_11
.LBB103_40:                             # %for.end85
	jmp	.LBB103_41
.LBB103_41:                             # %if.end86
	cmpl	$1181727894, -28(%rbp)  # imm = 0x466FBC96
	jne	.LBB103_43
.LBB103_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_42
.Lfunc_end103:
	.size	UpdatePixelMap.74, .Lfunc_end103-UpdatePixelMap.74
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.75 # -- Begin function RDCost_for_4x4Blocks_Chroma.75
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.75,@function
RDCost_for_4x4Blocks_Chroma.75:         # @RDCost_for_4x4Blocks_Chroma.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$742792039, -60(%rbp)   # imm = 0x2C461B67
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB104_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB104_3
.LBB104_2:                              # %if.else
	movl	$0, -32(%rbp)
.LBB104_3:                              # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB104_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB104_18
.LBB104_5:                              # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB104_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB104_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB104_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB104_8:                              # %land.end
                                        #   in Loop: Header=BB104_6 Depth=1
	testb	$1, %al
	jne	.LBB104_9
	jmp	.LBB104_17
.LBB104_9:                              # %for.body
                                        #   in Loop: Header=BB104_6 Depth=1
	movq	-88(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB104_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB104_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB104_12
.LBB104_11:                             # %if.else54
                                        #   in Loop: Header=BB104_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB104_12:                             # %if.end55
                                        #   in Loop: Header=BB104_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB104_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB104_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB104_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB104_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB104_15:                             # %lor.end
                                        #   in Loop: Header=BB104_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB104_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB104_6
.LBB104_17:                             # %for.end
	jmp	.LBB104_18
.LBB104_18:                             # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$742792039, -60(%rbp)   # imm = 0x2C461B67
	jne	.LBB104_20
.LBB104_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_19
.Lfunc_end104:
	.size	RDCost_for_4x4Blocks_Chroma.75, .Lfunc_end104-RDCost_for_4x4Blocks_Chroma.75
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.76    # -- Begin function RestoreMVBlock8x8.76
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.76,@function
RestoreMVBlock8x8.76:                   # @RestoreMVBlock8x8.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$2019033977, -68(%rbp)  # imm = 0x78580379
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB105_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB105_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB105_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_5:                              # %for.cond7
                                        #   Parent Loop BB105_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB105_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB105_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB105_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_5
.LBB105_8:                              # %for.end
                                        #   in Loop: Header=BB105_3 Depth=1
	jmp	.LBB105_9
.LBB105_9:                              # %for.inc76
                                        #   in Loop: Header=BB105_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_3
.LBB105_10:                             # %for.end78
	jmp	.LBB105_11
.LBB105_11:                             # %if.end
	jmp	.LBB105_46
.LBB105_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB105_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB105_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_16:                             # %for.cond84
                                        #   Parent Loop BB105_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB105_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB105_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB105_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_16
.LBB105_19:                             # %for.end161
                                        #   in Loop: Header=BB105_14 Depth=1
	jmp	.LBB105_20
.LBB105_20:                             # %for.inc162
                                        #   in Loop: Header=BB105_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_14
.LBB105_21:                             # %for.end164
	jmp	.LBB105_45
.LBB105_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB105_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB105_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_26:                             # %for.cond171
                                        #   Parent Loop BB105_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB105_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB105_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB105_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_26
.LBB105_29:                             # %for.end248
                                        #   in Loop: Header=BB105_24 Depth=1
	jmp	.LBB105_30
.LBB105_30:                             # %for.inc249
                                        #   in Loop: Header=BB105_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_24
.LBB105_31:                             # %for.end251
	jmp	.LBB105_44
.LBB105_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB105_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB105_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_36:                             # %for.cond258
                                        #   Parent Loop BB105_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB105_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB105_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB105_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_36
.LBB105_39:                             # %for.end407
                                        #   in Loop: Header=BB105_34 Depth=1
	jmp	.LBB105_40
.LBB105_40:                             # %for.inc408
                                        #   in Loop: Header=BB105_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_34
.LBB105_41:                             # %for.end410
	jmp	.LBB105_43
.LBB105_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB105_43:                             # %if.end412
	jmp	.LBB105_44
.LBB105_44:                             # %if.end413
	jmp	.LBB105_45
.LBB105_45:                             # %if.end414
	jmp	.LBB105_46
.LBB105_46:                             # %if.end415
	cmpl	$2019033977, -68(%rbp)  # imm = 0x78580379
	jne	.LBB105_48
.LBB105_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_47
.Lfunc_end105:
	.size	RestoreMVBlock8x8.76, .Lfunc_end105-RestoreMVBlock8x8.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.77
.LCPI106_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.77
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.77,@function
RDCost_for_macroblocks.77:              # @RDCost_for_macroblocks.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1131345394, -104(%rbp) # imm = 0x436EF5F2
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB106_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB106_3
.LBB106_2:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB106_3
.LBB106_3:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -112(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB106_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB106_5:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB106_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB106_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB106_8:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB106_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB106_8 Depth=1
	movl	$0, -12(%rbp)
.LBB106_10:                             # %for.cond17
                                        #   Parent Loop BB106_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB106_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB106_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-96(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB106_177
.LBB106_13:                             # %if.end
                                        #   in Loop: Header=BB106_10 Depth=2
	jmp	.LBB106_14
.LBB106_14:                             # %for.inc
                                        #   in Loop: Header=BB106_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_10
.LBB106_15:                             # %for.end
                                        #   in Loop: Header=BB106_8 Depth=1
	jmp	.LBB106_16
.LBB106_16:                             # %for.inc30
                                        #   in Loop: Header=BB106_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_8
.LBB106_17:                             # %for.end32
	jmp	.LBB106_18
.LBB106_18:                             # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB106_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB106_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB106_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB106_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB106_177
.LBB106_23:                             # %if.end46
	jmp	.LBB106_76
.LBB106_24:                             # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB106_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB106_75
.LBB106_26:                             # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB106_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB106_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB106_29:                             # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_31 Depth 2
                                        #       Child Loop BB106_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB106_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB106_29 Depth=1
	movl	$0, -12(%rbp)
.LBB106_31:                             # %for.cond61
                                        #   Parent Loop BB106_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB106_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB106_31 Depth=2
	movl	$0, -20(%rbp)
.LBB106_33:                             # %for.cond65
                                        #   Parent Loop BB106_29 Depth=1
                                        #     Parent Loop BB106_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB106_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB106_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB106_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB106_33 Depth=3
	movl	$2, -40(%rbp)
.LBB106_36:                             # %if.end77
                                        #   in Loop: Header=BB106_33 Depth=3
	jmp	.LBB106_37
.LBB106_37:                             # %for.inc78
                                        #   in Loop: Header=BB106_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB106_33
.LBB106_38:                             # %for.end80
                                        #   in Loop: Header=BB106_31 Depth=2
	jmp	.LBB106_39
.LBB106_39:                             # %for.inc81
                                        #   in Loop: Header=BB106_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_31
.LBB106_40:                             # %for.end83
                                        #   in Loop: Header=BB106_29 Depth=1
	jmp	.LBB106_41
.LBB106_41:                             # %for.inc84
                                        #   in Loop: Header=BB106_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_29
.LBB106_42:                             # %for.end86
	movl	$0, -32(%rbp)
.LBB106_43:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB106_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB106_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB106_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB106_43
.LBB106_46:                             # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB106_47:                             # %if.end97
	jmp	.LBB106_74
.LBB106_48:                             # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB106_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB106_73
.LBB106_50:                             # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB106_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB106_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB106_53:                             # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_55 Depth 2
                                        #       Child Loop BB106_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB106_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB106_53 Depth=1
	movl	$0, -12(%rbp)
.LBB106_55:                             # %for.cond115
                                        #   Parent Loop BB106_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB106_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB106_55 Depth=2
	movl	$0, -20(%rbp)
.LBB106_57:                             # %for.cond119
                                        #   Parent Loop BB106_53 Depth=1
                                        #     Parent Loop BB106_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB106_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB106_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB106_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB106_57 Depth=3
	movl	$2, -40(%rbp)
.LBB106_60:                             # %if.end131
                                        #   in Loop: Header=BB106_57 Depth=3
	jmp	.LBB106_61
.LBB106_61:                             # %for.inc132
                                        #   in Loop: Header=BB106_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB106_57
.LBB106_62:                             # %for.end134
                                        #   in Loop: Header=BB106_55 Depth=2
	jmp	.LBB106_63
.LBB106_63:                             # %for.inc135
                                        #   in Loop: Header=BB106_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_55
.LBB106_64:                             # %for.end137
                                        #   in Loop: Header=BB106_53 Depth=1
	jmp	.LBB106_65
.LBB106_65:                             # %for.inc138
                                        #   in Loop: Header=BB106_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_53
.LBB106_66:                             # %for.end140
	movl	$0, -32(%rbp)
.LBB106_67:                             # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB106_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB106_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB106_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB106_67
.LBB106_70:                             # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB106_71:                             # %if.end152
	jmp	.LBB106_72
.LBB106_72:                             # %if.end153
	jmp	.LBB106_73
.LBB106_73:                             # %if.end154
	jmp	.LBB106_74
.LBB106_74:                             # %if.end155
	jmp	.LBB106_75
.LBB106_75:                             # %if.end156
	jmp	.LBB106_76
.LBB106_76:                             # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB106_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB106_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB106_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB106_81
.LBB106_80:                             # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB106_81
.LBB106_81:                             # %cond.end169
	callq	compute_residue_mb
.LBB106_82:                             # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB106_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB106_84:                             # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB106_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB106_84 Depth=1
	movl	$0, -12(%rbp)
.LBB106_86:                             # %for.cond179
                                        #   Parent Loop BB106_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB106_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB106_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB106_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_86
.LBB106_89:                             # %for.end196
                                        #   in Loop: Header=BB106_84 Depth=1
	jmp	.LBB106_90
.LBB106_90:                             # %for.inc197
                                        #   in Loop: Header=BB106_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_84
.LBB106_91:                             # %for.end199
	jmp	.LBB106_101
.LBB106_92:                             # %if.else200
	movl	$0, -16(%rbp)
.LBB106_93:                             # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB106_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB106_93 Depth=1
	movl	$0, -12(%rbp)
.LBB106_95:                             # %for.cond205
                                        #   Parent Loop BB106_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB106_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB106_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB106_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_95
.LBB106_98:                             # %for.end220
                                        #   in Loop: Header=BB106_93 Depth=1
	jmp	.LBB106_99
.LBB106_99:                             # %for.inc221
                                        #   in Loop: Header=BB106_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_93
.LBB106_100:                            # %for.end223
	jmp	.LBB106_101
.LBB106_101:                            # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB106_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB106_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB106_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB106_107
.LBB106_105:                            # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB106_107
# %bb.106:                              # %if.then238
	leaq	-36(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB106_107:                            # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB106_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB106_109:                            # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB106_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB106_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB106_112:                            # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_114 Depth 2
                                        #       Child Loop BB106_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB106_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB106_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB106_114:                            # %for.cond259
                                        #   Parent Loop BB106_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB106_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB106_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB106_116:                            # %for.cond263
                                        #   Parent Loop BB106_112 Depth=1
                                        #     Parent Loop BB106_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB106_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB106_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_116
.LBB106_119:                            # %for.end291
                                        #   in Loop: Header=BB106_114 Depth=2
	jmp	.LBB106_120
.LBB106_120:                            # %for.inc292
                                        #   in Loop: Header=BB106_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_114
.LBB106_121:                            # %for.end294
                                        #   in Loop: Header=BB106_112 Depth=1
	jmp	.LBB106_122
.LBB106_122:                            # %for.inc295
                                        #   in Loop: Header=BB106_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB106_112
.LBB106_123:                            # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB106_133
.LBB106_124:                            # %if.else300
	movl	$0, -12(%rbp)
.LBB106_125:                            # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB106_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB106_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB106_127:                            # %for.cond306
                                        #   Parent Loop BB106_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB106_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB106_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_127
.LBB106_130:                            # %for.end334
                                        #   in Loop: Header=BB106_125 Depth=1
	jmp	.LBB106_131
.LBB106_131:                            # %for.inc335
                                        #   in Loop: Header=BB106_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_125
.LBB106_132:                            # %for.end337
	jmp	.LBB106_133
.LBB106_133:                            # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB106_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB106_135:                            # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB106_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB106_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB106_137:                            # %for.cond347
                                        #   Parent Loop BB106_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB106_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB106_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_137
.LBB106_140:                            # %for.end398
                                        #   in Loop: Header=BB106_135 Depth=1
	jmp	.LBB106_141
.LBB106_141:                            # %for.inc399
                                        #   in Loop: Header=BB106_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_135
.LBB106_142:                            # %for.end401
	jmp	.LBB106_143
.LBB106_143:                            # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -100(%rbp)
	je	.LBB106_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB106_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB106_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB106_148
.LBB106_147:                            # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-76(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB106_149
.LBB106_148:                            # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-36(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB106_149:                            # %if.end422
	jmp	.LBB106_151
.LBB106_150:                            # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB106_151:                            # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI106_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB106_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI106_0(%rip), %xmm2 # xmm2 = mem[0],zero
	jmp	.LBB106_154
.LBB106_153:                            # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB106_154:                            # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB106_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB106_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB106_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB106_159
.LBB106_158:                            # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB106_177
.LBB106_159:                            # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB106_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB106_165
	jmp	.LBB106_176
.LBB106_162:                            # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB106_176
	jmp	.LBB106_165
.LBB106_164:                            # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB106_165
	jmp	.LBB106_176
.LBB106_165:                            # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB106_175
# %bb.166:                              # %if.then465
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB106_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB106_171
	jmp	.LBB106_174
.LBB106_168:                            # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_170
# %bb.169:                              # %cond.true473
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB106_174
	jmp	.LBB106_171
.LBB106_170:                            # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB106_171
	jmp	.LBB106_174
.LBB106_171:                            # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB106_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB106_177
.LBB106_173:                            # %if.end482
	jmp	.LBB106_174
.LBB106_174:                            # %if.end483
	jmp	.LBB106_175
.LBB106_175:                            # %if.end484
	jmp	.LBB106_176
.LBB106_176:                            # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB106_177:                            # %return
	movl	-60(%rbp), %ebx
	cmpl	$1131345394, -104(%rbp) # imm = 0x436EF5F2
	jne	.LBB106_179
.LBB106_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_179:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_178
.Lfunc_end106:
	.size	RDCost_for_macroblocks.77, .Lfunc_end106-RDCost_for_macroblocks.77
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.78 # -- Begin function store_macroblock_parameters.78
	.p2align	4, 0x90
	.type	store_macroblock_parameters.78,@function
store_macroblock_parameters.78:         # @store_macroblock_parameters.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1901916104, -36(%rbp)  # imm = 0x715CEFC8
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB107_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB107_3
.LBB107_2:                              # %if.else
	movl	$0, bi_pred_me
.LBB107_3:                              # %if.end
	movl	$0, -4(%rbp)
.LBB107_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB107_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB107_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB107_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_4
.LBB107_7:                              # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB107_8:                              # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB107_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB107_10:                             # %for.cond20
                                        #   Parent Loop BB107_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB107_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB107_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_10
.LBB107_13:                             # %for.end39
                                        #   in Loop: Header=BB107_8 Depth=1
	jmp	.LBB107_14
.LBB107_14:                             # %for.inc40
                                        #   in Loop: Header=BB107_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_8
.LBB107_15:                             # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB107_16:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB107_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB107_16 Depth=1
	movl	$0, -8(%rbp)
.LBB107_18:                             # %for.cond47
                                        #   Parent Loop BB107_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB107_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB107_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB107_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_18
.LBB107_21:                             # %for.end70
                                        #   in Loop: Header=BB107_16 Depth=1
	jmp	.LBB107_22
.LBB107_22:                             # %for.inc71
                                        #   in Loop: Header=BB107_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_16
.LBB107_23:                             # %for.end73
	movl	$0, -8(%rbp)
.LBB107_24:                             # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB107_24 Depth=1
	movl	$0, -4(%rbp)
.LBB107_26:                             # %for.cond78
                                        #   Parent Loop BB107_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB107_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB107_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_26
.LBB107_29:                             # %for.end94
                                        #   in Loop: Header=BB107_24 Depth=1
	jmp	.LBB107_30
.LBB107_30:                             # %for.inc95
                                        #   in Loop: Header=BB107_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_24
.LBB107_31:                             # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB107_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB107_33:                             # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB107_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB107_33 Depth=1
	movl	$0, -4(%rbp)
.LBB107_35:                             # %for.cond105
                                        #   Parent Loop BB107_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB107_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB107_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB107_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_35
.LBB107_38:                             # %for.end136
                                        #   in Loop: Header=BB107_33 Depth=1
	jmp	.LBB107_39
.LBB107_39:                             # %for.inc137
                                        #   in Loop: Header=BB107_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_33
.LBB107_40:                             # %for.end139
	jmp	.LBB107_41
.LBB107_41:                             # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB107_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB107_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB107_44:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_46 Depth 2
                                        #       Child Loop BB107_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB107_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB107_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB107_46:                             # %for.cond152
                                        #   Parent Loop BB107_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB107_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB107_48:                             # %for.cond159
                                        #   Parent Loop BB107_44 Depth=1
                                        #     Parent Loop BB107_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB107_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB107_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_48
.LBB107_51:                             # %for.end179
                                        #   in Loop: Header=BB107_46 Depth=2
	jmp	.LBB107_52
.LBB107_52:                             # %for.inc180
                                        #   in Loop: Header=BB107_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_46
.LBB107_53:                             # %for.end182
                                        #   in Loop: Header=BB107_44 Depth=1
	jmp	.LBB107_54
.LBB107_54:                             # %for.inc183
                                        #   in Loop: Header=BB107_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_44
.LBB107_55:                             # %for.end185
	jmp	.LBB107_56
.LBB107_56:                             # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB107_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB107_59
.LBB107_58:                             # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB107_60
.LBB107_59:                             # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB107_60:                             # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB107_61:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB107_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB107_61 Depth=1
	movl	$0, -4(%rbp)
.LBB107_63:                             # %for.cond197
                                        #   Parent Loop BB107_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB107_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB107_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB107_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB107_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB107_66:                             # %if.end230
                                        #   in Loop: Header=BB107_63 Depth=2
	jmp	.LBB107_67
.LBB107_67:                             # %for.inc231
                                        #   in Loop: Header=BB107_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_63
.LBB107_68:                             # %for.end233
                                        #   in Loop: Header=BB107_61 Depth=1
	jmp	.LBB107_69
.LBB107_69:                             # %for.inc234
                                        #   in Loop: Header=BB107_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_61
.LBB107_70:                             # %for.end236
	cmpl	$1901916104, -36(%rbp)  # imm = 0x715CEFC8
	jne	.LBB107_72
.LBB107_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_72:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_71
.Lfunc_end107:
	.size	store_macroblock_parameters.78, .Lfunc_end107-store_macroblock_parameters.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.79
.LCPI108_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.79
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.79,@function
RDCost_for_macroblocks.79:              # @RDCost_for_macroblocks.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$832403393, -92(%rbp)   # imm = 0x319D77C1
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB108_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB108_3
.LBB108_2:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB108_3
.LBB108_3:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB108_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB108_5:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB108_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB108_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
.LBB108_8:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB108_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB108_8 Depth=1
	movl	$0, -16(%rbp)
.LBB108_10:                             # %for.cond17
                                        #   Parent Loop BB108_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB108_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB108_10 Depth=2
	movq	direct_pdir, %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB108_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB108_177
.LBB108_13:                             # %if.end
                                        #   in Loop: Header=BB108_10 Depth=2
	jmp	.LBB108_14
.LBB108_14:                             # %for.inc
                                        #   in Loop: Header=BB108_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_10
.LBB108_15:                             # %for.end
                                        #   in Loop: Header=BB108_8 Depth=1
	jmp	.LBB108_16
.LBB108_16:                             # %for.inc30
                                        #   in Loop: Header=BB108_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_8
.LBB108_17:                             # %for.end32
	jmp	.LBB108_18
.LBB108_18:                             # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB108_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB108_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB108_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB108_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB108_177
.LBB108_23:                             # %if.end46
	jmp	.LBB108_76
.LBB108_24:                             # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB108_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB108_75
.LBB108_26:                             # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB108_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB108_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB108_29:                             # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_31 Depth 2
                                        #       Child Loop BB108_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB108_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB108_29 Depth=1
	movl	$0, -16(%rbp)
.LBB108_31:                             # %for.cond61
                                        #   Parent Loop BB108_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB108_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB108_31 Depth=2
	movl	$0, -24(%rbp)
.LBB108_33:                             # %for.cond65
                                        #   Parent Loop BB108_29 Depth=1
                                        #     Parent Loop BB108_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB108_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB108_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB108_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB108_33 Depth=3
	movl	$2, -40(%rbp)
.LBB108_36:                             # %if.end77
                                        #   in Loop: Header=BB108_33 Depth=3
	jmp	.LBB108_37
.LBB108_37:                             # %for.inc78
                                        #   in Loop: Header=BB108_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_33
.LBB108_38:                             # %for.end80
                                        #   in Loop: Header=BB108_31 Depth=2
	jmp	.LBB108_39
.LBB108_39:                             # %for.inc81
                                        #   in Loop: Header=BB108_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_31
.LBB108_40:                             # %for.end83
                                        #   in Loop: Header=BB108_29 Depth=1
	jmp	.LBB108_41
.LBB108_41:                             # %for.inc84
                                        #   in Loop: Header=BB108_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_29
.LBB108_42:                             # %for.end86
	movl	$0, -36(%rbp)
.LBB108_43:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB108_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB108_43
.LBB108_46:                             # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB108_47:                             # %if.end97
	jmp	.LBB108_74
.LBB108_48:                             # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB108_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB108_73
.LBB108_50:                             # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB108_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB108_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB108_53:                             # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_55 Depth 2
                                        #       Child Loop BB108_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB108_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB108_53 Depth=1
	movl	$0, -16(%rbp)
.LBB108_55:                             # %for.cond115
                                        #   Parent Loop BB108_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB108_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB108_55 Depth=2
	movl	$0, -24(%rbp)
.LBB108_57:                             # %for.cond119
                                        #   Parent Loop BB108_53 Depth=1
                                        #     Parent Loop BB108_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB108_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB108_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB108_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB108_57 Depth=3
	movl	$2, -40(%rbp)
.LBB108_60:                             # %if.end131
                                        #   in Loop: Header=BB108_57 Depth=3
	jmp	.LBB108_61
.LBB108_61:                             # %for.inc132
                                        #   in Loop: Header=BB108_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_57
.LBB108_62:                             # %for.end134
                                        #   in Loop: Header=BB108_55 Depth=2
	jmp	.LBB108_63
.LBB108_63:                             # %for.inc135
                                        #   in Loop: Header=BB108_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_55
.LBB108_64:                             # %for.end137
                                        #   in Loop: Header=BB108_53 Depth=1
	jmp	.LBB108_65
.LBB108_65:                             # %for.inc138
                                        #   in Loop: Header=BB108_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_53
.LBB108_66:                             # %for.end140
	movl	$0, -36(%rbp)
.LBB108_67:                             # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB108_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB108_67 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB108_67 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB108_67
.LBB108_70:                             # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB108_71:                             # %if.end152
	jmp	.LBB108_72
.LBB108_72:                             # %if.end153
	jmp	.LBB108_73
.LBB108_73:                             # %if.end154
	jmp	.LBB108_74
.LBB108_74:                             # %if.end155
	jmp	.LBB108_75
.LBB108_75:                             # %if.end156
	jmp	.LBB108_76
.LBB108_76:                             # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB108_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB108_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB108_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB108_81
.LBB108_80:                             # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB108_81
.LBB108_81:                             # %cond.end169
	callq	compute_residue_mb
.LBB108_82:                             # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB108_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB108_84:                             # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB108_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB108_84 Depth=1
	movl	$0, -16(%rbp)
.LBB108_86:                             # %for.cond179
                                        #   Parent Loop BB108_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB108_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB108_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB108_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_86
.LBB108_89:                             # %for.end196
                                        #   in Loop: Header=BB108_84 Depth=1
	jmp	.LBB108_90
.LBB108_90:                             # %for.inc197
                                        #   in Loop: Header=BB108_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_84
.LBB108_91:                             # %for.end199
	jmp	.LBB108_101
.LBB108_92:                             # %if.else200
	movl	$0, -12(%rbp)
.LBB108_93:                             # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB108_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB108_93 Depth=1
	movl	$0, -16(%rbp)
.LBB108_95:                             # %for.cond205
                                        #   Parent Loop BB108_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB108_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB108_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB108_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_95
.LBB108_98:                             # %for.end220
                                        #   in Loop: Header=BB108_93 Depth=1
	jmp	.LBB108_99
.LBB108_99:                             # %for.inc221
                                        #   in Loop: Header=BB108_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_93
.LBB108_100:                            # %for.end223
	jmp	.LBB108_101
.LBB108_101:                            # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB108_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB108_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB108_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB108_107
.LBB108_105:                            # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB108_107
# %bb.106:                              # %if.then238
	leaq	-28(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB108_107:                            # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB108_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB108_109:                            # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB108_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB108_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB108_112:                            # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_114 Depth 2
                                        #       Child Loop BB108_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB108_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB108_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB108_114:                            # %for.cond259
                                        #   Parent Loop BB108_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB108_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB108_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB108_116:                            # %for.cond263
                                        #   Parent Loop BB108_112 Depth=1
                                        #     Parent Loop BB108_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB108_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB108_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_116
.LBB108_119:                            # %for.end291
                                        #   in Loop: Header=BB108_114 Depth=2
	jmp	.LBB108_120
.LBB108_120:                            # %for.inc292
                                        #   in Loop: Header=BB108_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_114
.LBB108_121:                            # %for.end294
                                        #   in Loop: Header=BB108_112 Depth=1
	jmp	.LBB108_122
.LBB108_122:                            # %for.inc295
                                        #   in Loop: Header=BB108_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_112
.LBB108_123:                            # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB108_133
.LBB108_124:                            # %if.else300
	movl	$0, -16(%rbp)
.LBB108_125:                            # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB108_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB108_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB108_127:                            # %for.cond306
                                        #   Parent Loop BB108_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB108_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB108_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_127
.LBB108_130:                            # %for.end334
                                        #   in Loop: Header=BB108_125 Depth=1
	jmp	.LBB108_131
.LBB108_131:                            # %for.inc335
                                        #   in Loop: Header=BB108_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_125
.LBB108_132:                            # %for.end337
	jmp	.LBB108_133
.LBB108_133:                            # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB108_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB108_135:                            # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB108_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB108_137:                            # %for.cond347
                                        #   Parent Loop BB108_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB108_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB108_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_137
.LBB108_140:                            # %for.end398
                                        #   in Loop: Header=BB108_135 Depth=1
	jmp	.LBB108_141
.LBB108_141:                            # %for.inc399
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_135
.LBB108_142:                            # %for.end401
	jmp	.LBB108_143
.LBB108_143:                            # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -96(%rbp)
	je	.LBB108_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB108_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB108_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB108_148
.LBB108_147:                            # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
	movl	-72(%rbp), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB108_149
.LBB108_148:                            # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-28(%rbp), %esi
	leaq	-32(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
.LBB108_149:                            # %if.end422
	jmp	.LBB108_151
.LBB108_150:                            # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
.LBB108_151:                            # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI108_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB108_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI108_0(%rip), %xmm2 # xmm2 = mem[0],zero
	jmp	.LBB108_154
.LBB108_153:                            # %cond.false431
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm2
.LBB108_154:                            # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB108_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB108_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB108_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB108_159
.LBB108_158:                            # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB108_177
.LBB108_159:                            # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB108_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB108_165
	jmp	.LBB108_176
.LBB108_162:                            # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB108_176
	jmp	.LBB108_165
.LBB108_164:                            # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB108_165
	jmp	.LBB108_176
.LBB108_165:                            # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB108_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB108_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB108_171
	jmp	.LBB108_174
.LBB108_168:                            # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB108_174
	jmp	.LBB108_171
.LBB108_170:                            # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB108_171
	jmp	.LBB108_174
.LBB108_171:                            # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB108_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB108_177
.LBB108_173:                            # %if.end482
	jmp	.LBB108_174
.LBB108_174:                            # %if.end483
	jmp	.LBB108_175
.LBB108_175:                            # %if.end484
	jmp	.LBB108_176
.LBB108_176:                            # %if.end485
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB108_177:                            # %return
	movl	-60(%rbp), %ebx
	cmpl	$832403393, -92(%rbp)   # imm = 0x319D77C1
	jne	.LBB108_179
.LBB108_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_179:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_178
.Lfunc_end108:
	.size	RDCost_for_macroblocks.79, .Lfunc_end108-RDCost_for_macroblocks.79
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.80 # -- Begin function GetBestTransformP8x8.80
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.80,@function
GetBestTransformP8x8.80:                # @GetBestTransformP8x8.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$2062928845, -64(%rbp)  # imm = 0x7AF5CBCD
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB109_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB109_25
.LBB109_2:                              # %if.end
	movl	$0, -32(%rbp)
.LBB109_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_5 Depth 2
                                        #       Child Loop BB109_7 Depth 3
                                        #         Child Loop BB109_9 Depth 4
                                        #           Child Loop BB109_11 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB109_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB109_3 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -28(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_5:                              # %for.cond3
                                        #   Parent Loop BB109_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_7 Depth 3
                                        #         Child Loop BB109_9 Depth 4
                                        #           Child Loop BB109_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB109_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_7:                              # %for.cond7
                                        #   Parent Loop BB109_3 Depth=1
                                        #     Parent Loop BB109_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_9 Depth 4
                                        #           Child Loop BB109_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB109_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB109_9:                              # %for.cond12
                                        #   Parent Loop BB109_3 Depth=1
                                        #     Parent Loop BB109_5 Depth=2
                                        #       Parent Loop BB109_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB109_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB109_9 Depth=4
	movl	$0, -16(%rbp)
.LBB109_11:                             # %for.cond15
                                        #   Parent Loop BB109_3 Depth=1
                                        #     Parent Loop BB109_5 Depth=2
                                        #       Parent Loop BB109_7 Depth=3
                                        #         Parent Loop BB109_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB109_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB109_11 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB109_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB109_11
.LBB109_14:                             # %for.end
                                        #   in Loop: Header=BB109_9 Depth=4
	jmp	.LBB109_15
.LBB109_15:                             # %for.inc51
                                        #   in Loop: Header=BB109_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_9
.LBB109_16:                             # %for.end53
                                        #   in Loop: Header=BB109_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB109_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_7
.LBB109_18:                             # %for.end57
                                        #   in Loop: Header=BB109_5 Depth=2
	jmp	.LBB109_19
.LBB109_19:                             # %for.inc58
                                        #   in Loop: Header=BB109_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_5
.LBB109_20:                             # %for.end60
                                        #   in Loop: Header=BB109_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB109_3 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB109_3
.LBB109_22:                             # %for.end66
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB109_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB109_25
.LBB109_24:                             # %if.else
	movl	$0, -44(%rbp)
.LBB109_25:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$2062928845, -64(%rbp)  # imm = 0x7AF5CBCD
	jne	.LBB109_27
.LBB109_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_26
.Lfunc_end109:
	.size	GetBestTransformP8x8.80, .Lfunc_end109-GetBestTransformP8x8.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.81
.LCPI110_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.81
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.81,@function
RDCost_for_8x8blocks.81:                # @RDCost_for_8x8blocks.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$2036637066, -172(%rbp) # imm = 0x79649D8A
	movq	%rdi, -144(%rbp)
	movq	%rsi, -200(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB110_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB110_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -124(%rbp)
	je	.LBB110_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB110_139
.LBB110_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB110_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB110_8
.LBB110_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB110_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB110_19
.LBB110_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB110_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB110_13
.LBB110_12:                             # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB110_14
.LBB110_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB110_14
.LBB110_14:                             # %cond.end71
	movl	%eax, -164(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB110_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB110_17
.LBB110_16:                             # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB110_18
.LBB110_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB110_18
.LBB110_18:                             # %cond.end82
	movl	%eax, -160(%rbp)
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-164(%rbp), %r8d
	movl	-160(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB110_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB110_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_23 Depth 2
                                        #       Child Loop BB110_25 Depth 3
                                        #     Child Loop BB110_31 Depth 2
                                        #       Child Loop BB110_33 Depth 3
                                        #     Child Loop BB110_39 Depth 2
                                        #       Child Loop BB110_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB110_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB110_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	$0, -16(%rbp)
.LBB110_23:                             # %for.cond96
                                        #   Parent Loop BB110_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB110_23 Depth=2
	movl	$0, -12(%rbp)
.LBB110_25:                             # %for.cond100
                                        #   Parent Loop BB110_21 Depth=1
                                        #     Parent Loop BB110_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB110_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB110_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_25
.LBB110_28:                             # %for.end
                                        #   in Loop: Header=BB110_23 Depth=2
	jmp	.LBB110_29
.LBB110_29:                             # %for.inc114
                                        #   in Loop: Header=BB110_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_23
.LBB110_30:                             # %for.end116
                                        #   in Loop: Header=BB110_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB110_31:                             # %for.cond120
                                        #   Parent Loop BB110_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB110_31 Depth=2
	movl	$0, -12(%rbp)
.LBB110_33:                             # %for.cond124
                                        #   Parent Loop BB110_21 Depth=1
                                        #     Parent Loop BB110_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB110_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB110_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_33
.LBB110_36:                             # %for.end152
                                        #   in Loop: Header=BB110_31 Depth=2
	jmp	.LBB110_37
.LBB110_37:                             # %for.inc153
                                        #   in Loop: Header=BB110_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_31
.LBB110_38:                             # %for.end155
                                        #   in Loop: Header=BB110_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB110_39:                             # %for.cond159
                                        #   Parent Loop BB110_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB110_39 Depth=2
	movl	$0, -12(%rbp)
.LBB110_41:                             # %for.cond163
                                        #   Parent Loop BB110_21 Depth=1
                                        #     Parent Loop BB110_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB110_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB110_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_41
.LBB110_44:                             # %for.end180
                                        #   in Loop: Header=BB110_39 Depth=2
	jmp	.LBB110_45
.LBB110_45:                             # %for.inc181
                                        #   in Loop: Header=BB110_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_39
.LBB110_46:                             # %for.end183
                                        #   in Loop: Header=BB110_21 Depth=1
	jmp	.LBB110_47
.LBB110_47:                             # %for.inc184
                                        #   in Loop: Header=BB110_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB110_21
.LBB110_48:                             # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB110_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_51:                             # %for.cond192
                                        #   Parent Loop BB110_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -128(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-128(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-128(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -72(%rbp)
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-72(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB110_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_55
.LBB110_54:                             # %cond.false229
                                        #   in Loop: Header=BB110_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB110_55:                             # %cond.end235
                                        #   in Loop: Header=BB110_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB110_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB110_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_61
.LBB110_57:                             # %cond.false241
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB110_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_60
.LBB110_59:                             # %cond.false250
                                        #   in Loop: Header=BB110_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB110_60:                             # %cond.end256
                                        #   in Loop: Header=BB110_51 Depth=2
.LBB110_61:                             # %cond.end258
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB110_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_64
.LBB110_63:                             # %cond.false276
                                        #   in Loop: Header=BB110_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB110_64:                             # %cond.end282
                                        #   in Loop: Header=BB110_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB110_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB110_70
.LBB110_66:                             # %cond.false288
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_69
.LBB110_68:                             # %cond.false297
                                        #   in Loop: Header=BB110_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB110_69:                             # %cond.end303
                                        #   in Loop: Header=BB110_51 Depth=2
.LBB110_70:                             # %cond.end305
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB110_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_73
.LBB110_72:                             # %cond.false325
                                        #   in Loop: Header=BB110_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB110_73:                             # %cond.end331
                                        #   in Loop: Header=BB110_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB110_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_79
.LBB110_75:                             # %cond.false337
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB110_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB110_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_78
.LBB110_77:                             # %cond.false346
                                        #   in Loop: Header=BB110_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB110_78:                             # %cond.end352
                                        #   in Loop: Header=BB110_51 Depth=2
.LBB110_79:                             # %cond.end354
                                        #   in Loop: Header=BB110_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB110_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_51
.LBB110_81:                             # %for.end369
                                        #   in Loop: Header=BB110_49 Depth=1
	jmp	.LBB110_82
.LBB110_82:                             # %for.inc370
                                        #   in Loop: Header=BB110_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_49
.LBB110_83:                             # %for.end372
	jmp	.LBB110_84
.LBB110_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB110_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB110_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB110_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB110_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB110_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB110_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_92 Depth 2
                                        #       Child Loop BB110_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB110_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB110_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_92:                             # %for.cond395
                                        #   Parent Loop BB110_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB110_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_94:                             # %for.cond403
                                        #   Parent Loop BB110_90 Depth=1
                                        #     Parent Loop BB110_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB110_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB110_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_94
.LBB110_97:                             # %for.end429
                                        #   in Loop: Header=BB110_92 Depth=2
	jmp	.LBB110_98
.LBB110_98:                             # %for.inc430
                                        #   in Loop: Header=BB110_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_92
.LBB110_99:                             # %for.end432
                                        #   in Loop: Header=BB110_90 Depth=1
	jmp	.LBB110_100
.LBB110_100:                            # %for.inc433
                                        #   in Loop: Header=BB110_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB110_90
.LBB110_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB110_113
.LBB110_102:                            # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB110_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_105:                            # %for.cond447
                                        #   Parent Loop BB110_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB110_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB110_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB110_108:                            # %if.end524
                                        #   in Loop: Header=BB110_105 Depth=2
	jmp	.LBB110_109
.LBB110_109:                            # %for.inc525
                                        #   in Loop: Header=BB110_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_105
.LBB110_110:                            # %for.end527
                                        #   in Loop: Header=BB110_103 Depth=1
	jmp	.LBB110_111
.LBB110_111:                            # %for.inc528
                                        #   in Loop: Header=BB110_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_103
.LBB110_112:                            # %for.end530
	jmp	.LBB110_113
.LBB110_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB110_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-168(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_116
.LBB110_115:                            # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB110_116:                            # %if.end547
	cmpl	$0, -124(%rbp)
	jne	.LBB110_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB110_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB110_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB110_121
.LBB110_120:                            # %if.then560
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB110_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB110_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB110_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB110_126
.LBB110_125:                            # %if.then579
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_126:                            # %if.end583
	jmp	.LBB110_127
.LBB110_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB110_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB110_130
.LBB110_129:                            # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB110_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB110_133
.LBB110_132:                            # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_133:                            # %if.end612
	jmp	.LBB110_134
.LBB110_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB110_136
# %bb.135:                              # %if.then617
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_136:                            # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB110_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB110_139:                            # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$2036637066, -172(%rbp) # imm = 0x79649D8A
	jne	.LBB110_141
.LBB110_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB110_140
.Lfunc_end110:
	.size	RDCost_for_8x8blocks.81, .Lfunc_end110-RDCost_for_8x8blocks.81
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.82 # -- Begin function store_macroblock_parameters.82
	.p2align	4, 0x90
	.type	store_macroblock_parameters.82,@function
store_macroblock_parameters.82:         # @store_macroblock_parameters.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$701735085, -36(%rbp)   # imm = 0x29D3A0AD
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB111_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB111_3
.LBB111_2:                              # %if.else
	movl	$0, bi_pred_me
.LBB111_3:                              # %if.end
	movl	$0, -4(%rbp)
.LBB111_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB111_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB111_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB111_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_4
.LBB111_7:                              # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_8:                              # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB111_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_10:                             # %for.cond20
                                        #   Parent Loop BB111_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB111_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB111_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_10
.LBB111_13:                             # %for.end39
                                        #   in Loop: Header=BB111_8 Depth=1
	jmp	.LBB111_14
.LBB111_14:                             # %for.inc40
                                        #   in Loop: Header=BB111_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_8
.LBB111_15:                             # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB111_16:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB111_16 Depth=1
	movl	$0, -8(%rbp)
.LBB111_18:                             # %for.cond47
                                        #   Parent Loop BB111_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB111_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB111_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_18
.LBB111_21:                             # %for.end70
                                        #   in Loop: Header=BB111_16 Depth=1
	jmp	.LBB111_22
.LBB111_22:                             # %for.inc71
                                        #   in Loop: Header=BB111_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_16
.LBB111_23:                             # %for.end73
	movl	$0, -8(%rbp)
.LBB111_24:                             # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	$0, -4(%rbp)
.LBB111_26:                             # %for.cond78
                                        #   Parent Loop BB111_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB111_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB111_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_26
.LBB111_29:                             # %for.end94
                                        #   in Loop: Header=BB111_24 Depth=1
	jmp	.LBB111_30
.LBB111_30:                             # %for.inc95
                                        #   in Loop: Header=BB111_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_24
.LBB111_31:                             # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB111_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB111_33:                             # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB111_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB111_33 Depth=1
	movl	$0, -4(%rbp)
.LBB111_35:                             # %for.cond105
                                        #   Parent Loop BB111_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB111_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB111_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB111_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_35
.LBB111_38:                             # %for.end136
                                        #   in Loop: Header=BB111_33 Depth=1
	jmp	.LBB111_39
.LBB111_39:                             # %for.inc137
                                        #   in Loop: Header=BB111_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_33
.LBB111_40:                             # %for.end139
	jmp	.LBB111_41
.LBB111_41:                             # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB111_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB111_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB111_44:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_46 Depth 2
                                        #       Child Loop BB111_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB111_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB111_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_46:                             # %for.cond152
                                        #   Parent Loop BB111_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB111_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_48:                             # %for.cond159
                                        #   Parent Loop BB111_44 Depth=1
                                        #     Parent Loop BB111_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB111_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB111_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_48
.LBB111_51:                             # %for.end179
                                        #   in Loop: Header=BB111_46 Depth=2
	jmp	.LBB111_52
.LBB111_52:                             # %for.inc180
                                        #   in Loop: Header=BB111_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_46
.LBB111_53:                             # %for.end182
                                        #   in Loop: Header=BB111_44 Depth=1
	jmp	.LBB111_54
.LBB111_54:                             # %for.inc183
                                        #   in Loop: Header=BB111_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_44
.LBB111_55:                             # %for.end185
	jmp	.LBB111_56
.LBB111_56:                             # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB111_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB111_59
.LBB111_58:                             # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB111_60
.LBB111_59:                             # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB111_60:                             # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB111_61:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB111_61 Depth=1
	movl	$0, -4(%rbp)
.LBB111_63:                             # %for.cond197
                                        #   Parent Loop BB111_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB111_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB111_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB111_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB111_66:                             # %if.end230
                                        #   in Loop: Header=BB111_63 Depth=2
	jmp	.LBB111_67
.LBB111_67:                             # %for.inc231
                                        #   in Loop: Header=BB111_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_63
.LBB111_68:                             # %for.end233
                                        #   in Loop: Header=BB111_61 Depth=1
	jmp	.LBB111_69
.LBB111_69:                             # %for.inc234
                                        #   in Loop: Header=BB111_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_61
.LBB111_70:                             # %for.end236
	cmpl	$701735085, -36(%rbp)   # imm = 0x29D3A0AD
	jne	.LBB111_72
.LBB111_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_72:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_71
.Lfunc_end111:
	.size	store_macroblock_parameters.82, .Lfunc_end111-store_macroblock_parameters.82
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.83 # -- Begin function SetModesAndRefframeForBlocks.83
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.83,@function
SetModesAndRefframeForBlocks.83:        # @SetModesAndRefframeForBlocks.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$427821821, -40(%rbp)   # imm = 0x19800AFD
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB112_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB112_4
.LBB112_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB112_4
.LBB112_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB112_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB112_7
.LBB112_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB112_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB112_42
# %bb.8:                                # %if.end
	movq	.LJTI112_0(,%rax,8), %rax
	jmpq	*%rax
.LBB112_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB112_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB112_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB112_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB112_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB112_14
.LBB112_13:                             # %cond.false26
                                        #   in Loop: Header=BB112_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_14
.LBB112_14:                             # %cond.end27
                                        #   in Loop: Header=BB112_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB112_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_10
.LBB112_16:                             # %for.end
	jmp	.LBB112_43
.LBB112_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB112_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB112_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB112_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_18
.LBB112_21:                             # %for.end49
	jmp	.LBB112_43
.LBB112_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB112_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB112_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB112_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_23
.LBB112_26:                             # %for.end71
	jmp	.LBB112_43
.LBB112_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB112_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB112_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB112_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_28
.LBB112_31:                             # %for.end85
	jmp	.LBB112_43
.LBB112_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB112_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB112_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB112_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_33
.LBB112_36:                             # %for.end99
	jmp	.LBB112_43
.LBB112_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB112_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB112_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB112_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_38
.LBB112_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB112_43
.LBB112_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB112_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB112_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB112_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB112_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB112_70
.LBB112_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB112_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB112_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	$0, -4(%rbp)
.LBB112_51:                             # %for.cond131
                                        #   Parent Loop BB112_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB112_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB112_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB112_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB112_55
.LBB112_54:                             # %if.else174
                                        #   in Loop: Header=BB112_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB112_55:                             # %if.end195
                                        #   in Loop: Header=BB112_51 Depth=2
	jmp	.LBB112_56
.LBB112_56:                             # %for.inc196
                                        #   in Loop: Header=BB112_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_51
.LBB112_57:                             # %for.end198
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_58
.LBB112_58:                             # %for.inc199
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_49
.LBB112_59:                             # %for.end201
	jmp	.LBB112_69
.LBB112_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB112_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB112_61 Depth=1
	movl	$0, -4(%rbp)
.LBB112_63:                             # %for.cond207
                                        #   Parent Loop BB112_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB112_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB112_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_63
.LBB112_66:                             # %for.end227
                                        #   in Loop: Header=BB112_61 Depth=1
	jmp	.LBB112_67
.LBB112_67:                             # %for.inc228
                                        #   in Loop: Header=BB112_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_61
.LBB112_68:                             # %for.end230
	jmp	.LBB112_69
.LBB112_69:                             # %if.end231
	jmp	.LBB112_127
.LBB112_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB112_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB112_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB112_72 Depth=1
	movl	$0, -4(%rbp)
.LBB112_74:                             # %for.cond239
                                        #   Parent Loop BB112_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB112_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB112_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB112_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB112_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB112_105
.LBB112_78:                             # %if.else298
                                        #   in Loop: Header=BB112_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB112_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB112_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB112_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB112_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB112_90
.LBB112_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB112_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB112_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB112_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB112_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB112_90
.LBB112_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB112_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB112_90
.LBB112_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB112_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB112_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB112_90
.LBB112_89:                             # %if.then356
                                        #   in Loop: Header=BB112_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB112_104
.LBB112_90:                             # %if.else377
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB112_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB112_96
.LBB112_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB112_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB112_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB112_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB112_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB112_96
.LBB112_95:                             # %cond.true404
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB112_97
.LBB112_96:                             # %cond.false410
                                        #   in Loop: Header=BB112_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_97
.LBB112_97:                             # %cond.end411
                                        #   in Loop: Header=BB112_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB112_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB112_102
.LBB112_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB112_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB112_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB112_102
.LBB112_101:                            # %cond.true448
                                        #   in Loop: Header=BB112_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB112_103
.LBB112_102:                            # %cond.false454
                                        #   in Loop: Header=BB112_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_103
.LBB112_103:                            # %cond.end455
                                        #   in Loop: Header=BB112_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB112_104:                            # %if.end468
                                        #   in Loop: Header=BB112_74 Depth=2
	jmp	.LBB112_105
.LBB112_105:                            # %if.end469
                                        #   in Loop: Header=BB112_74 Depth=2
	jmp	.LBB112_106
.LBB112_106:                            # %for.inc470
                                        #   in Loop: Header=BB112_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_74
.LBB112_107:                            # %for.end472
                                        #   in Loop: Header=BB112_72 Depth=1
	jmp	.LBB112_108
.LBB112_108:                            # %for.inc473
                                        #   in Loop: Header=BB112_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_72
.LBB112_109:                            # %for.end475
	jmp	.LBB112_126
.LBB112_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB112_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB112_111 Depth=1
	movl	$0, -4(%rbp)
.LBB112_113:                            # %for.cond481
                                        #   Parent Loop BB112_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB112_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB112_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB112_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB112_120
.LBB112_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB112_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB112_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB112_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB112_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB112_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB112_120
.LBB112_119:                            # %cond.true519
                                        #   in Loop: Header=BB112_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB112_121
.LBB112_120:                            # %cond.false525
                                        #   in Loop: Header=BB112_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_121
.LBB112_121:                            # %cond.end526
                                        #   in Loop: Header=BB112_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB112_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_113
.LBB112_123:                            # %for.end541
                                        #   in Loop: Header=BB112_111 Depth=1
	jmp	.LBB112_124
.LBB112_124:                            # %for.inc542
                                        #   in Loop: Header=BB112_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_111
.LBB112_125:                            # %for.end544
	jmp	.LBB112_126
.LBB112_126:                            # %if.end545
	jmp	.LBB112_127
.LBB112_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB112_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB112_128 Depth=1
	movl	$0, -4(%rbp)
.LBB112_130:                            # %for.cond551
                                        #   Parent Loop BB112_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB112_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB112_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB112_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB112_134
.LBB112_133:                            # %cond.false584
                                        #   in Loop: Header=BB112_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB112_134
.LBB112_134:                            # %cond.end585
                                        #   in Loop: Header=BB112_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB112_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_130
.LBB112_136:                            # %for.end598
                                        #   in Loop: Header=BB112_128 Depth=1
	jmp	.LBB112_137
.LBB112_137:                            # %for.inc599
                                        #   in Loop: Header=BB112_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_128
.LBB112_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB112_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB112_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB112_140 Depth=1
	movl	$0, -4(%rbp)
.LBB112_142:                            # %for.cond608
                                        #   Parent Loop BB112_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB112_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB112_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB112_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB112_146
.LBB112_145:                            # %cond.false642
                                        #   in Loop: Header=BB112_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB112_146
.LBB112_146:                            # %cond.end643
                                        #   in Loop: Header=BB112_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB112_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_142
.LBB112_148:                            # %for.end657
                                        #   in Loop: Header=BB112_140 Depth=1
	jmp	.LBB112_149
.LBB112_149:                            # %for.inc658
                                        #   in Loop: Header=BB112_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_140
.LBB112_150:                            # %for.end660
	jmp	.LBB112_151
.LBB112_151:                            # %if.end661
	cmpl	$427821821, -40(%rbp)   # imm = 0x19800AFD
	jne	.LBB112_153
.LBB112_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_152
.Lfunc_end112:
	.size	SetModesAndRefframeForBlocks.83, .Lfunc_end112-SetModesAndRefframeForBlocks.83
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI112_0:
	.quad	.LBB112_9
	.quad	.LBB112_17
	.quad	.LBB112_17
	.quad	.LBB112_17
	.quad	.LBB112_42
	.quad	.LBB112_42
	.quad	.LBB112_42
	.quad	.LBB112_42
	.quad	.LBB112_22
	.quad	.LBB112_27
	.quad	.LBB112_32
	.quad	.LBB112_42
	.quad	.LBB112_42
	.quad	.LBB112_37
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.84
.LCPI113_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.84
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.84,@function
RDCost_for_8x8blocks.84:                # @RDCost_for_8x8blocks.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$472451516, -168(%rbp)  # imm = 0x1C2909BC
	movq	%rdi, -136(%rbp)
	movq	%rsi, -184(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB113_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB113_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB113_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB113_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI113_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB113_139
.LBB113_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-184(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB113_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB113_8
.LBB113_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB113_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB113_19
.LBB113_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB113_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_13
.LBB113_12:                             # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB113_14
.LBB113_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB113_14
.LBB113_14:                             # %cond.end71
	movl	%eax, -160(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB113_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_17
.LBB113_16:                             # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB113_18
.LBB113_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB113_18
.LBB113_18:                             # %cond.end82
	movl	%eax, -172(%rbp)
	movq	-184(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-160(%rbp), %r8d
	movl	-172(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB113_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB113_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB113_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_23 Depth 2
                                        #       Child Loop BB113_25 Depth 3
                                        #     Child Loop BB113_31 Depth 2
                                        #       Child Loop BB113_33 Depth 3
                                        #     Child Loop BB113_39 Depth 2
                                        #       Child Loop BB113_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB113_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -12(%rbp)
.LBB113_23:                             # %for.cond96
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB113_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB113_23 Depth=2
	movl	$0, -16(%rbp)
.LBB113_25:                             # %for.cond100
                                        #   Parent Loop BB113_21 Depth=1
                                        #     Parent Loop BB113_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB113_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB113_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB113_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_25
.LBB113_28:                             # %for.end
                                        #   in Loop: Header=BB113_23 Depth=2
	jmp	.LBB113_29
.LBB113_29:                             # %for.inc114
                                        #   in Loop: Header=BB113_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_23
.LBB113_30:                             # %for.end116
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB113_31:                             # %for.cond120
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB113_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB113_31 Depth=2
	movl	$0, -16(%rbp)
.LBB113_33:                             # %for.cond124
                                        #   Parent Loop BB113_21 Depth=1
                                        #     Parent Loop BB113_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB113_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB113_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB113_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_33
.LBB113_36:                             # %for.end152
                                        #   in Loop: Header=BB113_31 Depth=2
	jmp	.LBB113_37
.LBB113_37:                             # %for.inc153
                                        #   in Loop: Header=BB113_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_31
.LBB113_38:                             # %for.end155
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB113_39:                             # %for.cond159
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB113_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB113_39 Depth=2
	movl	$0, -16(%rbp)
.LBB113_41:                             # %for.cond163
                                        #   Parent Loop BB113_21 Depth=1
                                        #     Parent Loop BB113_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB113_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB113_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB113_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_41
.LBB113_44:                             # %for.end180
                                        #   in Loop: Header=BB113_39 Depth=2
	jmp	.LBB113_45
.LBB113_45:                             # %for.inc181
                                        #   in Loop: Header=BB113_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_39
.LBB113_46:                             # %for.end183
                                        #   in Loop: Header=BB113_21 Depth=1
	jmp	.LBB113_47
.LBB113_47:                             # %for.inc184
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB113_21
.LBB113_48:                             # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB113_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_51:                             # %for.cond192
                                        #   Parent Loop BB113_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -80(%rbp)
	movl	-124(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -88(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB113_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_55
.LBB113_54:                             # %cond.false229
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB113_55:                             # %cond.end235
                                        #   in Loop: Header=BB113_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB113_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB113_61
.LBB113_57:                             # %cond.false241
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB113_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_60
.LBB113_59:                             # %cond.false250
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB113_60:                             # %cond.end256
                                        #   in Loop: Header=BB113_51 Depth=2
.LBB113_61:                             # %cond.end258
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB113_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB113_64
.LBB113_63:                             # %cond.false276
                                        #   in Loop: Header=BB113_51 Depth=2
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB113_64:                             # %cond.end282
                                        #   in Loop: Header=BB113_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB113_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_70
.LBB113_66:                             # %cond.false288
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB113_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_69
.LBB113_68:                             # %cond.false297
                                        #   in Loop: Header=BB113_51 Depth=2
	movl	-80(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB113_69:                             # %cond.end303
                                        #   in Loop: Header=BB113_51 Depth=2
.LBB113_70:                             # %cond.end305
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-88(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB113_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB113_73
.LBB113_72:                             # %cond.false325
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB113_73:                             # %cond.end331
                                        #   in Loop: Header=BB113_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB113_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB113_79
.LBB113_75:                             # %cond.false337
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB113_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_78
.LBB113_77:                             # %cond.false346
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB113_78:                             # %cond.end352
                                        #   in Loop: Header=BB113_51 Depth=2
.LBB113_79:                             # %cond.end354
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB113_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_51
.LBB113_81:                             # %for.end369
                                        #   in Loop: Header=BB113_49 Depth=1
	jmp	.LBB113_82
.LBB113_82:                             # %for.inc370
                                        #   in Loop: Header=BB113_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_49
.LBB113_83:                             # %for.end372
	jmp	.LBB113_84
.LBB113_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB113_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB113_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB113_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB113_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB113_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB113_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_92 Depth 2
                                        #       Child Loop BB113_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB113_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB113_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_92:                             # %for.cond395
                                        #   Parent Loop BB113_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB113_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_94:                             # %for.cond403
                                        #   Parent Loop BB113_90 Depth=1
                                        #     Parent Loop BB113_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB113_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB113_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_94
.LBB113_97:                             # %for.end429
                                        #   in Loop: Header=BB113_92 Depth=2
	jmp	.LBB113_98
.LBB113_98:                             # %for.inc430
                                        #   in Loop: Header=BB113_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_92
.LBB113_99:                             # %for.end432
                                        #   in Loop: Header=BB113_90 Depth=1
	jmp	.LBB113_100
.LBB113_100:                            # %for.inc433
                                        #   in Loop: Header=BB113_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB113_90
.LBB113_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB113_113
.LBB113_102:                            # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB113_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_105:                            # %for.cond447
                                        #   Parent Loop BB113_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB113_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB113_108:                            # %if.end524
                                        #   in Loop: Header=BB113_105 Depth=2
	jmp	.LBB113_109
.LBB113_109:                            # %for.inc525
                                        #   in Loop: Header=BB113_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_105
.LBB113_110:                            # %for.end527
                                        #   in Loop: Header=BB113_103 Depth=1
	jmp	.LBB113_111
.LBB113_111:                            # %for.inc528
                                        #   in Loop: Header=BB113_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_103
.LBB113_112:                            # %for.end530
	jmp	.LBB113_113
.LBB113_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-164(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-164(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_116
.LBB113_115:                            # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB113_116:                            # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB113_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB113_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB113_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_121
.LBB113_120:                            # %if.then560
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB113_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB113_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB113_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_126
.LBB113_125:                            # %if.then579
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_126:                            # %if.end583
	jmp	.LBB113_127
.LBB113_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB113_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_130
.LBB113_129:                            # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB113_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_133
.LBB113_132:                            # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_133:                            # %if.end612
	jmp	.LBB113_134
.LBB113_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB113_136
# %bb.135:                              # %if.then617
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-36(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_136:                            # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB113_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB113_139:                            # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$472451516, -168(%rbp)  # imm = 0x1C2909BC
	jne	.LBB113_141
.LBB113_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB113_140
.Lfunc_end113:
	.size	RDCost_for_8x8blocks.84, .Lfunc_end113-RDCost_for_8x8blocks.84
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.85 # -- Begin function StoreNewMotionVectorsBlock8x8.85
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.85,@function
StoreNewMotionVectorsBlock8x8.85:       # @StoreNewMotionVectorsBlock8x8.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1559801359, -72(%rbp)  # imm = 0x5CF8AE0F
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB114_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_4:                              # %for.cond6
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB114_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB114_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_4
.LBB114_7:                              # %for.end
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_8
.LBB114_8:                              # %for.inc39
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_2
.LBB114_9:                              # %for.end41
	jmp	.LBB114_61
.LBB114_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB114_20
# %bb.11:                               # %if.then42
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_12:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB114_12 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_14:                             # %for.cond46
                                        #   Parent Loop BB114_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB114_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB114_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_14
.LBB114_17:                             # %for.end119
                                        #   in Loop: Header=BB114_12 Depth=1
	jmp	.LBB114_18
.LBB114_18:                             # %for.inc120
                                        #   in Loop: Header=BB114_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_12
.LBB114_19:                             # %for.end122
	jmp	.LBB114_61
.LBB114_20:                             # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB114_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB114_31
.LBB114_22:                             # %if.then125
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_23:                             # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB114_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_25:                             # %for.cond129
                                        #   Parent Loop BB114_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB114_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB114_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_25
.LBB114_28:                             # %for.end206
                                        #   in Loop: Header=BB114_23 Depth=1
	jmp	.LBB114_29
.LBB114_29:                             # %for.inc207
                                        #   in Loop: Header=BB114_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_23
.LBB114_30:                             # %for.end209
	jmp	.LBB114_40
.LBB114_31:                             # %if.else210
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_32:                             # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB114_32 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_34:                             # %for.cond214
                                        #   Parent Loop BB114_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB114_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB114_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_34
.LBB114_37:                             # %for.end235
                                        #   in Loop: Header=BB114_32 Depth=1
	jmp	.LBB114_38
.LBB114_38:                             # %for.inc236
                                        #   in Loop: Header=BB114_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_32
.LBB114_39:                             # %for.end238
	jmp	.LBB114_40
.LBB114_40:                             # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB114_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB114_51
.LBB114_42:                             # %if.then243
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_43:                             # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB114_43 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_45:                             # %for.cond247
                                        #   Parent Loop BB114_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB114_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB114_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_45
.LBB114_48:                             # %for.end324
                                        #   in Loop: Header=BB114_43 Depth=1
	jmp	.LBB114_49
.LBB114_49:                             # %for.inc325
                                        #   in Loop: Header=BB114_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_43
.LBB114_50:                             # %for.end327
	jmp	.LBB114_60
.LBB114_51:                             # %if.else328
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_52:                             # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB114_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_54:                             # %for.cond332
                                        #   Parent Loop BB114_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB114_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB114_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_54
.LBB114_57:                             # %for.end353
                                        #   in Loop: Header=BB114_52 Depth=1
	jmp	.LBB114_58
.LBB114_58:                             # %for.inc354
                                        #   in Loop: Header=BB114_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_52
.LBB114_59:                             # %for.end356
	jmp	.LBB114_60
.LBB114_60:                             # %if.end357
	jmp	.LBB114_61
.LBB114_61:                             # %if.end358
	cmpl	$1559801359, -72(%rbp)  # imm = 0x5CF8AE0F
	jne	.LBB114_63
.LBB114_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_62
.Lfunc_end114:
	.size	StoreNewMotionVectorsBlock8x8.85, .Lfunc_end114-StoreNewMotionVectorsBlock8x8.85
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.86 # -- Begin function set_mbaff_parameters.86
	.p2align	4, 0x90
	.type	set_mbaff_parameters.86,@function
set_mbaff_parameters.86:                # @set_mbaff_parameters.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$444593755, -36(%rbp)   # imm = 0x1A7FF65B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB115_2
# %bb.1:                                # %if.then
	jmp	.LBB115_82
.LBB115_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB115_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB115_3 Depth=1
	movl	$0, -4(%rbp)
.LBB115_5:                              # %for.cond3
                                        #   Parent Loop BB115_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB115_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB115_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_5
.LBB115_8:                              # %for.end
                                        #   in Loop: Header=BB115_3 Depth=1
	jmp	.LBB115_9
.LBB115_9:                              # %for.inc17
                                        #   in Loop: Header=BB115_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_3
.LBB115_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB115_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB115_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB115_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB115_12 Depth=1
	movl	$0, -4(%rbp)
.LBB115_14:                             # %for.cond27
                                        #   Parent Loop BB115_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB115_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB115_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB115_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_14
.LBB115_17:                             # %for.end60
                                        #   in Loop: Header=BB115_12 Depth=1
	jmp	.LBB115_18
.LBB115_18:                             # %for.inc61
                                        #   in Loop: Header=BB115_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_12
.LBB115_19:                             # %for.end63
	jmp	.LBB115_20
.LBB115_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB115_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB115_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB115_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB115_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_26 Depth 2
                                        #       Child Loop BB115_28 Depth 3
                                        #         Child Loop BB115_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	$0, -8(%rbp)
.LBB115_26:                             # %for.cond84
                                        #   Parent Loop BB115_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_28 Depth 3
                                        #         Child Loop BB115_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB115_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB115_26 Depth=2
	movl	$0, -12(%rbp)
.LBB115_28:                             # %for.cond88
                                        #   Parent Loop BB115_24 Depth=1
                                        #     Parent Loop BB115_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB115_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB115_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB115_28 Depth=3
	movl	$0, -16(%rbp)
.LBB115_30:                             # %for.cond92
                                        #   Parent Loop BB115_24 Depth=1
                                        #     Parent Loop BB115_26 Depth=2
                                        #       Parent Loop BB115_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB115_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB115_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB115_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_30
.LBB115_33:                             # %for.end115
                                        #   in Loop: Header=BB115_28 Depth=3
	jmp	.LBB115_34
.LBB115_34:                             # %for.inc116
                                        #   in Loop: Header=BB115_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_28
.LBB115_35:                             # %for.end118
                                        #   in Loop: Header=BB115_26 Depth=2
	jmp	.LBB115_36
.LBB115_36:                             # %for.inc119
                                        #   in Loop: Header=BB115_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_26
.LBB115_37:                             # %for.end121
                                        #   in Loop: Header=BB115_24 Depth=1
	jmp	.LBB115_38
.LBB115_38:                             # %for.inc122
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_24
.LBB115_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB115_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_42 Depth 2
                                        #       Child Loop BB115_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB115_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB115_40 Depth=1
	movl	$0, -12(%rbp)
.LBB115_42:                             # %for.cond129
                                        #   Parent Loop BB115_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB115_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB115_42 Depth=2
	movl	$0, -16(%rbp)
.LBB115_44:                             # %for.cond133
                                        #   Parent Loop BB115_40 Depth=1
                                        #     Parent Loop BB115_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB115_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB115_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB115_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_44
.LBB115_47:                             # %for.end152
                                        #   in Loop: Header=BB115_42 Depth=2
	jmp	.LBB115_48
.LBB115_48:                             # %for.inc153
                                        #   in Loop: Header=BB115_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_42
.LBB115_49:                             # %for.end155
                                        #   in Loop: Header=BB115_40 Depth=1
	jmp	.LBB115_50
.LBB115_50:                             # %for.inc156
                                        #   in Loop: Header=BB115_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_40
.LBB115_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB115_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB115_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB115_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_52
.LBB115_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB115_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB115_56 Depth=1
	movl	$0, -4(%rbp)
.LBB115_58:                             # %for.cond180
                                        #   Parent Loop BB115_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB115_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB115_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_58
.LBB115_61:                             # %for.end198
                                        #   in Loop: Header=BB115_56 Depth=1
	jmp	.LBB115_62
.LBB115_62:                             # %for.inc199
                                        #   in Loop: Header=BB115_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_56
.LBB115_63:                             # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB115_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB115_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB115_65 Depth=1
	movl	$0, -4(%rbp)
.LBB115_67:                             # %for.cond208
                                        #   Parent Loop BB115_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB115_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB115_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_67
.LBB115_70:                             # %for.end230
                                        #   in Loop: Header=BB115_65 Depth=1
	jmp	.LBB115_71
.LBB115_71:                             # %for.inc231
                                        #   in Loop: Header=BB115_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_65
.LBB115_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB115_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB115_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB115_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB115_76:                             # %for.cond244
                                        #   Parent Loop BB115_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB115_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB115_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_76
.LBB115_79:                             # %for.end267
                                        #   in Loop: Header=BB115_74 Depth=1
	jmp	.LBB115_80
.LBB115_80:                             # %for.inc268
                                        #   in Loop: Header=BB115_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_74
.LBB115_81:                             # %for.end270.loopexit
	jmp	.LBB115_82
.LBB115_82:                             # %for.end270
	cmpl	$444593755, -36(%rbp)   # imm = 0x1A7FF65B
	jne	.LBB115_84
.LBB115_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_83
.Lfunc_end115:
	.size	set_mbaff_parameters.86, .Lfunc_end115-set_mbaff_parameters.86
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.87 # -- Begin function CheckReliabilityOfRef.87
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.87,@function
CheckReliabilityOfRef.87:               # @CheckReliabilityOfRef.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1246425069, -100(%rbp) # imm = 0x4A4AEFED
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB116_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB116_6
.LBB116_2:                              # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB116_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB116_5
.LBB116_4:                              # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB116_5
.LBB116_5:                              # %cond.end
.LBB116_6:                              # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB116_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB116_8:                              # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB116_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB116_14
.LBB116_10:                             # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB116_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB116_13
.LBB116_12:                             # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB116_13
.LBB116_13:                             # %cond.end20
.LBB116_14:                             # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB116_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB116_16:                             # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB116_17:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_19 Depth 2
                                        #       Child Loop BB116_23 Depth 3
                                        #         Child Loop BB116_25 Depth 4
                                        #       Child Loop BB116_53 Depth 3
                                        #         Child Loop BB116_55 Depth 4
                                        #           Child Loop BB116_66 Depth 5
                                        #       Child Loop BB116_87 Depth 3
                                        #         Child Loop BB116_89 Depth 4
                                        #           Child Loop BB116_100 Depth 5
                                        #       Child Loop BB116_121 Depth 3
                                        #         Child Loop BB116_123 Depth 4
                                        #           Child Loop BB116_125 Depth 5
                                        #             Child Loop BB116_136 Depth 6
                                        #       Child Loop BB116_159 Depth 3
                                        #         Child Loop BB116_161 Depth 4
                                        #           Child Loop BB116_163 Depth 5
                                        #             Child Loop BB116_174 Depth 6
                                        #       Child Loop BB116_196 Depth 3
                                        #         Child Loop BB116_198 Depth 4
                                        #           Child Loop BB116_212 Depth 5
                                        #           Child Loop BB116_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB116_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB116_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB116_19:                             # %for.cond31
                                        #   Parent Loop BB116_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_23 Depth 3
                                        #         Child Loop BB116_25 Depth 4
                                        #       Child Loop BB116_53 Depth 3
                                        #         Child Loop BB116_55 Depth 4
                                        #           Child Loop BB116_66 Depth 5
                                        #       Child Loop BB116_87 Depth 3
                                        #         Child Loop BB116_89 Depth 4
                                        #           Child Loop BB116_100 Depth 5
                                        #       Child Loop BB116_121 Depth 3
                                        #         Child Loop BB116_123 Depth 4
                                        #           Child Loop BB116_125 Depth 5
                                        #             Child Loop BB116_136 Depth 6
                                        #       Child Loop BB116_159 Depth 3
                                        #         Child Loop BB116_161 Depth 4
                                        #           Child Loop BB116_163 Depth 5
                                        #             Child Loop BB116_174 Depth 6
                                        #       Child Loop BB116_196 Depth 3
                                        #         Child Loop BB116_198 Depth 4
                                        #           Child Loop BB116_212 Depth 5
                                        #           Child Loop BB116_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB116_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB116_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB116_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB116_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB116_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB116_19 Depth=2
	movl	$0, -12(%rbp)
.LBB116_23:                             # %for.cond75
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB116_23 Depth=3
	movl	$0, -16(%rbp)
.LBB116_25:                             # %for.cond79
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB116_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB116_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB116_29
.LBB116_28:                             # %cond.false87
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB116_29:                             # %cond.end89
                                        #   in Loop: Header=BB116_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB116_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB116_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB116_35
.LBB116_31:                             # %cond.false94
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB116_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB116_34
.LBB116_33:                             # %cond.false99
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB116_34:                             # %cond.end101
                                        #   in Loop: Header=BB116_25 Depth=4
.LBB116_35:                             # %cond.end103
                                        #   in Loop: Header=BB116_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB116_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB116_38
.LBB116_37:                             # %cond.false111
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB116_38:                             # %cond.end113
                                        #   in Loop: Header=BB116_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB116_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB116_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB116_44
.LBB116_40:                             # %cond.false118
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB116_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB116_43
.LBB116_42:                             # %cond.false123
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB116_43:                             # %cond.end125
                                        #   in Loop: Header=BB116_25 Depth=4
.LBB116_44:                             # %cond.end127
                                        #   in Loop: Header=BB116_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB116_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB116_267
.LBB116_46:                             # %if.end
                                        #   in Loop: Header=BB116_25 Depth=4
	jmp	.LBB116_47
.LBB116_47:                             # %for.inc
                                        #   in Loop: Header=BB116_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_25
.LBB116_48:                             # %for.end
                                        #   in Loop: Header=BB116_23 Depth=3
	jmp	.LBB116_49
.LBB116_49:                             # %for.inc135
                                        #   in Loop: Header=BB116_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_23
.LBB116_50:                             # %for.end137
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_262
.LBB116_51:                             # %if.else
                                        #   in Loop: Header=BB116_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB116_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB116_19 Depth=2
	movl	$0, -12(%rbp)
.LBB116_53:                             # %for.cond141
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_55 Depth 4
                                        #           Child Loop BB116_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB116_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB116_53 Depth=3
	movl	$0, -16(%rbp)
.LBB116_55:                             # %for.cond145
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB116_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB116_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB116_59
.LBB116_58:                             # %cond.false153
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_59:                             # %cond.end155
                                        #   in Loop: Header=BB116_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB116_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB116_65
.LBB116_61:                             # %cond.false160
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB116_64
.LBB116_63:                             # %cond.false165
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_64:                             # %cond.end167
                                        #   in Loop: Header=BB116_55 Depth=4
.LBB116_65:                             # %cond.end169
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB116_66:                             # %for.cond171
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_53 Depth=3
                                        #         Parent Loop BB116_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB116_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB116_70
.LBB116_69:                             # %cond.false180
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB116_70:                             # %cond.end183
                                        #   in Loop: Header=BB116_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB116_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB116_76
.LBB116_72:                             # %cond.false188
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB116_75
.LBB116_74:                             # %cond.false194
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB116_75:                             # %cond.end197
                                        #   in Loop: Header=BB116_66 Depth=5
.LBB116_76:                             # %cond.end199
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB116_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB116_267
.LBB116_78:                             # %if.end209
                                        #   in Loop: Header=BB116_66 Depth=5
	jmp	.LBB116_79
.LBB116_79:                             # %for.inc210
                                        #   in Loop: Header=BB116_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_66
.LBB116_80:                             # %for.end212
                                        #   in Loop: Header=BB116_55 Depth=4
	jmp	.LBB116_81
.LBB116_81:                             # %for.inc213
                                        #   in Loop: Header=BB116_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_55
.LBB116_82:                             # %for.end215
                                        #   in Loop: Header=BB116_53 Depth=3
	jmp	.LBB116_83
.LBB116_83:                             # %for.inc216
                                        #   in Loop: Header=BB116_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_53
.LBB116_84:                             # %for.end218
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_261
.LBB116_85:                             # %if.else219
                                        #   in Loop: Header=BB116_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB116_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB116_19 Depth=2
	movl	$0, -12(%rbp)
.LBB116_87:                             # %for.cond223
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_89 Depth 4
                                        #           Child Loop BB116_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB116_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB116_87 Depth=3
	movl	$0, -16(%rbp)
.LBB116_89:                             # %for.cond227
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB116_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB116_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB116_93
.LBB116_92:                             # %cond.false235
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_93:                             # %cond.end237
                                        #   in Loop: Header=BB116_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB116_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB116_99
.LBB116_95:                             # %cond.false242
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB116_98
.LBB116_97:                             # %cond.false247
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_98:                             # %cond.end249
                                        #   in Loop: Header=BB116_89 Depth=4
.LBB116_99:                             # %cond.end251
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB116_100:                            # %for.cond253
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_87 Depth=3
                                        #         Parent Loop BB116_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB116_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB116_104
.LBB116_103:                            # %cond.false262
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_104:                            # %cond.end265
                                        #   in Loop: Header=BB116_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB116_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB116_110
.LBB116_106:                            # %cond.false270
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB116_109
.LBB116_108:                            # %cond.false276
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_109:                            # %cond.end279
                                        #   in Loop: Header=BB116_100 Depth=5
.LBB116_110:                            # %cond.end281
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB116_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB116_267
.LBB116_112:                            # %if.end291
                                        #   in Loop: Header=BB116_100 Depth=5
	jmp	.LBB116_113
.LBB116_113:                            # %for.inc292
                                        #   in Loop: Header=BB116_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB116_100
.LBB116_114:                            # %for.end294
                                        #   in Loop: Header=BB116_89 Depth=4
	jmp	.LBB116_115
.LBB116_115:                            # %for.inc295
                                        #   in Loop: Header=BB116_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_89
.LBB116_116:                            # %for.end297
                                        #   in Loop: Header=BB116_87 Depth=3
	jmp	.LBB116_117
.LBB116_117:                            # %for.inc298
                                        #   in Loop: Header=BB116_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_87
.LBB116_118:                            # %for.end300
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_260
.LBB116_119:                            # %if.else301
                                        #   in Loop: Header=BB116_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB116_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB116_19 Depth=2
	movl	$0, -12(%rbp)
.LBB116_121:                            # %for.cond305
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_123 Depth 4
                                        #           Child Loop BB116_125 Depth 5
                                        #             Child Loop BB116_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB116_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB116_121 Depth=3
	movl	$0, -16(%rbp)
.LBB116_123:                            # %for.cond309
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB116_125 Depth 5
                                        #             Child Loop BB116_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB116_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB116_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB116_125:                            # %for.cond313
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_121 Depth=3
                                        #         Parent Loop BB116_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB116_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB116_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB116_129
.LBB116_128:                            # %cond.false322
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_129:                            # %cond.end325
                                        #   in Loop: Header=BB116_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB116_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB116_135
.LBB116_131:                            # %cond.false330
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB116_134
.LBB116_133:                            # %cond.false336
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_134:                            # %cond.end339
                                        #   in Loop: Header=BB116_125 Depth=5
.LBB116_135:                            # %cond.end341
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB116_136:                            # %for.cond343
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_121 Depth=3
                                        #         Parent Loop BB116_123 Depth=4
                                        #           Parent Loop BB116_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB116_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB116_140
.LBB116_139:                            # %cond.false352
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_140:                            # %cond.end355
                                        #   in Loop: Header=BB116_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB116_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB116_146
.LBB116_142:                            # %cond.false360
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB116_145
.LBB116_144:                            # %cond.false366
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_145:                            # %cond.end369
                                        #   in Loop: Header=BB116_136 Depth=6
.LBB116_146:                            # %cond.end371
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB116_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB116_267
.LBB116_148:                            # %if.end381
                                        #   in Loop: Header=BB116_136 Depth=6
	jmp	.LBB116_149
.LBB116_149:                            # %for.inc382
                                        #   in Loop: Header=BB116_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_136
.LBB116_150:                            # %for.end384
                                        #   in Loop: Header=BB116_125 Depth=5
	jmp	.LBB116_151
.LBB116_151:                            # %for.inc385
                                        #   in Loop: Header=BB116_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB116_125
.LBB116_152:                            # %for.end387
                                        #   in Loop: Header=BB116_123 Depth=4
	jmp	.LBB116_153
.LBB116_153:                            # %for.inc388
                                        #   in Loop: Header=BB116_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_123
.LBB116_154:                            # %for.end390
                                        #   in Loop: Header=BB116_121 Depth=3
	jmp	.LBB116_155
.LBB116_155:                            # %for.inc391
                                        #   in Loop: Header=BB116_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_121
.LBB116_156:                            # %for.end393
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_259
.LBB116_157:                            # %if.else394
                                        #   in Loop: Header=BB116_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB116_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB116_19 Depth=2
	movl	$0, -12(%rbp)
.LBB116_159:                            # %for.cond398
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_161 Depth 4
                                        #           Child Loop BB116_163 Depth 5
                                        #             Child Loop BB116_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB116_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB116_159 Depth=3
	movl	$0, -16(%rbp)
.LBB116_161:                            # %for.cond402
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB116_163 Depth 5
                                        #             Child Loop BB116_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB116_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB116_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB116_163:                            # %for.cond406
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_159 Depth=3
                                        #         Parent Loop BB116_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB116_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB116_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB116_167
.LBB116_166:                            # %cond.false415
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_167:                            # %cond.end418
                                        #   in Loop: Header=BB116_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB116_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB116_173
.LBB116_169:                            # %cond.false423
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB116_172
.LBB116_171:                            # %cond.false429
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_172:                            # %cond.end432
                                        #   in Loop: Header=BB116_163 Depth=5
.LBB116_173:                            # %cond.end434
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB116_174:                            # %for.cond436
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_159 Depth=3
                                        #         Parent Loop BB116_161 Depth=4
                                        #           Parent Loop BB116_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB116_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB116_178
.LBB116_177:                            # %cond.false445
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_178:                            # %cond.end448
                                        #   in Loop: Header=BB116_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB116_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB116_184
.LBB116_180:                            # %cond.false453
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB116_183
.LBB116_182:                            # %cond.false459
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_183:                            # %cond.end462
                                        #   in Loop: Header=BB116_174 Depth=6
.LBB116_184:                            # %cond.end464
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB116_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB116_267
.LBB116_186:                            # %if.end474
                                        #   in Loop: Header=BB116_174 Depth=6
	jmp	.LBB116_187
.LBB116_187:                            # %for.inc475
                                        #   in Loop: Header=BB116_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB116_174
.LBB116_188:                            # %for.end477
                                        #   in Loop: Header=BB116_163 Depth=5
	jmp	.LBB116_189
.LBB116_189:                            # %for.inc478
                                        #   in Loop: Header=BB116_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_163
.LBB116_190:                            # %for.end480
                                        #   in Loop: Header=BB116_161 Depth=4
	jmp	.LBB116_191
.LBB116_191:                            # %for.inc481
                                        #   in Loop: Header=BB116_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_161
.LBB116_192:                            # %for.end483
                                        #   in Loop: Header=BB116_159 Depth=3
	jmp	.LBB116_193
.LBB116_193:                            # %for.inc484
                                        #   in Loop: Header=BB116_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_159
.LBB116_194:                            # %for.end486
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_258
.LBB116_195:                            # %if.else487
                                        #   in Loop: Header=BB116_19 Depth=2
	movl	$0, -12(%rbp)
.LBB116_196:                            # %for.cond488
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_198 Depth 4
                                        #           Child Loop BB116_212 Depth 5
                                        #           Child Loop BB116_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB116_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB116_196 Depth=3
	movl	$0, -16(%rbp)
.LBB116_198:                            # %for.cond492
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB116_212 Depth 5
                                        #           Child Loop BB116_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB116_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB116_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB116_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB116_202
.LBB116_201:                            # %cond.false500
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB116_202:                            # %cond.end503
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB116_205
.LBB116_204:                            # %cond.false508
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-48(%rbp), %eax
.LBB116_205:                            # %cond.end509
                                        #   in Loop: Header=BB116_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB116_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB116_211
.LBB116_207:                            # %cond.false514
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB116_210
.LBB116_209:                            # %cond.false518
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-48(%rbp), %eax
.LBB116_210:                            # %cond.end519
                                        #   in Loop: Header=BB116_198 Depth=4
.LBB116_211:                            # %cond.end521
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB116_212:                            # %for.cond523
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_196 Depth=3
                                        #         Parent Loop BB116_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB116_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB116_216
.LBB116_215:                            # %cond.false532
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_216:                            # %cond.end535
                                        #   in Loop: Header=BB116_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB116_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB116_222
.LBB116_218:                            # %cond.false540
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB116_221
.LBB116_220:                            # %cond.false546
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB116_221:                            # %cond.end549
                                        #   in Loop: Header=BB116_212 Depth=5
.LBB116_222:                            # %cond.end551
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB116_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB116_267
.LBB116_224:                            # %if.end561
                                        #   in Loop: Header=BB116_212 Depth=5
	jmp	.LBB116_225
.LBB116_225:                            # %for.inc562
                                        #   in Loop: Header=BB116_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_212
.LBB116_226:                            # %for.end564
                                        #   in Loop: Header=BB116_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB116_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB116_229
.LBB116_228:                            # %cond.false569
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB116_229:                            # %cond.end572
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB116_232
.LBB116_231:                            # %cond.false577
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-44(%rbp), %eax
.LBB116_232:                            # %cond.end578
                                        #   in Loop: Header=BB116_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB116_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB116_238
.LBB116_234:                            # %cond.false583
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB116_237
.LBB116_236:                            # %cond.false587
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-44(%rbp), %eax
.LBB116_237:                            # %cond.end588
                                        #   in Loop: Header=BB116_198 Depth=4
.LBB116_238:                            # %cond.end590
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB116_239:                            # %for.cond592
                                        #   Parent Loop BB116_17 Depth=1
                                        #     Parent Loop BB116_19 Depth=2
                                        #       Parent Loop BB116_196 Depth=3
                                        #         Parent Loop BB116_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB116_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB116_243
.LBB116_242:                            # %cond.false601
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_243:                            # %cond.end604
                                        #   in Loop: Header=BB116_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB116_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB116_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB116_249
.LBB116_245:                            # %cond.false609
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB116_248
.LBB116_247:                            # %cond.false615
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB116_248:                            # %cond.end618
                                        #   in Loop: Header=BB116_239 Depth=5
.LBB116_249:                            # %cond.end620
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB116_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB116_267
.LBB116_251:                            # %if.end630
                                        #   in Loop: Header=BB116_239 Depth=5
	jmp	.LBB116_252
.LBB116_252:                            # %for.inc631
                                        #   in Loop: Header=BB116_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB116_239
.LBB116_253:                            # %for.end633
                                        #   in Loop: Header=BB116_198 Depth=4
	jmp	.LBB116_254
.LBB116_254:                            # %for.inc634
                                        #   in Loop: Header=BB116_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_198
.LBB116_255:                            # %for.end636
                                        #   in Loop: Header=BB116_196 Depth=3
	jmp	.LBB116_256
.LBB116_256:                            # %for.inc637
                                        #   in Loop: Header=BB116_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_196
.LBB116_257:                            # %for.end639
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_258
.LBB116_258:                            # %if.end640
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_259
.LBB116_259:                            # %if.end641
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_260
.LBB116_260:                            # %if.end642
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_261
.LBB116_261:                            # %if.end643
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_262
.LBB116_262:                            # %if.end644
                                        #   in Loop: Header=BB116_19 Depth=2
	jmp	.LBB116_263
.LBB116_263:                            # %for.inc645
                                        #   in Loop: Header=BB116_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB116_19
.LBB116_264:                            # %for.end647
                                        #   in Loop: Header=BB116_17 Depth=1
	jmp	.LBB116_265
.LBB116_265:                            # %for.inc648
                                        #   in Loop: Header=BB116_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB116_17
.LBB116_266:                            # %for.end650
	movl	$1, -56(%rbp)
.LBB116_267:                            # %return
	movl	-56(%rbp), %ebx
	cmpl	$1246425069, -100(%rbp) # imm = 0x4A4AEFED
	jne	.LBB116_269
.LBB116_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_269:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_268
.Lfunc_end116:
	.size	CheckReliabilityOfRef.87, .Lfunc_end116-CheckReliabilityOfRef.87
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.88 # -- Begin function GetBestTransformP8x8.88
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.88,@function
GetBestTransformP8x8.88:                # @GetBestTransformP8x8.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1069791611, -64(%rbp)  # imm = 0x3FC3B97B
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB117_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB117_25
.LBB117_2:                              # %if.end
	movl	$0, -28(%rbp)
.LBB117_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_5 Depth 2
                                        #       Child Loop BB117_7 Depth 3
                                        #         Child Loop BB117_9 Depth 4
                                        #           Child Loop BB117_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB117_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB117_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_5:                              # %for.cond3
                                        #   Parent Loop BB117_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_7 Depth 3
                                        #         Child Loop BB117_9 Depth 4
                                        #           Child Loop BB117_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB117_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_7:                              # %for.cond7
                                        #   Parent Loop BB117_3 Depth=1
                                        #     Parent Loop BB117_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_9 Depth 4
                                        #           Child Loop BB117_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB117_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB117_9:                              # %for.cond12
                                        #   Parent Loop BB117_3 Depth=1
                                        #     Parent Loop BB117_5 Depth=2
                                        #       Parent Loop BB117_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB117_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB117_9 Depth=4
	movl	$0, -16(%rbp)
.LBB117_11:                             # %for.cond15
                                        #   Parent Loop BB117_3 Depth=1
                                        #     Parent Loop BB117_5 Depth=2
                                        #       Parent Loop BB117_7 Depth=3
                                        #         Parent Loop BB117_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB117_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB117_11 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB117_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB117_11
.LBB117_14:                             # %for.end
                                        #   in Loop: Header=BB117_9 Depth=4
	jmp	.LBB117_15
.LBB117_15:                             # %for.inc51
                                        #   in Loop: Header=BB117_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_9
.LBB117_16:                             # %for.end53
                                        #   in Loop: Header=BB117_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB117_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_7
.LBB117_18:                             # %for.end57
                                        #   in Loop: Header=BB117_5 Depth=2
	jmp	.LBB117_19
.LBB117_19:                             # %for.inc58
                                        #   in Loop: Header=BB117_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_5
.LBB117_20:                             # %for.end60
                                        #   in Loop: Header=BB117_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB117_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_3
.LBB117_22:                             # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB117_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB117_25
.LBB117_24:                             # %if.else
	movl	$0, -40(%rbp)
.LBB117_25:                             # %return
	movl	-40(%rbp), %ebx
	cmpl	$1069791611, -64(%rbp)  # imm = 0x3FC3B97B
	jne	.LBB117_27
.LBB117_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_26
.Lfunc_end117:
	.size	GetBestTransformP8x8.88, .Lfunc_end117-GetBestTransformP8x8.88
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.89 # -- Begin function SetCoeffAndReconstruction8x8.89
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.89,@function
SetCoeffAndReconstruction8x8.89:        # @SetCoeffAndReconstruction8x8.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1685245423, -40(%rbp)  # imm = 0x6472CDEF
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB118_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB118_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB118_4
.LBB118_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB118_4
.LBB118_4:                              # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB118_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB118_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB118_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB118_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB118_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_6
.LBB118_9:                              # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB118_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB118_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB118_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB118_11 Depth=1
	movl	$0, -4(%rbp)
.LBB118_13:                             # %for.cond20
                                        #   Parent Loop BB118_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB118_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB118_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB118_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_13
.LBB118_16:                             # %for.end52
                                        #   in Loop: Header=BB118_11 Depth=1
	jmp	.LBB118_17
.LBB118_17:                             # %for.inc53
                                        #   in Loop: Header=BB118_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_11
.LBB118_18:                             # %for.end55
	jmp	.LBB118_28
.LBB118_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB118_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB118_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB118_20 Depth=1
	movl	$0, -4(%rbp)
.LBB118_22:                             # %for.cond60
                                        #   Parent Loop BB118_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB118_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB118_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB118_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_22
.LBB118_25:                             # %for.end86
                                        #   in Loop: Header=BB118_20 Depth=1
	jmp	.LBB118_26
.LBB118_26:                             # %for.inc87
                                        #   in Loop: Header=BB118_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_20
.LBB118_27:                             # %for.end89
	jmp	.LBB118_28
.LBB118_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB118_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB118_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB118_29 Depth=1
	movl	$0, -4(%rbp)
.LBB118_31:                             # %for.cond94
                                        #   Parent Loop BB118_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB118_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB118_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB118_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB118_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB118_35
.LBB118_34:                             # %cond.false127
                                        #   in Loop: Header=BB118_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB118_35
.LBB118_35:                             # %cond.end128
                                        #   in Loop: Header=BB118_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB118_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_31
.LBB118_37:                             # %for.end141
                                        #   in Loop: Header=BB118_29 Depth=1
	jmp	.LBB118_38
.LBB118_38:                             # %for.inc142
                                        #   in Loop: Header=BB118_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_29
.LBB118_39:                             # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB118_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB118_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB118_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB118_41 Depth=1
	movl	$0, -4(%rbp)
.LBB118_43:                             # %for.cond151
                                        #   Parent Loop BB118_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB118_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB118_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB118_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB118_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB118_47
.LBB118_46:                             # %cond.false185
                                        #   in Loop: Header=BB118_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB118_47
.LBB118_47:                             # %cond.end186
                                        #   in Loop: Header=BB118_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB118_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_43
.LBB118_49:                             # %for.end200
                                        #   in Loop: Header=BB118_41 Depth=1
	jmp	.LBB118_50
.LBB118_50:                             # %for.inc201
                                        #   in Loop: Header=BB118_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_41
.LBB118_51:                             # %for.end203
	jmp	.LBB118_52
.LBB118_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB118_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_55 Depth 2
                                        #       Child Loop BB118_57 Depth 3
                                        #         Child Loop BB118_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB118_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB118_53 Depth=1
	movl	$0, -12(%rbp)
.LBB118_55:                             # %for.cond209
                                        #   Parent Loop BB118_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_57 Depth 3
                                        #         Child Loop BB118_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB118_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB118_55 Depth=2
	movl	$0, -8(%rbp)
.LBB118_57:                             # %for.cond213
                                        #   Parent Loop BB118_53 Depth=1
                                        #     Parent Loop BB118_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB118_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB118_57 Depth=3
	movl	$0, -4(%rbp)
.LBB118_59:                             # %for.cond217
                                        #   Parent Loop BB118_53 Depth=1
                                        #     Parent Loop BB118_55 Depth=2
                                        #       Parent Loop BB118_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB118_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB118_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB118_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_59
.LBB118_62:                             # %for.end239
                                        #   in Loop: Header=BB118_57 Depth=3
	jmp	.LBB118_63
.LBB118_63:                             # %for.inc240
                                        #   in Loop: Header=BB118_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_57
.LBB118_64:                             # %for.end242
                                        #   in Loop: Header=BB118_55 Depth=2
	jmp	.LBB118_65
.LBB118_65:                             # %for.inc243
                                        #   in Loop: Header=BB118_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_55
.LBB118_66:                             # %for.end245
                                        #   in Loop: Header=BB118_53 Depth=1
	jmp	.LBB118_67
.LBB118_67:                             # %for.inc246
                                        #   in Loop: Header=BB118_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_53
.LBB118_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB118_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB118_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB118_83
.LBB118_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB118_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB118_72 Depth=1
	movl	$0, -4(%rbp)
.LBB118_74:                             # %for.cond262
                                        #   Parent Loop BB118_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB118_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB118_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB118_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB118_78
.LBB118_77:                             # %if.else278
                                        #   in Loop: Header=BB118_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB118_78:                             # %if.end283
                                        #   in Loop: Header=BB118_74 Depth=2
	jmp	.LBB118_79
.LBB118_79:                             # %for.inc284
                                        #   in Loop: Header=BB118_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_74
.LBB118_80:                             # %for.end286
                                        #   in Loop: Header=BB118_72 Depth=1
	jmp	.LBB118_81
.LBB118_81:                             # %for.inc287
                                        #   in Loop: Header=BB118_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_72
.LBB118_82:                             # %for.end289
	jmp	.LBB118_95
.LBB118_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB118_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB118_84 Depth=1
	movl	$0, -4(%rbp)
.LBB118_86:                             # %for.cond297
                                        #   Parent Loop BB118_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB118_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB118_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB118_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB118_90
.LBB118_89:                             # %if.else317
                                        #   in Loop: Header=BB118_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB118_90:                             # %if.end326
                                        #   in Loop: Header=BB118_86 Depth=2
	jmp	.LBB118_91
.LBB118_91:                             # %for.inc327
                                        #   in Loop: Header=BB118_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_86
.LBB118_92:                             # %for.end329
                                        #   in Loop: Header=BB118_84 Depth=1
	jmp	.LBB118_93
.LBB118_93:                             # %for.inc330
                                        #   in Loop: Header=BB118_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_84
.LBB118_94:                             # %for.end332
	jmp	.LBB118_95
.LBB118_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB118_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB118_96 Depth=1
	movl	$0, -4(%rbp)
.LBB118_98:                             # %for.cond338
                                        #   Parent Loop BB118_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB118_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB118_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_98
.LBB118_101:                            # %for.end384
                                        #   in Loop: Header=BB118_96 Depth=1
	jmp	.LBB118_102
.LBB118_102:                            # %for.inc385
                                        #   in Loop: Header=BB118_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_96
.LBB118_103:                            # %for.end387
	jmp	.LBB118_157
.LBB118_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB118_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_107 Depth 2
                                        #       Child Loop BB118_109 Depth 3
                                        #         Child Loop BB118_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB118_105 Depth=1
	movl	$0, -12(%rbp)
.LBB118_107:                            # %for.cond394
                                        #   Parent Loop BB118_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_109 Depth 3
                                        #         Child Loop BB118_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB118_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB118_107 Depth=2
	movl	$0, -8(%rbp)
.LBB118_109:                            # %for.cond398
                                        #   Parent Loop BB118_105 Depth=1
                                        #     Parent Loop BB118_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB118_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB118_109 Depth=3
	movl	$0, -4(%rbp)
.LBB118_111:                            # %for.cond402
                                        #   Parent Loop BB118_105 Depth=1
                                        #     Parent Loop BB118_107 Depth=2
                                        #       Parent Loop BB118_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB118_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB118_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB118_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_111
.LBB118_114:                            # %for.end425
                                        #   in Loop: Header=BB118_109 Depth=3
	jmp	.LBB118_115
.LBB118_115:                            # %for.inc426
                                        #   in Loop: Header=BB118_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_109
.LBB118_116:                            # %for.end428
                                        #   in Loop: Header=BB118_107 Depth=2
	jmp	.LBB118_117
.LBB118_117:                            # %for.inc429
                                        #   in Loop: Header=BB118_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_107
.LBB118_118:                            # %for.end431
                                        #   in Loop: Header=BB118_105 Depth=1
	jmp	.LBB118_119
.LBB118_119:                            # %for.inc432
                                        #   in Loop: Header=BB118_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_105
.LBB118_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB118_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB118_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB118_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB118_136
.LBB118_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB118_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB118_125 Depth=1
	movl	$0, -4(%rbp)
.LBB118_127:                            # %for.cond458
                                        #   Parent Loop BB118_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB118_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB118_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB118_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB118_131
.LBB118_130:                            # %if.else478
                                        #   in Loop: Header=BB118_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB118_131:                            # %if.end483
                                        #   in Loop: Header=BB118_127 Depth=2
	jmp	.LBB118_132
.LBB118_132:                            # %for.inc484
                                        #   in Loop: Header=BB118_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_127
.LBB118_133:                            # %for.end486
                                        #   in Loop: Header=BB118_125 Depth=1
	jmp	.LBB118_134
.LBB118_134:                            # %for.inc487
                                        #   in Loop: Header=BB118_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_125
.LBB118_135:                            # %for.end489
	jmp	.LBB118_148
.LBB118_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB118_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB118_137 Depth=1
	movl	$0, -4(%rbp)
.LBB118_139:                            # %for.cond498
                                        #   Parent Loop BB118_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB118_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB118_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB118_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB118_143
.LBB118_142:                            # %if.else518
                                        #   in Loop: Header=BB118_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB118_143:                            # %if.end527
                                        #   in Loop: Header=BB118_139 Depth=2
	jmp	.LBB118_144
.LBB118_144:                            # %for.inc528
                                        #   in Loop: Header=BB118_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_139
.LBB118_145:                            # %for.end530
                                        #   in Loop: Header=BB118_137 Depth=1
	jmp	.LBB118_146
.LBB118_146:                            # %for.inc531
                                        #   in Loop: Header=BB118_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_137
.LBB118_147:                            # %for.end533
	jmp	.LBB118_148
.LBB118_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB118_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB118_149 Depth=1
	movl	$0, -4(%rbp)
.LBB118_151:                            # %for.cond539
                                        #   Parent Loop BB118_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB118_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB118_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_151
.LBB118_154:                            # %for.end585
                                        #   in Loop: Header=BB118_149 Depth=1
	jmp	.LBB118_155
.LBB118_155:                            # %for.inc586
                                        #   in Loop: Header=BB118_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_149
.LBB118_156:                            # %for.end588
	jmp	.LBB118_157
.LBB118_157:                            # %if.end589
	cmpl	$1685245423, -40(%rbp)  # imm = 0x6472CDEF
	jne	.LBB118_159
.LBB118_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_158
.Lfunc_end118:
	.size	SetCoeffAndReconstruction8x8.89, .Lfunc_end118-SetCoeffAndReconstruction8x8.89
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.90 # -- Begin function Intra16x16_Mode_Decision.90
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.90,@function
Intra16x16_Mode_Decision.90:            # @Intra16x16_Mode_Decision.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$258610087, -56(%rbp)   # imm = 0xF6A13A7
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB119_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB119_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB119_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB119_4 Depth=1
	movl	$0, -8(%rbp)
.LBB119_6:                              # %for.cond4
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB119_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB119_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_6
.LBB119_9:                              # %for.end
                                        #   in Loop: Header=BB119_4 Depth=1
	jmp	.LBB119_10
.LBB119_10:                             # %for.inc87
                                        #   in Loop: Header=BB119_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_4
.LBB119_11:                             # %for.end89
	jmp	.LBB119_12
.LBB119_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB119_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB119_14 Depth=1
	movl	$0, -8(%rbp)
.LBB119_16:                             # %for.cond99
                                        #   Parent Loop BB119_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB119_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB119_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_16
.LBB119_19:                             # %for.end123
                                        #   in Loop: Header=BB119_14 Depth=1
	jmp	.LBB119_20
.LBB119_20:                             # %for.inc124
                                        #   in Loop: Header=BB119_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_14
.LBB119_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB119_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB119_22 Depth=1
	movl	$0, -8(%rbp)
.LBB119_24:                             # %for.cond132
                                        #   Parent Loop BB119_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB119_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB119_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_24
.LBB119_27:                             # %for.end156
                                        #   in Loop: Header=BB119_22 Depth=1
	jmp	.LBB119_28
.LBB119_28:                             # %for.inc157
                                        #   in Loop: Header=BB119_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_22
.LBB119_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB119_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB119_30 Depth=1
	movl	$0, -8(%rbp)
.LBB119_32:                             # %for.cond165
                                        #   Parent Loop BB119_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB119_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB119_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_32
.LBB119_35:                             # %for.end180
                                        #   in Loop: Header=BB119_30 Depth=1
	jmp	.LBB119_36
.LBB119_36:                             # %for.inc181
                                        #   in Loop: Header=BB119_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_30
.LBB119_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB119_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB119_38 Depth=1
	movl	$0, -8(%rbp)
.LBB119_40:                             # %for.cond190
                                        #   Parent Loop BB119_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -28(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB119_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_44
.LBB119_43:                             # %cond.false
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB119_44:                             # %cond.end
                                        #   in Loop: Header=BB119_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB119_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB119_50
.LBB119_46:                             # %cond.false246
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_49
.LBB119_48:                             # %cond.false260
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_49:                             # %cond.end271
                                        #   in Loop: Header=BB119_40 Depth=2
.LBB119_50:                             # %cond.end273
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB119_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB119_53
.LBB119_52:                             # %cond.false295
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB119_53:                             # %cond.end305
                                        #   in Loop: Header=BB119_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB119_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_59
.LBB119_55:                             # %cond.false311
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_58
.LBB119_57:                             # %cond.false324
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_58:                             # %cond.end334
                                        #   in Loop: Header=BB119_40 Depth=2
.LBB119_59:                             # %cond.end336
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB119_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB119_62
.LBB119_61:                             # %cond.false359
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB119_62:                             # %cond.end370
                                        #   in Loop: Header=BB119_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB119_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB119_68
.LBB119_64:                             # %cond.false376
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_67
.LBB119_66:                             # %cond.false390
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_67:                             # %cond.end401
                                        #   in Loop: Header=BB119_40 Depth=2
.LBB119_68:                             # %cond.end403
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_40
.LBB119_70:                             # %for.end416
                                        #   in Loop: Header=BB119_38 Depth=1
	jmp	.LBB119_71
.LBB119_71:                             # %for.inc417
                                        #   in Loop: Header=BB119_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_38
.LBB119_72:                             # %for.end419
	jmp	.LBB119_73
.LBB119_73:                             # %if.end420
	cmpl	$258610087, -56(%rbp)   # imm = 0xF6A13A7
	jne	.LBB119_75
.LBB119_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_74
.Lfunc_end119:
	.size	Intra16x16_Mode_Decision.90, .Lfunc_end119-Intra16x16_Mode_Decision.90
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.91 # -- Begin function set_mbaff_parameters.91
	.p2align	4, 0x90
	.type	set_mbaff_parameters.91,@function
set_mbaff_parameters.91:                # @set_mbaff_parameters.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1623751820, -32(%rbp)  # imm = 0x60C87C8C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB120_2
# %bb.1:                                # %if.then
	jmp	.LBB120_82
.LBB120_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB120_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB120_3 Depth=1
	movl	$0, -4(%rbp)
.LBB120_5:                              # %for.cond3
                                        #   Parent Loop BB120_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB120_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB120_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_5
.LBB120_8:                              # %for.end
                                        #   in Loop: Header=BB120_3 Depth=1
	jmp	.LBB120_9
.LBB120_9:                              # %for.inc17
                                        #   in Loop: Header=BB120_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_3
.LBB120_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB120_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB120_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB120_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB120_12 Depth=1
	movl	$0, -4(%rbp)
.LBB120_14:                             # %for.cond27
                                        #   Parent Loop BB120_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB120_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB120_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB120_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_14
.LBB120_17:                             # %for.end60
                                        #   in Loop: Header=BB120_12 Depth=1
	jmp	.LBB120_18
.LBB120_18:                             # %for.inc61
                                        #   in Loop: Header=BB120_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_12
.LBB120_19:                             # %for.end63
	jmp	.LBB120_20
.LBB120_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB120_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB120_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB120_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB120_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_26 Depth 2
                                        #       Child Loop BB120_28 Depth 3
                                        #         Child Loop BB120_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB120_24 Depth=1
	movl	$0, -8(%rbp)
.LBB120_26:                             # %for.cond84
                                        #   Parent Loop BB120_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_28 Depth 3
                                        #         Child Loop BB120_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB120_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB120_26 Depth=2
	movl	$0, -12(%rbp)
.LBB120_28:                             # %for.cond88
                                        #   Parent Loop BB120_24 Depth=1
                                        #     Parent Loop BB120_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB120_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB120_28 Depth=3
	movl	$0, -16(%rbp)
.LBB120_30:                             # %for.cond92
                                        #   Parent Loop BB120_24 Depth=1
                                        #     Parent Loop BB120_26 Depth=2
                                        #       Parent Loop BB120_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB120_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB120_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB120_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_30
.LBB120_33:                             # %for.end115
                                        #   in Loop: Header=BB120_28 Depth=3
	jmp	.LBB120_34
.LBB120_34:                             # %for.inc116
                                        #   in Loop: Header=BB120_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_28
.LBB120_35:                             # %for.end118
                                        #   in Loop: Header=BB120_26 Depth=2
	jmp	.LBB120_36
.LBB120_36:                             # %for.inc119
                                        #   in Loop: Header=BB120_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_26
.LBB120_37:                             # %for.end121
                                        #   in Loop: Header=BB120_24 Depth=1
	jmp	.LBB120_38
.LBB120_38:                             # %for.inc122
                                        #   in Loop: Header=BB120_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_24
.LBB120_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB120_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_42 Depth 2
                                        #       Child Loop BB120_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB120_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB120_40 Depth=1
	movl	$0, -12(%rbp)
.LBB120_42:                             # %for.cond129
                                        #   Parent Loop BB120_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB120_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB120_42 Depth=2
	movl	$0, -16(%rbp)
.LBB120_44:                             # %for.cond133
                                        #   Parent Loop BB120_40 Depth=1
                                        #     Parent Loop BB120_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB120_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB120_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB120_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_44
.LBB120_47:                             # %for.end152
                                        #   in Loop: Header=BB120_42 Depth=2
	jmp	.LBB120_48
.LBB120_48:                             # %for.inc153
                                        #   in Loop: Header=BB120_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_42
.LBB120_49:                             # %for.end155
                                        #   in Loop: Header=BB120_40 Depth=1
	jmp	.LBB120_50
.LBB120_50:                             # %for.inc156
                                        #   in Loop: Header=BB120_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_40
.LBB120_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB120_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB120_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB120_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_52
.LBB120_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB120_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB120_56 Depth=1
	movl	$0, -4(%rbp)
.LBB120_58:                             # %for.cond180
                                        #   Parent Loop BB120_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB120_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB120_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_58
.LBB120_61:                             # %for.end198
                                        #   in Loop: Header=BB120_56 Depth=1
	jmp	.LBB120_62
.LBB120_62:                             # %for.inc199
                                        #   in Loop: Header=BB120_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_56
.LBB120_63:                             # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB120_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB120_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB120_65 Depth=1
	movl	$0, -4(%rbp)
.LBB120_67:                             # %for.cond208
                                        #   Parent Loop BB120_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB120_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB120_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_67
.LBB120_70:                             # %for.end230
                                        #   in Loop: Header=BB120_65 Depth=1
	jmp	.LBB120_71
.LBB120_71:                             # %for.inc231
                                        #   in Loop: Header=BB120_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_65
.LBB120_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB120_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB120_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB120_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB120_76:                             # %for.cond244
                                        #   Parent Loop BB120_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB120_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB120_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_76
.LBB120_79:                             # %for.end267
                                        #   in Loop: Header=BB120_74 Depth=1
	jmp	.LBB120_80
.LBB120_80:                             # %for.inc268
                                        #   in Loop: Header=BB120_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_74
.LBB120_81:                             # %for.end270.loopexit
	jmp	.LBB120_82
.LBB120_82:                             # %for.end270
	cmpl	$1623751820, -32(%rbp)  # imm = 0x60C87C8C
	jne	.LBB120_84
.LBB120_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_83
.Lfunc_end120:
	.size	set_mbaff_parameters.91, .Lfunc_end120-set_mbaff_parameters.91
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.92 # -- Begin function StoreNewMotionVectorsBlock8x8.92
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.92,@function
StoreNewMotionVectorsBlock8x8.92:       # @StoreNewMotionVectorsBlock8x8.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1227670666, -72(%rbp)  # imm = 0x492CC48A
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB121_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_4:                              # %for.cond6
                                        #   Parent Loop BB121_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB121_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB121_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_4
.LBB121_7:                              # %for.end
                                        #   in Loop: Header=BB121_2 Depth=1
	jmp	.LBB121_8
.LBB121_8:                              # %for.inc39
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_2
.LBB121_9:                              # %for.end41
	jmp	.LBB121_61
.LBB121_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB121_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_12:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB121_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_14:                             # %for.cond46
                                        #   Parent Loop BB121_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB121_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB121_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_14
.LBB121_17:                             # %for.end119
                                        #   in Loop: Header=BB121_12 Depth=1
	jmp	.LBB121_18
.LBB121_18:                             # %for.inc120
                                        #   in Loop: Header=BB121_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_12
.LBB121_19:                             # %for.end122
	jmp	.LBB121_61
.LBB121_20:                             # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB121_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB121_31
.LBB121_22:                             # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_23:                             # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB121_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_25:                             # %for.cond129
                                        #   Parent Loop BB121_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB121_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB121_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_25
.LBB121_28:                             # %for.end206
                                        #   in Loop: Header=BB121_23 Depth=1
	jmp	.LBB121_29
.LBB121_29:                             # %for.inc207
                                        #   in Loop: Header=BB121_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_23
.LBB121_30:                             # %for.end209
	jmp	.LBB121_40
.LBB121_31:                             # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_32:                             # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_34:                             # %for.cond214
                                        #   Parent Loop BB121_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB121_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB121_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_34
.LBB121_37:                             # %for.end235
                                        #   in Loop: Header=BB121_32 Depth=1
	jmp	.LBB121_38
.LBB121_38:                             # %for.inc236
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_32
.LBB121_39:                             # %for.end238
	jmp	.LBB121_40
.LBB121_40:                             # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB121_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB121_51
.LBB121_42:                             # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_43:                             # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_45:                             # %for.cond247
                                        #   Parent Loop BB121_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB121_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB121_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_45
.LBB121_48:                             # %for.end324
                                        #   in Loop: Header=BB121_43 Depth=1
	jmp	.LBB121_49
.LBB121_49:                             # %for.inc325
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_43
.LBB121_50:                             # %for.end327
	jmp	.LBB121_60
.LBB121_51:                             # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_52:                             # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_54:                             # %for.cond332
                                        #   Parent Loop BB121_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB121_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB121_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_54
.LBB121_57:                             # %for.end353
                                        #   in Loop: Header=BB121_52 Depth=1
	jmp	.LBB121_58
.LBB121_58:                             # %for.inc354
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_52
.LBB121_59:                             # %for.end356
	jmp	.LBB121_60
.LBB121_60:                             # %if.end357
	jmp	.LBB121_61
.LBB121_61:                             # %if.end358
	cmpl	$1227670666, -72(%rbp)  # imm = 0x492CC48A
	jne	.LBB121_63
.LBB121_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_62
.Lfunc_end121:
	.size	StoreNewMotionVectorsBlock8x8.92, .Lfunc_end121-StoreNewMotionVectorsBlock8x8.92
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.93 # -- Begin function RDCost_for_4x4Blocks_Chroma.93
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.93,@function
RDCost_for_4x4Blocks_Chroma.93:         # @RDCost_for_4x4Blocks_Chroma.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$634363530, -56(%rbp)   # imm = 0x25CF9E8A
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB122_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB122_3
.LBB122_2:                              # %if.else
	movl	$0, -32(%rbp)
.LBB122_3:                              # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB122_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB122_18
.LBB122_5:                              # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB122_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB122_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB122_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB122_8:                              # %land.end
                                        #   in Loop: Header=BB122_6 Depth=1
	testb	$1, %al
	jne	.LBB122_9
	jmp	.LBB122_17
.LBB122_9:                              # %for.body
                                        #   in Loop: Header=BB122_6 Depth=1
	movq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB122_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB122_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB122_12
.LBB122_11:                             # %if.else54
                                        #   in Loop: Header=BB122_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB122_12:                             # %if.end55
                                        #   in Loop: Header=BB122_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB122_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB122_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB122_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB122_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB122_15:                             # %lor.end
                                        #   in Loop: Header=BB122_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB122_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB122_6
.LBB122_17:                             # %for.end
	jmp	.LBB122_18
.LBB122_18:                             # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$634363530, -56(%rbp)   # imm = 0x25CF9E8A
	jne	.LBB122_20
.LBB122_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_19
.Lfunc_end122:
	.size	RDCost_for_4x4Blocks_Chroma.93, .Lfunc_end122-RDCost_for_4x4Blocks_Chroma.93
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.94 # -- Begin function Intra16x16_Mode_Decision.94
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.94,@function
Intra16x16_Mode_Decision.94:            # @Intra16x16_Mode_Decision.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$728954364, -56(%rbp)   # imm = 0x2B72F5FC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB123_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB123_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB123_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB123_4 Depth=1
	movl	$0, -4(%rbp)
.LBB123_6:                              # %for.cond4
                                        #   Parent Loop BB123_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB123_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB123_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_6
.LBB123_9:                              # %for.end
                                        #   in Loop: Header=BB123_4 Depth=1
	jmp	.LBB123_10
.LBB123_10:                             # %for.inc87
                                        #   in Loop: Header=BB123_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_4
.LBB123_11:                             # %for.end89
	jmp	.LBB123_12
.LBB123_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB123_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB123_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB123_14 Depth=1
	movl	$0, -4(%rbp)
.LBB123_16:                             # %for.cond99
                                        #   Parent Loop BB123_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB123_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB123_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_16
.LBB123_19:                             # %for.end123
                                        #   in Loop: Header=BB123_14 Depth=1
	jmp	.LBB123_20
.LBB123_20:                             # %for.inc124
                                        #   in Loop: Header=BB123_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_14
.LBB123_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB123_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB123_22 Depth=1
	movl	$0, -4(%rbp)
.LBB123_24:                             # %for.cond132
                                        #   Parent Loop BB123_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB123_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB123_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_24
.LBB123_27:                             # %for.end156
                                        #   in Loop: Header=BB123_22 Depth=1
	jmp	.LBB123_28
.LBB123_28:                             # %for.inc157
                                        #   in Loop: Header=BB123_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_22
.LBB123_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB123_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB123_30 Depth=1
	movl	$0, -4(%rbp)
.LBB123_32:                             # %for.cond165
                                        #   Parent Loop BB123_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB123_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_32
.LBB123_35:                             # %for.end180
                                        #   in Loop: Header=BB123_30 Depth=1
	jmp	.LBB123_36
.LBB123_36:                             # %for.inc181
                                        #   in Loop: Header=BB123_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_30
.LBB123_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB123_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB123_38 Depth=1
	movl	$0, -4(%rbp)
.LBB123_40:                             # %for.cond190
                                        #   Parent Loop BB123_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -24(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -32(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB123_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_44
.LBB123_43:                             # %cond.false
                                        #   in Loop: Header=BB123_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB123_44:                             # %cond.end
                                        #   in Loop: Header=BB123_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB123_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB123_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB123_50
.LBB123_46:                             # %cond.false246
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB123_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_49
.LBB123_48:                             # %cond.false260
                                        #   in Loop: Header=BB123_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB123_49:                             # %cond.end271
                                        #   in Loop: Header=BB123_40 Depth=2
.LBB123_50:                             # %cond.end273
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB123_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB123_53
.LBB123_52:                             # %cond.false295
                                        #   in Loop: Header=BB123_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB123_53:                             # %cond.end305
                                        #   in Loop: Header=BB123_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB123_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB123_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_59
.LBB123_55:                             # %cond.false311
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB123_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_58
.LBB123_57:                             # %cond.false324
                                        #   in Loop: Header=BB123_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB123_58:                             # %cond.end334
                                        #   in Loop: Header=BB123_40 Depth=2
.LBB123_59:                             # %cond.end336
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB123_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB123_62
.LBB123_61:                             # %cond.false359
                                        #   in Loop: Header=BB123_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB123_62:                             # %cond.end370
                                        #   in Loop: Header=BB123_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB123_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB123_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB123_68
.LBB123_64:                             # %cond.false376
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB123_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB123_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_67
.LBB123_66:                             # %cond.false390
                                        #   in Loop: Header=BB123_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB123_67:                             # %cond.end401
                                        #   in Loop: Header=BB123_40 Depth=2
.LBB123_68:                             # %cond.end403
                                        #   in Loop: Header=BB123_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB123_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_40
.LBB123_70:                             # %for.end416
                                        #   in Loop: Header=BB123_38 Depth=1
	jmp	.LBB123_71
.LBB123_71:                             # %for.inc417
                                        #   in Loop: Header=BB123_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_38
.LBB123_72:                             # %for.end419
	jmp	.LBB123_73
.LBB123_73:                             # %if.end420
	cmpl	$728954364, -56(%rbp)   # imm = 0x2B72F5FC
	jne	.LBB123_75
.LBB123_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_74
.Lfunc_end123:
	.size	Intra16x16_Mode_Decision.94, .Lfunc_end123-Intra16x16_Mode_Decision.94
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.95 # -- Begin function store_macroblock_parameters.95
	.p2align	4, 0x90
	.type	store_macroblock_parameters.95,@function
store_macroblock_parameters.95:         # @store_macroblock_parameters.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1031749884, -36(%rbp)  # imm = 0x3D7F40FC
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB124_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB124_3
.LBB124_2:                              # %if.else
	movl	$0, bi_pred_me
.LBB124_3:                              # %if.end
	movl	$0, -4(%rbp)
.LBB124_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB124_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB124_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB124_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_4
.LBB124_7:                              # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB124_8:                              # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB124_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB124_10:                             # %for.cond20
                                        #   Parent Loop BB124_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB124_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB124_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_10
.LBB124_13:                             # %for.end39
                                        #   in Loop: Header=BB124_8 Depth=1
	jmp	.LBB124_14
.LBB124_14:                             # %for.inc40
                                        #   in Loop: Header=BB124_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_8
.LBB124_15:                             # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB124_16:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB124_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB124_16 Depth=1
	movl	$0, -8(%rbp)
.LBB124_18:                             # %for.cond47
                                        #   Parent Loop BB124_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB124_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB124_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB124_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_18
.LBB124_21:                             # %for.end70
                                        #   in Loop: Header=BB124_16 Depth=1
	jmp	.LBB124_22
.LBB124_22:                             # %for.inc71
                                        #   in Loop: Header=BB124_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_16
.LBB124_23:                             # %for.end73
	movl	$0, -8(%rbp)
.LBB124_24:                             # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB124_24 Depth=1
	movl	$0, -4(%rbp)
.LBB124_26:                             # %for.cond78
                                        #   Parent Loop BB124_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB124_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB124_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_26
.LBB124_29:                             # %for.end94
                                        #   in Loop: Header=BB124_24 Depth=1
	jmp	.LBB124_30
.LBB124_30:                             # %for.inc95
                                        #   in Loop: Header=BB124_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_24
.LBB124_31:                             # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB124_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB124_33:                             # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB124_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB124_33 Depth=1
	movl	$0, -4(%rbp)
.LBB124_35:                             # %for.cond105
                                        #   Parent Loop BB124_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB124_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB124_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB124_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_35
.LBB124_38:                             # %for.end136
                                        #   in Loop: Header=BB124_33 Depth=1
	jmp	.LBB124_39
.LBB124_39:                             # %for.inc137
                                        #   in Loop: Header=BB124_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_33
.LBB124_40:                             # %for.end139
	jmp	.LBB124_41
.LBB124_41:                             # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB124_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB124_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB124_44:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_46 Depth 2
                                        #       Child Loop BB124_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB124_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB124_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB124_46:                             # %for.cond152
                                        #   Parent Loop BB124_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB124_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB124_48:                             # %for.cond159
                                        #   Parent Loop BB124_44 Depth=1
                                        #     Parent Loop BB124_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB124_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB124_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_48
.LBB124_51:                             # %for.end179
                                        #   in Loop: Header=BB124_46 Depth=2
	jmp	.LBB124_52
.LBB124_52:                             # %for.inc180
                                        #   in Loop: Header=BB124_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_46
.LBB124_53:                             # %for.end182
                                        #   in Loop: Header=BB124_44 Depth=1
	jmp	.LBB124_54
.LBB124_54:                             # %for.inc183
                                        #   in Loop: Header=BB124_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_44
.LBB124_55:                             # %for.end185
	jmp	.LBB124_56
.LBB124_56:                             # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB124_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB124_59
.LBB124_58:                             # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB124_60
.LBB124_59:                             # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB124_60:                             # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB124_61:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB124_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB124_61 Depth=1
	movl	$0, -4(%rbp)
.LBB124_63:                             # %for.cond197
                                        #   Parent Loop BB124_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB124_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB124_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB124_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB124_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB124_66:                             # %if.end230
                                        #   in Loop: Header=BB124_63 Depth=2
	jmp	.LBB124_67
.LBB124_67:                             # %for.inc231
                                        #   in Loop: Header=BB124_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_63
.LBB124_68:                             # %for.end233
                                        #   in Loop: Header=BB124_61 Depth=1
	jmp	.LBB124_69
.LBB124_69:                             # %for.inc234
                                        #   in Loop: Header=BB124_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_61
.LBB124_70:                             # %for.end236
	cmpl	$1031749884, -36(%rbp)  # imm = 0x3D7F40FC
	jne	.LBB124_72
.LBB124_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_72:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_71
.Lfunc_end124:
	.size	store_macroblock_parameters.95, .Lfunc_end124-store_macroblock_parameters.95
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.96 # -- Begin function set_mbaff_parameters.96
	.p2align	4, 0x90
	.type	set_mbaff_parameters.96,@function
set_mbaff_parameters.96:                # @set_mbaff_parameters.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$255949427, -32(%rbp)   # imm = 0xF417A73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB125_2
# %bb.1:                                # %if.then
	jmp	.LBB125_82
.LBB125_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB125_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB125_3 Depth=1
	movl	$0, -4(%rbp)
.LBB125_5:                              # %for.cond3
                                        #   Parent Loop BB125_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB125_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB125_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_5
.LBB125_8:                              # %for.end
                                        #   in Loop: Header=BB125_3 Depth=1
	jmp	.LBB125_9
.LBB125_9:                              # %for.inc17
                                        #   in Loop: Header=BB125_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_3
.LBB125_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB125_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB125_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB125_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB125_12 Depth=1
	movl	$0, -4(%rbp)
.LBB125_14:                             # %for.cond27
                                        #   Parent Loop BB125_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB125_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB125_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB125_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_14
.LBB125_17:                             # %for.end60
                                        #   in Loop: Header=BB125_12 Depth=1
	jmp	.LBB125_18
.LBB125_18:                             # %for.inc61
                                        #   in Loop: Header=BB125_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_12
.LBB125_19:                             # %for.end63
	jmp	.LBB125_20
.LBB125_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB125_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB125_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB125_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB125_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_26 Depth 2
                                        #       Child Loop BB125_28 Depth 3
                                        #         Child Loop BB125_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB125_24 Depth=1
	movl	$0, -8(%rbp)
.LBB125_26:                             # %for.cond84
                                        #   Parent Loop BB125_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_28 Depth 3
                                        #         Child Loop BB125_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB125_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB125_26 Depth=2
	movl	$0, -12(%rbp)
.LBB125_28:                             # %for.cond88
                                        #   Parent Loop BB125_24 Depth=1
                                        #     Parent Loop BB125_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB125_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB125_28 Depth=3
	movl	$0, -16(%rbp)
.LBB125_30:                             # %for.cond92
                                        #   Parent Loop BB125_24 Depth=1
                                        #     Parent Loop BB125_26 Depth=2
                                        #       Parent Loop BB125_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB125_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB125_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB125_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_30
.LBB125_33:                             # %for.end115
                                        #   in Loop: Header=BB125_28 Depth=3
	jmp	.LBB125_34
.LBB125_34:                             # %for.inc116
                                        #   in Loop: Header=BB125_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_28
.LBB125_35:                             # %for.end118
                                        #   in Loop: Header=BB125_26 Depth=2
	jmp	.LBB125_36
.LBB125_36:                             # %for.inc119
                                        #   in Loop: Header=BB125_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_26
.LBB125_37:                             # %for.end121
                                        #   in Loop: Header=BB125_24 Depth=1
	jmp	.LBB125_38
.LBB125_38:                             # %for.inc122
                                        #   in Loop: Header=BB125_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_24
.LBB125_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB125_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_42 Depth 2
                                        #       Child Loop BB125_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB125_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB125_40 Depth=1
	movl	$0, -12(%rbp)
.LBB125_42:                             # %for.cond129
                                        #   Parent Loop BB125_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB125_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB125_42 Depth=2
	movl	$0, -16(%rbp)
.LBB125_44:                             # %for.cond133
                                        #   Parent Loop BB125_40 Depth=1
                                        #     Parent Loop BB125_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB125_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB125_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB125_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_44
.LBB125_47:                             # %for.end152
                                        #   in Loop: Header=BB125_42 Depth=2
	jmp	.LBB125_48
.LBB125_48:                             # %for.inc153
                                        #   in Loop: Header=BB125_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_42
.LBB125_49:                             # %for.end155
                                        #   in Loop: Header=BB125_40 Depth=1
	jmp	.LBB125_50
.LBB125_50:                             # %for.inc156
                                        #   in Loop: Header=BB125_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_40
.LBB125_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB125_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB125_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB125_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB125_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_52
.LBB125_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB125_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB125_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB125_56 Depth=1
	movl	$0, -4(%rbp)
.LBB125_58:                             # %for.cond180
                                        #   Parent Loop BB125_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB125_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB125_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB125_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_58
.LBB125_61:                             # %for.end198
                                        #   in Loop: Header=BB125_56 Depth=1
	jmp	.LBB125_62
.LBB125_62:                             # %for.inc199
                                        #   in Loop: Header=BB125_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_56
.LBB125_63:                             # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB125_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB125_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB125_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB125_65 Depth=1
	movl	$0, -4(%rbp)
.LBB125_67:                             # %for.cond208
                                        #   Parent Loop BB125_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB125_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB125_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB125_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_67
.LBB125_70:                             # %for.end230
                                        #   in Loop: Header=BB125_65 Depth=1
	jmp	.LBB125_71
.LBB125_71:                             # %for.inc231
                                        #   in Loop: Header=BB125_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_65
.LBB125_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB125_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB125_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB125_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB125_76:                             # %for.cond244
                                        #   Parent Loop BB125_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB125_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB125_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_76
.LBB125_79:                             # %for.end267
                                        #   in Loop: Header=BB125_74 Depth=1
	jmp	.LBB125_80
.LBB125_80:                             # %for.inc268
                                        #   in Loop: Header=BB125_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_74
.LBB125_81:                             # %for.end270.loopexit
	jmp	.LBB125_82
.LBB125_82:                             # %for.end270
	cmpl	$255949427, -32(%rbp)   # imm = 0xF417A73
	jne	.LBB125_84
.LBB125_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_83
.Lfunc_end125:
	.size	set_mbaff_parameters.96, .Lfunc_end125-set_mbaff_parameters.96
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.97
.LCPI126_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.97
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.97,@function
RDCost_for_macroblocks.97:              # @RDCost_for_macroblocks.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$626295462, -100(%rbp)  # imm = 0x255482A6
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB126_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB126_3
.LBB126_2:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB126_3
.LBB126_3:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB126_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB126_5:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB126_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB126_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -16(%rbp)
.LBB126_8:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB126_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB126_8 Depth=1
	movl	$0, -12(%rbp)
.LBB126_10:                             # %for.cond17
                                        #   Parent Loop BB126_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB126_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB126_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB126_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB126_177
.LBB126_13:                             # %if.end
                                        #   in Loop: Header=BB126_10 Depth=2
	jmp	.LBB126_14
.LBB126_14:                             # %for.inc
                                        #   in Loop: Header=BB126_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_10
.LBB126_15:                             # %for.end
                                        #   in Loop: Header=BB126_8 Depth=1
	jmp	.LBB126_16
.LBB126_16:                             # %for.inc30
                                        #   in Loop: Header=BB126_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_8
.LBB126_17:                             # %for.end32
	jmp	.LBB126_18
.LBB126_18:                             # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB126_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB126_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB126_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB126_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB126_177
.LBB126_23:                             # %if.end46
	jmp	.LBB126_76
.LBB126_24:                             # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB126_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB126_75
.LBB126_26:                             # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB126_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB126_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB126_29:                             # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_31 Depth 2
                                        #       Child Loop BB126_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB126_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB126_29 Depth=1
	movl	$0, -12(%rbp)
.LBB126_31:                             # %for.cond61
                                        #   Parent Loop BB126_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB126_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB126_31 Depth=2
	movl	$0, -20(%rbp)
.LBB126_33:                             # %for.cond65
                                        #   Parent Loop BB126_29 Depth=1
                                        #     Parent Loop BB126_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB126_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB126_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB126_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB126_33 Depth=3
	movl	$2, -40(%rbp)
.LBB126_36:                             # %if.end77
                                        #   in Loop: Header=BB126_33 Depth=3
	jmp	.LBB126_37
.LBB126_37:                             # %for.inc78
                                        #   in Loop: Header=BB126_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB126_33
.LBB126_38:                             # %for.end80
                                        #   in Loop: Header=BB126_31 Depth=2
	jmp	.LBB126_39
.LBB126_39:                             # %for.inc81
                                        #   in Loop: Header=BB126_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_31
.LBB126_40:                             # %for.end83
                                        #   in Loop: Header=BB126_29 Depth=1
	jmp	.LBB126_41
.LBB126_41:                             # %for.inc84
                                        #   in Loop: Header=BB126_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_29
.LBB126_42:                             # %for.end86
	movl	$0, -28(%rbp)
.LBB126_43:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB126_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB126_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB126_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB126_43
.LBB126_46:                             # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB126_47:                             # %if.end97
	jmp	.LBB126_74
.LBB126_48:                             # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB126_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB126_73
.LBB126_50:                             # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB126_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB126_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB126_53:                             # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_55 Depth 2
                                        #       Child Loop BB126_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB126_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB126_53 Depth=1
	movl	$0, -12(%rbp)
.LBB126_55:                             # %for.cond115
                                        #   Parent Loop BB126_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB126_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB126_55 Depth=2
	movl	$0, -20(%rbp)
.LBB126_57:                             # %for.cond119
                                        #   Parent Loop BB126_53 Depth=1
                                        #     Parent Loop BB126_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB126_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB126_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB126_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB126_57 Depth=3
	movl	$2, -40(%rbp)
.LBB126_60:                             # %if.end131
                                        #   in Loop: Header=BB126_57 Depth=3
	jmp	.LBB126_61
.LBB126_61:                             # %for.inc132
                                        #   in Loop: Header=BB126_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB126_57
.LBB126_62:                             # %for.end134
                                        #   in Loop: Header=BB126_55 Depth=2
	jmp	.LBB126_63
.LBB126_63:                             # %for.inc135
                                        #   in Loop: Header=BB126_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_55
.LBB126_64:                             # %for.end137
                                        #   in Loop: Header=BB126_53 Depth=1
	jmp	.LBB126_65
.LBB126_65:                             # %for.inc138
                                        #   in Loop: Header=BB126_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_53
.LBB126_66:                             # %for.end140
	movl	$0, -28(%rbp)
.LBB126_67:                             # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB126_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB126_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB126_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB126_67
.LBB126_70:                             # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB126_71:                             # %if.end152
	jmp	.LBB126_72
.LBB126_72:                             # %if.end153
	jmp	.LBB126_73
.LBB126_73:                             # %if.end154
	jmp	.LBB126_74
.LBB126_74:                             # %if.end155
	jmp	.LBB126_75
.LBB126_75:                             # %if.end156
	jmp	.LBB126_76
.LBB126_76:                             # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB126_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB126_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB126_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB126_81
.LBB126_80:                             # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB126_81
.LBB126_81:                             # %cond.end169
	callq	compute_residue_mb
.LBB126_82:                             # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB126_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB126_84:                             # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB126_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB126_84 Depth=1
	movl	$0, -12(%rbp)
.LBB126_86:                             # %for.cond179
                                        #   Parent Loop BB126_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB126_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB126_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB126_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_86
.LBB126_89:                             # %for.end196
                                        #   in Loop: Header=BB126_84 Depth=1
	jmp	.LBB126_90
.LBB126_90:                             # %for.inc197
                                        #   in Loop: Header=BB126_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_84
.LBB126_91:                             # %for.end199
	jmp	.LBB126_101
.LBB126_92:                             # %if.else200
	movl	$0, -16(%rbp)
.LBB126_93:                             # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB126_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB126_93 Depth=1
	movl	$0, -12(%rbp)
.LBB126_95:                             # %for.cond205
                                        #   Parent Loop BB126_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB126_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB126_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB126_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_95
.LBB126_98:                             # %for.end220
                                        #   in Loop: Header=BB126_93 Depth=1
	jmp	.LBB126_99
.LBB126_99:                             # %for.inc221
                                        #   in Loop: Header=BB126_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_93
.LBB126_100:                            # %for.end223
	jmp	.LBB126_101
.LBB126_101:                            # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB126_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB126_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB126_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB126_107
.LBB126_105:                            # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB126_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB126_107:                            # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB126_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB126_109:                            # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB126_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB126_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB126_112:                            # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_114 Depth 2
                                        #       Child Loop BB126_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB126_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB126_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB126_114:                            # %for.cond259
                                        #   Parent Loop BB126_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB126_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB126_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB126_116:                            # %for.cond263
                                        #   Parent Loop BB126_112 Depth=1
                                        #     Parent Loop BB126_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB126_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB126_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_116
.LBB126_119:                            # %for.end291
                                        #   in Loop: Header=BB126_114 Depth=2
	jmp	.LBB126_120
.LBB126_120:                            # %for.inc292
                                        #   in Loop: Header=BB126_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_114
.LBB126_121:                            # %for.end294
                                        #   in Loop: Header=BB126_112 Depth=1
	jmp	.LBB126_122
.LBB126_122:                            # %for.inc295
                                        #   in Loop: Header=BB126_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB126_112
.LBB126_123:                            # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB126_133
.LBB126_124:                            # %if.else300
	movl	$0, -12(%rbp)
.LBB126_125:                            # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB126_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB126_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB126_127:                            # %for.cond306
                                        #   Parent Loop BB126_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB126_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB126_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_127
.LBB126_130:                            # %for.end334
                                        #   in Loop: Header=BB126_125 Depth=1
	jmp	.LBB126_131
.LBB126_131:                            # %for.inc335
                                        #   in Loop: Header=BB126_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_125
.LBB126_132:                            # %for.end337
	jmp	.LBB126_133
.LBB126_133:                            # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB126_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB126_135:                            # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB126_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB126_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB126_137:                            # %for.cond347
                                        #   Parent Loop BB126_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB126_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB126_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_137
.LBB126_140:                            # %for.end398
                                        #   in Loop: Header=BB126_135 Depth=1
	jmp	.LBB126_141
.LBB126_141:                            # %for.inc399
                                        #   in Loop: Header=BB126_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_135
.LBB126_142:                            # %for.end401
	jmp	.LBB126_143
.LBB126_143:                            # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -96(%rbp)
	je	.LBB126_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB126_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB126_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB126_148
.LBB126_147:                            # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB126_149
.LBB126_148:                            # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB126_149:                            # %if.end422
	jmp	.LBB126_151
.LBB126_150:                            # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB126_151:                            # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI126_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB126_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI126_0(%rip), %xmm2 # xmm2 = mem[0],zero
	jmp	.LBB126_154
.LBB126_153:                            # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB126_154:                            # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB126_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB126_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB126_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB126_159
.LBB126_158:                            # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB126_177
.LBB126_159:                            # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB126_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB126_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB126_165
	jmp	.LBB126_176
.LBB126_162:                            # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB126_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB126_176
	jmp	.LBB126_165
.LBB126_164:                            # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB126_165
	jmp	.LBB126_176
.LBB126_165:                            # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB126_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB126_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB126_171
	jmp	.LBB126_174
.LBB126_168:                            # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB126_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB126_174
	jmp	.LBB126_171
.LBB126_170:                            # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB126_171
	jmp	.LBB126_174
.LBB126_171:                            # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB126_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB126_177
.LBB126_173:                            # %if.end482
	jmp	.LBB126_174
.LBB126_174:                            # %if.end483
	jmp	.LBB126_175
.LBB126_175:                            # %if.end484
	jmp	.LBB126_176
.LBB126_176:                            # %if.end485
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB126_177:                            # %return
	movl	-60(%rbp), %ebx
	cmpl	$626295462, -100(%rbp)  # imm = 0x255482A6
	jne	.LBB126_179
.LBB126_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_179:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_178
.Lfunc_end126:
	.size	RDCost_for_macroblocks.97, .Lfunc_end126-RDCost_for_macroblocks.97
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.98 # -- Begin function set_mbaff_parameters.98
	.p2align	4, 0x90
	.type	set_mbaff_parameters.98,@function
set_mbaff_parameters.98:                # @set_mbaff_parameters.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1389488247, -32(%rbp)  # imm = 0x52D1E877
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB127_2
# %bb.1:                                # %if.then
	jmp	.LBB127_82
.LBB127_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB127_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB127_3 Depth=1
	movl	$0, -4(%rbp)
.LBB127_5:                              # %for.cond3
                                        #   Parent Loop BB127_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB127_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB127_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_5
.LBB127_8:                              # %for.end
                                        #   in Loop: Header=BB127_3 Depth=1
	jmp	.LBB127_9
.LBB127_9:                              # %for.inc17
                                        #   in Loop: Header=BB127_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_3
.LBB127_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB127_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB127_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB127_12 Depth=1
	movl	$0, -4(%rbp)
.LBB127_14:                             # %for.cond27
                                        #   Parent Loop BB127_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB127_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB127_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_14
.LBB127_17:                             # %for.end60
                                        #   in Loop: Header=BB127_12 Depth=1
	jmp	.LBB127_18
.LBB127_18:                             # %for.inc61
                                        #   in Loop: Header=BB127_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_12
.LBB127_19:                             # %for.end63
	jmp	.LBB127_20
.LBB127_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB127_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB127_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB127_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB127_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_26 Depth 2
                                        #       Child Loop BB127_28 Depth 3
                                        #         Child Loop BB127_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB127_24 Depth=1
	movl	$0, -8(%rbp)
.LBB127_26:                             # %for.cond84
                                        #   Parent Loop BB127_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_28 Depth 3
                                        #         Child Loop BB127_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB127_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB127_26 Depth=2
	movl	$0, -12(%rbp)
.LBB127_28:                             # %for.cond88
                                        #   Parent Loop BB127_24 Depth=1
                                        #     Parent Loop BB127_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB127_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB127_28 Depth=3
	movl	$0, -16(%rbp)
.LBB127_30:                             # %for.cond92
                                        #   Parent Loop BB127_24 Depth=1
                                        #     Parent Loop BB127_26 Depth=2
                                        #       Parent Loop BB127_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB127_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB127_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB127_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_30
.LBB127_33:                             # %for.end115
                                        #   in Loop: Header=BB127_28 Depth=3
	jmp	.LBB127_34
.LBB127_34:                             # %for.inc116
                                        #   in Loop: Header=BB127_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_28
.LBB127_35:                             # %for.end118
                                        #   in Loop: Header=BB127_26 Depth=2
	jmp	.LBB127_36
.LBB127_36:                             # %for.inc119
                                        #   in Loop: Header=BB127_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_26
.LBB127_37:                             # %for.end121
                                        #   in Loop: Header=BB127_24 Depth=1
	jmp	.LBB127_38
.LBB127_38:                             # %for.inc122
                                        #   in Loop: Header=BB127_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_24
.LBB127_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB127_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_42 Depth 2
                                        #       Child Loop BB127_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB127_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB127_40 Depth=1
	movl	$0, -12(%rbp)
.LBB127_42:                             # %for.cond129
                                        #   Parent Loop BB127_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB127_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB127_42 Depth=2
	movl	$0, -16(%rbp)
.LBB127_44:                             # %for.cond133
                                        #   Parent Loop BB127_40 Depth=1
                                        #     Parent Loop BB127_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB127_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB127_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB127_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_44
.LBB127_47:                             # %for.end152
                                        #   in Loop: Header=BB127_42 Depth=2
	jmp	.LBB127_48
.LBB127_48:                             # %for.inc153
                                        #   in Loop: Header=BB127_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_42
.LBB127_49:                             # %for.end155
                                        #   in Loop: Header=BB127_40 Depth=1
	jmp	.LBB127_50
.LBB127_50:                             # %for.inc156
                                        #   in Loop: Header=BB127_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_40
.LBB127_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB127_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB127_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB127_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB127_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_52
.LBB127_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB127_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB127_56 Depth=1
	movl	$0, -4(%rbp)
.LBB127_58:                             # %for.cond180
                                        #   Parent Loop BB127_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB127_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB127_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_58
.LBB127_61:                             # %for.end198
                                        #   in Loop: Header=BB127_56 Depth=1
	jmp	.LBB127_62
.LBB127_62:                             # %for.inc199
                                        #   in Loop: Header=BB127_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_56
.LBB127_63:                             # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB127_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB127_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB127_65 Depth=1
	movl	$0, -4(%rbp)
.LBB127_67:                             # %for.cond208
                                        #   Parent Loop BB127_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB127_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB127_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_67
.LBB127_70:                             # %for.end230
                                        #   in Loop: Header=BB127_65 Depth=1
	jmp	.LBB127_71
.LBB127_71:                             # %for.inc231
                                        #   in Loop: Header=BB127_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_65
.LBB127_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB127_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB127_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB127_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB127_76:                             # %for.cond244
                                        #   Parent Loop BB127_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB127_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB127_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_76
.LBB127_79:                             # %for.end267
                                        #   in Loop: Header=BB127_74 Depth=1
	jmp	.LBB127_80
.LBB127_80:                             # %for.inc268
                                        #   in Loop: Header=BB127_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_74
.LBB127_81:                             # %for.end270.loopexit
	jmp	.LBB127_82
.LBB127_82:                             # %for.end270
	cmpl	$1389488247, -32(%rbp)  # imm = 0x52D1E877
	jne	.LBB127_84
.LBB127_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_83
.Lfunc_end127:
	.size	set_mbaff_parameters.98, .Lfunc_end127-set_mbaff_parameters.98
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.99 # -- Begin function SetCoeffAndReconstruction8x8.99
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.99,@function
SetCoeffAndReconstruction8x8.99:        # @SetCoeffAndReconstruction8x8.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$709171522, -36(%rbp)   # imm = 0x2A451942
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB128_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB128_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB128_4
.LBB128_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB128_4
.LBB128_4:                              # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB128_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB128_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB128_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB128_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB128_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_6
.LBB128_9:                              # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB128_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB128_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB128_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB128_11 Depth=1
	movl	$0, -4(%rbp)
.LBB128_13:                             # %for.cond20
                                        #   Parent Loop BB128_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB128_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB128_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB128_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_13
.LBB128_16:                             # %for.end52
                                        #   in Loop: Header=BB128_11 Depth=1
	jmp	.LBB128_17
.LBB128_17:                             # %for.inc53
                                        #   in Loop: Header=BB128_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_11
.LBB128_18:                             # %for.end55
	jmp	.LBB128_28
.LBB128_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB128_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB128_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB128_20 Depth=1
	movl	$0, -4(%rbp)
.LBB128_22:                             # %for.cond60
                                        #   Parent Loop BB128_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB128_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB128_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB128_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_22
.LBB128_25:                             # %for.end86
                                        #   in Loop: Header=BB128_20 Depth=1
	jmp	.LBB128_26
.LBB128_26:                             # %for.inc87
                                        #   in Loop: Header=BB128_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_20
.LBB128_27:                             # %for.end89
	jmp	.LBB128_28
.LBB128_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB128_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB128_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB128_29 Depth=1
	movl	$0, -4(%rbp)
.LBB128_31:                             # %for.cond94
                                        #   Parent Loop BB128_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB128_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB128_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB128_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB128_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB128_35
.LBB128_34:                             # %cond.false127
                                        #   in Loop: Header=BB128_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB128_35
.LBB128_35:                             # %cond.end128
                                        #   in Loop: Header=BB128_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB128_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_31
.LBB128_37:                             # %for.end141
                                        #   in Loop: Header=BB128_29 Depth=1
	jmp	.LBB128_38
.LBB128_38:                             # %for.inc142
                                        #   in Loop: Header=BB128_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_29
.LBB128_39:                             # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB128_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB128_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB128_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB128_41 Depth=1
	movl	$0, -4(%rbp)
.LBB128_43:                             # %for.cond151
                                        #   Parent Loop BB128_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB128_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB128_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB128_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB128_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB128_47
.LBB128_46:                             # %cond.false185
                                        #   in Loop: Header=BB128_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB128_47
.LBB128_47:                             # %cond.end186
                                        #   in Loop: Header=BB128_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB128_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_43
.LBB128_49:                             # %for.end200
                                        #   in Loop: Header=BB128_41 Depth=1
	jmp	.LBB128_50
.LBB128_50:                             # %for.inc201
                                        #   in Loop: Header=BB128_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_41
.LBB128_51:                             # %for.end203
	jmp	.LBB128_52
.LBB128_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB128_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_55 Depth 2
                                        #       Child Loop BB128_57 Depth 3
                                        #         Child Loop BB128_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB128_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB128_53 Depth=1
	movl	$0, -12(%rbp)
.LBB128_55:                             # %for.cond209
                                        #   Parent Loop BB128_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_57 Depth 3
                                        #         Child Loop BB128_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB128_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB128_55 Depth=2
	movl	$0, -8(%rbp)
.LBB128_57:                             # %for.cond213
                                        #   Parent Loop BB128_53 Depth=1
                                        #     Parent Loop BB128_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB128_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB128_57 Depth=3
	movl	$0, -4(%rbp)
.LBB128_59:                             # %for.cond217
                                        #   Parent Loop BB128_53 Depth=1
                                        #     Parent Loop BB128_55 Depth=2
                                        #       Parent Loop BB128_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB128_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB128_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB128_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_59
.LBB128_62:                             # %for.end239
                                        #   in Loop: Header=BB128_57 Depth=3
	jmp	.LBB128_63
.LBB128_63:                             # %for.inc240
                                        #   in Loop: Header=BB128_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_57
.LBB128_64:                             # %for.end242
                                        #   in Loop: Header=BB128_55 Depth=2
	jmp	.LBB128_65
.LBB128_65:                             # %for.inc243
                                        #   in Loop: Header=BB128_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_55
.LBB128_66:                             # %for.end245
                                        #   in Loop: Header=BB128_53 Depth=1
	jmp	.LBB128_67
.LBB128_67:                             # %for.inc246
                                        #   in Loop: Header=BB128_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_53
.LBB128_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB128_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB128_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB128_83
.LBB128_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB128_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB128_72 Depth=1
	movl	$0, -4(%rbp)
.LBB128_74:                             # %for.cond262
                                        #   Parent Loop BB128_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB128_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB128_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB128_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB128_78
.LBB128_77:                             # %if.else278
                                        #   in Loop: Header=BB128_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB128_78:                             # %if.end283
                                        #   in Loop: Header=BB128_74 Depth=2
	jmp	.LBB128_79
.LBB128_79:                             # %for.inc284
                                        #   in Loop: Header=BB128_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_74
.LBB128_80:                             # %for.end286
                                        #   in Loop: Header=BB128_72 Depth=1
	jmp	.LBB128_81
.LBB128_81:                             # %for.inc287
                                        #   in Loop: Header=BB128_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_72
.LBB128_82:                             # %for.end289
	jmp	.LBB128_95
.LBB128_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB128_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB128_84 Depth=1
	movl	$0, -4(%rbp)
.LBB128_86:                             # %for.cond297
                                        #   Parent Loop BB128_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB128_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB128_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB128_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB128_90
.LBB128_89:                             # %if.else317
                                        #   in Loop: Header=BB128_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB128_90:                             # %if.end326
                                        #   in Loop: Header=BB128_86 Depth=2
	jmp	.LBB128_91
.LBB128_91:                             # %for.inc327
                                        #   in Loop: Header=BB128_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_86
.LBB128_92:                             # %for.end329
                                        #   in Loop: Header=BB128_84 Depth=1
	jmp	.LBB128_93
.LBB128_93:                             # %for.inc330
                                        #   in Loop: Header=BB128_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_84
.LBB128_94:                             # %for.end332
	jmp	.LBB128_95
.LBB128_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB128_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB128_96 Depth=1
	movl	$0, -4(%rbp)
.LBB128_98:                             # %for.cond338
                                        #   Parent Loop BB128_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB128_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB128_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_98
.LBB128_101:                            # %for.end384
                                        #   in Loop: Header=BB128_96 Depth=1
	jmp	.LBB128_102
.LBB128_102:                            # %for.inc385
                                        #   in Loop: Header=BB128_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_96
.LBB128_103:                            # %for.end387
	jmp	.LBB128_157
.LBB128_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB128_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_107 Depth 2
                                        #       Child Loop BB128_109 Depth 3
                                        #         Child Loop BB128_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB128_105 Depth=1
	movl	$0, -12(%rbp)
.LBB128_107:                            # %for.cond394
                                        #   Parent Loop BB128_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_109 Depth 3
                                        #         Child Loop BB128_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB128_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB128_107 Depth=2
	movl	$0, -8(%rbp)
.LBB128_109:                            # %for.cond398
                                        #   Parent Loop BB128_105 Depth=1
                                        #     Parent Loop BB128_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB128_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB128_109 Depth=3
	movl	$0, -4(%rbp)
.LBB128_111:                            # %for.cond402
                                        #   Parent Loop BB128_105 Depth=1
                                        #     Parent Loop BB128_107 Depth=2
                                        #       Parent Loop BB128_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB128_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB128_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB128_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_111
.LBB128_114:                            # %for.end425
                                        #   in Loop: Header=BB128_109 Depth=3
	jmp	.LBB128_115
.LBB128_115:                            # %for.inc426
                                        #   in Loop: Header=BB128_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_109
.LBB128_116:                            # %for.end428
                                        #   in Loop: Header=BB128_107 Depth=2
	jmp	.LBB128_117
.LBB128_117:                            # %for.inc429
                                        #   in Loop: Header=BB128_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_107
.LBB128_118:                            # %for.end431
                                        #   in Loop: Header=BB128_105 Depth=1
	jmp	.LBB128_119
.LBB128_119:                            # %for.inc432
                                        #   in Loop: Header=BB128_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_105
.LBB128_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB128_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB128_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB128_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB128_136
.LBB128_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB128_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB128_125 Depth=1
	movl	$0, -4(%rbp)
.LBB128_127:                            # %for.cond458
                                        #   Parent Loop BB128_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB128_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB128_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB128_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB128_131
.LBB128_130:                            # %if.else478
                                        #   in Loop: Header=BB128_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB128_131:                            # %if.end483
                                        #   in Loop: Header=BB128_127 Depth=2
	jmp	.LBB128_132
.LBB128_132:                            # %for.inc484
                                        #   in Loop: Header=BB128_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_127
.LBB128_133:                            # %for.end486
                                        #   in Loop: Header=BB128_125 Depth=1
	jmp	.LBB128_134
.LBB128_134:                            # %for.inc487
                                        #   in Loop: Header=BB128_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_125
.LBB128_135:                            # %for.end489
	jmp	.LBB128_148
.LBB128_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB128_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB128_137 Depth=1
	movl	$0, -4(%rbp)
.LBB128_139:                            # %for.cond498
                                        #   Parent Loop BB128_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB128_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB128_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB128_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB128_143
.LBB128_142:                            # %if.else518
                                        #   in Loop: Header=BB128_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB128_143:                            # %if.end527
                                        #   in Loop: Header=BB128_139 Depth=2
	jmp	.LBB128_144
.LBB128_144:                            # %for.inc528
                                        #   in Loop: Header=BB128_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_139
.LBB128_145:                            # %for.end530
                                        #   in Loop: Header=BB128_137 Depth=1
	jmp	.LBB128_146
.LBB128_146:                            # %for.inc531
                                        #   in Loop: Header=BB128_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_137
.LBB128_147:                            # %for.end533
	jmp	.LBB128_148
.LBB128_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB128_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB128_149 Depth=1
	movl	$0, -4(%rbp)
.LBB128_151:                            # %for.cond539
                                        #   Parent Loop BB128_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB128_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB128_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_151
.LBB128_154:                            # %for.end585
                                        #   in Loop: Header=BB128_149 Depth=1
	jmp	.LBB128_155
.LBB128_155:                            # %for.inc586
                                        #   in Loop: Header=BB128_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_149
.LBB128_156:                            # %for.end588
	jmp	.LBB128_157
.LBB128_157:                            # %if.end589
	cmpl	$709171522, -36(%rbp)   # imm = 0x2A451942
	jne	.LBB128_159
.LBB128_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_158
.Lfunc_end128:
	.size	SetCoeffAndReconstruction8x8.99, .Lfunc_end128-SetCoeffAndReconstruction8x8.99
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.100 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.100
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.100,@function
Mode_Decision_for_Intra4x4Macroblock.100: # @Mode_Decision_for_Intra4x4Macroblock.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2015387405, -24(%rbp)  # imm = 0x78205F0D
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB129_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB129_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB129_4:                              # %if.end
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_1
.LBB129_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2015387405, -24(%rbp)  # imm = 0x78205F0D
	jne	.LBB129_8
.LBB129_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_7
.Lfunc_end129:
	.size	Mode_Decision_for_Intra4x4Macroblock.100, .Lfunc_end129-Mode_Decision_for_Intra4x4Macroblock.100
	.cfi_endproc
                                        # -- End function
	.type	cofDC,@object           # @cofDC
	.bss
	.globl	cofDC
	.p2align	3
cofDC:
	.quad	0
	.size	cofDC, 8

	.type	cofAC,@object           # @cofAC
	.globl	cofAC
	.p2align	3
cofAC:
	.quad	0
	.size	cofAC, 8

	.type	cofAC8x8,@object        # @cofAC8x8
	.globl	cofAC8x8
	.p2align	3
cofAC8x8:
	.quad	0
	.size	cofAC8x8, 8

	.type	cofAC4x4intern,@object  # @cofAC4x4intern
	.globl	cofAC4x4intern
	.p2align	3
cofAC4x4intern:
	.quad	0
	.size	cofAC4x4intern, 8

	.type	cofAC_8x8ts,@object     # @cofAC_8x8ts
	.globl	cofAC_8x8ts
	.p2align	3
cofAC_8x8ts:
	.quad	0
	.size	cofAC_8x8ts, 8

	.type	cs_mb,@object           # @cs_mb
	.globl	cs_mb
	.p2align	3
cs_mb:
	.quad	0
	.size	cs_mb, 8

	.type	cs_b8,@object           # @cs_b8
	.globl	cs_b8
	.p2align	3
cs_b8:
	.quad	0
	.size	cs_b8, 8

	.type	cs_cm,@object           # @cs_cm
	.globl	cs_cm
	.p2align	3
cs_cm:
	.quad	0
	.size	cs_cm, 8

	.type	cs_imb,@object          # @cs_imb
	.globl	cs_imb
	.p2align	3
cs_imb:
	.quad	0
	.size	cs_imb, 8

	.type	cs_ib8,@object          # @cs_ib8
	.globl	cs_ib8
	.p2align	3
cs_ib8:
	.quad	0
	.size	cs_ib8, 8

	.type	cs_ib4,@object          # @cs_ib4
	.globl	cs_ib4
	.p2align	3
cs_ib4:
	.quad	0
	.size	cs_ib4, 8

	.type	cs_pc,@object           # @cs_pc
	.globl	cs_pc
	.p2align	3
cs_pc:
	.quad	0
	.size	cs_pc, 8

	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	cofAC4x4,@object        # @cofAC4x4
	.globl	cofAC4x4
	.p2align	3
cofAC4x4:
	.quad	0
	.size	cofAC4x4, 8

	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	cofAC4x4_chroma,@object # @cofAC4x4_chroma
	.comm	cofAC4x4_chroma,288,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp8x8,@object          # @cbp8x8
	.comm	cbp8x8,4,4
	.type	best8x8pdir,@object     # @best8x8pdir
	.comm	best8x8pdir,120,16
	.type	best8x8mode,@object     # @best8x8mode
	.comm	best8x8mode,8,2
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Unsupported mode in SetModesAndRefframeForBlocks!\n"
	.size	.L.str, 51

	.type	best8x8fwref,@object    # @best8x8fwref
	.comm	best8x8fwref,120,16
	.type	best8x8bwref,@object    # @best8x8bwref
	.comm	best8x8bwref,120,16
	.type	part8x8mode,@object     # @part8x8mode
	.comm	part8x8mode,16,16
	.type	part8x8pdir,@object     # @part8x8pdir
	.comm	part8x8pdir,8,2
	.type	part8x8fwref,@object    # @part8x8fwref
	.comm	part8x8fwref,8,2
	.type	part8x8bwref,@object    # @part8x8bwref
	.comm	part8x8bwref,8,2
	.type	cnt_nonz8_8x8ts,@object # @cnt_nonz8_8x8ts
	.comm	cnt_nonz8_8x8ts,4,4
	.type	mpr_8x8ts,@object       # @mpr_8x8ts
	.comm	mpr_8x8ts,512,16
	.type	cbp8_8x8ts,@object      # @cbp8_8x8ts
	.comm	cbp8_8x8ts,4,4
	.type	cbp_blk8_8x8ts,@object  # @cbp_blk8_8x8ts
	.comm	cbp_blk8_8x8ts,8,8
	.type	rec_mbY_8x8ts,@object   # @rec_mbY_8x8ts
	.comm	rec_mbY_8x8ts,512,16
	.type	rec_resG_8x8ts,@object  # @rec_resG_8x8ts
	.comm	rec_resG_8x8ts,1024,16
	.type	mprRGB_8x8ts,@object    # @mprRGB_8x8ts
	.comm	mprRGB_8x8ts,3072,16
	.type	resTrans_R_8x8ts,@object # @resTrans_R_8x8ts
	.comm	resTrans_R_8x8ts,1024,16
	.type	resTrans_B_8x8ts,@object # @resTrans_B_8x8ts
	.comm	resTrans_B_8x8ts,1024,16
	.type	cnt_nonz_8x8,@object    # @cnt_nonz_8x8
	.comm	cnt_nonz_8x8,4,4
	.type	mpr8x8,@object          # @mpr8x8
	.comm	mpr8x8,512,16
	.type	cbp_blk8x8,@object      # @cbp_blk8x8
	.comm	cbp_blk8x8,4,4
	.type	rec_mbY8x8,@object      # @rec_mbY8x8
	.comm	rec_mbY8x8,512,16
	.type	rec_resG_8x8,@object    # @rec_resG_8x8
	.comm	rec_resG_8x8,1024,16
	.type	mprRGB_8x8,@object      # @mprRGB_8x8
	.comm	mprRGB_8x8,3072,16
	.type	resTrans_R_8x8,@object  # @resTrans_R_8x8
	.comm	resTrans_R_8x8,1024,16
	.type	resTrans_B_8x8,@object  # @resTrans_B_8x8
	.comm	resTrans_B_8x8,1024,16
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"invalid direction mode"
	.size	.L.str.1, 23

	.type	pred,@object            # @pred
	.local	pred
	.comm	pred,1024,16
	.type	best_mode,@object       # @best_mode
	.comm	best_mode,4,4
	.type	best_c_imode,@object    # @best_c_imode
	.comm	best_c_imode,4,4
	.type	best_i16offset,@object  # @best_i16offset
	.comm	best_i16offset,4,4
	.type	bi_pred_me,@object      # @bi_pred_me
	.comm	bi_pred_me,4,4
	.type	b8mode,@object          # @b8mode
	.comm	b8mode,8,2
	.type	b8pdir,@object          # @b8pdir
	.comm	b8pdir,8,2
	.type	b4_ipredmode,@object    # @b4_ipredmode
	.comm	b4_ipredmode,64,16
	.type	b4_intra_pred_modes,@object # @b4_intra_pred_modes
	.comm	b4_intra_pred_modes,64,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	rec_mbY,@object         # @rec_mbY
	.comm	rec_mbY,512,16
	.type	rec_mbU,@object         # @rec_mbU
	.comm	rec_mbU,512,16
	.type	rec_mbV,@object         # @rec_mbV
	.comm	rec_mbV,512,16
	.type	cbp,@object             # @cbp
	.comm	cbp,4,4
	.type	cbp_blk,@object         # @cbp_blk
	.comm	cbp_blk,8,8
	.type	luma_transform_size_8x8_flag,@object # @luma_transform_size_8x8_flag
	.comm	luma_transform_size_8x8_flag,4,4
	.type	frefframe,@object       # @frefframe
	.comm	frefframe,32,16
	.type	brefframe,@object       # @brefframe
	.comm	brefframe,32,16
	.type	all_mv8x8,@object       # @all_mv8x8
	.comm	all_mv8x8,256,16
	.type	pred_mv8x8,@object      # @pred_mv8x8
	.comm	pred_mv8x8,256,16
	.type	encode_one_macroblock.b8_mode_table,@object # @encode_one_macroblock.b8_mode_table
	.section	.rodata,"a",@progbits
	.p2align	4
encode_one_macroblock.b8_mode_table:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.size	encode_one_macroblock.b8_mode_table, 24

	.type	encode_one_macroblock.mb_mode_table,@object # @encode_one_macroblock.mb_mode_table
	.p2align	4
encode_one_macroblock.mb_mode_table:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table, 32

	.type	encode_one_macroblock.mb_mode_table_RCT,@object # @encode_one_macroblock.mb_mode_table_RCT
	.p2align	4
encode_one_macroblock.mb_mode_table_RCT:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table_RCT, 44

	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	cost8_8x8ts,@object     # @cost8_8x8ts
	.comm	cost8_8x8ts,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	temp_imgU,@object       # @temp_imgU
	.comm	temp_imgU,512,16
	.type	temp_imgV,@object       # @temp_imgV
	.comm	temp_imgV,512,16
	.type	temp_imgY,@object       # @temp_imgY
	.comm	temp_imgY,512,16
	.type	DELTA_QP,@object        # @DELTA_QP
	.comm	DELTA_QP,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	DELTA_QP2,@object       # @DELTA_QP2
	.comm	DELTA_QP2,4,4
	.type	QP2,@object             # @QP2
	.comm	QP2,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	best_transform_size,@object # @best_transform_size
	.comm	best_transform_size,16,16
	.type	NoMbPartLessThan8x8Flag,@object # @NoMbPartLessThan8x8Flag
	.comm	NoMbPartLessThan8x8Flag,4,4
	.type	mv8x8,@object           # @mv8x8
	.comm	mv8x8,128,16
	.type	ref8x8,@object          # @ref8x8
	.comm	ref8x8,64,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
