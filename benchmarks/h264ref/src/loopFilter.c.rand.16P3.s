	.text
	.file	"loopFilter.c"
	.globl	DeblockFrame            # -- Begin function DeblockFrame
	.p2align	4, 0x90
	.type	DeblockFrame,@function
DeblockFrame:                           # @DeblockFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_DeblockFrame.2
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_DeblockFrame.6
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_DeblockFrame.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_DeblockFrame.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_DeblockFrame.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_DeblockFrame.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_DeblockFrame.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_DeblockFrame.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_DeblockFrame.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_DeblockFrame.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_DeblockFrame.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_DeblockFrame.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_DeblockFrame.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_DeblockFrame.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_DeblockFrame.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_DeblockFrame.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	DeblockFrame, .Lfunc_end0-DeblockFrame
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb               # -- Begin function DeblockMb
	.p2align	4, 0x90
	.type	DeblockMb,@function
DeblockMb:                              # @DeblockMb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_DeblockMb.1
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.1
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_DeblockMb.7
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.7
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_DeblockMb.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.10
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_DeblockMb.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.11
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_DeblockMb.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.12
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_DeblockMb.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.16
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_DeblockMb.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.17
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_DeblockMb.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.18
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_DeblockMb.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.22
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_DeblockMb.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.24
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_DeblockMb.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.25
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_DeblockMb.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.30
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_DeblockMb.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.32
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_DeblockMb.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.33
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_DeblockMb.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.38
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_DeblockMb.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.42
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	DeblockMb, .Lfunc_end1-DeblockMb
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength             # -- Begin function GetStrength
	.p2align	4, 0x90
	.type	GetStrength,@function
GetStrength:                            # @GetStrength
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_17
# %bb.1:                                # %func_GetStrength.4
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	GetStrength.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_GetStrength.9
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_GetStrength.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_GetStrength.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_GetStrength.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_GetStrength.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_GetStrength.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_GetStrength.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %func_GetStrength.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_10:                               # %func_GetStrength.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_11:                               # %func_GetStrength.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_12:                               # %func_GetStrength.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_13:                               # %func_GetStrength.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_14:                               # %func_GetStrength.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_15:                               # %func_GetStrength.60
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_16:                               # %func_GetStrength.63
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movl	-44(%rbp), %r10d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %r9d
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r14
	movq	%rdi, %rbx
	je	.LBB2_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB2_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB2_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB2_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB2_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB2_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB2_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB2_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB2_15
	jmp	.LBB2_16
.Lfunc_end2:
	.size	GetStrength, .Lfunc_end2-GetStrength
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop                # -- Begin function EdgeLoop
	.p2align	4, 0x90
	.type	EdgeLoop,@function
EdgeLoop:                               # @EdgeLoop
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movq	%rdx, %r13
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_EdgeLoop.3
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.3
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_EdgeLoop.5
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.5
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_EdgeLoop.8
	.cfi_def_cfa %rbp, 16
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	%r14d, 32(%rsp)
	callq	EdgeLoop.8
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_EdgeLoop.13
	.cfi_def_cfa %rbp, 16
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.13
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_EdgeLoop.34
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.34
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_EdgeLoop.43
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.43
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_EdgeLoop.44
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.44
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_EdgeLoop.47
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.47
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_EdgeLoop.49
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.49
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_EdgeLoop.51
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.51
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_EdgeLoop.53
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.53
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_EdgeLoop.54
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.54
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_EdgeLoop.55
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.55
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_EdgeLoop.56
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.56
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_EdgeLoop.58
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.58
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_EdgeLoop.59
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.59
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movl	-44(%rbp), %ebx         # 4-byte Reload
	movl	16(%rbp), %r13d
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	48(%rbp), %r14d
	movl	40(%rbp), %r12d
	movl	24(%rbp), %r10d
	movl	%r13d, %r11d
	movl	%ebx, %r9d
	movl	%r15d, %r8d
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	movl	%r8d, -48(%rbp)         # 4-byte Spill
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	movq	%rsi, %r9
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	EdgeLoop, .Lfunc_end3-EdgeLoop
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.1             # -- Begin function DeblockMb.1
	.p2align	4, 0x90
	.type	DeblockMb.1,@function
DeblockMb.1:                            # @DeblockMb.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1255926832, -112(%rbp) # imm = 0x4ADBEC30
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB4_2
# %bb.1:                                # %if.then
	jmp	.LBB4_2
.LBB4_2:                                # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB4_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB4_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB4_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB4_6:                                # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB4_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB4_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB4_9:                                # %land.end
.LBB4_10:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB4_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB4_12:                               # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB4_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB4_61
.LBB4_14:                               # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB4_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB4_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB4_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB4_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB4_20
.LBB4_19:                               # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB4_20:                               # %if.end40
	jmp	.LBB4_21
.LBB4_21:                               # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB4_22:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_29 Depth 2
                                        #       Child Loop BB4_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB4_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB4_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB4_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB4_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB4_28
.LBB4_25:                               # %lor.rhs47
                                        #   in Loop: Header=BB4_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB4_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB4_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB4_27:                               # %land.end51
                                        #   in Loop: Header=BB4_22 Depth=1
.LBB4_28:                               # %lor.end52
                                        #   in Loop: Header=BB4_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB4_29:                               # %for.cond54
                                        #   Parent Loop BB4_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB4_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB4_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB4_56
.LBB4_32:                               # %if.then60
                                        #   in Loop: Header=BB4_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB4_33:                               # %for.cond70
                                        #   Parent Loop BB4_22 Depth=1
                                        #     Parent Loop BB4_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB4_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB4_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB4_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB4_33
.LBB4_36:                               # %for.end
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB4_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB4_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB4_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB4_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB4_39:                               # %if.end84
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB4_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB4_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB4_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB4_42:                               # %if.end100
                                        #   in Loop: Header=BB4_29 Depth=2
	jmp	.LBB4_43
.LBB4_43:                               # %if.end101
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB4_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB4_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB4_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB4_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB4_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB4_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB4_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB4_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB4_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB4_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB4_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB4_50:                               # %if.end125
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB4_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB4_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB4_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB4_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB4_53:                               # %if.end142
                                        #   in Loop: Header=BB4_29 Depth=2
	jmp	.LBB4_54
.LBB4_54:                               # %if.end143
                                        #   in Loop: Header=BB4_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB4_55:                               # %if.end145
                                        #   in Loop: Header=BB4_29 Depth=2
	jmp	.LBB4_56
.LBB4_56:                               # %if.end146
                                        #   in Loop: Header=BB4_29 Depth=2
	jmp	.LBB4_57
.LBB4_57:                               # %for.inc147
                                        #   in Loop: Header=BB4_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB4_29
.LBB4_58:                               # %for.end149
                                        #   in Loop: Header=BB4_22 Depth=1
	jmp	.LBB4_59
.LBB4_59:                               # %for.inc150
                                        #   in Loop: Header=BB4_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_22
.LBB4_60:                               # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB4_61:                               # %return
	cmpl	$1255926832, -112(%rbp) # imm = 0x4ADBEC30
	jne	.LBB4_63
.LBB4_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_63:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB4_62
.Lfunc_end4:
	.size	DeblockMb.1, .Lfunc_end4-DeblockMb.1
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.2          # -- Begin function DeblockFrame.2
	.p2align	4, 0x90
	.type	DeblockFrame.2,@function
DeblockFrame.2:                         # @DeblockFrame.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$194360477, -8(%rbp)    # imm = 0xB95B49D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB5_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB5_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB5_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB5_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_1
.LBB5_4:                                # %for.end
	cmpl	$194360477, -8(%rbp)    # imm = 0xB95B49D
	jne	.LBB5_6
.LBB5_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB5_5
.Lfunc_end5:
	.size	DeblockFrame.2, .Lfunc_end5-DeblockFrame.2
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.3              # -- Begin function EdgeLoop.3
	.p2align	4, 0x90
	.type	EdgeLoop.3,@function
EdgeLoop.3:                             # @EdgeLoop.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$974453599, -196(%rbp)  # imm = 0x3A14FB5F
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB6_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB6_3
.LBB6_2:                                # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB6_3:                                # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB6_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB6_6
.LBB6_5:                                # %cond.false
	movl	$16, %eax
	jmp	.LBB6_6
.LBB6_6:                                # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB6_7:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB6_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB6_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB6_11
.LBB6_10:                               # %cond.false8
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB6_11:                               # %cond.end10
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB6_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB6_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB6_15
.LBB6_14:                               # %cond.false17
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	$1, %eax
	jmp	.LBB6_15
.LBB6_15:                               # %cond.end18
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_17
.LBB6_16:                               # %cond.false20
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-60(%rbp), %eax
.LBB6_17:                               # %cond.end21
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-136(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB6_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB6_19:                               # %lor.end
                                        #   in Loop: Header=BB6_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB6_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB6_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB6_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB6_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB6_25
.LBB6_24:                               # %cond.false47
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB6_25:                               # %cond.end49
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_27
.LBB6_26:                               # %cond.false51
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB6_27:                               # %cond.end52
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB6_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB6_157
.LBB6_29:                               # %if.then57
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB6_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB6_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB6_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB6_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB6_34
.LBB6_33:                               # %cond.false66
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	32(%rbp), %eax
.LBB6_34:                               # %cond.end67
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_36
.LBB6_35:                               # %cond.false69
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	$1, %eax
	jmp	.LBB6_36
.LBB6_36:                               # %cond.end70
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB6_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB6_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB6_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB6_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB6_41
.LBB6_40:                               # %cond.false81
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	32(%rbp), %eax
.LBB6_41:                               # %cond.end82
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_43
.LBB6_42:                               # %cond.false84
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	$1, %eax
	jmp	.LBB6_43
.LBB6_43:                               # %cond.end85
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB6_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB6_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB6_50
.LBB6_46:                               # %cond.false105
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB6_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	$51, %eax
	jmp	.LBB6_49
.LBB6_48:                               # %cond.false114
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB6_49:                               # %cond.end120
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_50:                               # %cond.end122
                                        #   in Loop: Header=BB6_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB6_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB6_56
.LBB6_52:                               # %cond.false135
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB6_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB6_55
.LBB6_54:                               # %cond.false144
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB6_55:                               # %cond.end150
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_56:                               # %cond.end152
                                        #   in Loop: Header=BB6_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB6_58
.LBB6_57:                               # %cond.false160
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB6_58:                               # %cond.end166
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB6_64
.LBB6_60:                               # %cond.false172
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB6_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	$51, %eax
	jmp	.LBB6_63
.LBB6_62:                               # %cond.false177
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB6_63:                               # %cond.end179
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_64:                               # %cond.end181
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB6_70
.LBB6_66:                               # %cond.false187
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB6_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB6_69
.LBB6_68:                               # %cond.false192
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB6_69:                               # %cond.end194
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_70:                               # %cond.end196
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -192(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB6_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB6_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB6_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB6_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB6_75:                               # %if.end271
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB6_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB6_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB6_97
.LBB6_78:                               # %if.else292
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB6_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB6_81
.LBB6_80:                               # %cond.false307
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB6_81:                               # %cond.end313
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB6_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB6_84
.LBB6_83:                               # %cond.false325
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB6_84:                               # %cond.end331
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB6_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB6_87
.LBB6_86:                               # %cond.false342
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-16(%rbp), %eax
.LBB6_87:                               # %cond.end343
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB6_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB6_90
.LBB6_89:                               # %cond.false355
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-12(%rbp), %eax
.LBB6_90:                               # %cond.end356
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB6_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB6_93
.LBB6_92:                               # %cond.false371
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-40(%rbp), %eax
.LBB6_93:                               # %cond.end372
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB6_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB6_96
.LBB6_95:                               # %cond.false387
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-44(%rbp), %eax
.LBB6_96:                               # %cond.end388
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB6_97:                               # %if.end395
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_153
.LBB6_98:                               # %if.else396
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB6_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB6_101
.LBB6_100:                              # %cond.false400
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB6_101:                              # %cond.end403
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB6_107
.LBB6_103:                              # %cond.false415
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB6_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB6_106
.LBB6_105:                              # %cond.false424
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB6_106:                              # %cond.end430
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_107:                              # %cond.end432
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB6_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB6_114
.LBB6_110:                              # %cond.false440
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB6_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB6_113
.LBB6_112:                              # %cond.false446
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB6_113:                              # %cond.end448
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_114:                              # %cond.end450
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB6_120
.LBB6_116:                              # %cond.false458
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB6_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB6_119
.LBB6_118:                              # %cond.false465
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB6_119:                              # %cond.end467
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_120:                              # %cond.end469
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB6_134
.LBB6_121:                              # %if.else473
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB6_127
.LBB6_123:                              # %cond.false478
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB6_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB6_126
.LBB6_125:                              # %cond.false484
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB6_126:                              # %cond.end486
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_127:                              # %cond.end488
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB6_133
.LBB6_129:                              # %cond.false496
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB6_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB6_132
.LBB6_131:                              # %cond.false503
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB6_132:                              # %cond.end505
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_133:                              # %cond.end507
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB6_134:                              # %if.end511
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB6_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB6_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB6_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB6_142
.LBB6_138:                              # %cond.false527
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB6_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB6_141
.LBB6_140:                              # %cond.false537
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB6_141:                              # %cond.end544
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_142:                              # %cond.end546
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB6_143:                              # %if.end554
                                        #   in Loop: Header=BB6_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB6_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB6_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB6_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB6_150
.LBB6_146:                              # %cond.false568
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB6_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB6_149
.LBB6_148:                              # %cond.false578
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB6_149:                              # %cond.end585
                                        #   in Loop: Header=BB6_7 Depth=1
.LBB6_150:                              # %cond.end587
                                        #   in Loop: Header=BB6_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB6_151:                              # %if.end594
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_152
.LBB6_152:                              # %if.end595
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_153
.LBB6_153:                              # %if.end596
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_154
.LBB6_154:                              # %if.end597
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_155
.LBB6_155:                              # %if.end598
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_156
.LBB6_156:                              # %if.end599
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_157
.LBB6_157:                              # %if.end600
                                        #   in Loop: Header=BB6_7 Depth=1
	jmp	.LBB6_158
.LBB6_158:                              # %for.inc
                                        #   in Loop: Header=BB6_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB6_7
.LBB6_159:                              # %for.end
	cmpl	$974453599, -196(%rbp)  # imm = 0x3A14FB5F
	jne	.LBB6_161
.LBB6_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_161:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB6_160
.Lfunc_end6:
	.size	EdgeLoop.3, .Lfunc_end6-EdgeLoop.3
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.4           # -- Begin function GetStrength.4
	.p2align	4, 0x90
	.type	GetStrength.4,@function
GetStrength.4:                          # @GetStrength.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$839185266, -140(%rbp)  # imm = 0x3204F372
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB7_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB7_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB7_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB7_5
.LBB7_4:                                # %cond.false
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB7_5:                                # %cond.end
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB7_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB7_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB7_9
.LBB7_8:                                # %cond.false15
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	$1, %eax
	jmp	.LBB7_9
.LBB7_9:                                # %cond.end16
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_11
.LBB7_10:                               # %cond.false18
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	-28(%rbp), %eax
.LBB7_11:                               # %cond.end19
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-148(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB7_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB7_25
.LBB7_13:                               # %if.then
                                        #   in Loop: Header=BB7_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB7_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB7_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB7_23
.LBB7_16:                               # %lor.lhs.false45
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB7_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB7_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB7_23
.LBB7_19:                               # %lor.rhs
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB7_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB7_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB7_22
.LBB7_21:                               # %land.rhs60
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB7_22:                               # %land.end
                                        #   in Loop: Header=BB7_1 Depth=1
.LBB7_23:                               # %lor.end
                                        #   in Loop: Header=BB7_1 Depth=1
.LBB7_24:                               # %land.end62
                                        #   in Loop: Header=BB7_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB7_79
.LBB7_25:                               # %if.else
                                        #   in Loop: Header=BB7_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB7_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB7_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB7_35
.LBB7_28:                               # %lor.lhs.false76
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB7_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB7_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB7_35
.LBB7_31:                               # %lor.rhs85
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB7_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB7_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB7_34
.LBB7_33:                               # %land.rhs92
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB7_34:                               # %land.end95
                                        #   in Loop: Header=BB7_1 Depth=1
.LBB7_35:                               # %lor.end96
                                        #   in Loop: Header=BB7_1 Depth=1
.LBB7_36:                               # %land.end97
                                        #   in Loop: Header=BB7_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB7_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB7_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB7_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB7_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB7_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB7_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB7_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB7_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB7_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB7_47
.LBB7_46:                               # %if.then144
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB7_77
.LBB7_47:                               # %if.else147
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB7_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB7_76
.LBB7_49:                               # %if.else152
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB7_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB7_52
.LBB7_51:                               # %cond.false169
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB7_52:                               # %cond.end174
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB7_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB7_55
.LBB7_54:                               # %cond.false184
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB7_55:                               # %cond.end189
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB7_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB7_58
.LBB7_57:                               # %cond.false199
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB7_58:                               # %cond.end204
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB7_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB7_61
.LBB7_60:                               # %cond.false214
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB7_61:                               # %cond.end219
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB7_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB7_65
.LBB7_63:                               # %lor.lhs.false226
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB7_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB7_74
.LBB7_65:                               # %if.then232
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB7_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB7_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB7_69
.LBB7_68:                               # %if.else309
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB7_69:                               # %if.end
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_73
.LBB7_70:                               # %if.else380
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB7_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB7_72:                               # %land.end518
                                        #   in Loop: Header=BB7_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB7_73:                               # %if.end522
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_75
.LBB7_74:                               # %if.else523
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB7_75:                               # %if.end526
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_76
.LBB7_76:                               # %if.end527
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_77
.LBB7_77:                               # %if.end528
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_78
.LBB7_78:                               # %if.end529
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_79
.LBB7_79:                               # %if.end530
                                        #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_80
.LBB7_80:                               # %for.inc
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_1
.LBB7_81:                               # %for.end
	cmpl	$839185266, -140(%rbp)  # imm = 0x3204F372
	jne	.LBB7_83
.LBB7_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_83:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB7_82
.Lfunc_end7:
	.size	GetStrength.4, .Lfunc_end7-GetStrength.4
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.5              # -- Begin function EdgeLoop.5
	.p2align	4, 0x90
	.type	EdgeLoop.5,@function
EdgeLoop.5:                             # @EdgeLoop.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$829306583, -180(%rbp)  # imm = 0x316E36D7
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB8_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB8_3
.LBB8_2:                                # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB8_3:                                # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB8_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB8_6
.LBB8_5:                                # %cond.false
	movl	$16, %eax
	jmp	.LBB8_6
.LBB8_6:                                # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB8_7:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB8_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB8_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB8_11
.LBB8_10:                               # %cond.false8
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB8_11:                               # %cond.end10
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB8_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB8_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB8_15
.LBB8_14:                               # %cond.false17
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	$1, %eax
	jmp	.LBB8_15
.LBB8_15:                               # %cond.end18
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_17
.LBB8_16:                               # %cond.false20
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-60(%rbp), %eax
.LBB8_17:                               # %cond.end21
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-132(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB8_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB8_19:                               # %lor.end
                                        #   in Loop: Header=BB8_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB8_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB8_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB8_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB8_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB8_25
.LBB8_24:                               # %cond.false47
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB8_25:                               # %cond.end49
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_27
.LBB8_26:                               # %cond.false51
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB8_27:                               # %cond.end52
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB8_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB8_157
.LBB8_29:                               # %if.then57
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB8_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB8_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB8_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB8_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB8_34
.LBB8_33:                               # %cond.false66
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	32(%rbp), %eax
.LBB8_34:                               # %cond.end67
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_36
.LBB8_35:                               # %cond.false69
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	$1, %eax
	jmp	.LBB8_36
.LBB8_36:                               # %cond.end70
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB8_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB8_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB8_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB8_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB8_41
.LBB8_40:                               # %cond.false81
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	32(%rbp), %eax
.LBB8_41:                               # %cond.end82
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_43
.LBB8_42:                               # %cond.false84
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	$1, %eax
	jmp	.LBB8_43
.LBB8_43:                               # %cond.end85
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB8_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB8_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB8_50
.LBB8_46:                               # %cond.false105
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB8_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	$51, %eax
	jmp	.LBB8_49
.LBB8_48:                               # %cond.false114
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB8_49:                               # %cond.end120
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_50:                               # %cond.end122
                                        #   in Loop: Header=BB8_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB8_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB8_56
.LBB8_52:                               # %cond.false135
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB8_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB8_55
.LBB8_54:                               # %cond.false144
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB8_55:                               # %cond.end150
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_56:                               # %cond.end152
                                        #   in Loop: Header=BB8_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB8_58
.LBB8_57:                               # %cond.false160
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB8_58:                               # %cond.end166
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB8_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB8_64
.LBB8_60:                               # %cond.false172
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB8_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	$51, %eax
	jmp	.LBB8_63
.LBB8_62:                               # %cond.false177
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB8_63:                               # %cond.end179
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_64:                               # %cond.end181
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB8_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB8_70
.LBB8_66:                               # %cond.false187
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB8_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB8_69
.LBB8_68:                               # %cond.false192
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB8_69:                               # %cond.end194
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_70:                               # %cond.end196
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB8_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -136(%rbp)
	callq	abs
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB8_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB8_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB8_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB8_75:                               # %if.end271
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB8_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB8_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB8_97
.LBB8_78:                               # %if.else292
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-152(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB8_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB8_81
.LBB8_80:                               # %cond.false307
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB8_81:                               # %cond.end313
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB8_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB8_84
.LBB8_83:                               # %cond.false325
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB8_84:                               # %cond.end331
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB8_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB8_87
.LBB8_86:                               # %cond.false342
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-12(%rbp), %eax
.LBB8_87:                               # %cond.end343
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB8_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB8_90
.LBB8_89:                               # %cond.false355
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-16(%rbp), %eax
.LBB8_90:                               # %cond.end356
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB8_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB8_93
.LBB8_92:                               # %cond.false371
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-36(%rbp), %eax
.LBB8_93:                               # %cond.end372
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB8_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB8_96
.LBB8_95:                               # %cond.false387
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-44(%rbp), %eax
.LBB8_96:                               # %cond.end388
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB8_97:                               # %if.end395
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_153
.LBB8_98:                               # %if.else396
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB8_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB8_101
.LBB8_100:                              # %cond.false400
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB8_101:                              # %cond.end403
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB8_107
.LBB8_103:                              # %cond.false415
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB8_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB8_106
.LBB8_105:                              # %cond.false424
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB8_106:                              # %cond.end430
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_107:                              # %cond.end432
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB8_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB8_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB8_114
.LBB8_110:                              # %cond.false440
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB8_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB8_113
.LBB8_112:                              # %cond.false446
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB8_113:                              # %cond.end448
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_114:                              # %cond.end450
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB8_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB8_120
.LBB8_116:                              # %cond.false458
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB8_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB8_119
.LBB8_118:                              # %cond.false465
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB8_119:                              # %cond.end467
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_120:                              # %cond.end469
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB8_134
.LBB8_121:                              # %if.else473
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB8_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB8_127
.LBB8_123:                              # %cond.false478
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB8_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB8_126
.LBB8_125:                              # %cond.false484
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB8_126:                              # %cond.end486
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_127:                              # %cond.end488
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB8_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB8_133
.LBB8_129:                              # %cond.false496
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB8_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB8_132
.LBB8_131:                              # %cond.false503
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB8_132:                              # %cond.end505
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_133:                              # %cond.end507
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB8_134:                              # %if.end511
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB8_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB8_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB8_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB8_142
.LBB8_138:                              # %cond.false527
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB8_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB8_141
.LBB8_140:                              # %cond.false537
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB8_141:                              # %cond.end544
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_142:                              # %cond.end546
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB8_143:                              # %if.end554
                                        #   in Loop: Header=BB8_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB8_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB8_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB8_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB8_150
.LBB8_146:                              # %cond.false568
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB8_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB8_149
.LBB8_148:                              # %cond.false578
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB8_149:                              # %cond.end585
                                        #   in Loop: Header=BB8_7 Depth=1
.LBB8_150:                              # %cond.end587
                                        #   in Loop: Header=BB8_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB8_151:                              # %if.end594
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_152
.LBB8_152:                              # %if.end595
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_153
.LBB8_153:                              # %if.end596
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_154
.LBB8_154:                              # %if.end597
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_155
.LBB8_155:                              # %if.end598
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_156
.LBB8_156:                              # %if.end599
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_157
.LBB8_157:                              # %if.end600
                                        #   in Loop: Header=BB8_7 Depth=1
	jmp	.LBB8_158
.LBB8_158:                              # %for.inc
                                        #   in Loop: Header=BB8_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB8_7
.LBB8_159:                              # %for.end
	cmpl	$829306583, -180(%rbp)  # imm = 0x316E36D7
	jne	.LBB8_161
.LBB8_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_161:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_160
.Lfunc_end8:
	.size	EdgeLoop.5, .Lfunc_end8-EdgeLoop.5
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.6          # -- Begin function DeblockFrame.6
	.p2align	4, 0x90
	.type	DeblockFrame.6,@function
DeblockFrame.6:                         # @DeblockFrame.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$683818825, -8(%rbp)    # imm = 0x28C23F49
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB9_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB9_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB9_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_1
.LBB9_4:                                # %for.end
	cmpl	$683818825, -8(%rbp)    # imm = 0x28C23F49
	jne	.LBB9_6
.LBB9_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_5
.Lfunc_end9:
	.size	DeblockFrame.6, .Lfunc_end9-DeblockFrame.6
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.7             # -- Begin function DeblockMb.7
	.p2align	4, 0x90
	.type	DeblockMb.7,@function
DeblockMb.7:                            # @DeblockMb.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$2109592972, -108(%rbp) # imm = 0x7DBDD58C
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB10_2
# %bb.1:                                # %if.then
	jmp	.LBB10_2
.LBB10_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB10_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB10_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB10_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB10_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB10_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB10_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB10_9:                               # %land.end
.LBB10_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB10_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB10_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB10_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB10_61
.LBB10_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB10_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB10_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB10_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB10_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB10_20
.LBB10_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB10_20:                              # %if.end40
	jmp	.LBB10_21
.LBB10_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB10_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_29 Depth 2
                                        #       Child Loop BB10_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB10_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB10_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB10_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB10_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB10_28
.LBB10_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB10_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB10_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB10_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB10_27:                              # %land.end51
                                        #   in Loop: Header=BB10_22 Depth=1
.LBB10_28:                              # %lor.end52
                                        #   in Loop: Header=BB10_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB10_29:                              # %for.cond54
                                        #   Parent Loop BB10_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB10_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB10_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB10_56
.LBB10_32:                              # %if.then60
                                        #   in Loop: Header=BB10_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB10_33:                              # %for.cond70
                                        #   Parent Loop BB10_22 Depth=1
                                        #     Parent Loop BB10_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB10_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB10_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB10_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB10_33
.LBB10_36:                              # %for.end
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB10_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB10_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB10_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB10_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB10_39:                              # %if.end84
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB10_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB10_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB10_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB10_42:                              # %if.end100
                                        #   in Loop: Header=BB10_29 Depth=2
	jmp	.LBB10_43
.LBB10_43:                              # %if.end101
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB10_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB10_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB10_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB10_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB10_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB10_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB10_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB10_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB10_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB10_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB10_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB10_50:                              # %if.end125
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB10_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB10_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB10_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB10_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB10_53:                              # %if.end142
                                        #   in Loop: Header=BB10_29 Depth=2
	jmp	.LBB10_54
.LBB10_54:                              # %if.end143
                                        #   in Loop: Header=BB10_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB10_55:                              # %if.end145
                                        #   in Loop: Header=BB10_29 Depth=2
	jmp	.LBB10_56
.LBB10_56:                              # %if.end146
                                        #   in Loop: Header=BB10_29 Depth=2
	jmp	.LBB10_57
.LBB10_57:                              # %for.inc147
                                        #   in Loop: Header=BB10_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB10_29
.LBB10_58:                              # %for.end149
                                        #   in Loop: Header=BB10_22 Depth=1
	jmp	.LBB10_59
.LBB10_59:                              # %for.inc150
                                        #   in Loop: Header=BB10_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_22
.LBB10_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB10_61:                              # %return
	cmpl	$2109592972, -108(%rbp) # imm = 0x7DBDD58C
	jne	.LBB10_63
.LBB10_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_62
.Lfunc_end10:
	.size	DeblockMb.7, .Lfunc_end10-DeblockMb.7
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.8              # -- Begin function EdgeLoop.8
	.p2align	4, 0x90
	.type	EdgeLoop.8,@function
EdgeLoop.8:                             # @EdgeLoop.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$2030710187, -184(%rbp) # imm = 0x790A2DAB
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB11_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB11_3
.LBB11_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB11_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB11_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB11_6
.LBB11_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB11_6
.LBB11_6:                               # %cond.end
	movl	%eax, -164(%rbp)
	movl	$0, -60(%rbp)
.LBB11_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-164(%rbp), %eax
	jge	.LBB11_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB11_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB11_11
.LBB11_10:                              # %cond.false8
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB11_11:                              # %cond.end10
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB11_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB11_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB11_15
.LBB11_14:                              # %cond.false17
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	$1, %eax
	jmp	.LBB11_15
.LBB11_15:                              # %cond.end18
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_17
.LBB11_16:                              # %cond.false20
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-60(%rbp), %eax
.LBB11_17:                              # %cond.end21
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-160(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-160(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB11_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB11_19:                              # %lor.end
                                        #   in Loop: Header=BB11_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB11_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$8, -164(%rbp)
	jne	.LBB11_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB11_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB11_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB11_25
.LBB11_24:                              # %cond.false47
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB11_25:                              # %cond.end49
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_27
.LBB11_26:                              # %cond.false51
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB11_27:                              # %cond.end52
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB11_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB11_157
.LBB11_29:                              # %if.then57
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB11_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB11_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB11_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB11_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB11_34
.LBB11_33:                              # %cond.false66
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	32(%rbp), %eax
.LBB11_34:                              # %cond.end67
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_36
.LBB11_35:                              # %cond.false69
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	$1, %eax
	jmp	.LBB11_36
.LBB11_36:                              # %cond.end70
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB11_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB11_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB11_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB11_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB11_41
.LBB11_40:                              # %cond.false81
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	32(%rbp), %eax
.LBB11_41:                              # %cond.end82
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_43
.LBB11_42:                              # %cond.false84
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	$1, %eax
	jmp	.LBB11_43
.LBB11_43:                              # %cond.end85
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB11_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB11_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_50
.LBB11_46:                              # %cond.false105
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB11_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	$51, %eax
	jmp	.LBB11_49
.LBB11_48:                              # %cond.false114
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB11_49:                              # %cond.end120
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_50:                              # %cond.end122
                                        #   in Loop: Header=BB11_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB11_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB11_56
.LBB11_52:                              # %cond.false135
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB11_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB11_55
.LBB11_54:                              # %cond.false144
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB11_55:                              # %cond.end150
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_56:                              # %cond.end152
                                        #   in Loop: Header=BB11_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB11_58
.LBB11_57:                              # %cond.false160
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB11_58:                              # %cond.end166
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB11_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_64
.LBB11_60:                              # %cond.false172
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB11_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	$51, %eax
	jmp	.LBB11_63
.LBB11_62:                              # %cond.false177
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB11_63:                              # %cond.end179
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_64:                              # %cond.end181
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB11_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB11_70
.LBB11_66:                              # %cond.false187
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB11_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB11_69
.LBB11_68:                              # %cond.false192
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB11_69:                              # %cond.end194
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_70:                              # %cond.end196
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -188(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -172(%rbp)
	cmpl	$0, %eax
	je	.LBB11_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB11_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-172(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB11_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB11_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB11_75:                              # %if.end271
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -172(%rbp)
	jne	.LBB11_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB11_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB11_97
.LBB11_78:                              # %if.else292
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-176(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB11_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB11_81
.LBB11_80:                              # %cond.false307
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB11_81:                              # %cond.end313
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB11_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB11_84
.LBB11_83:                              # %cond.false325
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB11_84:                              # %cond.end331
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB11_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB11_87
.LBB11_86:                              # %cond.false342
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-12(%rbp), %eax
.LBB11_87:                              # %cond.end343
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB11_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB11_90
.LBB11_89:                              # %cond.false355
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-16(%rbp), %eax
.LBB11_90:                              # %cond.end356
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB11_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB11_93
.LBB11_92:                              # %cond.false371
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-32(%rbp), %eax
.LBB11_93:                              # %cond.end372
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB11_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB11_96
.LBB11_95:                              # %cond.false387
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-44(%rbp), %eax
.LBB11_96:                              # %cond.end388
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB11_97:                              # %if.end395
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_153
.LBB11_98:                              # %if.else396
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB11_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB11_101
.LBB11_100:                             # %cond.false400
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB11_101:                             # %cond.end403
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB11_107
.LBB11_103:                             # %cond.false415
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB11_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB11_106
.LBB11_105:                             # %cond.false424
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB11_106:                             # %cond.end430
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_107:                             # %cond.end432
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB11_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB11_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_114
.LBB11_110:                             # %cond.false440
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB11_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_113
.LBB11_112:                             # %cond.false446
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB11_113:                             # %cond.end448
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_114:                             # %cond.end450
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB11_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_120
.LBB11_116:                             # %cond.false458
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB11_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_119
.LBB11_118:                             # %cond.false465
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB11_119:                             # %cond.end467
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_120:                             # %cond.end469
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB11_134
.LBB11_121:                             # %if.else473
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB11_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_127
.LBB11_123:                             # %cond.false478
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB11_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB11_126
.LBB11_125:                             # %cond.false484
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB11_126:                             # %cond.end486
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_127:                             # %cond.end488
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB11_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_133
.LBB11_129:                             # %cond.false496
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB11_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB11_132
.LBB11_131:                             # %cond.false503
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB11_132:                             # %cond.end505
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_133:                             # %cond.end507
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB11_134:                             # %if.end511
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB11_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB11_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB11_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB11_142
.LBB11_138:                             # %cond.false527
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB11_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB11_141
.LBB11_140:                             # %cond.false537
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB11_141:                             # %cond.end544
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_142:                             # %cond.end546
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB11_143:                             # %if.end554
                                        #   in Loop: Header=BB11_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB11_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB11_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB11_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB11_150
.LBB11_146:                             # %cond.false568
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB11_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB11_149
.LBB11_148:                             # %cond.false578
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB11_149:                             # %cond.end585
                                        #   in Loop: Header=BB11_7 Depth=1
.LBB11_150:                             # %cond.end587
                                        #   in Loop: Header=BB11_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB11_151:                             # %if.end594
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_152
.LBB11_152:                             # %if.end595
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_153
.LBB11_153:                             # %if.end596
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_154
.LBB11_154:                             # %if.end597
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_155
.LBB11_155:                             # %if.end598
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_156
.LBB11_156:                             # %if.end599
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_157
.LBB11_157:                             # %if.end600
                                        #   in Loop: Header=BB11_7 Depth=1
	jmp	.LBB11_158
.LBB11_158:                             # %for.inc
                                        #   in Loop: Header=BB11_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB11_7
.LBB11_159:                             # %for.end
	cmpl	$2030710187, -184(%rbp) # imm = 0x790A2DAB
	jne	.LBB11_161
.LBB11_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_160
.Lfunc_end11:
	.size	EdgeLoop.8, .Lfunc_end11-EdgeLoop.8
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.9           # -- Begin function GetStrength.9
	.p2align	4, 0x90
	.type	GetStrength.9,@function
GetStrength.9:                          # @GetStrength.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1017848392, -136(%rbp) # imm = 0x3CAB2248
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB12_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB12_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB12_5
.LBB12_4:                               # %cond.false
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB12_5:                               # %cond.end
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB12_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB12_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB12_9
.LBB12_8:                               # %cond.false15
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$1, %eax
	jmp	.LBB12_9
.LBB12_9:                               # %cond.end16
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_11
.LBB12_10:                              # %cond.false18
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-28(%rbp), %eax
.LBB12_11:                              # %cond.end19
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB12_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB12_25
.LBB12_13:                              # %if.then
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB12_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB12_23
.LBB12_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB12_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB12_23
.LBB12_19:                              # %lor.rhs
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB12_22
.LBB12_21:                              # %land.rhs60
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_22:                              # %land.end
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_23:                              # %lor.end
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_24:                              # %land.end62
                                        #   in Loop: Header=BB12_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB12_79
.LBB12_25:                              # %if.else
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB12_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB12_35
.LBB12_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB12_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB12_35
.LBB12_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB12_34
.LBB12_33:                              # %land.rhs92
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_34:                              # %land.end95
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_35:                              # %lor.end96
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_36:                              # %land.end97
                                        #   in Loop: Header=BB12_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB12_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB12_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB12_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB12_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB12_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB12_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB12_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB12_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB12_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB12_47
.LBB12_46:                              # %if.then144
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB12_77
.LBB12_47:                              # %if.else147
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB12_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB12_76
.LBB12_49:                              # %if.else152
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_52
.LBB12_51:                              # %cond.false169
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_52:                              # %cond.end174
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_55
.LBB12_54:                              # %cond.false184
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_55:                              # %cond.end189
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_58
.LBB12_57:                              # %cond.false199
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_58:                              # %cond.end204
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_61
.LBB12_60:                              # %cond.false214
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_61:                              # %cond.end219
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -160(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB12_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	.LBB12_65
.LBB12_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jne	.LBB12_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB12_74
.LBB12_65:                              # %if.then232
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB12_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB12_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB12_69
.LBB12_68:                              # %if.else309
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB12_69:                              # %if.end
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_73
.LBB12_70:                              # %if.else380
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB12_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB12_72:                              # %land.end518
                                        #   in Loop: Header=BB12_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB12_73:                              # %if.end522
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_75
.LBB12_74:                              # %if.else523
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB12_75:                              # %if.end526
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_76
.LBB12_76:                              # %if.end527
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_77
.LBB12_77:                              # %if.end528
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_78
.LBB12_78:                              # %if.end529
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_79
.LBB12_79:                              # %if.end530
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_80
.LBB12_80:                              # %for.inc
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB12_1
.LBB12_81:                              # %for.end
	cmpl	$1017848392, -136(%rbp) # imm = 0x3CAB2248
	jne	.LBB12_83
.LBB12_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_82
.Lfunc_end12:
	.size	GetStrength.9, .Lfunc_end12-GetStrength.9
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.10            # -- Begin function DeblockMb.10
	.p2align	4, 0x90
	.type	DeblockMb.10,@function
DeblockMb.10:                           # @DeblockMb.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1998476117, -108(%rbp) # imm = 0x771E5355
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB13_2
# %bb.1:                                # %if.then
	jmp	.LBB13_2
.LBB13_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB13_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB13_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB13_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB13_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB13_9:                               # %land.end
.LBB13_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB13_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB13_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB13_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB13_61
.LBB13_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB13_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB13_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB13_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB13_20
.LBB13_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB13_20:                              # %if.end40
	jmp	.LBB13_21
.LBB13_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB13_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_29 Depth 2
                                        #       Child Loop BB13_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB13_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB13_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB13_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB13_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB13_28
.LBB13_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB13_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB13_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB13_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB13_27:                              # %land.end51
                                        #   in Loop: Header=BB13_22 Depth=1
.LBB13_28:                              # %lor.end52
                                        #   in Loop: Header=BB13_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB13_29:                              # %for.cond54
                                        #   Parent Loop BB13_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB13_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB13_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB13_56
.LBB13_32:                              # %if.then60
                                        #   in Loop: Header=BB13_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB13_33:                              # %for.cond70
                                        #   Parent Loop BB13_22 Depth=1
                                        #     Parent Loop BB13_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB13_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB13_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB13_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB13_33
.LBB13_36:                              # %for.end
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB13_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB13_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB13_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB13_39:                              # %if.end84
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB13_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB13_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB13_42:                              # %if.end100
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_43
.LBB13_43:                              # %if.end101
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB13_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB13_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB13_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB13_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB13_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB13_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB13_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB13_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB13_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB13_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB13_50:                              # %if.end125
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB13_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB13_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB13_53:                              # %if.end142
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_54
.LBB13_54:                              # %if.end143
                                        #   in Loop: Header=BB13_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB13_55:                              # %if.end145
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_56
.LBB13_56:                              # %if.end146
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_57
.LBB13_57:                              # %for.inc147
                                        #   in Loop: Header=BB13_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_29
.LBB13_58:                              # %for.end149
                                        #   in Loop: Header=BB13_22 Depth=1
	jmp	.LBB13_59
.LBB13_59:                              # %for.inc150
                                        #   in Loop: Header=BB13_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_22
.LBB13_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB13_61:                              # %return
	cmpl	$1998476117, -108(%rbp) # imm = 0x771E5355
	jne	.LBB13_63
.LBB13_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_62
.Lfunc_end13:
	.size	DeblockMb.10, .Lfunc_end13-DeblockMb.10
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.11            # -- Begin function DeblockMb.11
	.p2align	4, 0x90
	.type	DeblockMb.11,@function
DeblockMb.11:                           # @DeblockMb.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$367144763, -108(%rbp)  # imm = 0x15E22F3B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB14_2
# %bb.1:                                # %if.then
	jmp	.LBB14_2
.LBB14_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB14_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB14_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB14_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB14_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB14_9:                               # %land.end
.LBB14_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB14_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB14_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB14_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB14_61
.LBB14_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB14_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB14_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB14_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB14_20
.LBB14_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB14_20:                              # %if.end40
	jmp	.LBB14_21
.LBB14_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB14_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_29 Depth 2
                                        #       Child Loop BB14_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB14_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB14_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB14_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB14_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB14_28
.LBB14_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB14_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB14_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB14_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB14_27:                              # %land.end51
                                        #   in Loop: Header=BB14_22 Depth=1
.LBB14_28:                              # %lor.end52
                                        #   in Loop: Header=BB14_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB14_29:                              # %for.cond54
                                        #   Parent Loop BB14_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB14_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB14_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB14_56
.LBB14_32:                              # %if.then60
                                        #   in Loop: Header=BB14_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB14_33:                              # %for.cond70
                                        #   Parent Loop BB14_22 Depth=1
                                        #     Parent Loop BB14_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB14_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB14_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_33
.LBB14_36:                              # %for.end
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB14_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB14_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB14_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB14_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB14_39:                              # %if.end84
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB14_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB14_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB14_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB14_42:                              # %if.end100
                                        #   in Loop: Header=BB14_29 Depth=2
	jmp	.LBB14_43
.LBB14_43:                              # %if.end101
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB14_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB14_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB14_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB14_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB14_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB14_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB14_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB14_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB14_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB14_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB14_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB14_50:                              # %if.end125
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB14_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB14_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB14_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB14_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB14_53:                              # %if.end142
                                        #   in Loop: Header=BB14_29 Depth=2
	jmp	.LBB14_54
.LBB14_54:                              # %if.end143
                                        #   in Loop: Header=BB14_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB14_55:                              # %if.end145
                                        #   in Loop: Header=BB14_29 Depth=2
	jmp	.LBB14_56
.LBB14_56:                              # %if.end146
                                        #   in Loop: Header=BB14_29 Depth=2
	jmp	.LBB14_57
.LBB14_57:                              # %for.inc147
                                        #   in Loop: Header=BB14_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_29
.LBB14_58:                              # %for.end149
                                        #   in Loop: Header=BB14_22 Depth=1
	jmp	.LBB14_59
.LBB14_59:                              # %for.inc150
                                        #   in Loop: Header=BB14_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_22
.LBB14_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB14_61:                              # %return
	cmpl	$367144763, -108(%rbp)  # imm = 0x15E22F3B
	jne	.LBB14_63
.LBB14_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_62
.Lfunc_end14:
	.size	DeblockMb.11, .Lfunc_end14-DeblockMb.11
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.12            # -- Begin function DeblockMb.12
	.p2align	4, 0x90
	.type	DeblockMb.12,@function
DeblockMb.12:                           # @DeblockMb.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1478274953, -104(%rbp) # imm = 0x581CAF89
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB15_2
# %bb.1:                                # %if.then
	jmp	.LBB15_2
.LBB15_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB15_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB15_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB15_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB15_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB15_9:                               # %land.end
.LBB15_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB15_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB15_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB15_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB15_61
.LBB15_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB15_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB15_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB15_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB15_20
.LBB15_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB15_20:                              # %if.end40
	jmp	.LBB15_21
.LBB15_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB15_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_29 Depth 2
                                        #       Child Loop BB15_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB15_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB15_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB15_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB15_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB15_28
.LBB15_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB15_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB15_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB15_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB15_27:                              # %land.end51
                                        #   in Loop: Header=BB15_22 Depth=1
.LBB15_28:                              # %lor.end52
                                        #   in Loop: Header=BB15_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB15_29:                              # %for.cond54
                                        #   Parent Loop BB15_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB15_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB15_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB15_56
.LBB15_32:                              # %if.then60
                                        #   in Loop: Header=BB15_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -48(%rbp)
.LBB15_33:                              # %for.cond70
                                        #   Parent Loop BB15_22 Depth=1
                                        #     Parent Loop BB15_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB15_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB15_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB15_33
.LBB15_36:                              # %for.end
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB15_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB15_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB15_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB15_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB15_39:                              # %if.end84
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB15_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB15_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB15_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB15_42:                              # %if.end100
                                        #   in Loop: Header=BB15_29 Depth=2
	jmp	.LBB15_43
.LBB15_43:                              # %if.end101
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB15_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB15_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB15_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB15_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB15_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB15_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB15_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB15_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB15_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB15_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB15_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB15_50:                              # %if.end125
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB15_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB15_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB15_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB15_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB15_53:                              # %if.end142
                                        #   in Loop: Header=BB15_29 Depth=2
	jmp	.LBB15_54
.LBB15_54:                              # %if.end143
                                        #   in Loop: Header=BB15_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB15_55:                              # %if.end145
                                        #   in Loop: Header=BB15_29 Depth=2
	jmp	.LBB15_56
.LBB15_56:                              # %if.end146
                                        #   in Loop: Header=BB15_29 Depth=2
	jmp	.LBB15_57
.LBB15_57:                              # %for.inc147
                                        #   in Loop: Header=BB15_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_29
.LBB15_58:                              # %for.end149
                                        #   in Loop: Header=BB15_22 Depth=1
	jmp	.LBB15_59
.LBB15_59:                              # %for.inc150
                                        #   in Loop: Header=BB15_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_22
.LBB15_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB15_61:                              # %return
	cmpl	$1478274953, -104(%rbp) # imm = 0x581CAF89
	jne	.LBB15_63
.LBB15_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_62
.Lfunc_end15:
	.size	DeblockMb.12, .Lfunc_end15-DeblockMb.12
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.13             # -- Begin function EdgeLoop.13
	.p2align	4, 0x90
	.type	EdgeLoop.13,@function
EdgeLoop.13:                            # @EdgeLoop.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$207261487, -196(%rbp)  # imm = 0xC5A8F2F
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB16_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB16_3
.LBB16_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB16_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB16_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB16_6
.LBB16_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB16_6
.LBB16_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB16_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB16_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB16_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB16_11
.LBB16_10:                              # %cond.false8
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB16_11:                              # %cond.end10
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB16_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB16_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB16_15
.LBB16_14:                              # %cond.false17
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$1, %eax
	jmp	.LBB16_15
.LBB16_15:                              # %cond.end18
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_17
.LBB16_16:                              # %cond.false20
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %eax
.LBB16_17:                              # %cond.end21
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-144(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	-168(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-168(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB16_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB16_19:                              # %lor.end
                                        #   in Loop: Header=BB16_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB16_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB16_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB16_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB16_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB16_25
.LBB16_24:                              # %cond.false47
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB16_25:                              # %cond.end49
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_27
.LBB16_26:                              # %cond.false51
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB16_27:                              # %cond.end52
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB16_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB16_157
.LBB16_29:                              # %if.then57
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB16_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB16_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB16_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB16_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB16_34
.LBB16_33:                              # %cond.false66
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
.LBB16_34:                              # %cond.end67
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_36
.LBB16_35:                              # %cond.false69
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$1, %eax
	jmp	.LBB16_36
.LBB16_36:                              # %cond.end70
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB16_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB16_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB16_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB16_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB16_41
.LBB16_40:                              # %cond.false81
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
.LBB16_41:                              # %cond.end82
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_43
.LBB16_42:                              # %cond.false84
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$1, %eax
	jmp	.LBB16_43
.LBB16_43:                              # %cond.end85
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB16_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB16_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_50
.LBB16_46:                              # %cond.false105
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB16_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %eax
	jmp	.LBB16_49
.LBB16_48:                              # %cond.false114
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB16_49:                              # %cond.end120
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_50:                              # %cond.end122
                                        #   in Loop: Header=BB16_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB16_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB16_56
.LBB16_52:                              # %cond.false135
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB16_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB16_55
.LBB16_54:                              # %cond.false144
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB16_55:                              # %cond.end150
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_56:                              # %cond.end152
                                        #   in Loop: Header=BB16_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB16_58
.LBB16_57:                              # %cond.false160
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB16_58:                              # %cond.end166
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_64
.LBB16_60:                              # %cond.false172
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB16_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %eax
	jmp	.LBB16_63
.LBB16_62:                              # %cond.false177
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB16_63:                              # %cond.end179
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_64:                              # %cond.end181
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB16_70
.LBB16_66:                              # %cond.false187
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB16_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB16_69
.LBB16_68:                              # %cond.false192
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB16_69:                              # %cond.end194
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_70:                              # %cond.end196
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-172(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -136(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-172(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, %eax
	je	.LBB16_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB16_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-160(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB16_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB16_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB16_75:                              # %if.end271
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -160(%rbp)
	jne	.LBB16_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB16_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB16_97
.LBB16_78:                              # %if.else292
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-176(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB16_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_81
.LBB16_80:                              # %cond.false307
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB16_81:                              # %cond.end313
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB16_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_84
.LBB16_83:                              # %cond.false325
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB16_84:                              # %cond.end331
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB16_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB16_87
.LBB16_86:                              # %cond.false342
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
.LBB16_87:                              # %cond.end343
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB16_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB16_90
.LBB16_89:                              # %cond.false355
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-16(%rbp), %eax
.LBB16_90:                              # %cond.end356
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB16_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_93
.LBB16_92:                              # %cond.false371
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
.LBB16_93:                              # %cond.end372
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB16_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_96
.LBB16_95:                              # %cond.false387
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-32(%rbp), %eax
.LBB16_96:                              # %cond.end388
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB16_97:                              # %if.end395
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_153
.LBB16_98:                              # %if.else396
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB16_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB16_101
.LBB16_100:                             # %cond.false400
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB16_101:                             # %cond.end403
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB16_107
.LBB16_103:                             # %cond.false415
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB16_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB16_106
.LBB16_105:                             # %cond.false424
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB16_106:                             # %cond.end430
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_107:                             # %cond.end432
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB16_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_114
.LBB16_110:                             # %cond.false440
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB16_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_113
.LBB16_112:                             # %cond.false446
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB16_113:                             # %cond.end448
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_114:                             # %cond.end450
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_120
.LBB16_116:                             # %cond.false458
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB16_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_119
.LBB16_118:                             # %cond.false465
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB16_119:                             # %cond.end467
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_120:                             # %cond.end469
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB16_134
.LBB16_121:                             # %if.else473
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_127
.LBB16_123:                             # %cond.false478
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB16_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB16_126
.LBB16_125:                             # %cond.false484
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB16_126:                             # %cond.end486
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_127:                             # %cond.end488
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_133
.LBB16_129:                             # %cond.false496
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB16_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB16_132
.LBB16_131:                             # %cond.false503
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB16_132:                             # %cond.end505
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_133:                             # %cond.end507
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB16_134:                             # %if.end511
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB16_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB16_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB16_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB16_142
.LBB16_138:                             # %cond.false527
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB16_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB16_141
.LBB16_140:                             # %cond.false537
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB16_141:                             # %cond.end544
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_142:                             # %cond.end546
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB16_143:                             # %if.end554
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB16_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB16_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB16_150
.LBB16_146:                             # %cond.false568
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB16_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB16_149
.LBB16_148:                             # %cond.false578
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB16_149:                             # %cond.end585
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_150:                             # %cond.end587
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB16_151:                             # %if.end594
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_152
.LBB16_152:                             # %if.end595
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_153
.LBB16_153:                             # %if.end596
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_154
.LBB16_154:                             # %if.end597
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_155
.LBB16_155:                             # %if.end598
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_156
.LBB16_156:                             # %if.end599
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_157
.LBB16_157:                             # %if.end600
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_158
.LBB16_158:                             # %for.inc
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB16_7
.LBB16_159:                             # %for.end
	cmpl	$207261487, -196(%rbp)  # imm = 0xC5A8F2F
	jne	.LBB16_161
.LBB16_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_160
.Lfunc_end16:
	.size	EdgeLoop.13, .Lfunc_end16-EdgeLoop.13
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.14          # -- Begin function GetStrength.14
	.p2align	4, 0x90
	.type	GetStrength.14,@function
GetStrength.14:                         # @GetStrength.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1298193919, -148(%rbp) # imm = 0x4D60DDFF
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB17_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB17_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB17_5
.LBB17_4:                               # %cond.false
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB17_5:                               # %cond.end
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB17_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB17_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB17_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB17_9
.LBB17_8:                               # %cond.false15
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$1, %eax
	jmp	.LBB17_9
.LBB17_9:                               # %cond.end16
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_11
.LBB17_10:                              # %cond.false18
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-28(%rbp), %eax
.LBB17_11:                              # %cond.end19
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB17_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB17_25
.LBB17_13:                              # %if.then
                                        #   in Loop: Header=BB17_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB17_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB17_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB17_23
.LBB17_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB17_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB17_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB17_23
.LBB17_19:                              # %lor.rhs
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB17_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB17_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB17_22
.LBB17_21:                              # %land.rhs60
                                        #   in Loop: Header=BB17_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_22:                              # %land.end
                                        #   in Loop: Header=BB17_1 Depth=1
.LBB17_23:                              # %lor.end
                                        #   in Loop: Header=BB17_1 Depth=1
.LBB17_24:                              # %land.end62
                                        #   in Loop: Header=BB17_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB17_79
.LBB17_25:                              # %if.else
                                        #   in Loop: Header=BB17_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB17_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB17_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB17_35
.LBB17_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB17_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB17_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB17_35
.LBB17_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB17_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB17_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB17_34
.LBB17_33:                              # %land.rhs92
                                        #   in Loop: Header=BB17_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_34:                              # %land.end95
                                        #   in Loop: Header=BB17_1 Depth=1
.LBB17_35:                              # %lor.end96
                                        #   in Loop: Header=BB17_1 Depth=1
.LBB17_36:                              # %land.end97
                                        #   in Loop: Header=BB17_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB17_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB17_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB17_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB17_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB17_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB17_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB17_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB17_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB17_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB17_47
.LBB17_46:                              # %if.then144
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB17_77
.LBB17_47:                              # %if.else147
                                        #   in Loop: Header=BB17_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB17_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB17_76
.LBB17_49:                              # %if.else152
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB17_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB17_52
.LBB17_51:                              # %cond.false169
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB17_52:                              # %cond.end174
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB17_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB17_55
.LBB17_54:                              # %cond.false184
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB17_55:                              # %cond.end189
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB17_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB17_58
.LBB17_57:                              # %cond.false199
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB17_58:                              # %cond.end204
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB17_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB17_61
.LBB17_60:                              # %cond.false214
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB17_61:                              # %cond.end219
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB17_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB17_65
.LBB17_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB17_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB17_74
.LBB17_65:                              # %if.then232
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB17_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB17_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB17_69
.LBB17_68:                              # %if.else309
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB17_69:                              # %if.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_73
.LBB17_70:                              # %if.else380
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB17_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB17_72:                              # %land.end518
                                        #   in Loop: Header=BB17_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB17_73:                              # %if.end522
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_75
.LBB17_74:                              # %if.else523
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB17_75:                              # %if.end526
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_76
.LBB17_76:                              # %if.end527
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_77
.LBB17_77:                              # %if.end528
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_78
.LBB17_78:                              # %if.end529
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_79
.LBB17_79:                              # %if.end530
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_80
.LBB17_80:                              # %for.inc
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB17_1
.LBB17_81:                              # %for.end
	cmpl	$1298193919, -148(%rbp) # imm = 0x4D60DDFF
	jne	.LBB17_83
.LBB17_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_82
.Lfunc_end17:
	.size	GetStrength.14, .Lfunc_end17-GetStrength.14
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.15          # -- Begin function GetStrength.15
	.p2align	4, 0x90
	.type	GetStrength.15,@function
GetStrength.15:                         # @GetStrength.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$119712477, -148(%rbp)  # imm = 0x722AADD
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB18_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB18_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB18_5
.LBB18_4:                               # %cond.false
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB18_5:                               # %cond.end
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB18_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB18_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB18_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB18_9
.LBB18_8:                               # %cond.false15
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$1, %eax
	jmp	.LBB18_9
.LBB18_9:                               # %cond.end16
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_11
.LBB18_10:                              # %cond.false18
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-28(%rbp), %eax
.LBB18_11:                              # %cond.end19
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-136(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB18_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB18_25
.LBB18_13:                              # %if.then
                                        #   in Loop: Header=BB18_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB18_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB18_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB18_23
.LBB18_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB18_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB18_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB18_23
.LBB18_19:                              # %lor.rhs
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB18_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB18_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB18_22
.LBB18_21:                              # %land.rhs60
                                        #   in Loop: Header=BB18_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_22:                              # %land.end
                                        #   in Loop: Header=BB18_1 Depth=1
.LBB18_23:                              # %lor.end
                                        #   in Loop: Header=BB18_1 Depth=1
.LBB18_24:                              # %land.end62
                                        #   in Loop: Header=BB18_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB18_79
.LBB18_25:                              # %if.else
                                        #   in Loop: Header=BB18_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB18_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB18_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB18_35
.LBB18_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB18_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB18_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB18_35
.LBB18_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB18_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB18_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB18_34
.LBB18_33:                              # %land.rhs92
                                        #   in Loop: Header=BB18_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_34:                              # %land.end95
                                        #   in Loop: Header=BB18_1 Depth=1
.LBB18_35:                              # %lor.end96
                                        #   in Loop: Header=BB18_1 Depth=1
.LBB18_36:                              # %land.end97
                                        #   in Loop: Header=BB18_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB18_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB18_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB18_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB18_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB18_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB18_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB18_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB18_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB18_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-152(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB18_47
.LBB18_46:                              # %if.then144
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB18_77
.LBB18_47:                              # %if.else147
                                        #   in Loop: Header=BB18_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB18_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB18_76
.LBB18_49:                              # %if.else152
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-132(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB18_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB18_52
.LBB18_51:                              # %cond.false169
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB18_52:                              # %cond.end174
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB18_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB18_55
.LBB18_54:                              # %cond.false184
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB18_55:                              # %cond.end189
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB18_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB18_58
.LBB18_57:                              # %cond.false199
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB18_58:                              # %cond.end204
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB18_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB18_61
.LBB18_60:                              # %cond.false214
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB18_61:                              # %cond.end219
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB18_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB18_65
.LBB18_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB18_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB18_74
.LBB18_65:                              # %if.then232
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB18_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB18_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB18_69
.LBB18_68:                              # %if.else309
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB18_69:                              # %if.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_73
.LBB18_70:                              # %if.else380
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB18_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB18_72:                              # %land.end518
                                        #   in Loop: Header=BB18_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB18_73:                              # %if.end522
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_75
.LBB18_74:                              # %if.else523
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB18_75:                              # %if.end526
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_76
.LBB18_76:                              # %if.end527
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_77
.LBB18_77:                              # %if.end528
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_78
.LBB18_78:                              # %if.end529
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_79
.LBB18_79:                              # %if.end530
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_80
.LBB18_80:                              # %for.inc
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB18_1
.LBB18_81:                              # %for.end
	cmpl	$119712477, -148(%rbp)  # imm = 0x722AADD
	jne	.LBB18_83
.LBB18_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_82
.Lfunc_end18:
	.size	GetStrength.15, .Lfunc_end18-GetStrength.15
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.16            # -- Begin function DeblockMb.16
	.p2align	4, 0x90
	.type	DeblockMb.16,@function
DeblockMb.16:                           # @DeblockMb.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1411201518, -104(%rbp) # imm = 0x541D39EE
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB19_2
# %bb.1:                                # %if.then
	jmp	.LBB19_2
.LBB19_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB19_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB19_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB19_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB19_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB19_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB19_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB19_9:                               # %land.end
.LBB19_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB19_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB19_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB19_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB19_61
.LBB19_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB19_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB19_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB19_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB19_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB19_20
.LBB19_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB19_20:                              # %if.end40
	jmp	.LBB19_21
.LBB19_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB19_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_29 Depth 2
                                        #       Child Loop BB19_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB19_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB19_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB19_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB19_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB19_28
.LBB19_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB19_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB19_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB19_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB19_27:                              # %land.end51
                                        #   in Loop: Header=BB19_22 Depth=1
.LBB19_28:                              # %lor.end52
                                        #   in Loop: Header=BB19_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB19_29:                              # %for.cond54
                                        #   Parent Loop BB19_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB19_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB19_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB19_56
.LBB19_32:                              # %if.then60
                                        #   in Loop: Header=BB19_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB19_33:                              # %for.cond70
                                        #   Parent Loop BB19_22 Depth=1
                                        #     Parent Loop BB19_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB19_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB19_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB19_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB19_33
.LBB19_36:                              # %for.end
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB19_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB19_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB19_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB19_39:                              # %if.end84
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB19_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB19_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB19_42:                              # %if.end100
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_43
.LBB19_43:                              # %if.end101
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB19_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB19_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB19_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB19_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB19_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB19_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB19_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB19_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB19_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB19_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB19_50:                              # %if.end125
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB19_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB19_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB19_53:                              # %if.end142
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_54
.LBB19_54:                              # %if.end143
                                        #   in Loop: Header=BB19_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB19_55:                              # %if.end145
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_56
.LBB19_56:                              # %if.end146
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_57
.LBB19_57:                              # %for.inc147
                                        #   in Loop: Header=BB19_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB19_29
.LBB19_58:                              # %for.end149
                                        #   in Loop: Header=BB19_22 Depth=1
	jmp	.LBB19_59
.LBB19_59:                              # %for.inc150
                                        #   in Loop: Header=BB19_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_22
.LBB19_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB19_61:                              # %return
	cmpl	$1411201518, -104(%rbp) # imm = 0x541D39EE
	jne	.LBB19_63
.LBB19_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_62
.Lfunc_end19:
	.size	DeblockMb.16, .Lfunc_end19-DeblockMb.16
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.17            # -- Begin function DeblockMb.17
	.p2align	4, 0x90
	.type	DeblockMb.17,@function
DeblockMb.17:                           # @DeblockMb.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$980550925, -108(%rbp)  # imm = 0x3A72050D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB20_2
# %bb.1:                                # %if.then
	jmp	.LBB20_2
.LBB20_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB20_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB20_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB20_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB20_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB20_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB20_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB20_9:                               # %land.end
.LBB20_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB20_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB20_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB20_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB20_61
.LBB20_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB20_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB20_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB20_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB20_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB20_20
.LBB20_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB20_20:                              # %if.end40
	jmp	.LBB20_21
.LBB20_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB20_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_29 Depth 2
                                        #       Child Loop BB20_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB20_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB20_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB20_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB20_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB20_28
.LBB20_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB20_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB20_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB20_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB20_27:                              # %land.end51
                                        #   in Loop: Header=BB20_22 Depth=1
.LBB20_28:                              # %lor.end52
                                        #   in Loop: Header=BB20_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB20_29:                              # %for.cond54
                                        #   Parent Loop BB20_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB20_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB20_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB20_56
.LBB20_32:                              # %if.then60
                                        #   in Loop: Header=BB20_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB20_33:                              # %for.cond70
                                        #   Parent Loop BB20_22 Depth=1
                                        #     Parent Loop BB20_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB20_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB20_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB20_33
.LBB20_36:                              # %for.end
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB20_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB20_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB20_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB20_39:                              # %if.end84
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB20_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB20_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB20_42:                              # %if.end100
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_43
.LBB20_43:                              # %if.end101
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB20_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB20_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB20_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB20_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB20_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB20_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB20_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB20_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB20_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB20_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB20_50:                              # %if.end125
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB20_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB20_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB20_53:                              # %if.end142
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_54
.LBB20_54:                              # %if.end143
                                        #   in Loop: Header=BB20_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB20_55:                              # %if.end145
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_56
.LBB20_56:                              # %if.end146
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_57
.LBB20_57:                              # %for.inc147
                                        #   in Loop: Header=BB20_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB20_29
.LBB20_58:                              # %for.end149
                                        #   in Loop: Header=BB20_22 Depth=1
	jmp	.LBB20_59
.LBB20_59:                              # %for.inc150
                                        #   in Loop: Header=BB20_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_22
.LBB20_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB20_61:                              # %return
	cmpl	$980550925, -108(%rbp)  # imm = 0x3A72050D
	jne	.LBB20_63
.LBB20_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_62
.Lfunc_end20:
	.size	DeblockMb.17, .Lfunc_end20-DeblockMb.17
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.18            # -- Begin function DeblockMb.18
	.p2align	4, 0x90
	.type	DeblockMb.18,@function
DeblockMb.18:                           # @DeblockMb.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1584895070, -108(%rbp) # imm = 0x5E77945E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB21_2
# %bb.1:                                # %if.then
	jmp	.LBB21_2
.LBB21_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB21_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB21_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB21_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB21_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB21_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB21_9:                               # %land.end
.LBB21_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB21_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB21_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB21_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB21_61
.LBB21_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB21_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB21_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB21_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB21_20
.LBB21_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB21_20:                              # %if.end40
	jmp	.LBB21_21
.LBB21_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB21_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_29 Depth 2
                                        #       Child Loop BB21_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB21_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB21_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB21_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB21_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB21_28
.LBB21_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB21_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB21_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB21_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB21_27:                              # %land.end51
                                        #   in Loop: Header=BB21_22 Depth=1
.LBB21_28:                              # %lor.end52
                                        #   in Loop: Header=BB21_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB21_29:                              # %for.cond54
                                        #   Parent Loop BB21_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB21_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB21_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB21_56
.LBB21_32:                              # %if.then60
                                        #   in Loop: Header=BB21_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB21_33:                              # %for.cond70
                                        #   Parent Loop BB21_22 Depth=1
                                        #     Parent Loop BB21_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB21_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB21_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB21_33
.LBB21_36:                              # %for.end
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB21_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB21_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB21_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB21_39:                              # %if.end84
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB21_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB21_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB21_42:                              # %if.end100
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_43
.LBB21_43:                              # %if.end101
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB21_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB21_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB21_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB21_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB21_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB21_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB21_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB21_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB21_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB21_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB21_50:                              # %if.end125
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB21_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB21_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB21_53:                              # %if.end142
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_54
.LBB21_54:                              # %if.end143
                                        #   in Loop: Header=BB21_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB21_55:                              # %if.end145
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_56
.LBB21_56:                              # %if.end146
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_57
.LBB21_57:                              # %for.inc147
                                        #   in Loop: Header=BB21_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB21_29
.LBB21_58:                              # %for.end149
                                        #   in Loop: Header=BB21_22 Depth=1
	jmp	.LBB21_59
.LBB21_59:                              # %for.inc150
                                        #   in Loop: Header=BB21_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_22
.LBB21_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB21_61:                              # %return
	cmpl	$1584895070, -108(%rbp) # imm = 0x5E77945E
	jne	.LBB21_63
.LBB21_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_62
.Lfunc_end21:
	.size	DeblockMb.18, .Lfunc_end21-DeblockMb.18
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.19          # -- Begin function GetStrength.19
	.p2align	4, 0x90
	.type	GetStrength.19,@function
GetStrength.19:                         # @GetStrength.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$624068459, -132(%rbp)  # imm = 0x2532876B
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB22_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB22_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB22_5
.LBB22_4:                               # %cond.false
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB22_5:                               # %cond.end
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB22_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB22_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB22_9
.LBB22_8:                               # %cond.false15
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$1, %eax
	jmp	.LBB22_9
.LBB22_9:                               # %cond.end16
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_11
.LBB22_10:                              # %cond.false18
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-28(%rbp), %eax
.LBB22_11:                              # %cond.end19
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-148(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB22_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB22_25
.LBB22_13:                              # %if.then
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB22_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB22_23
.LBB22_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB22_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB22_23
.LBB22_19:                              # %lor.rhs
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB22_22
.LBB22_21:                              # %land.rhs60
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_22:                              # %land.end
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_23:                              # %lor.end
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_24:                              # %land.end62
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB22_79
.LBB22_25:                              # %if.else
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB22_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB22_35
.LBB22_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB22_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB22_35
.LBB22_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB22_34
.LBB22_33:                              # %land.rhs92
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_34:                              # %land.end95
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_35:                              # %lor.end96
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_36:                              # %land.end97
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB22_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB22_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB22_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB22_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB22_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB22_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB22_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB22_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB22_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-152(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB22_47
.LBB22_46:                              # %if.then144
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB22_77
.LBB22_47:                              # %if.else147
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB22_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB22_76
.LBB22_49:                              # %if.else152
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-144(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_52
.LBB22_51:                              # %cond.false169
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_52:                              # %cond.end174
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_55
.LBB22_54:                              # %cond.false184
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_55:                              # %cond.end189
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_58
.LBB22_57:                              # %cond.false199
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_58:                              # %cond.end204
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_61
.LBB22_60:                              # %cond.false214
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_61:                              # %cond.end219
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB22_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB22_65
.LBB22_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB22_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB22_74
.LBB22_65:                              # %if.then232
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB22_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB22_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB22_69
.LBB22_68:                              # %if.else309
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB22_69:                              # %if.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_73
.LBB22_70:                              # %if.else380
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB22_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB22_72:                              # %land.end518
                                        #   in Loop: Header=BB22_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB22_73:                              # %if.end522
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_75
.LBB22_74:                              # %if.else523
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB22_75:                              # %if.end526
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_76
.LBB22_76:                              # %if.end527
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_77
.LBB22_77:                              # %if.end528
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_78
.LBB22_78:                              # %if.end529
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_79
.LBB22_79:                              # %if.end530
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_80
.LBB22_80:                              # %for.inc
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB22_1
.LBB22_81:                              # %for.end
	cmpl	$624068459, -132(%rbp)  # imm = 0x2532876B
	jne	.LBB22_83
.LBB22_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_82
.Lfunc_end22:
	.size	GetStrength.19, .Lfunc_end22-GetStrength.19
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.20          # -- Begin function GetStrength.20
	.p2align	4, 0x90
	.type	GetStrength.20,@function
GetStrength.20:                         # @GetStrength.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1267163388, -148(%rbp) # imm = 0x4B8760FC
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB23_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB23_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB23_5
.LBB23_4:                               # %cond.false
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB23_5:                               # %cond.end
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB23_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB23_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB23_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB23_9
.LBB23_8:                               # %cond.false15
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$1, %eax
	jmp	.LBB23_9
.LBB23_9:                               # %cond.end16
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_11
.LBB23_10:                              # %cond.false18
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-28(%rbp), %eax
.LBB23_11:                              # %cond.end19
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-140(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB23_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB23_25
.LBB23_13:                              # %if.then
                                        #   in Loop: Header=BB23_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB23_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB23_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB23_23
.LBB23_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB23_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB23_23
.LBB23_19:                              # %lor.rhs
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB23_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB23_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB23_22
.LBB23_21:                              # %land.rhs60
                                        #   in Loop: Header=BB23_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_22:                              # %land.end
                                        #   in Loop: Header=BB23_1 Depth=1
.LBB23_23:                              # %lor.end
                                        #   in Loop: Header=BB23_1 Depth=1
.LBB23_24:                              # %land.end62
                                        #   in Loop: Header=BB23_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB23_79
.LBB23_25:                              # %if.else
                                        #   in Loop: Header=BB23_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB23_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB23_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB23_35
.LBB23_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB23_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB23_35
.LBB23_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB23_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB23_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB23_34
.LBB23_33:                              # %land.rhs92
                                        #   in Loop: Header=BB23_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_34:                              # %land.end95
                                        #   in Loop: Header=BB23_1 Depth=1
.LBB23_35:                              # %lor.end96
                                        #   in Loop: Header=BB23_1 Depth=1
.LBB23_36:                              # %land.end97
                                        #   in Loop: Header=BB23_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB23_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB23_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB23_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB23_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB23_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB23_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB23_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB23_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB23_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB23_47
.LBB23_46:                              # %if.then144
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB23_77
.LBB23_47:                              # %if.else147
                                        #   in Loop: Header=BB23_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB23_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB23_76
.LBB23_49:                              # %if.else152
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB23_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB23_52
.LBB23_51:                              # %cond.false169
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB23_52:                              # %cond.end174
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB23_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB23_55
.LBB23_54:                              # %cond.false184
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB23_55:                              # %cond.end189
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB23_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB23_58
.LBB23_57:                              # %cond.false199
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB23_58:                              # %cond.end204
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB23_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB23_61
.LBB23_60:                              # %cond.false214
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB23_61:                              # %cond.end219
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB23_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB23_65
.LBB23_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB23_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB23_74
.LBB23_65:                              # %if.then232
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB23_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB23_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB23_69
.LBB23_68:                              # %if.else309
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB23_69:                              # %if.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_73
.LBB23_70:                              # %if.else380
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB23_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB23_72:                              # %land.end518
                                        #   in Loop: Header=BB23_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB23_73:                              # %if.end522
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_75
.LBB23_74:                              # %if.else523
                                        #   in Loop: Header=BB23_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB23_75:                              # %if.end526
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_76
.LBB23_76:                              # %if.end527
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_77
.LBB23_77:                              # %if.end528
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_78
.LBB23_78:                              # %if.end529
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_79
.LBB23_79:                              # %if.end530
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_80
.LBB23_80:                              # %for.inc
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB23_1
.LBB23_81:                              # %for.end
	cmpl	$1267163388, -148(%rbp) # imm = 0x4B8760FC
	jne	.LBB23_83
.LBB23_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_82
.Lfunc_end23:
	.size	GetStrength.20, .Lfunc_end23-GetStrength.20
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.21          # -- Begin function GetStrength.21
	.p2align	4, 0x90
	.type	GetStrength.21,@function
GetStrength.21:                         # @GetStrength.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1742386056, -136(%rbp) # imm = 0x67DAB388
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB24_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB24_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB24_5
.LBB24_4:                               # %cond.false
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB24_5:                               # %cond.end
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB24_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB24_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB24_9
.LBB24_8:                               # %cond.false15
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$1, %eax
	jmp	.LBB24_9
.LBB24_9:                               # %cond.end16
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_11
.LBB24_10:                              # %cond.false18
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-28(%rbp), %eax
.LBB24_11:                              # %cond.end19
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-140(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB24_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB24_25
.LBB24_13:                              # %if.then
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB24_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB24_23
.LBB24_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB24_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB24_23
.LBB24_19:                              # %lor.rhs
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB24_22
.LBB24_21:                              # %land.rhs60
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB24_22:                              # %land.end
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_23:                              # %lor.end
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_24:                              # %land.end62
                                        #   in Loop: Header=BB24_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB24_79
.LBB24_25:                              # %if.else
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB24_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB24_35
.LBB24_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB24_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB24_35
.LBB24_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB24_34
.LBB24_33:                              # %land.rhs92
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB24_34:                              # %land.end95
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_35:                              # %lor.end96
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_36:                              # %land.end97
                                        #   in Loop: Header=BB24_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB24_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB24_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB24_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB24_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB24_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB24_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB24_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB24_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB24_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB24_47
.LBB24_46:                              # %if.then144
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB24_77
.LBB24_47:                              # %if.else147
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB24_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB24_76
.LBB24_49:                              # %if.else152
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-144(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_52
.LBB24_51:                              # %cond.false169
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_52:                              # %cond.end174
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_55
.LBB24_54:                              # %cond.false184
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_55:                              # %cond.end189
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_58
.LBB24_57:                              # %cond.false199
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_58:                              # %cond.end204
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_61
.LBB24_60:                              # %cond.false214
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_61:                              # %cond.end219
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB24_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB24_65
.LBB24_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB24_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB24_74
.LBB24_65:                              # %if.then232
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB24_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB24_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB24_69
.LBB24_68:                              # %if.else309
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB24_69:                              # %if.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_73
.LBB24_70:                              # %if.else380
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB24_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB24_72:                              # %land.end518
                                        #   in Loop: Header=BB24_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB24_73:                              # %if.end522
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_75
.LBB24_74:                              # %if.else523
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB24_75:                              # %if.end526
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_76
.LBB24_76:                              # %if.end527
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_77
.LBB24_77:                              # %if.end528
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_78
.LBB24_78:                              # %if.end529
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_79
.LBB24_79:                              # %if.end530
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_80
.LBB24_80:                              # %for.inc
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_1
.LBB24_81:                              # %for.end
	cmpl	$1742386056, -136(%rbp) # imm = 0x67DAB388
	jne	.LBB24_83
.LBB24_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_82
.Lfunc_end24:
	.size	GetStrength.21, .Lfunc_end24-GetStrength.21
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.22            # -- Begin function DeblockMb.22
	.p2align	4, 0x90
	.type	DeblockMb.22,@function
DeblockMb.22:                           # @DeblockMb.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1842233728, -112(%rbp) # imm = 0x6DCE4180
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB25_2
# %bb.1:                                # %if.then
	jmp	.LBB25_2
.LBB25_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB25_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB25_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB25_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB25_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB25_9:                               # %land.end
.LBB25_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB25_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB25_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB25_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB25_61
.LBB25_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB25_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB25_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB25_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB25_20
.LBB25_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB25_20:                              # %if.end40
	jmp	.LBB25_21
.LBB25_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB25_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_29 Depth 2
                                        #       Child Loop BB25_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB25_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB25_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB25_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB25_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB25_28
.LBB25_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB25_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB25_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB25_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB25_27:                              # %land.end51
                                        #   in Loop: Header=BB25_22 Depth=1
.LBB25_28:                              # %lor.end52
                                        #   in Loop: Header=BB25_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB25_29:                              # %for.cond54
                                        #   Parent Loop BB25_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB25_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB25_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB25_56
.LBB25_32:                              # %if.then60
                                        #   in Loop: Header=BB25_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB25_33:                              # %for.cond70
                                        #   Parent Loop BB25_22 Depth=1
                                        #     Parent Loop BB25_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB25_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB25_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB25_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB25_33
.LBB25_36:                              # %for.end
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB25_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB25_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB25_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB25_39:                              # %if.end84
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB25_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB25_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB25_42:                              # %if.end100
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_43
.LBB25_43:                              # %if.end101
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB25_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB25_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB25_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB25_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB25_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB25_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB25_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB25_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB25_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB25_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB25_50:                              # %if.end125
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB25_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB25_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB25_53:                              # %if.end142
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_54
.LBB25_54:                              # %if.end143
                                        #   in Loop: Header=BB25_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB25_55:                              # %if.end145
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_56
.LBB25_56:                              # %if.end146
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_57
.LBB25_57:                              # %for.inc147
                                        #   in Loop: Header=BB25_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB25_29
.LBB25_58:                              # %for.end149
                                        #   in Loop: Header=BB25_22 Depth=1
	jmp	.LBB25_59
.LBB25_59:                              # %for.inc150
                                        #   in Loop: Header=BB25_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_22
.LBB25_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB25_61:                              # %return
	cmpl	$1842233728, -112(%rbp) # imm = 0x6DCE4180
	jne	.LBB25_63
.LBB25_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_62
.Lfunc_end25:
	.size	DeblockMb.22, .Lfunc_end25-DeblockMb.22
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.23          # -- Begin function GetStrength.23
	.p2align	4, 0x90
	.type	GetStrength.23,@function
GetStrength.23:                         # @GetStrength.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1259118425, -144(%rbp) # imm = 0x4B0C9F59
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB26_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB26_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB26_5
.LBB26_4:                               # %cond.false
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB26_5:                               # %cond.end
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB26_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB26_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB26_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB26_9
.LBB26_8:                               # %cond.false15
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$1, %eax
	jmp	.LBB26_9
.LBB26_9:                               # %cond.end16
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_11
.LBB26_10:                              # %cond.false18
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-28(%rbp), %eax
.LBB26_11:                              # %cond.end19
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB26_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB26_25
.LBB26_13:                              # %if.then
                                        #   in Loop: Header=BB26_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB26_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB26_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB26_23
.LBB26_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB26_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB26_23
.LBB26_19:                              # %lor.rhs
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB26_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB26_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB26_22
.LBB26_21:                              # %land.rhs60
                                        #   in Loop: Header=BB26_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_22:                              # %land.end
                                        #   in Loop: Header=BB26_1 Depth=1
.LBB26_23:                              # %lor.end
                                        #   in Loop: Header=BB26_1 Depth=1
.LBB26_24:                              # %land.end62
                                        #   in Loop: Header=BB26_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB26_79
.LBB26_25:                              # %if.else
                                        #   in Loop: Header=BB26_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB26_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB26_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB26_35
.LBB26_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB26_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB26_35
.LBB26_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB26_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB26_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB26_34
.LBB26_33:                              # %land.rhs92
                                        #   in Loop: Header=BB26_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_34:                              # %land.end95
                                        #   in Loop: Header=BB26_1 Depth=1
.LBB26_35:                              # %lor.end96
                                        #   in Loop: Header=BB26_1 Depth=1
.LBB26_36:                              # %land.end97
                                        #   in Loop: Header=BB26_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB26_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB26_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB26_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB26_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB26_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB26_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB26_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB26_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB26_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB26_47
.LBB26_46:                              # %if.then144
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB26_77
.LBB26_47:                              # %if.else147
                                        #   in Loop: Header=BB26_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB26_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB26_76
.LBB26_49:                              # %if.else152
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-132(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB26_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB26_52
.LBB26_51:                              # %cond.false169
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB26_52:                              # %cond.end174
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB26_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB26_55
.LBB26_54:                              # %cond.false184
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB26_55:                              # %cond.end189
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB26_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB26_58
.LBB26_57:                              # %cond.false199
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB26_58:                              # %cond.end204
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB26_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB26_61
.LBB26_60:                              # %cond.false214
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB26_61:                              # %cond.end219
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB26_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB26_65
.LBB26_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB26_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB26_74
.LBB26_65:                              # %if.then232
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB26_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB26_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB26_69
.LBB26_68:                              # %if.else309
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB26_69:                              # %if.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_73
.LBB26_70:                              # %if.else380
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB26_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB26_72:                              # %land.end518
                                        #   in Loop: Header=BB26_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB26_73:                              # %if.end522
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_75
.LBB26_74:                              # %if.else523
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB26_75:                              # %if.end526
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_76
.LBB26_76:                              # %if.end527
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_77
.LBB26_77:                              # %if.end528
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_78
.LBB26_78:                              # %if.end529
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_79
.LBB26_79:                              # %if.end530
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_80
.LBB26_80:                              # %for.inc
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB26_1
.LBB26_81:                              # %for.end
	cmpl	$1259118425, -144(%rbp) # imm = 0x4B0C9F59
	jne	.LBB26_83
.LBB26_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_82
.Lfunc_end26:
	.size	GetStrength.23, .Lfunc_end26-GetStrength.23
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.24            # -- Begin function DeblockMb.24
	.p2align	4, 0x90
	.type	DeblockMb.24,@function
DeblockMb.24:                           # @DeblockMb.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$975307743, -104(%rbp)  # imm = 0x3A2203DF
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB27_2
# %bb.1:                                # %if.then
	jmp	.LBB27_2
.LBB27_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB27_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB27_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB27_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB27_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB27_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB27_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB27_9:                               # %land.end
.LBB27_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB27_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB27_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB27_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB27_61
.LBB27_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB27_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB27_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB27_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB27_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB27_20
.LBB27_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB27_20:                              # %if.end40
	jmp	.LBB27_21
.LBB27_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB27_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_29 Depth 2
                                        #       Child Loop BB27_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB27_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB27_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB27_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB27_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB27_28
.LBB27_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB27_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB27_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB27_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB27_27:                              # %land.end51
                                        #   in Loop: Header=BB27_22 Depth=1
.LBB27_28:                              # %lor.end52
                                        #   in Loop: Header=BB27_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB27_29:                              # %for.cond54
                                        #   Parent Loop BB27_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB27_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB27_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB27_56
.LBB27_32:                              # %if.then60
                                        #   in Loop: Header=BB27_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB27_33:                              # %for.cond70
                                        #   Parent Loop BB27_22 Depth=1
                                        #     Parent Loop BB27_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB27_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB27_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB27_33
.LBB27_36:                              # %for.end
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB27_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB27_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB27_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB27_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB27_39:                              # %if.end84
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB27_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB27_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB27_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB27_42:                              # %if.end100
                                        #   in Loop: Header=BB27_29 Depth=2
	jmp	.LBB27_43
.LBB27_43:                              # %if.end101
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB27_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB27_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB27_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB27_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB27_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB27_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB27_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB27_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB27_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB27_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB27_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB27_50:                              # %if.end125
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB27_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB27_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB27_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB27_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB27_53:                              # %if.end142
                                        #   in Loop: Header=BB27_29 Depth=2
	jmp	.LBB27_54
.LBB27_54:                              # %if.end143
                                        #   in Loop: Header=BB27_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB27_55:                              # %if.end145
                                        #   in Loop: Header=BB27_29 Depth=2
	jmp	.LBB27_56
.LBB27_56:                              # %if.end146
                                        #   in Loop: Header=BB27_29 Depth=2
	jmp	.LBB27_57
.LBB27_57:                              # %for.inc147
                                        #   in Loop: Header=BB27_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB27_29
.LBB27_58:                              # %for.end149
                                        #   in Loop: Header=BB27_22 Depth=1
	jmp	.LBB27_59
.LBB27_59:                              # %for.inc150
                                        #   in Loop: Header=BB27_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_22
.LBB27_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB27_61:                              # %return
	cmpl	$975307743, -104(%rbp)  # imm = 0x3A2203DF
	jne	.LBB27_63
.LBB27_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_62
.Lfunc_end27:
	.size	DeblockMb.24, .Lfunc_end27-DeblockMb.24
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.25            # -- Begin function DeblockMb.25
	.p2align	4, 0x90
	.type	DeblockMb.25,@function
DeblockMb.25:                           # @DeblockMb.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$567382327, -108(%rbp)  # imm = 0x21D19137
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB28_2
# %bb.1:                                # %if.then
	jmp	.LBB28_2
.LBB28_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB28_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB28_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB28_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB28_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB28_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB28_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB28_9:                               # %land.end
.LBB28_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB28_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB28_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB28_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB28_61
.LBB28_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB28_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB28_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB28_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB28_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB28_20
.LBB28_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB28_20:                              # %if.end40
	jmp	.LBB28_21
.LBB28_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB28_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_29 Depth 2
                                        #       Child Loop BB28_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB28_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB28_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB28_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB28_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB28_28
.LBB28_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB28_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB28_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB28_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB28_27:                              # %land.end51
                                        #   in Loop: Header=BB28_22 Depth=1
.LBB28_28:                              # %lor.end52
                                        #   in Loop: Header=BB28_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB28_29:                              # %for.cond54
                                        #   Parent Loop BB28_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB28_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB28_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB28_56
.LBB28_32:                              # %if.then60
                                        #   in Loop: Header=BB28_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB28_33:                              # %for.cond70
                                        #   Parent Loop BB28_22 Depth=1
                                        #     Parent Loop BB28_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB28_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB28_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB28_33
.LBB28_36:                              # %for.end
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB28_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB28_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB28_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB28_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB28_39:                              # %if.end84
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB28_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB28_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB28_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB28_42:                              # %if.end100
                                        #   in Loop: Header=BB28_29 Depth=2
	jmp	.LBB28_43
.LBB28_43:                              # %if.end101
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB28_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB28_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB28_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB28_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB28_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB28_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB28_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB28_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB28_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB28_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB28_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB28_50:                              # %if.end125
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB28_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB28_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB28_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB28_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB28_53:                              # %if.end142
                                        #   in Loop: Header=BB28_29 Depth=2
	jmp	.LBB28_54
.LBB28_54:                              # %if.end143
                                        #   in Loop: Header=BB28_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB28_55:                              # %if.end145
                                        #   in Loop: Header=BB28_29 Depth=2
	jmp	.LBB28_56
.LBB28_56:                              # %if.end146
                                        #   in Loop: Header=BB28_29 Depth=2
	jmp	.LBB28_57
.LBB28_57:                              # %for.inc147
                                        #   in Loop: Header=BB28_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_29
.LBB28_58:                              # %for.end149
                                        #   in Loop: Header=BB28_22 Depth=1
	jmp	.LBB28_59
.LBB28_59:                              # %for.inc150
                                        #   in Loop: Header=BB28_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_22
.LBB28_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB28_61:                              # %return
	cmpl	$567382327, -108(%rbp)  # imm = 0x21D19137
	jne	.LBB28_63
.LBB28_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_62
.Lfunc_end28:
	.size	DeblockMb.25, .Lfunc_end28-DeblockMb.25
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.26         # -- Begin function DeblockFrame.26
	.p2align	4, 0x90
	.type	DeblockFrame.26,@function
DeblockFrame.26:                        # @DeblockFrame.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1121553332, -8(%rbp)   # imm = 0x42D98BB4
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB29_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_4:                               # %for.end
	cmpl	$1121553332, -8(%rbp)   # imm = 0x42D98BB4
	jne	.LBB29_6
.LBB29_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_5
.Lfunc_end29:
	.size	DeblockFrame.26, .Lfunc_end29-DeblockFrame.26
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.27          # -- Begin function GetStrength.27
	.p2align	4, 0x90
	.type	GetStrength.27,@function
GetStrength.27:                         # @GetStrength.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$2001133722, -136(%rbp) # imm = 0x7746E09A
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB30_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB30_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB30_5
.LBB30_4:                               # %cond.false
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB30_5:                               # %cond.end
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB30_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB30_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB30_9
.LBB30_8:                               # %cond.false15
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$1, %eax
	jmp	.LBB30_9
.LBB30_9:                               # %cond.end16
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_11
.LBB30_10:                              # %cond.false18
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-28(%rbp), %eax
.LBB30_11:                              # %cond.end19
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB30_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB30_25
.LBB30_13:                              # %if.then
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB30_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB30_23
.LBB30_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB30_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB30_23
.LBB30_19:                              # %lor.rhs
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB30_22
.LBB30_21:                              # %land.rhs60
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_22:                              # %land.end
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_23:                              # %lor.end
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_24:                              # %land.end62
                                        #   in Loop: Header=BB30_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB30_79
.LBB30_25:                              # %if.else
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB30_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB30_35
.LBB30_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB30_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB30_35
.LBB30_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB30_34
.LBB30_33:                              # %land.rhs92
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_34:                              # %land.end95
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_35:                              # %lor.end96
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_36:                              # %land.end97
                                        #   in Loop: Header=BB30_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB30_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB30_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB30_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB30_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB30_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB30_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB30_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB30_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB30_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB30_47
.LBB30_46:                              # %if.then144
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB30_77
.LBB30_47:                              # %if.else147
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB30_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB30_76
.LBB30_49:                              # %if.else152
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-132(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_52
.LBB30_51:                              # %cond.false169
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_52:                              # %cond.end174
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_55
.LBB30_54:                              # %cond.false184
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_55:                              # %cond.end189
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_58
.LBB30_57:                              # %cond.false199
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_58:                              # %cond.end204
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_61
.LBB30_60:                              # %cond.false214
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_61:                              # %cond.end219
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB30_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB30_65
.LBB30_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB30_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB30_74
.LBB30_65:                              # %if.then232
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB30_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB30_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB30_69
.LBB30_68:                              # %if.else309
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB30_69:                              # %if.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_73
.LBB30_70:                              # %if.else380
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB30_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB30_72:                              # %land.end518
                                        #   in Loop: Header=BB30_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB30_73:                              # %if.end522
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_75
.LBB30_74:                              # %if.else523
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB30_75:                              # %if.end526
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_76
.LBB30_76:                              # %if.end527
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_77
.LBB30_77:                              # %if.end528
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_78
.LBB30_78:                              # %if.end529
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_79
.LBB30_79:                              # %if.end530
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_80
.LBB30_80:                              # %for.inc
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_1
.LBB30_81:                              # %for.end
	cmpl	$2001133722, -136(%rbp) # imm = 0x7746E09A
	jne	.LBB30_83
.LBB30_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_82
.Lfunc_end30:
	.size	GetStrength.27, .Lfunc_end30-GetStrength.27
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.28         # -- Begin function DeblockFrame.28
	.p2align	4, 0x90
	.type	DeblockFrame.28,@function
DeblockFrame.28:                        # @DeblockFrame.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1316939413, -8(%rbp)   # imm = 0x4E7EE695
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB31_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_4:                               # %for.end
	cmpl	$1316939413, -8(%rbp)   # imm = 0x4E7EE695
	jne	.LBB31_6
.LBB31_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_5
.Lfunc_end31:
	.size	DeblockFrame.28, .Lfunc_end31-DeblockFrame.28
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.29         # -- Begin function DeblockFrame.29
	.p2align	4, 0x90
	.type	DeblockFrame.29,@function
DeblockFrame.29:                        # @DeblockFrame.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$21763673, -8(%rbp)     # imm = 0x14C1659
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB32_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_4:                               # %for.end
	cmpl	$21763673, -8(%rbp)     # imm = 0x14C1659
	jne	.LBB32_6
.LBB32_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_5
.Lfunc_end32:
	.size	DeblockFrame.29, .Lfunc_end32-DeblockFrame.29
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.30            # -- Begin function DeblockMb.30
	.p2align	4, 0x90
	.type	DeblockMb.30,@function
DeblockMb.30:                           # @DeblockMb.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$917534920, -100(%rbp)  # imm = 0x36B078C8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB33_2
# %bb.1:                                # %if.then
	jmp	.LBB33_2
.LBB33_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB33_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB33_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB33_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB33_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB33_9:                               # %land.end
.LBB33_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB33_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB33_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB33_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB33_61
.LBB33_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB33_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB33_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB33_20
.LBB33_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB33_20:                              # %if.end40
	jmp	.LBB33_21
.LBB33_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB33_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_29 Depth 2
                                        #       Child Loop BB33_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB33_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB33_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB33_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB33_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB33_28
.LBB33_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB33_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB33_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB33_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB33_27:                              # %land.end51
                                        #   in Loop: Header=BB33_22 Depth=1
.LBB33_28:                              # %lor.end52
                                        #   in Loop: Header=BB33_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB33_29:                              # %for.cond54
                                        #   Parent Loop BB33_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB33_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB33_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB33_56
.LBB33_32:                              # %if.then60
                                        #   in Loop: Header=BB33_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -44(%rbp)
.LBB33_33:                              # %for.cond70
                                        #   Parent Loop BB33_22 Depth=1
                                        #     Parent Loop BB33_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB33_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB33_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB33_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB33_33
.LBB33_36:                              # %for.end
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB33_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB33_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB33_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB33_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB33_39:                              # %if.end84
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB33_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB33_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB33_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB33_42:                              # %if.end100
                                        #   in Loop: Header=BB33_29 Depth=2
	jmp	.LBB33_43
.LBB33_43:                              # %if.end101
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB33_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB33_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB33_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB33_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB33_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB33_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB33_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB33_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB33_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB33_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB33_50:                              # %if.end125
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB33_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB33_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB33_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB33_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB33_53:                              # %if.end142
                                        #   in Loop: Header=BB33_29 Depth=2
	jmp	.LBB33_54
.LBB33_54:                              # %if.end143
                                        #   in Loop: Header=BB33_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB33_55:                              # %if.end145
                                        #   in Loop: Header=BB33_29 Depth=2
	jmp	.LBB33_56
.LBB33_56:                              # %if.end146
                                        #   in Loop: Header=BB33_29 Depth=2
	jmp	.LBB33_57
.LBB33_57:                              # %for.inc147
                                        #   in Loop: Header=BB33_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB33_29
.LBB33_58:                              # %for.end149
                                        #   in Loop: Header=BB33_22 Depth=1
	jmp	.LBB33_59
.LBB33_59:                              # %for.inc150
                                        #   in Loop: Header=BB33_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_22
.LBB33_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB33_61:                              # %return
	cmpl	$917534920, -100(%rbp)  # imm = 0x36B078C8
	jne	.LBB33_63
.LBB33_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_62
.Lfunc_end33:
	.size	DeblockMb.30, .Lfunc_end33-DeblockMb.30
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.31         # -- Begin function DeblockFrame.31
	.p2align	4, 0x90
	.type	DeblockFrame.31,@function
DeblockFrame.31:                        # @DeblockFrame.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2145186495, -8(%rbp)   # imm = 0x7FDCF2BF
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB34_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_1
.LBB34_4:                               # %for.end
	cmpl	$2145186495, -8(%rbp)   # imm = 0x7FDCF2BF
	jne	.LBB34_6
.LBB34_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_5
.Lfunc_end34:
	.size	DeblockFrame.31, .Lfunc_end34-DeblockFrame.31
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.32            # -- Begin function DeblockMb.32
	.p2align	4, 0x90
	.type	DeblockMb.32,@function
DeblockMb.32:                           # @DeblockMb.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$2112614353, -104(%rbp) # imm = 0x7DEBEFD1
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB35_2
# %bb.1:                                # %if.then
	jmp	.LBB35_2
.LBB35_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB35_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB35_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB35_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB35_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB35_9:                               # %land.end
.LBB35_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB35_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB35_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB35_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB35_61
.LBB35_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB35_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB35_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB35_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB35_20
.LBB35_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB35_20:                              # %if.end40
	jmp	.LBB35_21
.LBB35_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB35_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_29 Depth 2
                                        #       Child Loop BB35_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB35_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB35_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB35_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB35_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB35_28
.LBB35_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB35_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB35_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB35_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB35_27:                              # %land.end51
                                        #   in Loop: Header=BB35_22 Depth=1
.LBB35_28:                              # %lor.end52
                                        #   in Loop: Header=BB35_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB35_29:                              # %for.cond54
                                        #   Parent Loop BB35_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB35_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB35_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB35_56
.LBB35_32:                              # %if.then60
                                        #   in Loop: Header=BB35_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB35_33:                              # %for.cond70
                                        #   Parent Loop BB35_22 Depth=1
                                        #     Parent Loop BB35_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB35_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB35_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB35_33
.LBB35_36:                              # %for.end
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB35_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB35_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB35_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB35_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB35_39:                              # %if.end84
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB35_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB35_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB35_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB35_42:                              # %if.end100
                                        #   in Loop: Header=BB35_29 Depth=2
	jmp	.LBB35_43
.LBB35_43:                              # %if.end101
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB35_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB35_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB35_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB35_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB35_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB35_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB35_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB35_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB35_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB35_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB35_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB35_50:                              # %if.end125
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB35_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB35_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB35_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB35_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB35_53:                              # %if.end142
                                        #   in Loop: Header=BB35_29 Depth=2
	jmp	.LBB35_54
.LBB35_54:                              # %if.end143
                                        #   in Loop: Header=BB35_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB35_55:                              # %if.end145
                                        #   in Loop: Header=BB35_29 Depth=2
	jmp	.LBB35_56
.LBB35_56:                              # %if.end146
                                        #   in Loop: Header=BB35_29 Depth=2
	jmp	.LBB35_57
.LBB35_57:                              # %for.inc147
                                        #   in Loop: Header=BB35_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_29
.LBB35_58:                              # %for.end149
                                        #   in Loop: Header=BB35_22 Depth=1
	jmp	.LBB35_59
.LBB35_59:                              # %for.inc150
                                        #   in Loop: Header=BB35_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_22
.LBB35_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB35_61:                              # %return
	cmpl	$2112614353, -104(%rbp) # imm = 0x7DEBEFD1
	jne	.LBB35_63
.LBB35_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_62
.Lfunc_end35:
	.size	DeblockMb.32, .Lfunc_end35-DeblockMb.32
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.33            # -- Begin function DeblockMb.33
	.p2align	4, 0x90
	.type	DeblockMb.33,@function
DeblockMb.33:                           # @DeblockMb.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$836941226, -104(%rbp)  # imm = 0x31E2B5AA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB36_2
# %bb.1:                                # %if.then
	jmp	.LBB36_2
.LBB36_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB36_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB36_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB36_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB36_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB36_9:                               # %land.end
.LBB36_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB36_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB36_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB36_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB36_61
.LBB36_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB36_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB36_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB36_20
.LBB36_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB36_20:                              # %if.end40
	jmp	.LBB36_21
.LBB36_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB36_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_29 Depth 2
                                        #       Child Loop BB36_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB36_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB36_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB36_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB36_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB36_28
.LBB36_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB36_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB36_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB36_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB36_27:                              # %land.end51
                                        #   in Loop: Header=BB36_22 Depth=1
.LBB36_28:                              # %lor.end52
                                        #   in Loop: Header=BB36_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB36_29:                              # %for.cond54
                                        #   Parent Loop BB36_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB36_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB36_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB36_56
.LBB36_32:                              # %if.then60
                                        #   in Loop: Header=BB36_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -48(%rbp)
.LBB36_33:                              # %for.cond70
                                        #   Parent Loop BB36_22 Depth=1
                                        #     Parent Loop BB36_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB36_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB36_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB36_33
.LBB36_36:                              # %for.end
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB36_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB36_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB36_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB36_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB36_39:                              # %if.end84
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB36_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB36_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB36_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB36_42:                              # %if.end100
                                        #   in Loop: Header=BB36_29 Depth=2
	jmp	.LBB36_43
.LBB36_43:                              # %if.end101
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB36_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB36_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB36_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB36_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB36_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB36_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB36_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB36_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB36_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB36_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB36_50:                              # %if.end125
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB36_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB36_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB36_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB36_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB36_53:                              # %if.end142
                                        #   in Loop: Header=BB36_29 Depth=2
	jmp	.LBB36_54
.LBB36_54:                              # %if.end143
                                        #   in Loop: Header=BB36_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB36_55:                              # %if.end145
                                        #   in Loop: Header=BB36_29 Depth=2
	jmp	.LBB36_56
.LBB36_56:                              # %if.end146
                                        #   in Loop: Header=BB36_29 Depth=2
	jmp	.LBB36_57
.LBB36_57:                              # %for.inc147
                                        #   in Loop: Header=BB36_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_29
.LBB36_58:                              # %for.end149
                                        #   in Loop: Header=BB36_22 Depth=1
	jmp	.LBB36_59
.LBB36_59:                              # %for.inc150
                                        #   in Loop: Header=BB36_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_22
.LBB36_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB36_61:                              # %return
	cmpl	$836941226, -104(%rbp)  # imm = 0x31E2B5AA
	jne	.LBB36_63
.LBB36_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_62
.Lfunc_end36:
	.size	DeblockMb.33, .Lfunc_end36-DeblockMb.33
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.34             # -- Begin function EdgeLoop.34
	.p2align	4, 0x90
	.type	EdgeLoop.34,@function
EdgeLoop.34:                            # @EdgeLoop.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$862674770, -180(%rbp)  # imm = 0x336B5F52
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB37_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB37_3
.LBB37_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB37_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB37_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB37_6
.LBB37_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB37_6
.LBB37_6:                               # %cond.end
	movl	%eax, -168(%rbp)
	movl	$0, -60(%rbp)
.LBB37_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-168(%rbp), %eax
	jge	.LBB37_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB37_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB37_11
.LBB37_10:                              # %cond.false8
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB37_11:                              # %cond.end10
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB37_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB37_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB37_15
.LBB37_14:                              # %cond.false17
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$1, %eax
	jmp	.LBB37_15
.LBB37_15:                              # %cond.end18
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_17
.LBB37_16:                              # %cond.false20
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-60(%rbp), %eax
.LBB37_17:                              # %cond.end21
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB37_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB37_19:                              # %lor.end
                                        #   in Loop: Header=BB37_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB37_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$8, -168(%rbp)
	jne	.LBB37_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB37_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB37_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB37_25
.LBB37_24:                              # %cond.false47
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB37_25:                              # %cond.end49
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_27
.LBB37_26:                              # %cond.false51
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB37_27:                              # %cond.end52
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB37_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB37_157
.LBB37_29:                              # %if.then57
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB37_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB37_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB37_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB37_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB37_34
.LBB37_33:                              # %cond.false66
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	32(%rbp), %eax
.LBB37_34:                              # %cond.end67
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_36
.LBB37_35:                              # %cond.false69
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$1, %eax
	jmp	.LBB37_36
.LBB37_36:                              # %cond.end70
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB37_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB37_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB37_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB37_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB37_41
.LBB37_40:                              # %cond.false81
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	32(%rbp), %eax
.LBB37_41:                              # %cond.end82
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_43
.LBB37_42:                              # %cond.false84
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$1, %eax
	jmp	.LBB37_43
.LBB37_43:                              # %cond.end85
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB37_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB37_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB37_50
.LBB37_46:                              # %cond.false105
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB37_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$51, %eax
	jmp	.LBB37_49
.LBB37_48:                              # %cond.false114
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB37_49:                              # %cond.end120
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_50:                              # %cond.end122
                                        #   in Loop: Header=BB37_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB37_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB37_56
.LBB37_52:                              # %cond.false135
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB37_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB37_55
.LBB37_54:                              # %cond.false144
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB37_55:                              # %cond.end150
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_56:                              # %cond.end152
                                        #   in Loop: Header=BB37_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB37_58
.LBB37_57:                              # %cond.false160
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB37_58:                              # %cond.end166
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB37_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB37_64
.LBB37_60:                              # %cond.false172
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB37_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$51, %eax
	jmp	.LBB37_63
.LBB37_62:                              # %cond.false177
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB37_63:                              # %cond.end179
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_64:                              # %cond.end181
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB37_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB37_70
.LBB37_66:                              # %cond.false187
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB37_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB37_69
.LBB37_68:                              # %cond.false192
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB37_69:                              # %cond.end194
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_70:                              # %cond.end196
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -196(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-196(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB37_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB37_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB37_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB37_75:                              # %if.end271
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB37_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB37_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB37_97
.LBB37_78:                              # %if.else292
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB37_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB37_81
.LBB37_80:                              # %cond.false307
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB37_81:                              # %cond.end313
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB37_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB37_84
.LBB37_83:                              # %cond.false325
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB37_84:                              # %cond.end331
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB37_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB37_87
.LBB37_86:                              # %cond.false342
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-12(%rbp), %eax
.LBB37_87:                              # %cond.end343
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB37_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB37_90
.LBB37_89:                              # %cond.false355
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-16(%rbp), %eax
.LBB37_90:                              # %cond.end356
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB37_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB37_93
.LBB37_92:                              # %cond.false371
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-36(%rbp), %eax
.LBB37_93:                              # %cond.end372
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB37_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB37_96
.LBB37_95:                              # %cond.false387
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-44(%rbp), %eax
.LBB37_96:                              # %cond.end388
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB37_97:                              # %if.end395
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_153
.LBB37_98:                              # %if.else396
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB37_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB37_101
.LBB37_100:                             # %cond.false400
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB37_101:                             # %cond.end403
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB37_107
.LBB37_103:                             # %cond.false415
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB37_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB37_106
.LBB37_105:                             # %cond.false424
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB37_106:                             # %cond.end430
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_107:                             # %cond.end432
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB37_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB37_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB37_114
.LBB37_110:                             # %cond.false440
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB37_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB37_113
.LBB37_112:                             # %cond.false446
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB37_113:                             # %cond.end448
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_114:                             # %cond.end450
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB37_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB37_120
.LBB37_116:                             # %cond.false458
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB37_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB37_119
.LBB37_118:                             # %cond.false465
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB37_119:                             # %cond.end467
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_120:                             # %cond.end469
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB37_134
.LBB37_121:                             # %if.else473
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB37_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB37_127
.LBB37_123:                             # %cond.false478
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB37_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB37_126
.LBB37_125:                             # %cond.false484
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB37_126:                             # %cond.end486
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_127:                             # %cond.end488
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB37_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB37_133
.LBB37_129:                             # %cond.false496
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB37_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB37_132
.LBB37_131:                             # %cond.false503
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB37_132:                             # %cond.end505
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_133:                             # %cond.end507
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB37_134:                             # %if.end511
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB37_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB37_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB37_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB37_142
.LBB37_138:                             # %cond.false527
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB37_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB37_141
.LBB37_140:                             # %cond.false537
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB37_141:                             # %cond.end544
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_142:                             # %cond.end546
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB37_143:                             # %if.end554
                                        #   in Loop: Header=BB37_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB37_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB37_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB37_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB37_150
.LBB37_146:                             # %cond.false568
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB37_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB37_149
.LBB37_148:                             # %cond.false578
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB37_149:                             # %cond.end585
                                        #   in Loop: Header=BB37_7 Depth=1
.LBB37_150:                             # %cond.end587
                                        #   in Loop: Header=BB37_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB37_151:                             # %if.end594
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_152
.LBB37_152:                             # %if.end595
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_153
.LBB37_153:                             # %if.end596
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_154
.LBB37_154:                             # %if.end597
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_155
.LBB37_155:                             # %if.end598
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_156
.LBB37_156:                             # %if.end599
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_157
.LBB37_157:                             # %if.end600
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_158
.LBB37_158:                             # %for.inc
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB37_7
.LBB37_159:                             # %for.end
	cmpl	$862674770, -180(%rbp)  # imm = 0x336B5F52
	jne	.LBB37_161
.LBB37_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_160
.Lfunc_end37:
	.size	EdgeLoop.34, .Lfunc_end37-EdgeLoop.34
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.35         # -- Begin function DeblockFrame.35
	.p2align	4, 0x90
	.type	DeblockFrame.35,@function
DeblockFrame.35:                        # @DeblockFrame.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1185346827, -8(%rbp)   # imm = 0x46A6F50B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB38_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:                               # %for.end
	cmpl	$1185346827, -8(%rbp)   # imm = 0x46A6F50B
	jne	.LBB38_6
.LBB38_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_5
.Lfunc_end38:
	.size	DeblockFrame.35, .Lfunc_end38-DeblockFrame.35
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.36         # -- Begin function DeblockFrame.36
	.p2align	4, 0x90
	.type	DeblockFrame.36,@function
DeblockFrame.36:                        # @DeblockFrame.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1101275987, -8(%rbp)   # imm = 0x41A42353
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	cmpl	$1101275987, -8(%rbp)   # imm = 0x41A42353
	jne	.LBB39_6
.LBB39_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_5
.Lfunc_end39:
	.size	DeblockFrame.36, .Lfunc_end39-DeblockFrame.36
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.37         # -- Begin function DeblockFrame.37
	.p2align	4, 0x90
	.type	DeblockFrame.37,@function
DeblockFrame.37:                        # @DeblockFrame.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1116495663, -8(%rbp)   # imm = 0x428C5F2F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB40_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_4:                               # %for.end
	cmpl	$1116495663, -8(%rbp)   # imm = 0x428C5F2F
	jne	.LBB40_6
.LBB40_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_5
.Lfunc_end40:
	.size	DeblockFrame.37, .Lfunc_end40-DeblockFrame.37
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.38            # -- Begin function DeblockMb.38
	.p2align	4, 0x90
	.type	DeblockMb.38,@function
DeblockMb.38:                           # @DeblockMb.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1124023284, -100(%rbp) # imm = 0x42FF3BF4
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB41_2
# %bb.1:                                # %if.then
	jmp	.LBB41_2
.LBB41_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB41_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB41_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB41_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB41_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB41_9:                               # %land.end
.LBB41_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB41_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB41_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB41_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB41_61
.LBB41_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB41_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB41_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB41_20
.LBB41_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB41_20:                              # %if.end40
	jmp	.LBB41_21
.LBB41_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB41_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_29 Depth 2
                                        #       Child Loop BB41_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB41_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB41_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB41_28
.LBB41_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB41_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB41_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB41_27:                              # %land.end51
                                        #   in Loop: Header=BB41_22 Depth=1
.LBB41_28:                              # %lor.end52
                                        #   in Loop: Header=BB41_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB41_29:                              # %for.cond54
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB41_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB41_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB41_56
.LBB41_32:                              # %if.then60
                                        #   in Loop: Header=BB41_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB41_33:                              # %for.cond70
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB41_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB41_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB41_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB41_33
.LBB41_36:                              # %for.end
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB41_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB41_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB41_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB41_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB41_39:                              # %if.end84
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB41_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB41_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB41_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB41_42:                              # %if.end100
                                        #   in Loop: Header=BB41_29 Depth=2
	jmp	.LBB41_43
.LBB41_43:                              # %if.end101
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB41_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB41_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB41_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB41_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB41_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB41_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB41_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB41_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB41_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB41_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB41_50:                              # %if.end125
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB41_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB41_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB41_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB41_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB41_53:                              # %if.end142
                                        #   in Loop: Header=BB41_29 Depth=2
	jmp	.LBB41_54
.LBB41_54:                              # %if.end143
                                        #   in Loop: Header=BB41_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB41_55:                              # %if.end145
                                        #   in Loop: Header=BB41_29 Depth=2
	jmp	.LBB41_56
.LBB41_56:                              # %if.end146
                                        #   in Loop: Header=BB41_29 Depth=2
	jmp	.LBB41_57
.LBB41_57:                              # %for.inc147
                                        #   in Loop: Header=BB41_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB41_29
.LBB41_58:                              # %for.end149
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_59
.LBB41_59:                              # %for.inc150
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_22
.LBB41_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB41_61:                              # %return
	cmpl	$1124023284, -100(%rbp) # imm = 0x42FF3BF4
	jne	.LBB41_63
.LBB41_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_62
.Lfunc_end41:
	.size	DeblockMb.38, .Lfunc_end41-DeblockMb.38
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.39         # -- Begin function DeblockFrame.39
	.p2align	4, 0x90
	.type	DeblockFrame.39,@function
DeblockFrame.39:                        # @DeblockFrame.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$505406155, -8(%rbp)    # imm = 0x1E1FE2CB
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB42_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_1
.LBB42_4:                               # %for.end
	cmpl	$505406155, -8(%rbp)    # imm = 0x1E1FE2CB
	jne	.LBB42_6
.LBB42_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_5
.Lfunc_end42:
	.size	DeblockFrame.39, .Lfunc_end42-DeblockFrame.39
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.40          # -- Begin function GetStrength.40
	.p2align	4, 0x90
	.type	GetStrength.40,@function
GetStrength.40:                         # @GetStrength.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1214415794, -140(%rbp) # imm = 0x486283B2
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB43_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB43_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB43_5
.LBB43_4:                               # %cond.false
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB43_5:                               # %cond.end
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB43_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB43_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB43_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB43_9
.LBB43_8:                               # %cond.false15
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$1, %eax
	jmp	.LBB43_9
.LBB43_9:                               # %cond.end16
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_11
.LBB43_10:                              # %cond.false18
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-28(%rbp), %eax
.LBB43_11:                              # %cond.end19
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB43_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB43_25
.LBB43_13:                              # %if.then
                                        #   in Loop: Header=BB43_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB43_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB43_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB43_23
.LBB43_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB43_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB43_23
.LBB43_19:                              # %lor.rhs
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB43_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB43_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB43_22
.LBB43_21:                              # %land.rhs60
                                        #   in Loop: Header=BB43_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_22:                              # %land.end
                                        #   in Loop: Header=BB43_1 Depth=1
.LBB43_23:                              # %lor.end
                                        #   in Loop: Header=BB43_1 Depth=1
.LBB43_24:                              # %land.end62
                                        #   in Loop: Header=BB43_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB43_79
.LBB43_25:                              # %if.else
                                        #   in Loop: Header=BB43_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB43_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB43_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB43_35
.LBB43_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB43_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB43_35
.LBB43_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB43_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB43_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB43_34
.LBB43_33:                              # %land.rhs92
                                        #   in Loop: Header=BB43_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB43_34:                              # %land.end95
                                        #   in Loop: Header=BB43_1 Depth=1
.LBB43_35:                              # %lor.end96
                                        #   in Loop: Header=BB43_1 Depth=1
.LBB43_36:                              # %land.end97
                                        #   in Loop: Header=BB43_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB43_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB43_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB43_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB43_47
.LBB43_46:                              # %if.then144
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB43_77
.LBB43_47:                              # %if.else147
                                        #   in Loop: Header=BB43_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB43_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB43_76
.LBB43_49:                              # %if.else152
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-132(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB43_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB43_52
.LBB43_51:                              # %cond.false169
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB43_52:                              # %cond.end174
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB43_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB43_55
.LBB43_54:                              # %cond.false184
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB43_55:                              # %cond.end189
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB43_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB43_58
.LBB43_57:                              # %cond.false199
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB43_58:                              # %cond.end204
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB43_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB43_61
.LBB43_60:                              # %cond.false214
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB43_61:                              # %cond.end219
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	%rax, -160(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB43_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	.LBB43_65
.LBB43_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jne	.LBB43_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB43_74
.LBB43_65:                              # %if.then232
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB43_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB43_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB43_69
.LBB43_68:                              # %if.else309
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB43_69:                              # %if.end
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_73
.LBB43_70:                              # %if.else380
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB43_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB43_72:                              # %land.end518
                                        #   in Loop: Header=BB43_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB43_73:                              # %if.end522
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_75
.LBB43_74:                              # %if.else523
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB43_75:                              # %if.end526
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_76
.LBB43_76:                              # %if.end527
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_77
.LBB43_77:                              # %if.end528
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_78
.LBB43_78:                              # %if.end529
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_79
.LBB43_79:                              # %if.end530
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_80
.LBB43_80:                              # %for.inc
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_1
.LBB43_81:                              # %for.end
	cmpl	$1214415794, -140(%rbp) # imm = 0x486283B2
	jne	.LBB43_83
.LBB43_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_82
.Lfunc_end43:
	.size	GetStrength.40, .Lfunc_end43-GetStrength.40
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.41          # -- Begin function GetStrength.41
	.p2align	4, 0x90
	.type	GetStrength.41,@function
GetStrength.41:                         # @GetStrength.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$2126582352, -144(%rbp) # imm = 0x7EC11250
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB44_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB44_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB44_5
.LBB44_4:                               # %cond.false
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB44_5:                               # %cond.end
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB44_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB44_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB44_9
.LBB44_8:                               # %cond.false15
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$1, %eax
	jmp	.LBB44_9
.LBB44_9:                               # %cond.end16
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_11
.LBB44_10:                              # %cond.false18
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-28(%rbp), %eax
.LBB44_11:                              # %cond.end19
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-140(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB44_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB44_25
.LBB44_13:                              # %if.then
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB44_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB44_23
.LBB44_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB44_23
.LBB44_19:                              # %lor.rhs
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB44_22
.LBB44_21:                              # %land.rhs60
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB44_22:                              # %land.end
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_23:                              # %lor.end
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_24:                              # %land.end62
                                        #   in Loop: Header=BB44_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB44_79
.LBB44_25:                              # %if.else
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB44_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB44_35
.LBB44_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB44_35
.LBB44_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB44_34
.LBB44_33:                              # %land.rhs92
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB44_34:                              # %land.end95
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_35:                              # %lor.end96
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_36:                              # %land.end97
                                        #   in Loop: Header=BB44_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB44_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB44_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB44_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB44_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB44_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB44_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB44_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB44_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB44_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB44_47
.LBB44_46:                              # %if.then144
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB44_77
.LBB44_47:                              # %if.else147
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB44_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB44_76
.LBB44_49:                              # %if.else152
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_52
.LBB44_51:                              # %cond.false169
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_52:                              # %cond.end174
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_55
.LBB44_54:                              # %cond.false184
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_55:                              # %cond.end189
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_58
.LBB44_57:                              # %cond.false199
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_58:                              # %cond.end204
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_61
.LBB44_60:                              # %cond.false214
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_61:                              # %cond.end219
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB44_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB44_65
.LBB44_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB44_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB44_74
.LBB44_65:                              # %if.then232
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB44_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB44_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB44_69
.LBB44_68:                              # %if.else309
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB44_69:                              # %if.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_73
.LBB44_70:                              # %if.else380
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB44_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB44_72:                              # %land.end518
                                        #   in Loop: Header=BB44_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB44_73:                              # %if.end522
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_75
.LBB44_74:                              # %if.else523
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB44_75:                              # %if.end526
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_76
.LBB44_76:                              # %if.end527
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_77
.LBB44_77:                              # %if.end528
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_78
.LBB44_78:                              # %if.end529
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_79
.LBB44_79:                              # %if.end530
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_80
.LBB44_80:                              # %for.inc
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_1
.LBB44_81:                              # %for.end
	cmpl	$2126582352, -144(%rbp) # imm = 0x7EC11250
	jne	.LBB44_83
.LBB44_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_82
.Lfunc_end44:
	.size	GetStrength.41, .Lfunc_end44-GetStrength.41
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.42            # -- Begin function DeblockMb.42
	.p2align	4, 0x90
	.type	DeblockMb.42,@function
DeblockMb.42:                           # @DeblockMb.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1171907610, -104(%rbp) # imm = 0x45D9E41A
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB45_2
# %bb.1:                                # %if.then
	jmp	.LBB45_2
.LBB45_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB45_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB45_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB45_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB45_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB45_9:                               # %land.end
.LBB45_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB45_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB45_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB45_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB45_61
.LBB45_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB45_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB45_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB45_20
.LBB45_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB45_20:                              # %if.end40
	jmp	.LBB45_21
.LBB45_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB45_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_29 Depth 2
                                        #       Child Loop BB45_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB45_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB45_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB45_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB45_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB45_28
.LBB45_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB45_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB45_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB45_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB45_27:                              # %land.end51
                                        #   in Loop: Header=BB45_22 Depth=1
.LBB45_28:                              # %lor.end52
                                        #   in Loop: Header=BB45_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB45_29:                              # %for.cond54
                                        #   Parent Loop BB45_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB45_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB45_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB45_56
.LBB45_32:                              # %if.then60
                                        #   in Loop: Header=BB45_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -44(%rbp)
.LBB45_33:                              # %for.cond70
                                        #   Parent Loop BB45_22 Depth=1
                                        #     Parent Loop BB45_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB45_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB45_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB45_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB45_33
.LBB45_36:                              # %for.end
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB45_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB45_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB45_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB45_39:                              # %if.end84
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB45_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB45_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB45_42:                              # %if.end100
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_43
.LBB45_43:                              # %if.end101
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB45_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB45_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB45_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB45_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB45_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB45_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB45_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB45_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB45_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB45_50:                              # %if.end125
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB45_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB45_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB45_53:                              # %if.end142
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_54
.LBB45_54:                              # %if.end143
                                        #   in Loop: Header=BB45_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB45_55:                              # %if.end145
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_56
.LBB45_56:                              # %if.end146
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_57
.LBB45_57:                              # %for.inc147
                                        #   in Loop: Header=BB45_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_29
.LBB45_58:                              # %for.end149
                                        #   in Loop: Header=BB45_22 Depth=1
	jmp	.LBB45_59
.LBB45_59:                              # %for.inc150
                                        #   in Loop: Header=BB45_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_22
.LBB45_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB45_61:                              # %return
	cmpl	$1171907610, -104(%rbp) # imm = 0x45D9E41A
	jne	.LBB45_63
.LBB45_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_62
.Lfunc_end45:
	.size	DeblockMb.42, .Lfunc_end45-DeblockMb.42
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.43             # -- Begin function EdgeLoop.43
	.p2align	4, 0x90
	.type	EdgeLoop.43,@function
EdgeLoop.43:                            # @EdgeLoop.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1337694778, -196(%rbp) # imm = 0x4FBB9A3A
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB46_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB46_3
.LBB46_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB46_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB46_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB46_6
.LBB46_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB46_6
.LBB46_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB46_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB46_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB46_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB46_11
.LBB46_10:                              # %cond.false8
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB46_11:                              # %cond.end10
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%eax, -152(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB46_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB46_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB46_15
.LBB46_14:                              # %cond.false17
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	$1, %eax
	jmp	.LBB46_15
.LBB46_15:                              # %cond.end18
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_17
.LBB46_16:                              # %cond.false20
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-60(%rbp), %eax
.LBB46_17:                              # %cond.end21
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-148(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-148(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-148(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB46_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB46_19:                              # %lor.end
                                        #   in Loop: Header=BB46_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB46_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB46_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB46_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB46_25
.LBB46_24:                              # %cond.false47
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB46_25:                              # %cond.end49
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_27
.LBB46_26:                              # %cond.false51
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB46_27:                              # %cond.end52
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB46_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB46_157
.LBB46_29:                              # %if.then57
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB46_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB46_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB46_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB46_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB46_34
.LBB46_33:                              # %cond.false66
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	32(%rbp), %eax
.LBB46_34:                              # %cond.end67
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_36
.LBB46_35:                              # %cond.false69
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	$1, %eax
	jmp	.LBB46_36
.LBB46_36:                              # %cond.end70
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB46_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB46_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB46_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB46_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB46_41
.LBB46_40:                              # %cond.false81
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	32(%rbp), %eax
.LBB46_41:                              # %cond.end82
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_43
.LBB46_42:                              # %cond.false84
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	$1, %eax
	jmp	.LBB46_43
.LBB46_43:                              # %cond.end85
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB46_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB46_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_50
.LBB46_46:                              # %cond.false105
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB46_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	$51, %eax
	jmp	.LBB46_49
.LBB46_48:                              # %cond.false114
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB46_49:                              # %cond.end120
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_50:                              # %cond.end122
                                        #   in Loop: Header=BB46_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB46_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB46_56
.LBB46_52:                              # %cond.false135
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB46_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB46_55
.LBB46_54:                              # %cond.false144
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB46_55:                              # %cond.end150
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_56:                              # %cond.end152
                                        #   in Loop: Header=BB46_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB46_58
.LBB46_57:                              # %cond.false160
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB46_58:                              # %cond.end166
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_64
.LBB46_60:                              # %cond.false172
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB46_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	$51, %eax
	jmp	.LBB46_63
.LBB46_62:                              # %cond.false177
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB46_63:                              # %cond.end179
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_64:                              # %cond.end181
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB46_70
.LBB46_66:                              # %cond.false187
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB46_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB46_69
.LBB46_68:                              # %cond.false192
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB46_69:                              # %cond.end194
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_70:                              # %cond.end196
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB46_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB46_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB46_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB46_75:                              # %if.end271
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB46_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB46_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB46_97
.LBB46_78:                              # %if.else292
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-168(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB46_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB46_81
.LBB46_80:                              # %cond.false307
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB46_81:                              # %cond.end313
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB46_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB46_84
.LBB46_83:                              # %cond.false325
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB46_84:                              # %cond.end331
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB46_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB46_87
.LBB46_86:                              # %cond.false342
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-16(%rbp), %eax
.LBB46_87:                              # %cond.end343
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB46_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB46_90
.LBB46_89:                              # %cond.false355
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-12(%rbp), %eax
.LBB46_90:                              # %cond.end356
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB46_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB46_93
.LBB46_92:                              # %cond.false371
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-40(%rbp), %eax
.LBB46_93:                              # %cond.end372
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB46_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB46_96
.LBB46_95:                              # %cond.false387
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-36(%rbp), %eax
.LBB46_96:                              # %cond.end388
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB46_97:                              # %if.end395
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_153
.LBB46_98:                              # %if.else396
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB46_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB46_101
.LBB46_100:                             # %cond.false400
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB46_101:                             # %cond.end403
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB46_107
.LBB46_103:                             # %cond.false415
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB46_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB46_106
.LBB46_105:                             # %cond.false424
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB46_106:                             # %cond.end430
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_107:                             # %cond.end432
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB46_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_114
.LBB46_110:                             # %cond.false440
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB46_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB46_113
.LBB46_112:                             # %cond.false446
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB46_113:                             # %cond.end448
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_114:                             # %cond.end450
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_120
.LBB46_116:                             # %cond.false458
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB46_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB46_119
.LBB46_118:                             # %cond.false465
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB46_119:                             # %cond.end467
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_120:                             # %cond.end469
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB46_134
.LBB46_121:                             # %if.else473
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_127
.LBB46_123:                             # %cond.false478
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB46_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB46_126
.LBB46_125:                             # %cond.false484
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB46_126:                             # %cond.end486
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_127:                             # %cond.end488
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_133
.LBB46_129:                             # %cond.false496
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB46_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB46_132
.LBB46_131:                             # %cond.false503
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB46_132:                             # %cond.end505
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_133:                             # %cond.end507
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB46_134:                             # %if.end511
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB46_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB46_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB46_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB46_142
.LBB46_138:                             # %cond.false527
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB46_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB46_141
.LBB46_140:                             # %cond.false537
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB46_141:                             # %cond.end544
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_142:                             # %cond.end546
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB46_143:                             # %if.end554
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB46_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB46_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB46_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB46_150
.LBB46_146:                             # %cond.false568
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB46_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB46_149
.LBB46_148:                             # %cond.false578
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB46_149:                             # %cond.end585
                                        #   in Loop: Header=BB46_7 Depth=1
.LBB46_150:                             # %cond.end587
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB46_151:                             # %if.end594
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_152
.LBB46_152:                             # %if.end595
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_153
.LBB46_153:                             # %if.end596
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_154
.LBB46_154:                             # %if.end597
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_155
.LBB46_155:                             # %if.end598
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_156
.LBB46_156:                             # %if.end599
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_157
.LBB46_157:                             # %if.end600
                                        #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_158
.LBB46_158:                             # %for.inc
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB46_7
.LBB46_159:                             # %for.end
	cmpl	$1337694778, -196(%rbp) # imm = 0x4FBB9A3A
	jne	.LBB46_161
.LBB46_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_160
.Lfunc_end46:
	.size	EdgeLoop.43, .Lfunc_end46-EdgeLoop.43
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.44             # -- Begin function EdgeLoop.44
	.p2align	4, 0x90
	.type	EdgeLoop.44,@function
EdgeLoop.44:                            # @EdgeLoop.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1955844044, -196(%rbp) # imm = 0x7493CFCC
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB47_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB47_3
.LBB47_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB47_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB47_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB47_6
.LBB47_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB47_6
.LBB47_6:                               # %cond.end
	movl	%eax, -152(%rbp)
	movl	$0, -60(%rbp)
.LBB47_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB47_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB47_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB47_11
.LBB47_10:                              # %cond.false8
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB47_11:                              # %cond.end10
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB47_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB47_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB47_15
.LBB47_14:                              # %cond.false17
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	$1, %eax
	jmp	.LBB47_15
.LBB47_15:                              # %cond.end18
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_17
.LBB47_16:                              # %cond.false20
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-60(%rbp), %eax
.LBB47_17:                              # %cond.end21
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-144(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-160(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-160(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB47_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB47_19:                              # %lor.end
                                        #   in Loop: Header=BB47_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB47_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$8, -152(%rbp)
	jne	.LBB47_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB47_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB47_25
.LBB47_24:                              # %cond.false47
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB47_25:                              # %cond.end49
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_27
.LBB47_26:                              # %cond.false51
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB47_27:                              # %cond.end52
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB47_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB47_157
.LBB47_29:                              # %if.then57
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB47_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB47_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB47_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB47_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB47_34
.LBB47_33:                              # %cond.false66
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	32(%rbp), %eax
.LBB47_34:                              # %cond.end67
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_36
.LBB47_35:                              # %cond.false69
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	$1, %eax
	jmp	.LBB47_36
.LBB47_36:                              # %cond.end70
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB47_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB47_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB47_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB47_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB47_41
.LBB47_40:                              # %cond.false81
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	32(%rbp), %eax
.LBB47_41:                              # %cond.end82
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_43
.LBB47_42:                              # %cond.false84
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	$1, %eax
	jmp	.LBB47_43
.LBB47_43:                              # %cond.end85
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB47_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB47_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_50
.LBB47_46:                              # %cond.false105
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB47_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	$51, %eax
	jmp	.LBB47_49
.LBB47_48:                              # %cond.false114
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB47_49:                              # %cond.end120
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_50:                              # %cond.end122
                                        #   in Loop: Header=BB47_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB47_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB47_56
.LBB47_52:                              # %cond.false135
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB47_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB47_55
.LBB47_54:                              # %cond.false144
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB47_55:                              # %cond.end150
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_56:                              # %cond.end152
                                        #   in Loop: Header=BB47_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB47_58
.LBB47_57:                              # %cond.false160
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB47_58:                              # %cond.end166
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_64
.LBB47_60:                              # %cond.false172
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB47_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	$51, %eax
	jmp	.LBB47_63
.LBB47_62:                              # %cond.false177
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB47_63:                              # %cond.end179
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_64:                              # %cond.end181
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB47_70
.LBB47_66:                              # %cond.false187
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB47_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB47_69
.LBB47_68:                              # %cond.false192
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB47_69:                              # %cond.end194
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_70:                              # %cond.end196
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, %eax
	je	.LBB47_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB47_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-156(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB47_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB47_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB47_75:                              # %if.end271
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -156(%rbp)
	jne	.LBB47_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB47_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB47_97
.LBB47_78:                              # %if.else292
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB47_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB47_81
.LBB47_80:                              # %cond.false307
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB47_81:                              # %cond.end313
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB47_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB47_84
.LBB47_83:                              # %cond.false325
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB47_84:                              # %cond.end331
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB47_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB47_87
.LBB47_86:                              # %cond.false342
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-16(%rbp), %eax
.LBB47_87:                              # %cond.end343
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB47_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB47_90
.LBB47_89:                              # %cond.false355
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-12(%rbp), %eax
.LBB47_90:                              # %cond.end356
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB47_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB47_93
.LBB47_92:                              # %cond.false371
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-36(%rbp), %eax
.LBB47_93:                              # %cond.end372
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB47_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB47_96
.LBB47_95:                              # %cond.false387
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-40(%rbp), %eax
.LBB47_96:                              # %cond.end388
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB47_97:                              # %if.end395
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_153
.LBB47_98:                              # %if.else396
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB47_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB47_101
.LBB47_100:                             # %cond.false400
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB47_101:                             # %cond.end403
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB47_107
.LBB47_103:                             # %cond.false415
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB47_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB47_106
.LBB47_105:                             # %cond.false424
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB47_106:                             # %cond.end430
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_107:                             # %cond.end432
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB47_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_114
.LBB47_110:                             # %cond.false440
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB47_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_113
.LBB47_112:                             # %cond.false446
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB47_113:                             # %cond.end448
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_114:                             # %cond.end450
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_120
.LBB47_116:                             # %cond.false458
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB47_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_119
.LBB47_118:                             # %cond.false465
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB47_119:                             # %cond.end467
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_120:                             # %cond.end469
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB47_134
.LBB47_121:                             # %if.else473
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_127
.LBB47_123:                             # %cond.false478
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB47_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB47_126
.LBB47_125:                             # %cond.false484
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB47_126:                             # %cond.end486
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_127:                             # %cond.end488
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_133
.LBB47_129:                             # %cond.false496
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB47_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB47_132
.LBB47_131:                             # %cond.false503
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB47_132:                             # %cond.end505
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_133:                             # %cond.end507
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB47_134:                             # %if.end511
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB47_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB47_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB47_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB47_142
.LBB47_138:                             # %cond.false527
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB47_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB47_141
.LBB47_140:                             # %cond.false537
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB47_141:                             # %cond.end544
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_142:                             # %cond.end546
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB47_143:                             # %if.end554
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB47_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB47_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB47_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB47_150
.LBB47_146:                             # %cond.false568
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB47_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB47_149
.LBB47_148:                             # %cond.false578
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB47_149:                             # %cond.end585
                                        #   in Loop: Header=BB47_7 Depth=1
.LBB47_150:                             # %cond.end587
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB47_151:                             # %if.end594
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_152
.LBB47_152:                             # %if.end595
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_153
.LBB47_153:                             # %if.end596
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_154
.LBB47_154:                             # %if.end597
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_155
.LBB47_155:                             # %if.end598
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_156
.LBB47_156:                             # %if.end599
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_157
.LBB47_157:                             # %if.end600
                                        #   in Loop: Header=BB47_7 Depth=1
	jmp	.LBB47_158
.LBB47_158:                             # %for.inc
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB47_7
.LBB47_159:                             # %for.end
	cmpl	$1955844044, -196(%rbp) # imm = 0x7493CFCC
	jne	.LBB47_161
.LBB47_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_160
.Lfunc_end47:
	.size	EdgeLoop.44, .Lfunc_end47-EdgeLoop.44
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.45          # -- Begin function GetStrength.45
	.p2align	4, 0x90
	.type	GetStrength.45,@function
GetStrength.45:                         # @GetStrength.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$2134654916, -140(%rbp) # imm = 0x7F3C3FC4
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB48_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB48_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB48_5:                               # %cond.end
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB48_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB48_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB48_9
.LBB48_8:                               # %cond.false15
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$1, %eax
	jmp	.LBB48_9
.LBB48_9:                               # %cond.end16
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_11
.LBB48_10:                              # %cond.false18
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-28(%rbp), %eax
.LBB48_11:                              # %cond.end19
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-132(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB48_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB48_25
.LBB48_13:                              # %if.then
                                        #   in Loop: Header=BB48_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB48_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB48_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB48_23
.LBB48_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB48_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB48_23
.LBB48_19:                              # %lor.rhs
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB48_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB48_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB48_22
.LBB48_21:                              # %land.rhs60
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_22:                              # %land.end
                                        #   in Loop: Header=BB48_1 Depth=1
.LBB48_23:                              # %lor.end
                                        #   in Loop: Header=BB48_1 Depth=1
.LBB48_24:                              # %land.end62
                                        #   in Loop: Header=BB48_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB48_79
.LBB48_25:                              # %if.else
                                        #   in Loop: Header=BB48_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB48_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB48_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB48_35
.LBB48_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB48_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB48_35
.LBB48_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB48_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB48_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB48_34
.LBB48_33:                              # %land.rhs92
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_34:                              # %land.end95
                                        #   in Loop: Header=BB48_1 Depth=1
.LBB48_35:                              # %lor.end96
                                        #   in Loop: Header=BB48_1 Depth=1
.LBB48_36:                              # %land.end97
                                        #   in Loop: Header=BB48_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB48_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB48_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB48_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB48_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB48_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB48_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB48_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB48_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB48_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB48_47
.LBB48_46:                              # %if.then144
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB48_77
.LBB48_47:                              # %if.else147
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB48_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB48_76
.LBB48_49:                              # %if.else152
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-144(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB48_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB48_52
.LBB48_51:                              # %cond.false169
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB48_52:                              # %cond.end174
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB48_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB48_55
.LBB48_54:                              # %cond.false184
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB48_55:                              # %cond.end189
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB48_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB48_58
.LBB48_57:                              # %cond.false199
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB48_58:                              # %cond.end204
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB48_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB48_61
.LBB48_60:                              # %cond.false214
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB48_61:                              # %cond.end219
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	%rax, -160(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB48_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	.LBB48_65
.LBB48_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jne	.LBB48_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB48_74
.LBB48_65:                              # %if.then232
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB48_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB48_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB48_69
.LBB48_68:                              # %if.else309
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB48_69:                              # %if.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_73
.LBB48_70:                              # %if.else380
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB48_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB48_72:                              # %land.end518
                                        #   in Loop: Header=BB48_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB48_73:                              # %if.end522
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_75
.LBB48_74:                              # %if.else523
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB48_75:                              # %if.end526
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_76
.LBB48_76:                              # %if.end527
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_77
.LBB48_77:                              # %if.end528
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_78
.LBB48_78:                              # %if.end529
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_79
.LBB48_79:                              # %if.end530
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_80
.LBB48_80:                              # %for.inc
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB48_1
.LBB48_81:                              # %for.end
	cmpl	$2134654916, -140(%rbp) # imm = 0x7F3C3FC4
	jne	.LBB48_83
.LBB48_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_82
.Lfunc_end48:
	.size	GetStrength.45, .Lfunc_end48-GetStrength.45
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.46         # -- Begin function DeblockFrame.46
	.p2align	4, 0x90
	.type	DeblockFrame.46,@function
DeblockFrame.46:                        # @DeblockFrame.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$438314841, -8(%rbp)    # imm = 0x1A202759
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB49_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_4:                               # %for.end
	cmpl	$438314841, -8(%rbp)    # imm = 0x1A202759
	jne	.LBB49_6
.LBB49_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_5
.Lfunc_end49:
	.size	DeblockFrame.46, .Lfunc_end49-DeblockFrame.46
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.47             # -- Begin function EdgeLoop.47
	.p2align	4, 0x90
	.type	EdgeLoop.47,@function
EdgeLoop.47:                            # @EdgeLoop.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$167401494, -192(%rbp)  # imm = 0x9FA5816
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB50_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB50_3
.LBB50_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB50_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB50_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB50_6
.LBB50_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB50_6
.LBB50_6:                               # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB50_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB50_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB50_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB50_11
.LBB50_10:                              # %cond.false8
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB50_11:                              # %cond.end10
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB50_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB50_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB50_15
.LBB50_14:                              # %cond.false17
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$1, %eax
	jmp	.LBB50_15
.LBB50_15:                              # %cond.end18
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_17
.LBB50_16:                              # %cond.false20
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %eax
.LBB50_17:                              # %cond.end21
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB50_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB50_19:                              # %lor.end
                                        #   in Loop: Header=BB50_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB50_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB50_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB50_25
.LBB50_24:                              # %cond.false47
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB50_25:                              # %cond.end49
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_27
.LBB50_26:                              # %cond.false51
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB50_27:                              # %cond.end52
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB50_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB50_157
.LBB50_29:                              # %if.then57
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB50_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB50_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB50_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB50_34
.LBB50_33:                              # %cond.false66
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
.LBB50_34:                              # %cond.end67
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_36
.LBB50_35:                              # %cond.false69
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$1, %eax
	jmp	.LBB50_36
.LBB50_36:                              # %cond.end70
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB50_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB50_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB50_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB50_41
.LBB50_40:                              # %cond.false81
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
.LBB50_41:                              # %cond.end82
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_43
.LBB50_42:                              # %cond.false84
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$1, %eax
	jmp	.LBB50_43
.LBB50_43:                              # %cond.end85
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB50_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB50_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_50
.LBB50_46:                              # %cond.false105
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB50_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %eax
	jmp	.LBB50_49
.LBB50_48:                              # %cond.false114
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB50_49:                              # %cond.end120
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_50:                              # %cond.end122
                                        #   in Loop: Header=BB50_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB50_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB50_56
.LBB50_52:                              # %cond.false135
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB50_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB50_55
.LBB50_54:                              # %cond.false144
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB50_55:                              # %cond.end150
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_56:                              # %cond.end152
                                        #   in Loop: Header=BB50_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB50_58
.LBB50_57:                              # %cond.false160
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB50_58:                              # %cond.end166
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_64
.LBB50_60:                              # %cond.false172
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB50_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %eax
	jmp	.LBB50_63
.LBB50_62:                              # %cond.false177
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB50_63:                              # %cond.end179
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_64:                              # %cond.end181
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB50_70
.LBB50_66:                              # %cond.false187
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB50_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB50_69
.LBB50_68:                              # %cond.false192
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB50_69:                              # %cond.end194
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_70:                              # %cond.end196
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, %eax
	je	.LBB50_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB50_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-156(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB50_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB50_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB50_75:                              # %if.end271
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -156(%rbp)
	jne	.LBB50_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB50_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB50_97
.LBB50_78:                              # %if.else292
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-176(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB50_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_81
.LBB50_80:                              # %cond.false307
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB50_81:                              # %cond.end313
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB50_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_84
.LBB50_83:                              # %cond.false325
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB50_84:                              # %cond.end331
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB50_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB50_87
.LBB50_86:                              # %cond.false342
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-12(%rbp), %eax
.LBB50_87:                              # %cond.end343
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB50_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB50_90
.LBB50_89:                              # %cond.false355
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-16(%rbp), %eax
.LBB50_90:                              # %cond.end356
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB50_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_93
.LBB50_92:                              # %cond.false371
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
.LBB50_93:                              # %cond.end372
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB50_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_96
.LBB50_95:                              # %cond.false387
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
.LBB50_96:                              # %cond.end388
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB50_97:                              # %if.end395
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_153
.LBB50_98:                              # %if.else396
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB50_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB50_101
.LBB50_100:                             # %cond.false400
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB50_101:                             # %cond.end403
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB50_107
.LBB50_103:                             # %cond.false415
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB50_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB50_106
.LBB50_105:                             # %cond.false424
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB50_106:                             # %cond.end430
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_107:                             # %cond.end432
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB50_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_114
.LBB50_110:                             # %cond.false440
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB50_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_113
.LBB50_112:                             # %cond.false446
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB50_113:                             # %cond.end448
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_114:                             # %cond.end450
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_120
.LBB50_116:                             # %cond.false458
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB50_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_119
.LBB50_118:                             # %cond.false465
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB50_119:                             # %cond.end467
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_120:                             # %cond.end469
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB50_134
.LBB50_121:                             # %if.else473
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_127
.LBB50_123:                             # %cond.false478
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB50_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB50_126
.LBB50_125:                             # %cond.false484
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB50_126:                             # %cond.end486
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_127:                             # %cond.end488
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_133
.LBB50_129:                             # %cond.false496
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB50_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB50_132
.LBB50_131:                             # %cond.false503
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB50_132:                             # %cond.end505
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_133:                             # %cond.end507
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB50_134:                             # %if.end511
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB50_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB50_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB50_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB50_142
.LBB50_138:                             # %cond.false527
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB50_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_141
.LBB50_140:                             # %cond.false537
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB50_141:                             # %cond.end544
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_142:                             # %cond.end546
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB50_143:                             # %if.end554
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB50_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB50_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB50_150
.LBB50_146:                             # %cond.false568
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB50_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_149
.LBB50_148:                             # %cond.false578
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB50_149:                             # %cond.end585
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_150:                             # %cond.end587
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB50_151:                             # %if.end594
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_152
.LBB50_152:                             # %if.end595
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_153
.LBB50_153:                             # %if.end596
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_154
.LBB50_154:                             # %if.end597
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_155
.LBB50_155:                             # %if.end598
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_156
.LBB50_156:                             # %if.end599
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_157
.LBB50_157:                             # %if.end600
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_158
.LBB50_158:                             # %for.inc
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB50_7
.LBB50_159:                             # %for.end
	cmpl	$167401494, -192(%rbp)  # imm = 0x9FA5816
	jne	.LBB50_161
.LBB50_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_160
.Lfunc_end50:
	.size	EdgeLoop.47, .Lfunc_end50-EdgeLoop.47
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.48         # -- Begin function DeblockFrame.48
	.p2align	4, 0x90
	.type	DeblockFrame.48,@function
DeblockFrame.48:                        # @DeblockFrame.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2057903263, -8(%rbp)   # imm = 0x7AA91C9F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB51_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_1
.LBB51_4:                               # %for.end
	cmpl	$2057903263, -8(%rbp)   # imm = 0x7AA91C9F
	jne	.LBB51_6
.LBB51_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_5
.Lfunc_end51:
	.size	DeblockFrame.48, .Lfunc_end51-DeblockFrame.48
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.49             # -- Begin function EdgeLoop.49
	.p2align	4, 0x90
	.type	EdgeLoop.49,@function
EdgeLoop.49:                            # @EdgeLoop.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$866785611, -184(%rbp)  # imm = 0x33AA194B
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB52_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB52_3
.LBB52_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB52_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB52_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB52_6
.LBB52_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB52_6
.LBB52_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB52_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB52_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB52_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB52_11
.LBB52_10:                              # %cond.false8
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB52_11:                              # %cond.end10
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -156(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB52_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB52_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB52_15
.LBB52_14:                              # %cond.false17
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$1, %eax
	jmp	.LBB52_15
.LBB52_15:                              # %cond.end18
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_17
.LBB52_16:                              # %cond.false20
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %eax
.LBB52_17:                              # %cond.end21
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-136(%rbp), %edi
	movl	-156(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-156(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB52_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB52_19:                              # %lor.end
                                        #   in Loop: Header=BB52_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB52_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB52_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB52_25
.LBB52_24:                              # %cond.false47
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB52_25:                              # %cond.end49
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_27
.LBB52_26:                              # %cond.false51
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB52_27:                              # %cond.end52
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB52_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB52_157
.LBB52_29:                              # %if.then57
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB52_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB52_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB52_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB52_34
.LBB52_33:                              # %cond.false66
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
.LBB52_34:                              # %cond.end67
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_36
.LBB52_35:                              # %cond.false69
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$1, %eax
	jmp	.LBB52_36
.LBB52_36:                              # %cond.end70
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB52_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB52_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB52_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB52_41
.LBB52_40:                              # %cond.false81
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
.LBB52_41:                              # %cond.end82
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_43
.LBB52_42:                              # %cond.false84
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$1, %eax
	jmp	.LBB52_43
.LBB52_43:                              # %cond.end85
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB52_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB52_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_50
.LBB52_46:                              # %cond.false105
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB52_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %eax
	jmp	.LBB52_49
.LBB52_48:                              # %cond.false114
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB52_49:                              # %cond.end120
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_50:                              # %cond.end122
                                        #   in Loop: Header=BB52_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB52_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB52_56
.LBB52_52:                              # %cond.false135
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB52_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB52_55
.LBB52_54:                              # %cond.false144
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB52_55:                              # %cond.end150
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_56:                              # %cond.end152
                                        #   in Loop: Header=BB52_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB52_58
.LBB52_57:                              # %cond.false160
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB52_58:                              # %cond.end166
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_64
.LBB52_60:                              # %cond.false172
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB52_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %eax
	jmp	.LBB52_63
.LBB52_62:                              # %cond.false177
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB52_63:                              # %cond.end179
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_64:                              # %cond.end181
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB52_70
.LBB52_66:                              # %cond.false187
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB52_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB52_69
.LBB52_68:                              # %cond.false192
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB52_69:                              # %cond.end194
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_70:                              # %cond.end196
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB52_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB52_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB52_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB52_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB52_75:                              # %if.end271
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB52_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB52_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB52_97
.LBB52_78:                              # %if.else292
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-160(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB52_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_81
.LBB52_80:                              # %cond.false307
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB52_81:                              # %cond.end313
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB52_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_84
.LBB52_83:                              # %cond.false325
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB52_84:                              # %cond.end331
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB52_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB52_87
.LBB52_86:                              # %cond.false342
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
.LBB52_87:                              # %cond.end343
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB52_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB52_90
.LBB52_89:                              # %cond.false355
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-16(%rbp), %eax
.LBB52_90:                              # %cond.end356
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB52_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_93
.LBB52_92:                              # %cond.false371
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
.LBB52_93:                              # %cond.end372
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB52_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_96
.LBB52_95:                              # %cond.false387
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
.LBB52_96:                              # %cond.end388
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB52_97:                              # %if.end395
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_153
.LBB52_98:                              # %if.else396
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB52_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB52_101
.LBB52_100:                             # %cond.false400
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB52_101:                             # %cond.end403
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB52_107
.LBB52_103:                             # %cond.false415
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB52_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB52_106
.LBB52_105:                             # %cond.false424
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB52_106:                             # %cond.end430
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_107:                             # %cond.end432
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB52_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_114
.LBB52_110:                             # %cond.false440
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB52_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_113
.LBB52_112:                             # %cond.false446
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB52_113:                             # %cond.end448
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_114:                             # %cond.end450
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_120
.LBB52_116:                             # %cond.false458
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB52_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_119
.LBB52_118:                             # %cond.false465
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB52_119:                             # %cond.end467
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_120:                             # %cond.end469
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB52_134
.LBB52_121:                             # %if.else473
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_127
.LBB52_123:                             # %cond.false478
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB52_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_126
.LBB52_125:                             # %cond.false484
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB52_126:                             # %cond.end486
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_127:                             # %cond.end488
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_133
.LBB52_129:                             # %cond.false496
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB52_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_132
.LBB52_131:                             # %cond.false503
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB52_132:                             # %cond.end505
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_133:                             # %cond.end507
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB52_134:                             # %if.end511
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB52_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB52_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB52_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB52_142
.LBB52_138:                             # %cond.false527
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB52_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB52_141
.LBB52_140:                             # %cond.false537
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB52_141:                             # %cond.end544
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_142:                             # %cond.end546
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB52_143:                             # %if.end554
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB52_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB52_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB52_150
.LBB52_146:                             # %cond.false568
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB52_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB52_149
.LBB52_148:                             # %cond.false578
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB52_149:                             # %cond.end585
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_150:                             # %cond.end587
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB52_151:                             # %if.end594
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_152
.LBB52_152:                             # %if.end595
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_153
.LBB52_153:                             # %if.end596
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_154
.LBB52_154:                             # %if.end597
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_155
.LBB52_155:                             # %if.end598
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_156
.LBB52_156:                             # %if.end599
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_157
.LBB52_157:                             # %if.end600
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_158
.LBB52_158:                             # %for.inc
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB52_7
.LBB52_159:                             # %for.end
	cmpl	$866785611, -184(%rbp)  # imm = 0x33AA194B
	jne	.LBB52_161
.LBB52_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_160
.Lfunc_end52:
	.size	EdgeLoop.49, .Lfunc_end52-EdgeLoop.49
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.50          # -- Begin function GetStrength.50
	.p2align	4, 0x90
	.type	GetStrength.50,@function
GetStrength.50:                         # @GetStrength.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$314757422, -132(%rbp)  # imm = 0x12C2D12E
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB53_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB53_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB53_5
.LBB53_4:                               # %cond.false
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB53_5:                               # %cond.end
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB53_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB53_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB53_9
.LBB53_8:                               # %cond.false15
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$1, %eax
	jmp	.LBB53_9
.LBB53_9:                               # %cond.end16
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_11
.LBB53_10:                              # %cond.false18
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-28(%rbp), %eax
.LBB53_11:                              # %cond.end19
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-148(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB53_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB53_25
.LBB53_13:                              # %if.then
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB53_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB53_23
.LBB53_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB53_23
.LBB53_19:                              # %lor.rhs
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB53_22
.LBB53_21:                              # %land.rhs60
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB53_22:                              # %land.end
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_23:                              # %lor.end
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_24:                              # %land.end62
                                        #   in Loop: Header=BB53_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB53_79
.LBB53_25:                              # %if.else
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB53_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB53_35
.LBB53_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB53_35
.LBB53_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB53_34
.LBB53_33:                              # %land.rhs92
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB53_34:                              # %land.end95
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_35:                              # %lor.end96
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_36:                              # %land.end97
                                        #   in Loop: Header=BB53_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB53_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB53_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB53_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB53_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB53_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB53_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB53_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB53_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB53_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-152(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB53_47
.LBB53_46:                              # %if.then144
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB53_77
.LBB53_47:                              # %if.else147
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB53_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB53_76
.LBB53_49:                              # %if.else152
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_52
.LBB53_51:                              # %cond.false169
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_52:                              # %cond.end174
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_55
.LBB53_54:                              # %cond.false184
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_55:                              # %cond.end189
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_58
.LBB53_57:                              # %cond.false199
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_58:                              # %cond.end204
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_61
.LBB53_60:                              # %cond.false214
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_61:                              # %cond.end219
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB53_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB53_65
.LBB53_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB53_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB53_74
.LBB53_65:                              # %if.then232
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB53_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB53_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB53_69
.LBB53_68:                              # %if.else309
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB53_69:                              # %if.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_73
.LBB53_70:                              # %if.else380
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB53_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB53_72:                              # %land.end518
                                        #   in Loop: Header=BB53_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB53_73:                              # %if.end522
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_75
.LBB53_74:                              # %if.else523
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB53_75:                              # %if.end526
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_76
.LBB53_76:                              # %if.end527
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_77
.LBB53_77:                              # %if.end528
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_78
.LBB53_78:                              # %if.end529
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_79
.LBB53_79:                              # %if.end530
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_80
.LBB53_80:                              # %for.inc
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_1
.LBB53_81:                              # %for.end
	cmpl	$314757422, -132(%rbp)  # imm = 0x12C2D12E
	jne	.LBB53_83
.LBB53_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_82
.Lfunc_end53:
	.size	GetStrength.50, .Lfunc_end53-GetStrength.50
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.51             # -- Begin function EdgeLoop.51
	.p2align	4, 0x90
	.type	EdgeLoop.51,@function
EdgeLoop.51:                            # @EdgeLoop.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1144219601, -196(%rbp) # imm = 0x443367D1
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB54_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB54_3
.LBB54_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB54_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB54_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB54_6
.LBB54_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB54_6
.LBB54_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB54_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB54_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB54_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB54_11
.LBB54_10:                              # %cond.false8
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB54_11:                              # %cond.end10
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%eax, -152(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB54_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB54_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB54_15
.LBB54_14:                              # %cond.false17
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	$1, %eax
	jmp	.LBB54_15
.LBB54_15:                              # %cond.end18
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_17
.LBB54_16:                              # %cond.false20
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-60(%rbp), %eax
.LBB54_17:                              # %cond.end21
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-148(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-148(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-148(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB54_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB54_19:                              # %lor.end
                                        #   in Loop: Header=BB54_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB54_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB54_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB54_25
.LBB54_24:                              # %cond.false47
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB54_25:                              # %cond.end49
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_27
.LBB54_26:                              # %cond.false51
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB54_27:                              # %cond.end52
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB54_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB54_157
.LBB54_29:                              # %if.then57
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB54_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB54_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB54_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB54_34
.LBB54_33:                              # %cond.false66
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	32(%rbp), %eax
.LBB54_34:                              # %cond.end67
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_36
.LBB54_35:                              # %cond.false69
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	$1, %eax
	jmp	.LBB54_36
.LBB54_36:                              # %cond.end70
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB54_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB54_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB54_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB54_41
.LBB54_40:                              # %cond.false81
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	32(%rbp), %eax
.LBB54_41:                              # %cond.end82
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_43
.LBB54_42:                              # %cond.false84
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	$1, %eax
	jmp	.LBB54_43
.LBB54_43:                              # %cond.end85
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB54_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB54_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_50
.LBB54_46:                              # %cond.false105
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB54_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	$51, %eax
	jmp	.LBB54_49
.LBB54_48:                              # %cond.false114
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB54_49:                              # %cond.end120
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_50:                              # %cond.end122
                                        #   in Loop: Header=BB54_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB54_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB54_56
.LBB54_52:                              # %cond.false135
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB54_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB54_55
.LBB54_54:                              # %cond.false144
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB54_55:                              # %cond.end150
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_56:                              # %cond.end152
                                        #   in Loop: Header=BB54_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB54_58
.LBB54_57:                              # %cond.false160
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB54_58:                              # %cond.end166
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB54_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_64
.LBB54_60:                              # %cond.false172
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB54_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	$51, %eax
	jmp	.LBB54_63
.LBB54_62:                              # %cond.false177
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB54_63:                              # %cond.end179
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_64:                              # %cond.end181
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB54_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB54_70
.LBB54_66:                              # %cond.false187
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB54_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB54_69
.LBB54_68:                              # %cond.false192
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB54_69:                              # %cond.end194
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_70:                              # %cond.end196
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -184(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-184(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -188(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -172(%rbp)
	cmpl	$0, %eax
	je	.LBB54_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB54_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-172(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB54_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB54_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB54_75:                              # %if.end271
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -172(%rbp)
	jne	.LBB54_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB54_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB54_97
.LBB54_78:                              # %if.else292
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-160(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB54_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB54_81
.LBB54_80:                              # %cond.false307
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB54_81:                              # %cond.end313
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB54_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB54_84
.LBB54_83:                              # %cond.false325
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB54_84:                              # %cond.end331
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB54_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB54_87
.LBB54_86:                              # %cond.false342
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-16(%rbp), %eax
.LBB54_87:                              # %cond.end343
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB54_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB54_90
.LBB54_89:                              # %cond.false355
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-12(%rbp), %eax
.LBB54_90:                              # %cond.end356
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB54_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB54_93
.LBB54_92:                              # %cond.false371
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-40(%rbp), %eax
.LBB54_93:                              # %cond.end372
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB54_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB54_96
.LBB54_95:                              # %cond.false387
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-44(%rbp), %eax
.LBB54_96:                              # %cond.end388
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB54_97:                              # %if.end395
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_153
.LBB54_98:                              # %if.else396
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB54_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB54_101
.LBB54_100:                             # %cond.false400
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB54_101:                             # %cond.end403
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB54_107
.LBB54_103:                             # %cond.false415
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB54_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB54_106
.LBB54_105:                             # %cond.false424
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB54_106:                             # %cond.end430
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_107:                             # %cond.end432
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB54_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB54_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_114
.LBB54_110:                             # %cond.false440
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB54_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_113
.LBB54_112:                             # %cond.false446
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB54_113:                             # %cond.end448
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_114:                             # %cond.end450
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB54_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_120
.LBB54_116:                             # %cond.false458
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB54_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_119
.LBB54_118:                             # %cond.false465
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB54_119:                             # %cond.end467
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_120:                             # %cond.end469
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB54_134
.LBB54_121:                             # %if.else473
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB54_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_127
.LBB54_123:                             # %cond.false478
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB54_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB54_126
.LBB54_125:                             # %cond.false484
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB54_126:                             # %cond.end486
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_127:                             # %cond.end488
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB54_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_133
.LBB54_129:                             # %cond.false496
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB54_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB54_132
.LBB54_131:                             # %cond.false503
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB54_132:                             # %cond.end505
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_133:                             # %cond.end507
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB54_134:                             # %if.end511
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB54_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB54_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB54_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB54_142
.LBB54_138:                             # %cond.false527
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB54_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_141
.LBB54_140:                             # %cond.false537
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB54_141:                             # %cond.end544
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_142:                             # %cond.end546
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB54_143:                             # %if.end554
                                        #   in Loop: Header=BB54_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB54_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB54_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB54_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB54_150
.LBB54_146:                             # %cond.false568
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB54_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB54_149
.LBB54_148:                             # %cond.false578
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB54_149:                             # %cond.end585
                                        #   in Loop: Header=BB54_7 Depth=1
.LBB54_150:                             # %cond.end587
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB54_151:                             # %if.end594
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_152
.LBB54_152:                             # %if.end595
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_153
.LBB54_153:                             # %if.end596
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_154
.LBB54_154:                             # %if.end597
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_155
.LBB54_155:                             # %if.end598
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_156
.LBB54_156:                             # %if.end599
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_157
.LBB54_157:                             # %if.end600
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_158
.LBB54_158:                             # %for.inc
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB54_7
.LBB54_159:                             # %for.end
	cmpl	$1144219601, -196(%rbp) # imm = 0x443367D1
	jne	.LBB54_161
.LBB54_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_160
.Lfunc_end54:
	.size	EdgeLoop.51, .Lfunc_end54-EdgeLoop.51
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.52         # -- Begin function DeblockFrame.52
	.p2align	4, 0x90
	.type	DeblockFrame.52,@function
DeblockFrame.52:                        # @DeblockFrame.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1101831674, -8(%rbp)   # imm = 0x41AC9DFA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB55_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_1
.LBB55_4:                               # %for.end
	cmpl	$1101831674, -8(%rbp)   # imm = 0x41AC9DFA
	jne	.LBB55_6
.LBB55_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_5
.Lfunc_end55:
	.size	DeblockFrame.52, .Lfunc_end55-DeblockFrame.52
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.53             # -- Begin function EdgeLoop.53
	.p2align	4, 0x90
	.type	EdgeLoop.53,@function
EdgeLoop.53:                            # @EdgeLoop.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$446245588, -188(%rbp)  # imm = 0x1A992AD4
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB56_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB56_3
.LBB56_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB56_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB56_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB56_6
.LBB56_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB56_6
.LBB56_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB56_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB56_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB56_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB56_11
.LBB56_10:                              # %cond.false8
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB56_11:                              # %cond.end10
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB56_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB56_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB56_15
.LBB56_14:                              # %cond.false17
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$1, %eax
	jmp	.LBB56_15
.LBB56_15:                              # %cond.end18
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_17
.LBB56_16:                              # %cond.false20
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-60(%rbp), %eax
.LBB56_17:                              # %cond.end21
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-140(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB56_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB56_19:                              # %lor.end
                                        #   in Loop: Header=BB56_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB56_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB56_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB56_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB56_25
.LBB56_24:                              # %cond.false47
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB56_25:                              # %cond.end49
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_27
.LBB56_26:                              # %cond.false51
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB56_27:                              # %cond.end52
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB56_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB56_157
.LBB56_29:                              # %if.then57
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB56_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB56_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB56_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB56_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB56_34
.LBB56_33:                              # %cond.false66
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	32(%rbp), %eax
.LBB56_34:                              # %cond.end67
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_36
.LBB56_35:                              # %cond.false69
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$1, %eax
	jmp	.LBB56_36
.LBB56_36:                              # %cond.end70
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB56_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB56_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB56_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB56_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB56_41
.LBB56_40:                              # %cond.false81
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	32(%rbp), %eax
.LBB56_41:                              # %cond.end82
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_43
.LBB56_42:                              # %cond.false84
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$1, %eax
	jmp	.LBB56_43
.LBB56_43:                              # %cond.end85
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB56_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB56_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_50
.LBB56_46:                              # %cond.false105
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB56_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$51, %eax
	jmp	.LBB56_49
.LBB56_48:                              # %cond.false114
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB56_49:                              # %cond.end120
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_50:                              # %cond.end122
                                        #   in Loop: Header=BB56_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB56_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB56_56
.LBB56_52:                              # %cond.false135
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB56_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB56_55
.LBB56_54:                              # %cond.false144
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB56_55:                              # %cond.end150
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_56:                              # %cond.end152
                                        #   in Loop: Header=BB56_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB56_58
.LBB56_57:                              # %cond.false160
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB56_58:                              # %cond.end166
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB56_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_64
.LBB56_60:                              # %cond.false172
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB56_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$51, %eax
	jmp	.LBB56_63
.LBB56_62:                              # %cond.false177
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB56_63:                              # %cond.end179
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_64:                              # %cond.end181
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB56_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB56_70
.LBB56_66:                              # %cond.false187
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB56_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB56_69
.LBB56_68:                              # %cond.false192
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB56_69:                              # %cond.end194
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_70:                              # %cond.end196
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB56_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB56_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB56_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB56_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB56_75:                              # %if.end271
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB56_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB56_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB56_97
.LBB56_78:                              # %if.else292
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB56_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB56_81
.LBB56_80:                              # %cond.false307
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB56_81:                              # %cond.end313
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB56_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB56_84
.LBB56_83:                              # %cond.false325
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB56_84:                              # %cond.end331
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB56_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB56_87
.LBB56_86:                              # %cond.false342
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-12(%rbp), %eax
.LBB56_87:                              # %cond.end343
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB56_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB56_90
.LBB56_89:                              # %cond.false355
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-16(%rbp), %eax
.LBB56_90:                              # %cond.end356
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB56_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB56_93
.LBB56_92:                              # %cond.false371
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-36(%rbp), %eax
.LBB56_93:                              # %cond.end372
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB56_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB56_96
.LBB56_95:                              # %cond.false387
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-44(%rbp), %eax
.LBB56_96:                              # %cond.end388
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB56_97:                              # %if.end395
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_153
.LBB56_98:                              # %if.else396
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB56_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB56_101
.LBB56_100:                             # %cond.false400
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB56_101:                             # %cond.end403
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB56_107
.LBB56_103:                             # %cond.false415
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB56_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB56_106
.LBB56_105:                             # %cond.false424
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB56_106:                             # %cond.end430
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_107:                             # %cond.end432
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB56_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB56_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_114
.LBB56_110:                             # %cond.false440
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB56_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_113
.LBB56_112:                             # %cond.false446
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB56_113:                             # %cond.end448
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_114:                             # %cond.end450
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB56_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_120
.LBB56_116:                             # %cond.false458
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB56_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_119
.LBB56_118:                             # %cond.false465
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB56_119:                             # %cond.end467
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_120:                             # %cond.end469
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB56_134
.LBB56_121:                             # %if.else473
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB56_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_127
.LBB56_123:                             # %cond.false478
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB56_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB56_126
.LBB56_125:                             # %cond.false484
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB56_126:                             # %cond.end486
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_127:                             # %cond.end488
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB56_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_133
.LBB56_129:                             # %cond.false496
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB56_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB56_132
.LBB56_131:                             # %cond.false503
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB56_132:                             # %cond.end505
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_133:                             # %cond.end507
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB56_134:                             # %if.end511
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB56_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB56_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB56_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB56_142
.LBB56_138:                             # %cond.false527
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB56_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB56_141
.LBB56_140:                             # %cond.false537
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB56_141:                             # %cond.end544
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_142:                             # %cond.end546
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB56_143:                             # %if.end554
                                        #   in Loop: Header=BB56_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB56_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB56_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB56_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB56_150
.LBB56_146:                             # %cond.false568
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB56_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB56_149
.LBB56_148:                             # %cond.false578
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB56_149:                             # %cond.end585
                                        #   in Loop: Header=BB56_7 Depth=1
.LBB56_150:                             # %cond.end587
                                        #   in Loop: Header=BB56_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB56_151:                             # %if.end594
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_152
.LBB56_152:                             # %if.end595
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_153
.LBB56_153:                             # %if.end596
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_154
.LBB56_154:                             # %if.end597
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_155
.LBB56_155:                             # %if.end598
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_156
.LBB56_156:                             # %if.end599
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_157
.LBB56_157:                             # %if.end600
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_158
.LBB56_158:                             # %for.inc
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_7
.LBB56_159:                             # %for.end
	cmpl	$446245588, -188(%rbp)  # imm = 0x1A992AD4
	jne	.LBB56_161
.LBB56_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_160
.Lfunc_end56:
	.size	EdgeLoop.53, .Lfunc_end56-EdgeLoop.53
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.54             # -- Begin function EdgeLoop.54
	.p2align	4, 0x90
	.type	EdgeLoop.54,@function
EdgeLoop.54:                            # @EdgeLoop.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1070542430, -180(%rbp) # imm = 0x3FCF2E5E
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB57_3
.LBB57_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB57_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB57_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB57_6
.LBB57_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB57_6
.LBB57_6:                               # %cond.end
	movl	%eax, -168(%rbp)
	movl	$0, -60(%rbp)
.LBB57_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-168(%rbp), %eax
	jge	.LBB57_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB57_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB57_11
.LBB57_10:                              # %cond.false8
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB57_11:                              # %cond.end10
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB57_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB57_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB57_15
.LBB57_14:                              # %cond.false17
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	$1, %eax
	jmp	.LBB57_15
.LBB57_15:                              # %cond.end18
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_17
.LBB57_16:                              # %cond.false20
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-60(%rbp), %eax
.LBB57_17:                              # %cond.end21
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-132(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-152(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-152(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB57_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB57_19:                              # %lor.end
                                        #   in Loop: Header=BB57_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB57_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$8, -168(%rbp)
	jne	.LBB57_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB57_25
.LBB57_24:                              # %cond.false47
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB57_25:                              # %cond.end49
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_27
.LBB57_26:                              # %cond.false51
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB57_27:                              # %cond.end52
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB57_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB57_157
.LBB57_29:                              # %if.then57
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB57_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB57_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB57_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB57_34
.LBB57_33:                              # %cond.false66
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	32(%rbp), %eax
.LBB57_34:                              # %cond.end67
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_36
.LBB57_35:                              # %cond.false69
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	$1, %eax
	jmp	.LBB57_36
.LBB57_36:                              # %cond.end70
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB57_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB57_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB57_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB57_41
.LBB57_40:                              # %cond.false81
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	32(%rbp), %eax
.LBB57_41:                              # %cond.end82
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_43
.LBB57_42:                              # %cond.false84
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	$1, %eax
	jmp	.LBB57_43
.LBB57_43:                              # %cond.end85
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB57_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB57_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_50
.LBB57_46:                              # %cond.false105
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB57_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	$51, %eax
	jmp	.LBB57_49
.LBB57_48:                              # %cond.false114
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB57_49:                              # %cond.end120
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_50:                              # %cond.end122
                                        #   in Loop: Header=BB57_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB57_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB57_56
.LBB57_52:                              # %cond.false135
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB57_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB57_55
.LBB57_54:                              # %cond.false144
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB57_55:                              # %cond.end150
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_56:                              # %cond.end152
                                        #   in Loop: Header=BB57_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB57_58
.LBB57_57:                              # %cond.false160
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB57_58:                              # %cond.end166
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB57_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_64
.LBB57_60:                              # %cond.false172
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB57_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	$51, %eax
	jmp	.LBB57_63
.LBB57_62:                              # %cond.false177
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB57_63:                              # %cond.end179
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_64:                              # %cond.end181
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB57_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB57_70
.LBB57_66:                              # %cond.false187
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB57_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB57_69
.LBB57_68:                              # %cond.false192
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB57_69:                              # %cond.end194
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_70:                              # %cond.end196
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -184(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-184(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -188(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -172(%rbp)
	cmpl	$0, %eax
	je	.LBB57_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -136(%rbp)
	callq	abs
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB57_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-172(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB57_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB57_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB57_75:                              # %if.end271
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -172(%rbp)
	jne	.LBB57_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB57_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB57_97
.LBB57_78:                              # %if.else292
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-156(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-176(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB57_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB57_81
.LBB57_80:                              # %cond.false307
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB57_81:                              # %cond.end313
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB57_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB57_84
.LBB57_83:                              # %cond.false325
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB57_84:                              # %cond.end331
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB57_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB57_87
.LBB57_86:                              # %cond.false342
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-12(%rbp), %eax
.LBB57_87:                              # %cond.end343
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB57_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB57_90
.LBB57_89:                              # %cond.false355
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-16(%rbp), %eax
.LBB57_90:                              # %cond.end356
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB57_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB57_93
.LBB57_92:                              # %cond.false371
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-40(%rbp), %eax
.LBB57_93:                              # %cond.end372
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB57_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB57_96
.LBB57_95:                              # %cond.false387
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-32(%rbp), %eax
.LBB57_96:                              # %cond.end388
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB57_97:                              # %if.end395
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_153
.LBB57_98:                              # %if.else396
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB57_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB57_101
.LBB57_100:                             # %cond.false400
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB57_101:                             # %cond.end403
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB57_107
.LBB57_103:                             # %cond.false415
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB57_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB57_106
.LBB57_105:                             # %cond.false424
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB57_106:                             # %cond.end430
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_107:                             # %cond.end432
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB57_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB57_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_114
.LBB57_110:                             # %cond.false440
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB57_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_113
.LBB57_112:                             # %cond.false446
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB57_113:                             # %cond.end448
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_114:                             # %cond.end450
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB57_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_120
.LBB57_116:                             # %cond.false458
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB57_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_119
.LBB57_118:                             # %cond.false465
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB57_119:                             # %cond.end467
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_120:                             # %cond.end469
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB57_134
.LBB57_121:                             # %if.else473
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB57_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_127
.LBB57_123:                             # %cond.false478
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB57_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB57_126
.LBB57_125:                             # %cond.false484
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB57_126:                             # %cond.end486
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_127:                             # %cond.end488
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB57_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_133
.LBB57_129:                             # %cond.false496
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB57_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB57_132
.LBB57_131:                             # %cond.false503
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB57_132:                             # %cond.end505
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_133:                             # %cond.end507
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB57_134:                             # %if.end511
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB57_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB57_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB57_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB57_142
.LBB57_138:                             # %cond.false527
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB57_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB57_141
.LBB57_140:                             # %cond.false537
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB57_141:                             # %cond.end544
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_142:                             # %cond.end546
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB57_143:                             # %if.end554
                                        #   in Loop: Header=BB57_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB57_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB57_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB57_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB57_150
.LBB57_146:                             # %cond.false568
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB57_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB57_149
.LBB57_148:                             # %cond.false578
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB57_149:                             # %cond.end585
                                        #   in Loop: Header=BB57_7 Depth=1
.LBB57_150:                             # %cond.end587
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB57_151:                             # %if.end594
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_152
.LBB57_152:                             # %if.end595
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_153
.LBB57_153:                             # %if.end596
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_154
.LBB57_154:                             # %if.end597
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_155
.LBB57_155:                             # %if.end598
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_156
.LBB57_156:                             # %if.end599
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_157
.LBB57_157:                             # %if.end600
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_158
.LBB57_158:                             # %for.inc
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_7
.LBB57_159:                             # %for.end
	cmpl	$1070542430, -180(%rbp) # imm = 0x3FCF2E5E
	jne	.LBB57_161
.LBB57_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_160
.Lfunc_end57:
	.size	EdgeLoop.54, .Lfunc_end57-EdgeLoop.54
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.55             # -- Begin function EdgeLoop.55
	.p2align	4, 0x90
	.type	EdgeLoop.55,@function
EdgeLoop.55:                            # @EdgeLoop.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1718600591, -188(%rbp) # imm = 0x666FC38F
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB58_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB58_3
.LBB58_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB58_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB58_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB58_6
.LBB58_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB58_6
.LBB58_6:                               # %cond.end
	movl	%eax, -152(%rbp)
	movl	$0, -60(%rbp)
.LBB58_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB58_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB58_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB58_11
.LBB58_10:                              # %cond.false8
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB58_11:                              # %cond.end10
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB58_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB58_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB58_15
.LBB58_14:                              # %cond.false17
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$1, %eax
	jmp	.LBB58_15
.LBB58_15:                              # %cond.end18
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_17
.LBB58_16:                              # %cond.false20
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %eax
.LBB58_17:                              # %cond.end21
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-140(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	-168(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-168(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB58_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB58_19:                              # %lor.end
                                        #   in Loop: Header=BB58_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB58_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$8, -152(%rbp)
	jne	.LBB58_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB58_25
.LBB58_24:                              # %cond.false47
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB58_25:                              # %cond.end49
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_27
.LBB58_26:                              # %cond.false51
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB58_27:                              # %cond.end52
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB58_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB58_157
.LBB58_29:                              # %if.then57
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB58_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB58_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB58_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB58_34
.LBB58_33:                              # %cond.false66
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
.LBB58_34:                              # %cond.end67
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_36
.LBB58_35:                              # %cond.false69
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$1, %eax
	jmp	.LBB58_36
.LBB58_36:                              # %cond.end70
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB58_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB58_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB58_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB58_41
.LBB58_40:                              # %cond.false81
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
.LBB58_41:                              # %cond.end82
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_43
.LBB58_42:                              # %cond.false84
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$1, %eax
	jmp	.LBB58_43
.LBB58_43:                              # %cond.end85
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB58_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB58_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_50
.LBB58_46:                              # %cond.false105
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB58_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %eax
	jmp	.LBB58_49
.LBB58_48:                              # %cond.false114
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB58_49:                              # %cond.end120
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_50:                              # %cond.end122
                                        #   in Loop: Header=BB58_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB58_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB58_56
.LBB58_52:                              # %cond.false135
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB58_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB58_55
.LBB58_54:                              # %cond.false144
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB58_55:                              # %cond.end150
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_56:                              # %cond.end152
                                        #   in Loop: Header=BB58_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB58_58
.LBB58_57:                              # %cond.false160
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB58_58:                              # %cond.end166
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_64
.LBB58_60:                              # %cond.false172
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB58_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %eax
	jmp	.LBB58_63
.LBB58_62:                              # %cond.false177
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB58_63:                              # %cond.end179
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_64:                              # %cond.end181
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB58_70
.LBB58_66:                              # %cond.false187
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB58_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB58_69
.LBB58_68:                              # %cond.false192
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB58_69:                              # %cond.end194
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_70:                              # %cond.end196
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, %eax
	je	.LBB58_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB58_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-160(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB58_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB58_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB58_75:                              # %if.end271
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -160(%rbp)
	jne	.LBB58_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB58_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB58_97
.LBB58_78:                              # %if.else292
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-176(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB58_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false307
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB58_81:                              # %cond.end313
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB58_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_84
.LBB58_83:                              # %cond.false325
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB58_84:                              # %cond.end331
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB58_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB58_87
.LBB58_86:                              # %cond.false342
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
.LBB58_87:                              # %cond.end343
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB58_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB58_90
.LBB58_89:                              # %cond.false355
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-16(%rbp), %eax
.LBB58_90:                              # %cond.end356
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB58_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_93
.LBB58_92:                              # %cond.false371
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-40(%rbp), %eax
.LBB58_93:                              # %cond.end372
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB58_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_96
.LBB58_95:                              # %cond.false387
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
.LBB58_96:                              # %cond.end388
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB58_97:                              # %if.end395
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_153
.LBB58_98:                              # %if.else396
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB58_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB58_101
.LBB58_100:                             # %cond.false400
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB58_101:                             # %cond.end403
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB58_107
.LBB58_103:                             # %cond.false415
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB58_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB58_106
.LBB58_105:                             # %cond.false424
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB58_106:                             # %cond.end430
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_107:                             # %cond.end432
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB58_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_114
.LBB58_110:                             # %cond.false440
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB58_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_113
.LBB58_112:                             # %cond.false446
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB58_113:                             # %cond.end448
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_114:                             # %cond.end450
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_120
.LBB58_116:                             # %cond.false458
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB58_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_119
.LBB58_118:                             # %cond.false465
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB58_119:                             # %cond.end467
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_120:                             # %cond.end469
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB58_134
.LBB58_121:                             # %if.else473
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_127
.LBB58_123:                             # %cond.false478
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB58_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB58_126
.LBB58_125:                             # %cond.false484
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB58_126:                             # %cond.end486
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_127:                             # %cond.end488
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_133
.LBB58_129:                             # %cond.false496
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB58_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB58_132
.LBB58_131:                             # %cond.false503
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB58_132:                             # %cond.end505
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_133:                             # %cond.end507
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB58_134:                             # %if.end511
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB58_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB58_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB58_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB58_142
.LBB58_138:                             # %cond.false527
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB58_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB58_141
.LBB58_140:                             # %cond.false537
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB58_141:                             # %cond.end544
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_142:                             # %cond.end546
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB58_143:                             # %if.end554
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB58_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB58_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB58_150
.LBB58_146:                             # %cond.false568
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB58_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB58_149
.LBB58_148:                             # %cond.false578
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB58_149:                             # %cond.end585
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_150:                             # %cond.end587
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB58_151:                             # %if.end594
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_152
.LBB58_152:                             # %if.end595
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_153
.LBB58_153:                             # %if.end596
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_154
.LBB58_154:                             # %if.end597
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_155
.LBB58_155:                             # %if.end598
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_156
.LBB58_156:                             # %if.end599
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_157
.LBB58_157:                             # %if.end600
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_158
.LBB58_158:                             # %for.inc
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB58_7
.LBB58_159:                             # %for.end
	cmpl	$1718600591, -188(%rbp) # imm = 0x666FC38F
	jne	.LBB58_161
.LBB58_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_160
.Lfunc_end58:
	.size	EdgeLoop.55, .Lfunc_end58-EdgeLoop.55
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.56             # -- Begin function EdgeLoop.56
	.p2align	4, 0x90
	.type	EdgeLoop.56,@function
EdgeLoop.56:                            # @EdgeLoop.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1562293875, -192(%rbp) # imm = 0x5D1EB673
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB59_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB59_3
.LBB59_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB59_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB59_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB59_6
.LBB59_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB59_6
.LBB59_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB59_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB59_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB59_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB59_11
.LBB59_10:                              # %cond.false8
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB59_11:                              # %cond.end10
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB59_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB59_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB59_15
.LBB59_14:                              # %cond.false17
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$1, %eax
	jmp	.LBB59_15
.LBB59_15:                              # %cond.end18
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_17
.LBB59_16:                              # %cond.false20
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %eax
.LBB59_17:                              # %cond.end21
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-140(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB59_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB59_19:                              # %lor.end
                                        #   in Loop: Header=BB59_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB59_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB59_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB59_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB59_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB59_25
.LBB59_24:                              # %cond.false47
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB59_25:                              # %cond.end49
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_27
.LBB59_26:                              # %cond.false51
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB59_27:                              # %cond.end52
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB59_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB59_157
.LBB59_29:                              # %if.then57
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB59_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB59_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB59_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB59_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB59_34
.LBB59_33:                              # %cond.false66
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
.LBB59_34:                              # %cond.end67
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_36
.LBB59_35:                              # %cond.false69
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$1, %eax
	jmp	.LBB59_36
.LBB59_36:                              # %cond.end70
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB59_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB59_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB59_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB59_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB59_41
.LBB59_40:                              # %cond.false81
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
.LBB59_41:                              # %cond.end82
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_43
.LBB59_42:                              # %cond.false84
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$1, %eax
	jmp	.LBB59_43
.LBB59_43:                              # %cond.end85
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB59_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB59_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_50
.LBB59_46:                              # %cond.false105
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB59_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %eax
	jmp	.LBB59_49
.LBB59_48:                              # %cond.false114
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB59_49:                              # %cond.end120
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_50:                              # %cond.end122
                                        #   in Loop: Header=BB59_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB59_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB59_56
.LBB59_52:                              # %cond.false135
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB59_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB59_55
.LBB59_54:                              # %cond.false144
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB59_55:                              # %cond.end150
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_56:                              # %cond.end152
                                        #   in Loop: Header=BB59_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB59_58
.LBB59_57:                              # %cond.false160
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB59_58:                              # %cond.end166
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_64
.LBB59_60:                              # %cond.false172
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB59_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %eax
	jmp	.LBB59_63
.LBB59_62:                              # %cond.false177
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB59_63:                              # %cond.end179
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_64:                              # %cond.end181
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB59_70
.LBB59_66:                              # %cond.false187
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB59_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB59_69
.LBB59_68:                              # %cond.false192
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB59_69:                              # %cond.end194
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_70:                              # %cond.end196
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -196(%rbp)
	movslq	-152(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-196(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-152(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, %eax
	je	.LBB59_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -136(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB59_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-156(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB59_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB59_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB59_75:                              # %if.end271
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -156(%rbp)
	jne	.LBB59_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB59_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB59_97
.LBB59_78:                              # %if.else292
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-160(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB59_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_81
.LBB59_80:                              # %cond.false307
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB59_81:                              # %cond.end313
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB59_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_84
.LBB59_83:                              # %cond.false325
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB59_84:                              # %cond.end331
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB59_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB59_87
.LBB59_86:                              # %cond.false342
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-12(%rbp), %eax
.LBB59_87:                              # %cond.end343
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB59_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB59_90
.LBB59_89:                              # %cond.false355
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-16(%rbp), %eax
.LBB59_90:                              # %cond.end356
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB59_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_93
.LBB59_92:                              # %cond.false371
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
.LBB59_93:                              # %cond.end372
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB59_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_96
.LBB59_95:                              # %cond.false387
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
.LBB59_96:                              # %cond.end388
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB59_97:                              # %if.end395
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_153
.LBB59_98:                              # %if.else396
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB59_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB59_101
.LBB59_100:                             # %cond.false400
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB59_101:                             # %cond.end403
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB59_107
.LBB59_103:                             # %cond.false415
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB59_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB59_106
.LBB59_105:                             # %cond.false424
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB59_106:                             # %cond.end430
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_107:                             # %cond.end432
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB59_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_114
.LBB59_110:                             # %cond.false440
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB59_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_113
.LBB59_112:                             # %cond.false446
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB59_113:                             # %cond.end448
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_114:                             # %cond.end450
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_120
.LBB59_116:                             # %cond.false458
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB59_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_119
.LBB59_118:                             # %cond.false465
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB59_119:                             # %cond.end467
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_120:                             # %cond.end469
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB59_134
.LBB59_121:                             # %if.else473
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_127
.LBB59_123:                             # %cond.false478
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB59_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB59_126
.LBB59_125:                             # %cond.false484
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB59_126:                             # %cond.end486
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_127:                             # %cond.end488
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_133
.LBB59_129:                             # %cond.false496
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB59_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB59_132
.LBB59_131:                             # %cond.false503
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB59_132:                             # %cond.end505
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_133:                             # %cond.end507
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB59_134:                             # %if.end511
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB59_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB59_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB59_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB59_142
.LBB59_138:                             # %cond.false527
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB59_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB59_141
.LBB59_140:                             # %cond.false537
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB59_141:                             # %cond.end544
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_142:                             # %cond.end546
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB59_143:                             # %if.end554
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB59_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB59_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB59_150
.LBB59_146:                             # %cond.false568
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB59_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB59_149
.LBB59_148:                             # %cond.false578
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB59_149:                             # %cond.end585
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_150:                             # %cond.end587
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB59_151:                             # %if.end594
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_152
.LBB59_152:                             # %if.end595
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %if.end596
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_154
.LBB59_154:                             # %if.end597
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_155
.LBB59_155:                             # %if.end598
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_156
.LBB59_156:                             # %if.end599
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_157
.LBB59_157:                             # %if.end600
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_158
.LBB59_158:                             # %for.inc
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB59_7
.LBB59_159:                             # %for.end
	cmpl	$1562293875, -192(%rbp) # imm = 0x5D1EB673
	jne	.LBB59_161
.LBB59_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_160
.Lfunc_end59:
	.size	EdgeLoop.56, .Lfunc_end59-EdgeLoop.56
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.57          # -- Begin function GetStrength.57
	.p2align	4, 0x90
	.type	GetStrength.57,@function
GetStrength.57:                         # @GetStrength.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$33807389, -140(%rbp)   # imm = 0x203DC1D
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB60_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB60_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB60_5
.LBB60_4:                               # %cond.false
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB60_5:                               # %cond.end
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB60_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB60_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB60_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB60_9
.LBB60_8:                               # %cond.false15
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$1, %eax
	jmp	.LBB60_9
.LBB60_9:                               # %cond.end16
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_11
.LBB60_10:                              # %cond.false18
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-28(%rbp), %eax
.LBB60_11:                              # %cond.end19
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB60_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB60_25
.LBB60_13:                              # %if.then
                                        #   in Loop: Header=BB60_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB60_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB60_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB60_23
.LBB60_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB60_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB60_23
.LBB60_19:                              # %lor.rhs
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB60_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB60_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB60_22
.LBB60_21:                              # %land.rhs60
                                        #   in Loop: Header=BB60_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_22:                              # %land.end
                                        #   in Loop: Header=BB60_1 Depth=1
.LBB60_23:                              # %lor.end
                                        #   in Loop: Header=BB60_1 Depth=1
.LBB60_24:                              # %land.end62
                                        #   in Loop: Header=BB60_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB60_79
.LBB60_25:                              # %if.else
                                        #   in Loop: Header=BB60_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB60_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB60_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB60_35
.LBB60_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB60_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB60_35
.LBB60_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB60_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB60_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB60_34
.LBB60_33:                              # %land.rhs92
                                        #   in Loop: Header=BB60_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_34:                              # %land.end95
                                        #   in Loop: Header=BB60_1 Depth=1
.LBB60_35:                              # %lor.end96
                                        #   in Loop: Header=BB60_1 Depth=1
.LBB60_36:                              # %land.end97
                                        #   in Loop: Header=BB60_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB60_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB60_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB60_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB60_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB60_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB60_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB60_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB60_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB60_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB60_47
.LBB60_46:                              # %if.then144
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB60_77
.LBB60_47:                              # %if.else147
                                        #   in Loop: Header=BB60_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB60_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB60_76
.LBB60_49:                              # %if.else152
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB60_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB60_52
.LBB60_51:                              # %cond.false169
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB60_52:                              # %cond.end174
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB60_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB60_55
.LBB60_54:                              # %cond.false184
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB60_55:                              # %cond.end189
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB60_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB60_58
.LBB60_57:                              # %cond.false199
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB60_58:                              # %cond.end204
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB60_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB60_61
.LBB60_60:                              # %cond.false214
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB60_61:                              # %cond.end219
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB60_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB60_65
.LBB60_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB60_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB60_74
.LBB60_65:                              # %if.then232
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB60_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB60_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB60_69
.LBB60_68:                              # %if.else309
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB60_69:                              # %if.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_73
.LBB60_70:                              # %if.else380
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB60_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB60_72:                              # %land.end518
                                        #   in Loop: Header=BB60_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB60_73:                              # %if.end522
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_75
.LBB60_74:                              # %if.else523
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB60_75:                              # %if.end526
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_76
.LBB60_76:                              # %if.end527
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_77
.LBB60_77:                              # %if.end528
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_78
.LBB60_78:                              # %if.end529
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_79
.LBB60_79:                              # %if.end530
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_80
.LBB60_80:                              # %for.inc
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_1
.LBB60_81:                              # %for.end
	cmpl	$33807389, -140(%rbp)   # imm = 0x203DC1D
	jne	.LBB60_83
.LBB60_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_82
.Lfunc_end60:
	.size	GetStrength.57, .Lfunc_end60-GetStrength.57
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.58             # -- Begin function EdgeLoop.58
	.p2align	4, 0x90
	.type	EdgeLoop.58,@function
EdgeLoop.58:                            # @EdgeLoop.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$470137920, -184(%rbp)  # imm = 0x1C05BC40
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB61_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB61_3
.LBB61_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB61_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB61_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB61_6
.LBB61_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB61_6
.LBB61_6:                               # %cond.end
	movl	%eax, -168(%rbp)
	movl	$0, -60(%rbp)
.LBB61_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-168(%rbp), %eax
	jge	.LBB61_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB61_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB61_11
.LBB61_10:                              # %cond.false8
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB61_11:                              # %cond.end10
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB61_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB61_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB61_15
.LBB61_14:                              # %cond.false17
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$1, %eax
	jmp	.LBB61_15
.LBB61_15:                              # %cond.end18
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_17
.LBB61_16:                              # %cond.false20
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %eax
.LBB61_17:                              # %cond.end21
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-136(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-172(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-172(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB61_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB61_19:                              # %lor.end
                                        #   in Loop: Header=BB61_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB61_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$8, -168(%rbp)
	jne	.LBB61_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB61_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB61_25
.LBB61_24:                              # %cond.false47
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB61_25:                              # %cond.end49
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_27
.LBB61_26:                              # %cond.false51
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB61_27:                              # %cond.end52
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB61_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB61_157
.LBB61_29:                              # %if.then57
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB61_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB61_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB61_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB61_34
.LBB61_33:                              # %cond.false66
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
.LBB61_34:                              # %cond.end67
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_36
.LBB61_35:                              # %cond.false69
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$1, %eax
	jmp	.LBB61_36
.LBB61_36:                              # %cond.end70
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB61_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB61_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB61_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB61_41
.LBB61_40:                              # %cond.false81
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
.LBB61_41:                              # %cond.end82
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_43
.LBB61_42:                              # %cond.false84
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$1, %eax
	jmp	.LBB61_43
.LBB61_43:                              # %cond.end85
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB61_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB61_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_50
.LBB61_46:                              # %cond.false105
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB61_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %eax
	jmp	.LBB61_49
.LBB61_48:                              # %cond.false114
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB61_49:                              # %cond.end120
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_50:                              # %cond.end122
                                        #   in Loop: Header=BB61_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB61_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB61_56
.LBB61_52:                              # %cond.false135
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB61_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB61_55
.LBB61_54:                              # %cond.false144
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB61_55:                              # %cond.end150
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_56:                              # %cond.end152
                                        #   in Loop: Header=BB61_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB61_58
.LBB61_57:                              # %cond.false160
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB61_58:                              # %cond.end166
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_64
.LBB61_60:                              # %cond.false172
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB61_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %eax
	jmp	.LBB61_63
.LBB61_62:                              # %cond.false177
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB61_63:                              # %cond.end179
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_64:                              # %cond.end181
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB61_70
.LBB61_66:                              # %cond.false187
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB61_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB61_69
.LBB61_68:                              # %cond.false192
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB61_69:                              # %cond.end194
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_70:                              # %cond.end196
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -140(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB61_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB61_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB61_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB61_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB61_75:                              # %if.end271
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB61_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB61_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB61_97
.LBB61_78:                              # %if.else292
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-156(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB61_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_81
.LBB61_80:                              # %cond.false307
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB61_81:                              # %cond.end313
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB61_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_84
.LBB61_83:                              # %cond.false325
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB61_84:                              # %cond.end331
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB61_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB61_87
.LBB61_86:                              # %cond.false342
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-12(%rbp), %eax
.LBB61_87:                              # %cond.end343
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB61_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB61_90
.LBB61_89:                              # %cond.false355
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
.LBB61_90:                              # %cond.end356
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB61_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_93
.LBB61_92:                              # %cond.false371
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
.LBB61_93:                              # %cond.end372
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB61_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_96
.LBB61_95:                              # %cond.false387
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-40(%rbp), %eax
.LBB61_96:                              # %cond.end388
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB61_97:                              # %if.end395
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_153
.LBB61_98:                              # %if.else396
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB61_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB61_101
.LBB61_100:                             # %cond.false400
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB61_101:                             # %cond.end403
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB61_107
.LBB61_103:                             # %cond.false415
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB61_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB61_106
.LBB61_105:                             # %cond.false424
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB61_106:                             # %cond.end430
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_107:                             # %cond.end432
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB61_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_114
.LBB61_110:                             # %cond.false440
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB61_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_113
.LBB61_112:                             # %cond.false446
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB61_113:                             # %cond.end448
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_114:                             # %cond.end450
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_120
.LBB61_116:                             # %cond.false458
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB61_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_119
.LBB61_118:                             # %cond.false465
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB61_119:                             # %cond.end467
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_120:                             # %cond.end469
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB61_134
.LBB61_121:                             # %if.else473
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_127
.LBB61_123:                             # %cond.false478
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB61_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB61_126
.LBB61_125:                             # %cond.false484
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB61_126:                             # %cond.end486
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_127:                             # %cond.end488
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_133
.LBB61_129:                             # %cond.false496
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB61_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB61_132
.LBB61_131:                             # %cond.false503
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB61_132:                             # %cond.end505
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_133:                             # %cond.end507
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB61_134:                             # %if.end511
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB61_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB61_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB61_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB61_142
.LBB61_138:                             # %cond.false527
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB61_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB61_141
.LBB61_140:                             # %cond.false537
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB61_141:                             # %cond.end544
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_142:                             # %cond.end546
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB61_143:                             # %if.end554
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB61_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB61_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB61_150
.LBB61_146:                             # %cond.false568
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB61_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB61_149
.LBB61_148:                             # %cond.false578
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB61_149:                             # %cond.end585
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_150:                             # %cond.end587
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB61_151:                             # %if.end594
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_152
.LBB61_152:                             # %if.end595
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_153
.LBB61_153:                             # %if.end596
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_154
.LBB61_154:                             # %if.end597
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_155
.LBB61_155:                             # %if.end598
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_156
.LBB61_156:                             # %if.end599
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_157
.LBB61_157:                             # %if.end600
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_158
.LBB61_158:                             # %for.inc
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_7
.LBB61_159:                             # %for.end
	cmpl	$470137920, -184(%rbp)  # imm = 0x1C05BC40
	jne	.LBB61_161
.LBB61_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_160
.Lfunc_end61:
	.size	EdgeLoop.58, .Lfunc_end61-EdgeLoop.58
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.59             # -- Begin function EdgeLoop.59
	.p2align	4, 0x90
	.type	EdgeLoop.59,@function
EdgeLoop.59:                            # @EdgeLoop.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1009127207, -184(%rbp) # imm = 0x3C260F27
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB62_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB62_3
.LBB62_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB62_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB62_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB62_6
.LBB62_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB62_6
.LBB62_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB62_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB62_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB62_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB62_11
.LBB62_10:                              # %cond.false8
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB62_11:                              # %cond.end10
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB62_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB62_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB62_15
.LBB62_14:                              # %cond.false17
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	$1, %eax
	jmp	.LBB62_15
.LBB62_15:                              # %cond.end18
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_17
.LBB62_16:                              # %cond.false20
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-60(%rbp), %eax
.LBB62_17:                              # %cond.end21
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-144(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB62_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB62_19:                              # %lor.end
                                        #   in Loop: Header=BB62_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB62_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB62_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB62_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB62_25
.LBB62_24:                              # %cond.false47
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB62_25:                              # %cond.end49
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_27
.LBB62_26:                              # %cond.false51
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB62_27:                              # %cond.end52
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB62_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB62_157
.LBB62_29:                              # %if.then57
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB62_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB62_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB62_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB62_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB62_34
.LBB62_33:                              # %cond.false66
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	32(%rbp), %eax
.LBB62_34:                              # %cond.end67
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_36
.LBB62_35:                              # %cond.false69
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	$1, %eax
	jmp	.LBB62_36
.LBB62_36:                              # %cond.end70
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB62_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB62_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB62_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB62_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB62_41
.LBB62_40:                              # %cond.false81
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	32(%rbp), %eax
.LBB62_41:                              # %cond.end82
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_43
.LBB62_42:                              # %cond.false84
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	$1, %eax
	jmp	.LBB62_43
.LBB62_43:                              # %cond.end85
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB62_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB62_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB62_50
.LBB62_46:                              # %cond.false105
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB62_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	$51, %eax
	jmp	.LBB62_49
.LBB62_48:                              # %cond.false114
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB62_49:                              # %cond.end120
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_50:                              # %cond.end122
                                        #   in Loop: Header=BB62_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB62_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB62_56
.LBB62_52:                              # %cond.false135
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB62_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB62_55
.LBB62_54:                              # %cond.false144
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB62_55:                              # %cond.end150
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_56:                              # %cond.end152
                                        #   in Loop: Header=BB62_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB62_58
.LBB62_57:                              # %cond.false160
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB62_58:                              # %cond.end166
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB62_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB62_64
.LBB62_60:                              # %cond.false172
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB62_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	$51, %eax
	jmp	.LBB62_63
.LBB62_62:                              # %cond.false177
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB62_63:                              # %cond.end179
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_64:                              # %cond.end181
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB62_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB62_70
.LBB62_66:                              # %cond.false187
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB62_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB62_69
.LBB62_68:                              # %cond.false192
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB62_69:                              # %cond.end194
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_70:                              # %cond.end196
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-160(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-160(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -192(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB62_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB62_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB62_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB62_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB62_75:                              # %if.end271
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB62_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB62_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB62_97
.LBB62_78:                              # %if.else292
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB62_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB62_81
.LBB62_80:                              # %cond.false307
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB62_81:                              # %cond.end313
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB62_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB62_84
.LBB62_83:                              # %cond.false325
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB62_84:                              # %cond.end331
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB62_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB62_87
.LBB62_86:                              # %cond.false342
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-12(%rbp), %eax
.LBB62_87:                              # %cond.end343
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB62_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB62_90
.LBB62_89:                              # %cond.false355
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-16(%rbp), %eax
.LBB62_90:                              # %cond.end356
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB62_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB62_93
.LBB62_92:                              # %cond.false371
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-44(%rbp), %eax
.LBB62_93:                              # %cond.end372
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB62_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB62_96
.LBB62_95:                              # %cond.false387
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-36(%rbp), %eax
.LBB62_96:                              # %cond.end388
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB62_97:                              # %if.end395
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_153
.LBB62_98:                              # %if.else396
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB62_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB62_101
.LBB62_100:                             # %cond.false400
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB62_101:                             # %cond.end403
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB62_107
.LBB62_103:                             # %cond.false415
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB62_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB62_106
.LBB62_105:                             # %cond.false424
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB62_106:                             # %cond.end430
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_107:                             # %cond.end432
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB62_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB62_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB62_114
.LBB62_110:                             # %cond.false440
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB62_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_113
.LBB62_112:                             # %cond.false446
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB62_113:                             # %cond.end448
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_114:                             # %cond.end450
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB62_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB62_120
.LBB62_116:                             # %cond.false458
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB62_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_119
.LBB62_118:                             # %cond.false465
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB62_119:                             # %cond.end467
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_120:                             # %cond.end469
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB62_134
.LBB62_121:                             # %if.else473
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB62_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB62_127
.LBB62_123:                             # %cond.false478
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB62_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB62_126
.LBB62_125:                             # %cond.false484
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB62_126:                             # %cond.end486
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_127:                             # %cond.end488
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB62_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB62_133
.LBB62_129:                             # %cond.false496
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB62_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB62_132
.LBB62_131:                             # %cond.false503
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB62_132:                             # %cond.end505
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_133:                             # %cond.end507
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB62_134:                             # %if.end511
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB62_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB62_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB62_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB62_142
.LBB62_138:                             # %cond.false527
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB62_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB62_141
.LBB62_140:                             # %cond.false537
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB62_141:                             # %cond.end544
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_142:                             # %cond.end546
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB62_143:                             # %if.end554
                                        #   in Loop: Header=BB62_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB62_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB62_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB62_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB62_150
.LBB62_146:                             # %cond.false568
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB62_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB62_149
.LBB62_148:                             # %cond.false578
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB62_149:                             # %cond.end585
                                        #   in Loop: Header=BB62_7 Depth=1
.LBB62_150:                             # %cond.end587
                                        #   in Loop: Header=BB62_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB62_151:                             # %if.end594
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_152
.LBB62_152:                             # %if.end595
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_153
.LBB62_153:                             # %if.end596
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_154
.LBB62_154:                             # %if.end597
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_155
.LBB62_155:                             # %if.end598
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_156
.LBB62_156:                             # %if.end599
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_157
.LBB62_157:                             # %if.end600
                                        #   in Loop: Header=BB62_7 Depth=1
	jmp	.LBB62_158
.LBB62_158:                             # %for.inc
                                        #   in Loop: Header=BB62_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB62_7
.LBB62_159:                             # %for.end
	cmpl	$1009127207, -184(%rbp) # imm = 0x3C260F27
	jne	.LBB62_161
.LBB62_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_160
.Lfunc_end62:
	.size	EdgeLoop.59, .Lfunc_end62-EdgeLoop.59
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.60          # -- Begin function GetStrength.60
	.p2align	4, 0x90
	.type	GetStrength.60,@function
GetStrength.60:                         # @GetStrength.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$442040868, -132(%rbp)  # imm = 0x1A590224
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB63_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB63_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB63_5
.LBB63_4:                               # %cond.false
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB63_5:                               # %cond.end
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB63_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB63_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB63_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB63_9
.LBB63_8:                               # %cond.false15
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$1, %eax
	jmp	.LBB63_9
.LBB63_9:                               # %cond.end16
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_11
.LBB63_10:                              # %cond.false18
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-28(%rbp), %eax
.LBB63_11:                              # %cond.end19
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-148(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB63_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB63_25
.LBB63_13:                              # %if.then
                                        #   in Loop: Header=BB63_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB63_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB63_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB63_23
.LBB63_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB63_23
.LBB63_19:                              # %lor.rhs
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB63_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB63_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB63_22
.LBB63_21:                              # %land.rhs60
                                        #   in Loop: Header=BB63_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_22:                              # %land.end
                                        #   in Loop: Header=BB63_1 Depth=1
.LBB63_23:                              # %lor.end
                                        #   in Loop: Header=BB63_1 Depth=1
.LBB63_24:                              # %land.end62
                                        #   in Loop: Header=BB63_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB63_79
.LBB63_25:                              # %if.else
                                        #   in Loop: Header=BB63_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB63_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB63_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB63_35
.LBB63_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB63_35
.LBB63_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB63_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB63_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB63_34
.LBB63_33:                              # %land.rhs92
                                        #   in Loop: Header=BB63_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_34:                              # %land.end95
                                        #   in Loop: Header=BB63_1 Depth=1
.LBB63_35:                              # %lor.end96
                                        #   in Loop: Header=BB63_1 Depth=1
.LBB63_36:                              # %land.end97
                                        #   in Loop: Header=BB63_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB63_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB63_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB63_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB63_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB63_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB63_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB63_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB63_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB63_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB63_47
.LBB63_46:                              # %if.then144
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB63_77
.LBB63_47:                              # %if.else147
                                        #   in Loop: Header=BB63_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB63_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB63_76
.LBB63_49:                              # %if.else152
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-136(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB63_52
.LBB63_51:                              # %cond.false169
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB63_52:                              # %cond.end174
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB63_55
.LBB63_54:                              # %cond.false184
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB63_55:                              # %cond.end189
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB63_58
.LBB63_57:                              # %cond.false199
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB63_58:                              # %cond.end204
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB63_61
.LBB63_60:                              # %cond.false214
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB63_61:                              # %cond.end219
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB63_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB63_65
.LBB63_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB63_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB63_74
.LBB63_65:                              # %if.then232
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB63_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB63_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB63_69
.LBB63_68:                              # %if.else309
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB63_69:                              # %if.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_73
.LBB63_70:                              # %if.else380
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB63_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB63_72:                              # %land.end518
                                        #   in Loop: Header=BB63_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB63_73:                              # %if.end522
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_75
.LBB63_74:                              # %if.else523
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB63_75:                              # %if.end526
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_76
.LBB63_76:                              # %if.end527
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_77
.LBB63_77:                              # %if.end528
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_78
.LBB63_78:                              # %if.end529
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_79
.LBB63_79:                              # %if.end530
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_80
.LBB63_80:                              # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_1
.LBB63_81:                              # %for.end
	cmpl	$442040868, -132(%rbp)  # imm = 0x1A590224
	jne	.LBB63_83
.LBB63_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_82
.Lfunc_end63:
	.size	GetStrength.60, .Lfunc_end63-GetStrength.60
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.61         # -- Begin function DeblockFrame.61
	.p2align	4, 0x90
	.type	DeblockFrame.61,@function
DeblockFrame.61:                        # @DeblockFrame.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1763614969, -8(%rbp)   # imm = 0x691EA0F9
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	cmpl	$1763614969, -8(%rbp)   # imm = 0x691EA0F9
	jne	.LBB64_6
.LBB64_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_5
.Lfunc_end64:
	.size	DeblockFrame.61, .Lfunc_end64-DeblockFrame.61
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.62         # -- Begin function DeblockFrame.62
	.p2align	4, 0x90
	.type	DeblockFrame.62,@function
DeblockFrame.62:                        # @DeblockFrame.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2019142774, -8(%rbp)   # imm = 0x7859AC76
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB65_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_1
.LBB65_4:                               # %for.end
	cmpl	$2019142774, -8(%rbp)   # imm = 0x7859AC76
	jne	.LBB65_6
.LBB65_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_5
.Lfunc_end65:
	.size	DeblockFrame.62, .Lfunc_end65-DeblockFrame.62
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.63          # -- Begin function GetStrength.63
	.p2align	4, 0x90
	.type	GetStrength.63,@function
GetStrength.63:                         # @GetStrength.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1366835135, -144(%rbp) # imm = 0x51783FBF
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB66_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB66_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB66_5
.LBB66_4:                               # %cond.false
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB66_5:                               # %cond.end
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB66_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB66_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB66_9
.LBB66_8:                               # %cond.false15
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$1, %eax
	jmp	.LBB66_9
.LBB66_9:                               # %cond.end16
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_11
.LBB66_10:                              # %cond.false18
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-28(%rbp), %eax
.LBB66_11:                              # %cond.end19
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB66_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB66_25
.LBB66_13:                              # %if.then
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB66_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB66_23
.LBB66_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB66_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB66_23
.LBB66_19:                              # %lor.rhs
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB66_22
.LBB66_21:                              # %land.rhs60
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_22:                              # %land.end
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_23:                              # %lor.end
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_24:                              # %land.end62
                                        #   in Loop: Header=BB66_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB66_79
.LBB66_25:                              # %if.else
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB66_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB66_35
.LBB66_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB66_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB66_35
.LBB66_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB66_34
.LBB66_33:                              # %land.rhs92
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_34:                              # %land.end95
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_35:                              # %lor.end96
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_36:                              # %land.end97
                                        #   in Loop: Header=BB66_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB66_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB66_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB66_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB66_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB66_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB66_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB66_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB66_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB66_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB66_47
.LBB66_46:                              # %if.then144
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB66_77
.LBB66_47:                              # %if.else147
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB66_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB66_76
.LBB66_49:                              # %if.else152
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_52
.LBB66_51:                              # %cond.false169
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_52:                              # %cond.end174
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_55
.LBB66_54:                              # %cond.false184
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_55:                              # %cond.end189
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_58
.LBB66_57:                              # %cond.false199
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_58:                              # %cond.end204
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_61
.LBB66_60:                              # %cond.false214
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_61:                              # %cond.end219
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB66_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB66_65
.LBB66_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB66_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB66_74
.LBB66_65:                              # %if.then232
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB66_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB66_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB66_69
.LBB66_68:                              # %if.else309
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB66_69:                              # %if.end
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_73
.LBB66_70:                              # %if.else380
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB66_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB66_72:                              # %land.end518
                                        #   in Loop: Header=BB66_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB66_73:                              # %if.end522
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_75
.LBB66_74:                              # %if.else523
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB66_75:                              # %if.end526
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_76
.LBB66_76:                              # %if.end527
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_77
.LBB66_77:                              # %if.end528
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_78
.LBB66_78:                              # %if.end529
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_79
.LBB66_79:                              # %if.end530
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_80
.LBB66_80:                              # %for.inc
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_1
.LBB66_81:                              # %for.end
	cmpl	$1366835135, -144(%rbp) # imm = 0x51783FBF
	jne	.LBB66_83
.LBB66_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_82
.Lfunc_end66:
	.size	GetStrength.63, .Lfunc_end66-GetStrength.63
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.64         # -- Begin function DeblockFrame.64
	.p2align	4, 0x90
	.type	DeblockFrame.64,@function
DeblockFrame.64:                        # @DeblockFrame.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$582389634, -8(%rbp)    # imm = 0x22B68F82
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB67_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_1
.LBB67_4:                               # %for.end
	cmpl	$582389634, -8(%rbp)    # imm = 0x22B68F82
	jne	.LBB67_6
.LBB67_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_5
.Lfunc_end67:
	.size	DeblockFrame.64, .Lfunc_end67-DeblockFrame.64
	.cfi_endproc
                                        # -- End function
	.type	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag,@object # @__const.DeblockMb.filterNon8x8LumaEdgesFlag
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.L__const.DeblockMb.filterNon8x8LumaEdgesFlag:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.size	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, 16

	.type	chroma_edge,@object     # @chroma_edge
	.data
	.globl	chroma_edge
	.p2align	4
chroma_edge:
	.asciz	"\377\000\000"
	.ascii	"\377\377\377\001"
	.ascii	"\377\001\001\002"
	.ascii	"\377\377\377\003"
	.asciz	"\377\000\000"
	.ascii	"\377\377\001\001"
	.ascii	"\377\001\002\002"
	.ascii	"\377\377\003\003"
	.size	chroma_edge, 32

	.type	mixedModeEdgeFlag,@object # @mixedModeEdgeFlag
	.comm	mixedModeEdgeFlag,1,1
	.type	.L__const.EdgeLoop.pelnum_cr,@object # @__const.EdgeLoop.pelnum_cr
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.EdgeLoop.pelnum_cr:
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	16                      # 0x10
	.size	.L__const.EdgeLoop.pelnum_cr, 32

	.type	fieldModeFilteringFlag,@object # @fieldModeFilteringFlag
	.comm	fieldModeFilteringFlag,1,1
	.type	ALPHA_TABLE,@object     # @ALPHA_TABLE
	.data
	.globl	ALPHA_TABLE
	.p2align	4
ALPHA_TABLE:
	.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\005\006\007\b\t\n\f\r\017\021\024\026\031\034 $(-28?GPZeq\177\220\242\266\313\342\377\377"
	.size	ALPHA_TABLE, 52

	.type	BETA_TABLE,@object      # @BETA_TABLE
	.globl	BETA_TABLE
	.p2align	4
BETA_TABLE:
	.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\002\003\003\003\003\004\004\004\006\006\007\007\b\b\t\t\n\n\013\013\f\f\r\r\016\016\017\017\020\020\021\021\022\022"
	.size	BETA_TABLE, 52

	.type	CLIP_TAB,@object        # @CLIP_TAB
	.globl	CLIP_TAB
	.p2align	4
CLIP_TAB:
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\001\001\001"
	.ascii	"\000\000\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\002\003\003"
	.ascii	"\000\001\002\003\003"
	.ascii	"\000\002\002\003\003"
	.ascii	"\000\002\002\004\004"
	.ascii	"\000\002\003\004\004"
	.ascii	"\000\002\003\004\004"
	.ascii	"\000\003\003\005\005"
	.ascii	"\000\003\004\006\006"
	.ascii	"\000\003\004\006\006"
	.ascii	"\000\004\005\007\007"
	.ascii	"\000\004\005\b\b"
	.ascii	"\000\004\006\t\t"
	.ascii	"\000\005\007\n\n"
	.ascii	"\000\006\b\013\013"
	.ascii	"\000\006\b\r\r"
	.ascii	"\000\007\n\016\016"
	.ascii	"\000\b\013\020\020"
	.ascii	"\000\t\f\022\022"
	.ascii	"\000\n\r\024\024"
	.ascii	"\000\013\017\027\027"
	.ascii	"\000\r\021\031\031"
	.size	CLIP_TAB, 260

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	ININT_STRENGTH,@object  # @ININT_STRENGTH
	.globl	ININT_STRENGTH
	.p2align	4
ININT_STRENGTH:
	.long	67372036                # 0x4040404
	.long	50529027                # 0x3030303
	.long	50529027                # 0x3030303
	.long	50529027                # 0x3030303
	.size	ININT_STRENGTH, 16

	.type	BLK_NUM,@object         # @BLK_NUM
	.globl	BLK_NUM
	.p2align	4
BLK_NUM:
	.ascii	"\000\004\b\f"
	.ascii	"\001\005\t\r"
	.ascii	"\002\006\n\016"
	.ascii	"\003\007\013\017"
	.ascii	"\000\001\002\003"
	.ascii	"\004\005\006\007"
	.ascii	"\b\t\n\013"
	.ascii	"\f\r\016\017"
	.size	BLK_NUM, 32

	.type	BLK_4_TO_8,@object      # @BLK_4_TO_8
	.globl	BLK_4_TO_8
	.p2align	4
BLK_4_TO_8:
	.ascii	"\000\000\001\001\000\000\001\001\002\002\003\003\002\002\003\003"
	.size	BLK_4_TO_8, 16


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
