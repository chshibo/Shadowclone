	.text
	.file	"mv-search.c"
	.globl	InitializeFastFullIntegerSearch # -- Begin function InitializeFastFullIntegerSearch
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch,@function
InitializeFastFullIntegerSearch:        # @InitializeFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_InitializeFastFullIntegerSearch.47
	callq	InitializeFastFullIntegerSearch.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_InitializeFastFullIntegerSearch.50
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_InitializeFastFullIntegerSearch.68
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_InitializeFastFullIntegerSearch.80
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	InitializeFastFullIntegerSearch, .Lfunc_end0-InitializeFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch # -- Begin function ClearFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch,@function
ClearFastFullIntegerSearch:             # @ClearFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_ClearFastFullIntegerSearch.6
	callq	ClearFastFullIntegerSearch.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_ClearFastFullIntegerSearch.7
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_ClearFastFullIntegerSearch.9
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_ClearFastFullIntegerSearch.41
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	ClearFastFullIntegerSearch, .Lfunc_end1-ClearFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch # -- Begin function ResetFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch,@function
ResetFastFullIntegerSearch:             # @ResetFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_ResetFastFullIntegerSearch.36
	callq	ResetFastFullIntegerSearch.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_ResetFastFullIntegerSearch.71
	.cfi_def_cfa %rbp, 16
	callq	ResetFastFullIntegerSearch.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	ResetFastFullIntegerSearch, .Lfunc_end2-ResetFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks       # -- Begin function SetupLargerBlocks
	.p2align	4, 0x90
	.type	SetupLargerBlocks,@function
SetupLargerBlocks:                      # @SetupLargerBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_SetupLargerBlocks.94
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_SetupLargerBlocks.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.96
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_SetupLargerBlocks.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_SetupLargerBlocks.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.98
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	SetupLargerBlocks, .Lfunc_end3-SetupLargerBlocks
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch  # -- Begin function SetupFastFullPelSearch
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch,@function
SetupFastFullPelSearch:                 # @SetupFastFullPelSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_SetupFastFullPelSearch.28
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_SetupFastFullPelSearch.30
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_SetupFastFullPelSearch.61
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.61
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_SetupFastFullPelSearch.62
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	SetupFastFullPelSearch, .Lfunc_end4-SetupFastFullPelSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor # -- Begin function SetMotionVectorPredictor
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor,@function
SetMotionVectorPredictor:               # @SetMotionVectorPredictor
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_SetMotionVectorPredictor.14
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	callq	SetMotionVectorPredictor.14
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_SetMotionVectorPredictor.32
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.32
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_SetMotionVectorPredictor.58
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.58
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_SetMotionVectorPredictor.86
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.86
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	24(%rbp), %r11d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	32(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	SetMotionVectorPredictor, .Lfunc_end5-SetMotionVectorPredictor
	.cfi_endproc
                                        # -- End function
	.globl	Init_Motion_Search_Module # -- Begin function Init_Motion_Search_Module
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module,@function
Init_Motion_Search_Module:              # @Init_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Init_Motion_Search_Module.1
	callq	Init_Motion_Search_Module.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Init_Motion_Search_Module.10
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Init_Motion_Search_Module.34
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Init_Motion_Search_Module.77
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.77
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Init_Motion_Search_Module, .Lfunc_end6-Init_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	Clear_Motion_Search_Module # -- Begin function Clear_Motion_Search_Module
	.p2align	4, 0x90
	.type	Clear_Motion_Search_Module,@function
Clear_Motion_Search_Module:             # @Clear_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	max_mvd, %ecx
	movq	mvbits, %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	shlq	$2, %rax
	addq	%rax, %rdx
	movq	%rdx, mvbits
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB7_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	jmp	.LBB7_3
.LBB7_2:                                # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
.LBB7_3:                                # %cond.end
	xorl	%ecx, %ecx
	movq	byte_abs, %rdx
	cltq
	subq	%rax, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rdx
	movq	%rdx, byte_abs
	movq	spiral_search_x, %rdi
	callq	free
	movq	spiral_search_y, %rdi
	callq	free
	movq	mvbits, %rdi
	callq	free
	movq	refbits, %rdi
	callq	free
	movq	byte_abs, %rdi
	callq	free
	movq	motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	callq	free_mem4Dint
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB7_5
# %bb.4:                                # %if.then
	callq	ClearFastFullIntegerSearch
.LBB7_5:                                # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	Clear_Motion_Search_Module, .Lfunc_end7-Clear_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionSearch # -- Begin function FullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch,@function
FullPelBlockMotionSearch:               # @FullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_FullPelBlockMotionSearch.25
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionSearch.25
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_FullPelBlockMotionSearch.37
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.37
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_FullPelBlockMotionSearch.69
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.69
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_FullPelBlockMotionSearch.70
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.70
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	FullPelBlockMotionSearch, .Lfunc_end8-FullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FastFullPelBlockMotionSearch # -- Begin function FastFullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch,@function
FastFullPelBlockMotionSearch:           # @FastFullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_FastFullPelBlockMotionSearch.3
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FastFullPelBlockMotionSearch.3
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_FastFullPelBlockMotionSearch.4
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.4
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_FastFullPelBlockMotionSearch.59
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.59
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_FastFullPelBlockMotionSearch.60
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.60
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	FastFullPelBlockMotionSearch, .Lfunc_end9-FastFullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	SATD                    # -- Begin function SATD
	.p2align	4, 0x90
	.type	SATD,@function
SATD:                                   # @SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_SATD.17
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_SATD.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_SATD.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_SATD.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	SATD, .Lfunc_end10-SATD
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8                 # -- Begin function SATD8X8
	.p2align	4, 0x90
	.type	SATD8X8,@function
SATD8X8:                                # @SATD8X8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SATD8X8.2
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SATD8X8.5
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SATD8X8.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.12
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SATD8X8.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SATD8X8, .Lfunc_end11-SATD8X8
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD               # -- Begin function find_SATD
	.p2align	4, 0x90
	.type	find_SATD,@function
find_SATD:                              # @find_SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_find_SATD.57
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_find_SATD.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_find_SATD.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.84
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_find_SATD.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	find_SATD, .Lfunc_end12-find_SATD
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockMotionSearch # -- Begin function SubPelBlockMotionSearch
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch,@function
SubPelBlockMotionSearch:                # @SubPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SubPelBlockMotionSearch.21
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockMotionSearch.21
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SubPelBlockMotionSearch.45
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%r15d, 48(%rsp)
	callq	SubPelBlockMotionSearch.45
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SubPelBlockMotionSearch.49
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.49
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SubPelBlockMotionSearch.52
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.52
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%ebx, %edx
	movw	16(%rbp), %r11w
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	56(%rbp), %r12d
	movl	64(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %ebx
	movl	%r13d, %ecx
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SubPelBlockMotionSearch, .Lfunc_end13-SubPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionBiPred # -- Begin function FullPelBlockMotionBiPred
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred,@function
FullPelBlockMotionBiPred:               # @FullPelBlockMotionBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_FullPelBlockMotionBiPred.18
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	88(%rbp), %eax
	movl	%eax, 72(%rsp)
	movl	96(%rbp), %eax
	movl	%eax, 80(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionBiPred.18
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_FullPelBlockMotionBiPred.20
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.20
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_FullPelBlockMotionBiPred.51
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.51
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_FullPelBlockMotionBiPred.54
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.54
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	16(%rbp), %r11d
	movl	%ebx, %edx
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	88(%rbp), %ebx
	movl	96(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	FullPelBlockMotionBiPred, .Lfunc_end14-FullPelBlockMotionBiPred
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockSearchBiPred # -- Begin function SubPelBlockSearchBiPred
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred,@function
SubPelBlockSearchBiPred:                # @SubPelBlockSearchBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_SubPelBlockSearchBiPred.11
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	72(%rbp), %eax
	movl	%eax, 56(%rsp)
	movl	80(%rbp), %eax
	movl	%eax, 64(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockSearchBiPred.11
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_SubPelBlockSearchBiPred.63
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r15d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.63
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_SubPelBlockSearchBiPred.78
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.78
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_SubPelBlockSearchBiPred.95
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.95
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r11w
	movl	%ebx, %edx
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	72(%rbp), %ebx
	movl	80(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %r12d
	movl	%r13d, %ecx
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	SubPelBlockSearchBiPred, .Lfunc_end15-SubPelBlockSearchBiPred
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost      # -- Begin function BPredPartitionCost
	.p2align	4, 0x90
	.type	BPredPartitionCost,@function
BPredPartitionCost:                     # @BPredPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_BPredPartitionCost.33
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	BPredPartitionCost.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_BPredPartitionCost.66
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	callq	BPredPartitionCost.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_BPredPartitionCost.83
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_BPredPartitionCost.93
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	BPredPartitionCost, .Lfunc_end16-BPredPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	BlockMotionSearch       # -- Begin function BlockMotionSearch
	.p2align	4, 0x90
	.type	BlockMotionSearch,@function
BlockMotionSearch:                      # @BlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_BlockMotionSearch.15
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	BlockMotionSearch.15
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_BlockMotionSearch.35
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	BlockMotionSearch.35
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_BlockMotionSearch.46
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.46
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_BlockMotionSearch.48
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.48
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	BlockMotionSearch, .Lfunc_end17-BlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB           # -- Begin function GetSkipCostMB
	.p2align	4, 0x90
	.type	GetSkipCostMB,@function
GetSkipCostMB:                          # @GetSkipCostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_GetSkipCostMB.8
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	GetSkipCostMB.8
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_GetSkipCostMB.13
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.13
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_GetSkipCostMB.38
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.38
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_GetSkipCostMB.44
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.44
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	GetSkipCostMB, .Lfunc_end18-GetSkipCostMB
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost        # -- Begin function BIDPartitionCost
	.p2align	4, 0x90
	.type	BIDPartitionCost,@function
BIDPartitionCost:                       # @BIDPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_BIDPartitionCost.55
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_BIDPartitionCost.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_BIDPartitionCost.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_BIDPartitionCost.82
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	BIDPartitionCost, .Lfunc_end19-BIDPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector # -- Begin function FindSkipModeMotionVector
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector,@function
FindSkipModeMotionVector:               # @FindSkipModeMotionVector
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_FindSkipModeMotionVector.42
	callq	FindSkipModeMotionVector.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_FindSkipModeMotionVector.79
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_FindSkipModeMotionVector.87
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_FindSkipModeMotionVector.90
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.90
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	FindSkipModeMotionVector, .Lfunc_end20-FindSkipModeMotionVector
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8      # -- Begin function Get_Direct_Cost8x8
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8,@function
Get_Direct_Cost8x8:                     # @Get_Direct_Cost8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_Get_Direct_Cost8x8.16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_Get_Direct_Cost8x8.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_Get_Direct_Cost8x8.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_Get_Direct_Cost8x8.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	Get_Direct_Cost8x8, .Lfunc_end21-Get_Direct_Cost8x8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB       # -- Begin function Get_Direct_CostMB
	.p2align	4, 0x90
	.type	Get_Direct_CostMB,@function
Get_Direct_CostMB:                      # @Get_Direct_CostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_Get_Direct_CostMB.31
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB.31
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_Get_Direct_CostMB.39
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.39
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_Get_Direct_CostMB.88
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.88
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_Get_Direct_CostMB.91
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.91
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	Get_Direct_CostMB, .Lfunc_end22-Get_Direct_CostMB
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch   # -- Begin function PartitionMotionSearch
	.p2align	4, 0x90
	.type	PartitionMotionSearch,@function
PartitionMotionSearch:                  # @PartitionMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_PartitionMotionSearch.27
	movl	%ebx, %edi
	movl	%r14d, %esi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	PartitionMotionSearch.27
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_PartitionMotionSearch.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.65
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_PartitionMotionSearch.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.72
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_PartitionMotionSearch.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.73
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	PartitionMotionSearch, .Lfunc_end23-PartitionMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors # -- Begin function Get_Direct_Motion_Vectors
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors,@function
Get_Direct_Motion_Vectors:              # @Get_Direct_Motion_Vectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_Get_Direct_Motion_Vectors.24
	callq	Get_Direct_Motion_Vectors.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_Get_Direct_Motion_Vectors.26
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_Get_Direct_Motion_Vectors.76
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.76
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_Get_Direct_Motion_Vectors.81
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	Get_Direct_Motion_Vectors, .Lfunc_end24-Get_Direct_Motion_Vectors
	.cfi_endproc
                                        # -- End function
	.globl	sign                    # -- Begin function sign
	.p2align	4, 0x90
	.type	sign,@function
sign:                                   # @sign
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_sign.22
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_sign.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_sign.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_sign.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	sign, .Lfunc_end25-sign
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.1
.LCPI26_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI26_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.1
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.1,@function
Init_Motion_Search_Module.1:            # @Init_Motion_Search_Module.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1427940585, -60(%rbp)  # imm = 0x551CA4E9
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB26_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB26_3
.LBB26_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB26_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB26_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB26_6:                               # %cond.end19
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB26_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB26_9
.LBB26_8:                               # %cond.false24
	movl	-44(%rbp), %eax
	addl	$1, %eax
.LBB26_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI26_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI26_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI26_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI26_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB26_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB26_11:                              # %if.end
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB26_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB26_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB26_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB26_15:                              # %if.end66
	movslq	-52(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB26_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB26_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB26_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB26_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB26_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_22 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB26_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB26_20 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_22:                              # %for.cond90
                                        #   Parent Loop BB26_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB26_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB26_22 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_22
.LBB26_25:                              # %for.end
                                        #   in Loop: Header=BB26_20 Depth=1
	jmp	.LBB26_26
.LBB26_26:                              # %for.inc98
                                        #   in Loop: Header=BB26_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_20
.LBB26_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB26_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_30 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB26_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB26_28 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_30:                              # %for.cond111
                                        #   Parent Loop BB26_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB26_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB26_30 Depth=2
	movl	-16(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB26_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_30
.LBB26_33:                              # %for.end119
                                        #   in Loop: Header=BB26_28 Depth=1
	jmp	.LBB26_34
.LBB26_34:                              # %for.inc120
                                        #   in Loop: Header=BB26_28 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_28
.LBB26_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB26_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB26_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB26_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB26_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_36
.LBB26_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -12(%rbp)
.LBB26_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_45 Depth 2
                                        #     Child Loop BB26_49 Depth 2
	movl	-12(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB26_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB26_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB26_43
.LBB26_42:                              # %cond.false143
                                        #   in Loop: Header=BB26_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB26_43:                              # %cond.end144
                                        #   in Loop: Header=BB26_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB26_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB26_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB26_45:                              # %for.cond151
                                        #   Parent Loop BB26_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB26_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB26_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB26_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_45
.LBB26_48:                              # %for.end168
                                        #   in Loop: Header=BB26_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_49:                              # %for.cond170
                                        #   Parent Loop BB26_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB26_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB26_49 Depth=2
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB26_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_49
.LBB26_52:                              # %for.end187
                                        #   in Loop: Header=BB26_40 Depth=1
	jmp	.LBB26_53
.LBB26_53:                              # %for.inc188
                                        #   in Loop: Header=BB26_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_40
.LBB26_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB26_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB26_56:                              # %if.end192
	cmpl	$1427940585, -60(%rbp)  # imm = 0x551CA4E9
	jne	.LBB26_58
.LBB26_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_57
.Lfunc_end26:
	.size	Init_Motion_Search_Module.1, .Lfunc_end26-Init_Motion_Search_Module.1
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.2               # -- Begin function SATD8X8.2
	.p2align	4, 0x90
	.type	SATD8X8.2,@function
SATD8X8.2:                              # @SATD8X8.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$300039612, -36(%rbp)   # imm = 0x11E23DBC
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB27_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB27_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_2
.LBB27_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB27_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB27_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB27_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB27_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_6
.LBB27_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB27_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB27_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB27_10 Depth=1
	movl	$0, -12(%rbp)
.LBB27_12:                              # %for.cond499
                                        #   Parent Loop BB27_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB27_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB27_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB27_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB27_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB27_16
.LBB27_15:                              # %cond.false
                                        #   in Loop: Header=BB27_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB27_16:                              # %cond.end
                                        #   in Loop: Header=BB27_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB27_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_12
.LBB27_18:                              # %for.end519
                                        #   in Loop: Header=BB27_10 Depth=1
	jmp	.LBB27_19
.LBB27_19:                              # %for.inc520
                                        #   in Loop: Header=BB27_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_10
.LBB27_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_26
.LBB27_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB27_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB27_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB27_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB27_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_22
.LBB27_25:                              # %for.end534
	jmp	.LBB27_26
.LBB27_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$300039612, -36(%rbp)   # imm = 0x11E23DBC
	jne	.LBB27_28
.LBB27_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_27
.Lfunc_end27:
	.size	SATD8X8.2, .Lfunc_end27-SATD8X8.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.3
.LCPI28_0:
	.quad	4602678819172646912     # double 0.5
.LCPI28_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.3
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.3,@function
FastFullPelBlockMotionSearch.3:         # @FastFullPelBlockMotionSearch.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI28_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI28_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1364644899, -76(%rbp)  # imm = 0x5156D423
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -72(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -56(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-60(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-80(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	BlockSAD, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB28_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-20(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB28_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	search_center_y, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB28_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-48(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB28_5
# %bb.4:                                # %if.then51
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB28_5:                               # %if.end56
	jmp	.LBB28_6
.LBB28_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB28_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB28_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB28_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB28_7 Depth=1
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-48(%rbp), %eax
	movq	mvbits, %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-68(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB28_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB28_7 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB28_11:                              # %if.end85
                                        #   in Loop: Header=BB28_7 Depth=1
	jmp	.LBB28_12
.LBB28_12:                              # %if.end86
                                        #   in Loop: Header=BB28_7 Depth=1
	jmp	.LBB28_13
.LBB28_13:                              # %for.inc
                                        #   in Loop: Header=BB28_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB28_7
.LBB28_14:                              # %for.end
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1364644899, -76(%rbp)  # imm = 0x5156D423
	jne	.LBB28_16
.LBB28_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_15
.Lfunc_end28:
	.size	FastFullPelBlockMotionSearch.3, .Lfunc_end28-FastFullPelBlockMotionSearch.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.4
.LCPI29_0:
	.quad	4602678819172646912     # double 0.5
.LCPI29_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.4
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.4,@function
FastFullPelBlockMotionSearch.4:         # @FastFullPelBlockMotionSearch.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI29_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI29_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$820654895, -76(%rbp)   # imm = 0x30EA332F
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -64(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -60(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -80(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB29_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB29_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB29_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-48(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB29_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB29_5:                               # %if.end56
	jmp	.LBB29_6
.LBB29_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB29_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB29_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB29_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB29_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB29_7 Depth=1
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-48(%rbp), %eax
	movq	mvbits, %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-56(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB29_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB29_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB29_11:                              # %if.end85
                                        #   in Loop: Header=BB29_7 Depth=1
	jmp	.LBB29_12
.LBB29_12:                              # %if.end86
                                        #   in Loop: Header=BB29_7 Depth=1
	jmp	.LBB29_13
.LBB29_13:                              # %for.inc
                                        #   in Loop: Header=BB29_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB29_7
.LBB29_14:                              # %for.end
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$820654895, -76(%rbp)   # imm = 0x30EA332F
	jne	.LBB29_16
.LBB29_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_15
.Lfunc_end29:
	.size	FastFullPelBlockMotionSearch.4, .Lfunc_end29-FastFullPelBlockMotionSearch.4
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.5               # -- Begin function SATD8X8.5
	.p2align	4, 0x90
	.type	SATD8X8.5,@function
SATD8X8.5:                              # @SATD8X8.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$962701963, -32(%rbp)   # imm = 0x3961AA8B
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB30_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB30_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_2
.LBB30_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB30_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB30_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB30_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB30_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_6
.LBB30_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB30_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB30_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB30_10 Depth=1
	movl	$0, -12(%rbp)
.LBB30_12:                              # %for.cond499
                                        #   Parent Loop BB30_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB30_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB30_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB30_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB30_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB30_16
.LBB30_15:                              # %cond.false
                                        #   in Loop: Header=BB30_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB30_16:                              # %cond.end
                                        #   in Loop: Header=BB30_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB30_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_12
.LBB30_18:                              # %for.end519
                                        #   in Loop: Header=BB30_10 Depth=1
	jmp	.LBB30_19
.LBB30_19:                              # %for.inc520
                                        #   in Loop: Header=BB30_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_10
.LBB30_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_26
.LBB30_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB30_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB30_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB30_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB30_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_22
.LBB30_25:                              # %for.end534
	jmp	.LBB30_26
.LBB30_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$962701963, -32(%rbp)   # imm = 0x3961AA8B
	jne	.LBB30_28
.LBB30_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_27
.Lfunc_end30:
	.size	SATD8X8.5, .Lfunc_end30-SATD8X8.5
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.6 # -- Begin function ClearFastFullIntegerSearch.6
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.6,@function
ClearFastFullIntegerSearch.6:           # @ClearFastFullIntegerSearch.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$94546286, -20(%rbp)    # imm = 0x5A2A96E
	movl	$0, -4(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_3 Depth 2
                                        #       Child Loop BB31_5 Depth 3
                                        #         Child Loop BB31_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB31_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_3:                               # %for.cond1
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_5 Depth 3
                                        #         Child Loop BB31_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB31_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	$1, -12(%rbp)
.LBB31_5:                               # %for.cond4
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB31_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB31_5 Depth=3
	movl	$0, -16(%rbp)
.LBB31_7:                               # %for.cond7
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_3 Depth=2
                                        #       Parent Loop BB31_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB31_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB31_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB31_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_7
.LBB31_10:                              # %for.end
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB31_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_5
.LBB31_12:                              # %for.end24
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_3
.LBB31_14:                              # %for.end31
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB31_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB31_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB31_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_17
.LBB31_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$94546286, -20(%rbp)    # imm = 0x5A2A96E
	jne	.LBB31_22
.LBB31_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_21
.Lfunc_end31:
	.size	ClearFastFullIntegerSearch.6, .Lfunc_end31-ClearFastFullIntegerSearch.6
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.7 # -- Begin function ClearFastFullIntegerSearch.7
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.7,@function
ClearFastFullIntegerSearch.7:           # @ClearFastFullIntegerSearch.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$991423502, -20(%rbp)   # imm = 0x3B17EC0E
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
                                        #       Child Loop BB32_5 Depth 3
                                        #         Child Loop BB32_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB32_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_3:                               # %for.cond1
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_5 Depth 3
                                        #         Child Loop BB32_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB32_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$1, -12(%rbp)
.LBB32_5:                               # %for.cond4
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB32_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB32_5 Depth=3
	movl	$0, -16(%rbp)
.LBB32_7:                               # %for.cond7
                                        #   Parent Loop BB32_1 Depth=1
                                        #     Parent Loop BB32_3 Depth=2
                                        #       Parent Loop BB32_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB32_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB32_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB32_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_7
.LBB32_10:                              # %for.end
                                        #   in Loop: Header=BB32_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB32_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_5
.LBB32_12:                              # %for.end24
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_3
.LBB32_14:                              # %for.end31
                                        #   in Loop: Header=BB32_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB32_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB32_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB32_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_17
.LBB32_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$991423502, -20(%rbp)   # imm = 0x3B17EC0E
	jne	.LBB32_22
.LBB32_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_21
.Lfunc_end32:
	.size	ClearFastFullIntegerSearch.7, .Lfunc_end32-ClearFastFullIntegerSearch.7
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.8         # -- Begin function GetSkipCostMB.8
	.p2align	4, 0x90
	.type	GetSkipCostMB.8,@function
GetSkipCostMB.8:                        # @GetSkipCostMB.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$117821811, -48(%rbp)   # imm = 0x705D173
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_3 Depth 2
                                        #       Child Loop BB33_5 Depth 3
                                        #         Child Loop BB33_7 Depth 4
                                        #           Child Loop BB33_9 Depth 5
                                        #     Child Loop BB33_24 Depth 2
                                        #       Child Loop BB33_26 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB33_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB33_3:                               # %for.cond2
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_5 Depth 3
                                        #         Child Loop BB33_7 Depth 4
                                        #           Child Loop BB33_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB33_5:                               # %for.cond6
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_7 Depth 4
                                        #           Child Loop BB33_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB33_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB33_7:                               # %for.cond11
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_3 Depth=2
                                        #       Parent Loop BB33_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB33_9 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB33_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB33_7 Depth=4
	movl	$0, -16(%rbp)
.LBB33_9:                               # %for.cond14
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_3 Depth=2
                                        #       Parent Loop BB33_5 Depth=3
                                        #         Parent Loop BB33_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB33_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB33_9 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB33_9 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_9
.LBB33_12:                              # %for.end
                                        #   in Loop: Header=BB33_7 Depth=4
	jmp	.LBB33_13
.LBB33_13:                              # %for.inc39
                                        #   in Loop: Header=BB33_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_7
.LBB33_14:                              # %for.end41
                                        #   in Loop: Header=BB33_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB33_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB33_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB33_17
.LBB33_16:                              # %if.then
                                        #   in Loop: Header=BB33_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB33_17:                              # %if.end
                                        #   in Loop: Header=BB33_5 Depth=3
	jmp	.LBB33_18
.LBB33_18:                              # %for.inc45
                                        #   in Loop: Header=BB33_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB33_5
.LBB33_19:                              # %for.end47
                                        #   in Loop: Header=BB33_3 Depth=2
	jmp	.LBB33_20
.LBB33_20:                              # %for.inc48
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB33_3
.LBB33_21:                              # %for.end50
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB33_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB33_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB33_24:                              # %for.cond58
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_26 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB33_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB33_24 Depth=2
	movl	$0, -16(%rbp)
.LBB33_26:                              # %for.cond62
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -16(%rbp)
	jge	.LBB33_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB33_26 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB33_26 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_26
.LBB33_29:                              # %for.end75
                                        #   in Loop: Header=BB33_24 Depth=2
	jmp	.LBB33_30
.LBB33_30:                              # %for.inc76
                                        #   in Loop: Header=BB33_24 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_24
.LBB33_31:                              # %for.end78
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB33_32:                              # %if.end83
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_33
.LBB33_33:                              # %for.inc84
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_1
.LBB33_34:                              # %for.end86
	movl	-36(%rbp), %ebx
	cmpl	$117821811, -48(%rbp)   # imm = 0x705D173
	jne	.LBB33_36
.LBB33_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_35
.Lfunc_end33:
	.size	GetSkipCostMB.8, .Lfunc_end33-GetSkipCostMB.8
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.9 # -- Begin function ClearFastFullIntegerSearch.9
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.9,@function
ClearFastFullIntegerSearch.9:           # @ClearFastFullIntegerSearch.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1357994812, -20(%rbp)  # imm = 0x50F15B3C
	movl	$0, -4(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
                                        #       Child Loop BB34_5 Depth 3
                                        #         Child Loop BB34_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB34_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond1
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_5 Depth 3
                                        #         Child Loop BB34_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB34_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	$1, -12(%rbp)
.LBB34_5:                               # %for.cond4
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB34_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB34_5 Depth=3
	movl	$0, -16(%rbp)
.LBB34_7:                               # %for.cond7
                                        #   Parent Loop BB34_1 Depth=1
                                        #     Parent Loop BB34_3 Depth=2
                                        #       Parent Loop BB34_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB34_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB34_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB34_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_7
.LBB34_10:                              # %for.end
                                        #   in Loop: Header=BB34_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB34_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_5
.LBB34_12:                              # %for.end24
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_14:                              # %for.end31
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_1
.LBB34_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB34_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB34_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB34_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_17
.LBB34_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$1357994812, -20(%rbp)  # imm = 0x50F15B3C
	jne	.LBB34_22
.LBB34_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_21
.Lfunc_end34:
	.size	ClearFastFullIntegerSearch.9, .Lfunc_end34-ClearFastFullIntegerSearch.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.10
.LCPI35_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI35_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.10
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.10,@function
Init_Motion_Search_Module.10:           # @Init_Motion_Search_Module.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$425832910, -52(%rbp)   # imm = 0x1961B1CE
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB35_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB35_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB35_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB35_6
.LBB35_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB35_6:                               # %cond.end19
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB35_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB35_9
.LBB35_8:                               # %cond.false24
	movl	-36(%rbp), %eax
	addl	$1, %eax
.LBB35_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI35_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI35_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI35_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI35_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB35_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB35_11:                              # %if.end
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB35_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB35_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB35_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB35_15:                              # %if.end66
	movslq	-56(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB35_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB35_17:                              # %if.end72
	movslq	-32(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB35_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB35_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB35_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB35_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB35_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_22:                              # %for.cond90
                                        #   Parent Loop BB35_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB35_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB35_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_22
.LBB35_25:                              # %for.end
                                        #   in Loop: Header=BB35_20 Depth=1
	jmp	.LBB35_26
.LBB35_26:                              # %for.inc98
                                        #   in Loop: Header=BB35_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_20
.LBB35_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB35_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB35_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB35_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_30:                              # %for.cond111
                                        #   Parent Loop BB35_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB35_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB35_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB35_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_30
.LBB35_33:                              # %for.end119
                                        #   in Loop: Header=BB35_28 Depth=1
	jmp	.LBB35_34
.LBB35_34:                              # %for.inc120
                                        #   in Loop: Header=BB35_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_28
.LBB35_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB35_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB35_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB35_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB35_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_36
.LBB35_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB35_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_45 Depth 2
                                        #     Child Loop BB35_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB35_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB35_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB35_43
.LBB35_42:                              # %cond.false143
                                        #   in Loop: Header=BB35_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB35_43:                              # %cond.end144
                                        #   in Loop: Header=BB35_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB35_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB35_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB35_45:                              # %for.cond151
                                        #   Parent Loop BB35_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB35_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB35_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB35_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_45
.LBB35_48:                              # %for.end168
                                        #   in Loop: Header=BB35_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_49:                              # %for.cond170
                                        #   Parent Loop BB35_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB35_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB35_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB35_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_49
.LBB35_52:                              # %for.end187
                                        #   in Loop: Header=BB35_40 Depth=1
	jmp	.LBB35_53
.LBB35_53:                              # %for.inc188
                                        #   in Loop: Header=BB35_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_40
.LBB35_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB35_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB35_56:                              # %if.end192
	cmpl	$425832910, -52(%rbp)   # imm = 0x1961B1CE
	jne	.LBB35_58
.LBB35_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_57
.Lfunc_end35:
	.size	Init_Motion_Search_Module.10, .Lfunc_end35-Init_Motion_Search_Module.10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.11
.LCPI36_0:
	.quad	4602678819172646912     # double 0.5
.LCPI36_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.11
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.11,@function
SubPelBlockSearchBiPred.11:             # @SubPelBlockSearchBiPred.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI36_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1770629731, -200(%rbp) # imm = 0x6989AA63
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -150(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -170(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB36_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB36_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB36_4
.LBB36_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB36_4:                               # %cond.end
	jmp	.LBB36_6
.LBB36_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB36_6:                               # %cond.end18
	movw	%ax, -172(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB36_10
.LBB36_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB36_10
.LBB36_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -116(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB36_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB36_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB36_14
.LBB36_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB36_14:                              # %cond.end55
	jmp	.LBB36_16
.LBB36_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB36_16
.LBB36_16:                              # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB36_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB36_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB36_20
.LBB36_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB36_20:                              # %cond.end82
	jmp	.LBB36_22
.LBB36_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB36_22
.LBB36_22:                              # %cond.end85
	movw	%ax, -36(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB36_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB36_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB36_26
.LBB36_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB36_26:                              # %cond.end106
	jmp	.LBB36_28
.LBB36_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB36_28
.LBB36_28:                              # %cond.end109
	movw	%ax, -176(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB36_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB36_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB36_32
.LBB36_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB36_32:                              # %cond.end130
	jmp	.LBB36_34
.LBB36_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB36_34
.LBB36_34:                              # %cond.end133
	movw	%ax, -174(%rbp)
	movswl	-174(%rbp), %eax
	movswl	-176(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -38(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB36_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB36_37
.LBB36_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB36_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB36_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB36_40
.LBB36_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB36_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-150(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB36_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB36_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB36_46
.LBB36_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB36_46:                              # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB36_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB36_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB36_52
.LBB36_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB36_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-170(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB36_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_55 Depth 2
                                        #       Child Loop BB36_60 Depth 3
                                        #         Child Loop BB36_162 Depth 4
                                        #           Child Loop BB36_164 Depth 5
                                        #       Child Loop BB36_175 Depth 3
                                        #         Child Loop BB36_181 Depth 4
                                        #           Child Loop BB36_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-172(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB36_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -86(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB36_55:                              # %for.cond283
                                        #   Parent Loop BB36_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_60 Depth 3
                                        #         Child Loop BB36_162 Depth 4
                                        #           Child Loop BB36_164 Depth 5
                                        #       Child Loop BB36_175 Depth 3
                                        #         Child Loop BB36_181 Depth 4
                                        #           Child Loop BB36_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB36_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB36_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_57:                              # %land.end
                                        #   in Loop: Header=BB36_55 Depth=2
	testb	$1, %al
	jne	.LBB36_58
	jmp	.LBB36_195
.LBB36_58:                              # %for.body289
                                        #   in Loop: Header=BB36_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -84(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB36_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB36_55 Depth=2
	movw	$0, -40(%rbp)
.LBB36_60:                              # %for.cond304
                                        #   Parent Loop BB36_53 Depth=1
                                        #     Parent Loop BB36_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_162 Depth 4
                                        #           Child Loop BB36_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB36_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_67
.LBB36_63:                              # %cond.false345
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_66
.LBB36_65:                              # %cond.false369
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_66:                              # %cond.end389
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_67:                              # %cond.end391
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_73
.LBB36_69:                              # %cond.false421
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_72
.LBB36_71:                              # %cond.false448
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_72:                              # %cond.end470
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_73:                              # %cond.end472
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_79
.LBB36_75:                              # %cond.false505
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_78
.LBB36_77:                              # %cond.false532
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_78:                              # %cond.end554
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_79:                              # %cond.end556
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_85
.LBB36_81:                              # %cond.false589
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_84
.LBB36_83:                              # %cond.false616
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_84:                              # %cond.end638
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_85:                              # %cond.end640
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_91
.LBB36_87:                              # %cond.false681
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_90
.LBB36_89:                              # %cond.false706
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_90:                              # %cond.end726
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_91:                              # %cond.end728
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_97
.LBB36_93:                              # %cond.false759
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_96
.LBB36_95:                              # %cond.false786
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_96:                              # %cond.end808
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_97:                              # %cond.end810
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_103
.LBB36_99:                              # %cond.false843
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_102
.LBB36_101:                             # %cond.false870
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_102:                             # %cond.end892
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_103:                             # %cond.end894
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_109
.LBB36_105:                             # %cond.false927
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_108
.LBB36_107:                             # %cond.false954
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_108:                             # %cond.end976
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_109:                             # %cond.end978
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_115
.LBB36_111:                             # %cond.false1019
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_114
.LBB36_113:                             # %cond.false1044
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_114:                             # %cond.end1064
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_115:                             # %cond.end1066
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_121
.LBB36_117:                             # %cond.false1097
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_120
.LBB36_119:                             # %cond.false1124
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_120:                             # %cond.end1146
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_121:                             # %cond.end1148
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_127
.LBB36_123:                             # %cond.false1181
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_126
.LBB36_125:                             # %cond.false1208
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_126:                             # %cond.end1230
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_127:                             # %cond.end1232
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_133
.LBB36_129:                             # %cond.false1265
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_132
.LBB36_131:                             # %cond.false1292
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_132:                             # %cond.end1314
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_133:                             # %cond.end1316
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_139
.LBB36_135:                             # %cond.false1357
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_138
.LBB36_137:                             # %cond.false1382
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_138:                             # %cond.end1402
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_139:                             # %cond.end1404
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_145
.LBB36_141:                             # %cond.false1435
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_144
.LBB36_143:                             # %cond.false1462
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_144:                             # %cond.end1484
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_145:                             # %cond.end1486
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_151
.LBB36_147:                             # %cond.false1519
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_150
.LBB36_149:                             # %cond.false1546
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_150:                             # %cond.end1568
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_151:                             # %cond.end1570
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB36_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_157
.LBB36_153:                             # %cond.false1603
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB36_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_156
.LBB36_155:                             # %cond.false1630
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_156:                             # %cond.end1652
                                        #   in Loop: Header=BB36_60 Depth=3
.LBB36_157:                             # %cond.end1654
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB36_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB36_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB36_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB36_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB36_173
.LBB36_160:                             # %if.end1673
                                        #   in Loop: Header=BB36_60 Depth=3
	jmp	.LBB36_170
.LBB36_161:                             # %if.else1674
                                        #   in Loop: Header=BB36_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB36_162:                             # %for.cond1675
                                        #   Parent Loop BB36_53 Depth=1
                                        #     Parent Loop BB36_55 Depth=2
                                        #       Parent Loop BB36_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB36_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB36_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB36_162 Depth=4
	movl	$0, -100(%rbp)
.LBB36_164:                             # %for.cond1679
                                        #   Parent Loop BB36_53 Depth=1
                                        #     Parent Loop BB36_55 Depth=2
                                        #       Parent Loop BB36_60 Depth=3
                                        #         Parent Loop BB36_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB36_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB36_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB36_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB36_164
.LBB36_167:                             # %for.end
                                        #   in Loop: Header=BB36_162 Depth=4
	jmp	.LBB36_168
.LBB36_168:                             # %for.inc1694
                                        #   in Loop: Header=BB36_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB36_162
.LBB36_169:                             # %for.end1696
                                        #   in Loop: Header=BB36_60 Depth=3
	jmp	.LBB36_170
.LBB36_170:                             # %if.end1697
                                        #   in Loop: Header=BB36_60 Depth=3
	jmp	.LBB36_171
.LBB36_171:                             # %for.inc1698
                                        #   in Loop: Header=BB36_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB36_60
.LBB36_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB36_55 Depth=2
	jmp	.LBB36_173
.LBB36_173:                             # %for.end1702
                                        #   in Loop: Header=BB36_55 Depth=2
	jmp	.LBB36_193
.LBB36_174:                             # %if.else1703
                                        #   in Loop: Header=BB36_55 Depth=2
	movw	$0, -40(%rbp)
.LBB36_175:                             # %for.cond1704
                                        #   Parent Loop BB36_53 Depth=1
                                        #     Parent Loop BB36_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_181 Depth 4
                                        #           Child Loop BB36_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB36_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB36_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB36_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB36_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB36_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB36_192
.LBB36_179:                             # %if.end2054
                                        #   in Loop: Header=BB36_175 Depth=3
	jmp	.LBB36_189
.LBB36_180:                             # %if.else2055
                                        #   in Loop: Header=BB36_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB36_181:                             # %for.cond2056
                                        #   Parent Loop BB36_53 Depth=1
                                        #     Parent Loop BB36_55 Depth=2
                                        #       Parent Loop BB36_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB36_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB36_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB36_181 Depth=4
	movl	$0, -100(%rbp)
.LBB36_183:                             # %for.cond2060
                                        #   Parent Loop BB36_53 Depth=1
                                        #     Parent Loop BB36_55 Depth=2
                                        #       Parent Loop BB36_175 Depth=3
                                        #         Parent Loop BB36_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB36_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB36_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB36_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB36_183
.LBB36_186:                             # %for.end2077
                                        #   in Loop: Header=BB36_181 Depth=4
	jmp	.LBB36_187
.LBB36_187:                             # %for.inc2078
                                        #   in Loop: Header=BB36_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB36_181
.LBB36_188:                             # %for.end2080
                                        #   in Loop: Header=BB36_175 Depth=3
	jmp	.LBB36_189
.LBB36_189:                             # %if.end2081
                                        #   in Loop: Header=BB36_175 Depth=3
	jmp	.LBB36_190
.LBB36_190:                             # %for.inc2082
                                        #   in Loop: Header=BB36_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB36_175
.LBB36_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB36_55 Depth=2
	jmp	.LBB36_192
.LBB36_192:                             # %for.end2086
                                        #   in Loop: Header=BB36_55 Depth=2
	jmp	.LBB36_193
.LBB36_193:                             # %if.end2087
                                        #   in Loop: Header=BB36_55 Depth=2
	jmp	.LBB36_194
.LBB36_194:                             # %for.inc2088
                                        #   in Loop: Header=BB36_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB36_55
.LBB36_195:                             # %for.end2092
                                        #   in Loop: Header=BB36_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB36_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB36_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
.LBB36_197:                             # %if.end2101
                                        #   in Loop: Header=BB36_53 Depth=1
	movswl	-86(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB36_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB36_53 Depth=1
	movswl	-86(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB36_199:                             # %if.end2107
                                        #   in Loop: Header=BB36_53 Depth=1
	jmp	.LBB36_200
.LBB36_200:                             # %for.inc2108
                                        #   in Loop: Header=BB36_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB36_53
.LBB36_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB36_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB36_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB36_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB36_205:                             # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB36_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB36_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB36_211
.LBB36_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB36_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-196(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB36_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_214 Depth 2
                                        #       Child Loop BB36_219 Depth 3
                                        #         Child Loop BB36_321 Depth 4
                                        #           Child Loop BB36_323 Depth 5
                                        #       Child Loop BB36_334 Depth 3
                                        #         Child Loop BB36_340 Depth 4
                                        #           Child Loop BB36_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB36_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB36_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -86(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB36_214:                             # %for.cond2194
                                        #   Parent Loop BB36_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_219 Depth 3
                                        #         Child Loop BB36_321 Depth 4
                                        #           Child Loop BB36_323 Depth 5
                                        #       Child Loop BB36_334 Depth 3
                                        #         Child Loop BB36_340 Depth 4
                                        #           Child Loop BB36_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB36_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB36_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB36_216:                             # %land.end2202
                                        #   in Loop: Header=BB36_214 Depth=2
	testb	$1, %al
	jne	.LBB36_217
	jmp	.LBB36_354
.LBB36_217:                             # %for.body2203
                                        #   in Loop: Header=BB36_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -84(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB36_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB36_214 Depth=2
	movw	$0, -40(%rbp)
.LBB36_219:                             # %for.cond2218
                                        #   Parent Loop BB36_212 Depth=1
                                        #     Parent Loop BB36_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_321 Depth 4
                                        #           Child Loop BB36_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB36_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_226
.LBB36_222:                             # %cond.false2261
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_225
.LBB36_224:                             # %cond.false2286
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_225:                             # %cond.end2306
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_226:                             # %cond.end2308
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_232
.LBB36_228:                             # %cond.false2339
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_231
.LBB36_230:                             # %cond.false2366
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_231:                             # %cond.end2388
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_232:                             # %cond.end2390
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_238
.LBB36_234:                             # %cond.false2423
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_237
.LBB36_236:                             # %cond.false2450
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_237:                             # %cond.end2472
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_238:                             # %cond.end2474
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_244
.LBB36_240:                             # %cond.false2507
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_243
.LBB36_242:                             # %cond.false2534
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_243:                             # %cond.end2556
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_244:                             # %cond.end2558
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_250
.LBB36_246:                             # %cond.false2599
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_249
.LBB36_248:                             # %cond.false2624
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_249:                             # %cond.end2644
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_250:                             # %cond.end2646
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_256
.LBB36_252:                             # %cond.false2677
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_255
.LBB36_254:                             # %cond.false2704
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_255:                             # %cond.end2726
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_256:                             # %cond.end2728
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_262
.LBB36_258:                             # %cond.false2761
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_261
.LBB36_260:                             # %cond.false2788
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_261:                             # %cond.end2810
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_262:                             # %cond.end2812
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_268
.LBB36_264:                             # %cond.false2845
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_267
.LBB36_266:                             # %cond.false2872
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_267:                             # %cond.end2894
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_268:                             # %cond.end2896
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_274
.LBB36_270:                             # %cond.false2937
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_273
.LBB36_272:                             # %cond.false2962
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_273:                             # %cond.end2982
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_274:                             # %cond.end2984
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_280
.LBB36_276:                             # %cond.false3015
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_279
.LBB36_278:                             # %cond.false3042
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_279:                             # %cond.end3064
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_280:                             # %cond.end3066
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_286
.LBB36_282:                             # %cond.false3099
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_285
.LBB36_284:                             # %cond.false3126
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_285:                             # %cond.end3148
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_286:                             # %cond.end3150
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_292
.LBB36_288:                             # %cond.false3183
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_291
.LBB36_290:                             # %cond.false3210
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_291:                             # %cond.end3232
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_292:                             # %cond.end3234
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_298
.LBB36_294:                             # %cond.false3275
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_297
.LBB36_296:                             # %cond.false3300
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_297:                             # %cond.end3320
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_298:                             # %cond.end3322
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_304
.LBB36_300:                             # %cond.false3353
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_303
.LBB36_302:                             # %cond.false3380
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_303:                             # %cond.end3402
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_304:                             # %cond.end3404
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_310
.LBB36_306:                             # %cond.false3437
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_309
.LBB36_308:                             # %cond.false3464
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_309:                             # %cond.end3486
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_310:                             # %cond.end3488
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB36_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB36_316
.LBB36_312:                             # %cond.false3521
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB36_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB36_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB36_315
.LBB36_314:                             # %cond.false3548
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB36_315:                             # %cond.end3570
                                        #   in Loop: Header=BB36_219 Depth=3
.LBB36_316:                             # %cond.end3572
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB36_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB36_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB36_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB36_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB36_332
.LBB36_319:                             # %if.end3593
                                        #   in Loop: Header=BB36_219 Depth=3
	jmp	.LBB36_329
.LBB36_320:                             # %if.else3594
                                        #   in Loop: Header=BB36_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB36_321:                             # %for.cond3595
                                        #   Parent Loop BB36_212 Depth=1
                                        #     Parent Loop BB36_214 Depth=2
                                        #       Parent Loop BB36_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB36_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB36_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB36_321 Depth=4
	movl	$0, -100(%rbp)
.LBB36_323:                             # %for.cond3599
                                        #   Parent Loop BB36_212 Depth=1
                                        #     Parent Loop BB36_214 Depth=2
                                        #       Parent Loop BB36_219 Depth=3
                                        #         Parent Loop BB36_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB36_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB36_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB36_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB36_323
.LBB36_326:                             # %for.end3616
                                        #   in Loop: Header=BB36_321 Depth=4
	jmp	.LBB36_327
.LBB36_327:                             # %for.inc3617
                                        #   in Loop: Header=BB36_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB36_321
.LBB36_328:                             # %for.end3619
                                        #   in Loop: Header=BB36_219 Depth=3
	jmp	.LBB36_329
.LBB36_329:                             # %if.end3620
                                        #   in Loop: Header=BB36_219 Depth=3
	jmp	.LBB36_330
.LBB36_330:                             # %for.inc3621
                                        #   in Loop: Header=BB36_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB36_219
.LBB36_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB36_214 Depth=2
	jmp	.LBB36_332
.LBB36_332:                             # %for.end3625
                                        #   in Loop: Header=BB36_214 Depth=2
	jmp	.LBB36_352
.LBB36_333:                             # %if.else3626
                                        #   in Loop: Header=BB36_214 Depth=2
	movw	$0, -40(%rbp)
.LBB36_334:                             # %for.cond3627
                                        #   Parent Loop BB36_212 Depth=1
                                        #     Parent Loop BB36_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_340 Depth 4
                                        #           Child Loop BB36_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB36_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB36_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB36_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB36_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB36_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB36_351
.LBB36_338:                             # %if.end3978
                                        #   in Loop: Header=BB36_334 Depth=3
	jmp	.LBB36_348
.LBB36_339:                             # %if.else3979
                                        #   in Loop: Header=BB36_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB36_340:                             # %for.cond3980
                                        #   Parent Loop BB36_212 Depth=1
                                        #     Parent Loop BB36_214 Depth=2
                                        #       Parent Loop BB36_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB36_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB36_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB36_340 Depth=4
	movl	$0, -100(%rbp)
.LBB36_342:                             # %for.cond3984
                                        #   Parent Loop BB36_212 Depth=1
                                        #     Parent Loop BB36_214 Depth=2
                                        #       Parent Loop BB36_334 Depth=3
                                        #         Parent Loop BB36_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB36_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB36_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB36_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB36_342
.LBB36_345:                             # %for.end4001
                                        #   in Loop: Header=BB36_340 Depth=4
	jmp	.LBB36_346
.LBB36_346:                             # %for.inc4002
                                        #   in Loop: Header=BB36_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB36_340
.LBB36_347:                             # %for.end4004
                                        #   in Loop: Header=BB36_334 Depth=3
	jmp	.LBB36_348
.LBB36_348:                             # %if.end4005
                                        #   in Loop: Header=BB36_334 Depth=3
	jmp	.LBB36_349
.LBB36_349:                             # %for.inc4006
                                        #   in Loop: Header=BB36_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB36_334
.LBB36_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB36_214 Depth=2
	jmp	.LBB36_351
.LBB36_351:                             # %for.end4010
                                        #   in Loop: Header=BB36_214 Depth=2
	jmp	.LBB36_352
.LBB36_352:                             # %if.end4011
                                        #   in Loop: Header=BB36_214 Depth=2
	jmp	.LBB36_353
.LBB36_353:                             # %for.inc4012
                                        #   in Loop: Header=BB36_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB36_214
.LBB36_354:                             # %for.end4016
                                        #   in Loop: Header=BB36_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB36_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB36_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
.LBB36_356:                             # %if.end4026
                                        #   in Loop: Header=BB36_212 Depth=1
	movswl	-86(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB36_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB36_212 Depth=1
	movswl	-86(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB36_358:                             # %if.end4032
                                        #   in Loop: Header=BB36_212 Depth=1
	jmp	.LBB36_359
.LBB36_359:                             # %for.inc4033
                                        #   in Loop: Header=BB36_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB36_212
.LBB36_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB36_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB36_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1770629731, -200(%rbp) # imm = 0x6989AA63
	jne	.LBB36_364
.LBB36_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_363
.Lfunc_end36:
	.size	SubPelBlockSearchBiPred.11, .Lfunc_end36-SubPelBlockSearchBiPred.11
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.12              # -- Begin function SATD8X8.12
	.p2align	4, 0x90
	.type	SATD8X8.12,@function
SATD8X8.12:                             # @SATD8X8.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1723532433, -36(%rbp)  # imm = 0x66BB0491
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB37_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB37_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_2
.LBB37_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB37_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB37_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB37_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB37_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_6
.LBB37_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB37_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB37_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	$0, -12(%rbp)
.LBB37_12:                              # %for.cond499
                                        #   Parent Loop BB37_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB37_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB37_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB37_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB37_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB37_16
.LBB37_15:                              # %cond.false
                                        #   in Loop: Header=BB37_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB37_16:                              # %cond.end
                                        #   in Loop: Header=BB37_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB37_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_12
.LBB37_18:                              # %for.end519
                                        #   in Loop: Header=BB37_10 Depth=1
	jmp	.LBB37_19
.LBB37_19:                              # %for.inc520
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_10
.LBB37_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB37_26
.LBB37_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB37_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB37_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB37_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB37_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_22
.LBB37_25:                              # %for.end534
	jmp	.LBB37_26
.LBB37_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1723532433, -36(%rbp)  # imm = 0x66BB0491
	jne	.LBB37_28
.LBB37_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_27
.Lfunc_end37:
	.size	SATD8X8.12, .Lfunc_end37-SATD8X8.12
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.13        # -- Begin function GetSkipCostMB.13
	.p2align	4, 0x90
	.type	GetSkipCostMB.13,@function
GetSkipCostMB.13:                       # @GetSkipCostMB.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$915103832, -52(%rbp)   # imm = 0x368B6058
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_3 Depth 2
                                        #       Child Loop BB38_5 Depth 3
                                        #         Child Loop BB38_7 Depth 4
                                        #           Child Loop BB38_9 Depth 5
                                        #     Child Loop BB38_24 Depth 2
                                        #       Child Loop BB38_26 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB38_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB38_3:                               # %for.cond2
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_5 Depth 3
                                        #         Child Loop BB38_7 Depth 4
                                        #           Child Loop BB38_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB38_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB38_5:                               # %for.cond6
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_7 Depth 4
                                        #           Child Loop BB38_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %edi
	movl	-20(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB38_7:                               # %for.cond11
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_3 Depth=2
                                        #       Parent Loop BB38_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB38_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB38_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB38_7 Depth=4
	movl	$0, -12(%rbp)
.LBB38_9:                               # %for.cond14
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_3 Depth=2
                                        #       Parent Loop BB38_5 Depth=3
                                        #         Parent Loop BB38_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB38_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB38_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB38_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_9
.LBB38_12:                              # %for.end
                                        #   in Loop: Header=BB38_7 Depth=4
	jmp	.LBB38_13
.LBB38_13:                              # %for.inc39
                                        #   in Loop: Header=BB38_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_7
.LBB38_14:                              # %for.end41
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB38_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB38_17
.LBB38_16:                              # %if.then
                                        #   in Loop: Header=BB38_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB38_17:                              # %if.end
                                        #   in Loop: Header=BB38_5 Depth=3
	jmp	.LBB38_18
.LBB38_18:                              # %for.inc45
                                        #   in Loop: Header=BB38_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_5
.LBB38_19:                              # %for.end47
                                        #   in Loop: Header=BB38_3 Depth=2
	jmp	.LBB38_20
.LBB38_20:                              # %for.inc48
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_3
.LBB38_21:                              # %for.end50
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB38_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB38_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB38_24:                              # %for.cond58
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB38_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB38_24 Depth=2
	movl	$0, -12(%rbp)
.LBB38_26:                              # %for.cond62
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB38_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB38_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB38_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_26
.LBB38_29:                              # %for.end75
                                        #   in Loop: Header=BB38_24 Depth=2
	jmp	.LBB38_30
.LBB38_30:                              # %for.inc76
                                        #   in Loop: Header=BB38_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_24
.LBB38_31:                              # %for.end78
                                        #   in Loop: Header=BB38_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB38_32:                              # %if.end83
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_33
.LBB38_33:                              # %for.inc84
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB38_1
.LBB38_34:                              # %for.end86
	movl	-36(%rbp), %ebx
	cmpl	$915103832, -52(%rbp)   # imm = 0x368B6058
	jne	.LBB38_36
.LBB38_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_35
.Lfunc_end38:
	.size	GetSkipCostMB.13, .Lfunc_end38-GetSkipCostMB.13
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.14 # -- Begin function SetMotionVectorPredictor.14
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.14,@function
SetMotionVectorPredictor.14:            # @SetMotionVectorPredictor.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$339430766, -180(%rbp)  # imm = 0x143B4D6E
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -144(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB39_2:                               # %if.end
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -172(%rbp)
	jle	.LBB39_19
# %bb.3:                                # %if.then2
	cmpl	$8, -160(%rbp)
	jge	.LBB39_14
# %bb.4:                                # %if.then4
	cmpl	$8, -172(%rbp)
	jne	.LBB39_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB39_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB39_8
.LBB39_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB39_8:                               # %if.end10
	jmp	.LBB39_13
.LBB39_9:                               # %if.else11
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB39_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB39_12
.LBB39_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB39_12:                              # %if.end18
	jmp	.LBB39_13
.LBB39_13:                              # %if.end19
	jmp	.LBB39_18
.LBB39_14:                              # %if.else20
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB39_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB39_17
.LBB39_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB39_17:                              # %if.end28
	jmp	.LBB39_18
.LBB39_18:                              # %if.end29
	jmp	.LBB39_19
.LBB39_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB39_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB39_21:                              # %if.end34
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB39_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB39_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_25
.LBB39_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_25
.LBB39_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB39_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_28
.LBB39_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_28
.LBB39_28:                              # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB39_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_31
.LBB39_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_31
.LBB39_31:                              # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB39_72
.LBB39_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB39_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_37
.LBB39_36:                              # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB39_37:                              # %cond.end108
	jmp	.LBB39_39
.LBB39_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_39
.LBB39_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB39_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_43
.LBB39_42:                              # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB39_43:                              # %cond.end143
	jmp	.LBB39_45
.LBB39_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_45
.LBB39_45:                              # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB39_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_49
.LBB39_48:                              # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB39_49:                              # %cond.end178
	jmp	.LBB39_51
.LBB39_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_51
.LBB39_51:                              # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB39_71
.LBB39_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB39_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB39_56
.LBB39_55:                              # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB39_56:                              # %cond.end213
	jmp	.LBB39_58
.LBB39_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_58
.LBB39_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB39_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB39_62
.LBB39_61:                              # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB39_62:                              # %cond.end248
	jmp	.LBB39_64
.LBB39_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_64
.LBB39_64:                              # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB39_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB39_68
.LBB39_67:                              # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB39_68:                              # %cond.end283
	jmp	.LBB39_70
.LBB39_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB39_70
.LBB39_70:                              # %cond.end286
	movl	%eax, -80(%rbp)
.LBB39_71:                              # %if.end288
	jmp	.LBB39_72
.LBB39_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB39_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB39_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB39_76
# %bb.75:                               # %if.then300
	movl	$1, -32(%rbp)
	jmp	.LBB39_86
.LBB39_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB39_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB39_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB39_80
# %bb.79:                               # %if.then313
	movl	$2, -32(%rbp)
	jmp	.LBB39_85
.LBB39_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB39_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB39_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB39_84
# %bb.83:                               # %if.then326
	movl	$3, -32(%rbp)
.LBB39_84:                              # %if.end327
	jmp	.LBB39_85
.LBB39_85:                              # %if.end328
	jmp	.LBB39_86
.LBB39_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB39_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB39_96
# %bb.88:                               # %if.then335
	cmpl	$0, -160(%rbp)
	jne	.LBB39_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB39_91
# %bb.90:                               # %if.then342
	movl	$1, -32(%rbp)
.LBB39_91:                              # %if.end343
	jmp	.LBB39_95
.LBB39_92:                              # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB39_94
# %bb.93:                               # %if.then348
	movl	$3, -32(%rbp)
.LBB39_94:                              # %if.end349
	jmp	.LBB39_95
.LBB39_95:                              # %if.end350
	jmp	.LBB39_107
.LBB39_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB39_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB39_106
# %bb.98:                               # %if.then357
	cmpl	$0, -172(%rbp)
	jne	.LBB39_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB39_101
# %bb.100:                              # %if.then364
	movl	$2, -32(%rbp)
.LBB39_101:                             # %if.end365
	jmp	.LBB39_105
.LBB39_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB39_104
# %bb.103:                              # %if.then370
	movl	$1, -32(%rbp)
.LBB39_104:                             # %if.end371
	jmp	.LBB39_105
.LBB39_105:                             # %if.end372
	jmp	.LBB39_106
.LBB39_106:                             # %if.end373
	jmp	.LBB39_107
.LBB39_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB39_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB39_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB39_121
.LBB39_111:                             # %if.then381
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB39_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_114
.LBB39_113:                             # %cond.false396
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_114
.LBB39_114:                             # %cond.end397
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB39_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_117
.LBB39_116:                             # %cond.false413
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_117
.LBB39_117:                             # %cond.end414
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB39_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_120
.LBB39_119:                             # %cond.false430
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_120
.LBB39_120:                             # %cond.end431
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB39_161
.LBB39_121:                             # %if.else433
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB39_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_126
.LBB39_125:                             # %cond.false462
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB39_126:                             # %cond.end474
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_128
.LBB39_127:                             # %cond.false476
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_128
.LBB39_128:                             # %cond.end477
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB39_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_132
.LBB39_131:                             # %cond.false500
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB39_132:                             # %cond.end513
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_134
.LBB39_133:                             # %cond.false515
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_134
.LBB39_134:                             # %cond.end516
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB39_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB39_138
.LBB39_137:                             # %cond.false539
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB39_138:                             # %cond.end552
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_140
.LBB39_139:                             # %cond.false554
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_140
.LBB39_140:                             # %cond.end555
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB39_160
.LBB39_141:                             # %if.else557
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB39_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB39_145
.LBB39_144:                             # %cond.false580
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB39_145:                             # %cond.end592
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_147
.LBB39_146:                             # %cond.false594
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_147
.LBB39_147:                             # %cond.end595
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB39_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB39_151
.LBB39_150:                             # %cond.false619
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB39_151:                             # %cond.end631
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_153
.LBB39_152:                             # %cond.false633
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_153
.LBB39_153:                             # %cond.end634
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB39_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB39_157
.LBB39_156:                             # %cond.false658
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB39_157:                             # %cond.end670
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_159
.LBB39_158:                             # %cond.false672
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_159
.LBB39_159:                             # %cond.end673
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB39_160:                             # %if.end675
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_161
.LBB39_161:                             # %if.end676
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB39_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB39_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB39_166
.LBB39_165:                             # %cond.false696
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB39_166:                             # %cond.end708
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_168
.LBB39_167:                             # %cond.false710
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_168
.LBB39_168:                             # %cond.end711
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -140(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB39_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB39_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB39_172
.LBB39_171:                             # %cond.false729
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB39_172:                             # %cond.end741
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_174
.LBB39_173:                             # %cond.false743
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_174
.LBB39_174:                             # %cond.end744
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB39_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB39_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB39_178
.LBB39_177:                             # %cond.false762
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB39_178:                             # %cond.end774
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_180
.LBB39_179:                             # %cond.false776
                                        #   in Loop: Header=BB39_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_180
.LBB39_180:                             # %cond.end777
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB39_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB39_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB39_184
.LBB39_183:                             # %cond.false795
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB39_184:                             # %cond.end807
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_186
.LBB39_185:                             # %cond.false809
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-176(%rbp), %eax
.LBB39_186:                             # %cond.end810
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	%eax, -168(%rbp)
.LBB39_187:                             # %if.end812
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-32(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB39_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	.LJTI39_0(,%rax,8), %rax
	jmpq	*%rax
.LBB39_189:                             # %sw.bb
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB39_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB39_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB39_193:                             # %if.end824
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_213
.LBB39_194:                             # %if.else825
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB39_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB39_197
.LBB39_196:                             # %cond.false831
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-20(%rbp), %edx
.LBB39_197:                             # %cond.end832
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB39_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB39_203
.LBB39_199:                             # %cond.false837
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB39_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB39_202
.LBB39_201:                             # %cond.false841
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB39_202:                             # %cond.end842
                                        #   in Loop: Header=BB39_108 Depth=1
.LBB39_203:                             # %cond.end844
                                        #   in Loop: Header=BB39_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB39_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB39_206
.LBB39_205:                             # %cond.false849
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-20(%rbp), %edx
.LBB39_206:                             # %cond.end850
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB39_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB39_212
.LBB39_208:                             # %cond.false855
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB39_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB39_211
.LBB39_210:                             # %cond.false859
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB39_211:                             # %cond.end860
                                        #   in Loop: Header=BB39_108 Depth=1
.LBB39_212:                             # %cond.end862
                                        #   in Loop: Header=BB39_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
.LBB39_213:                             # %if.end865
                                        #   in Loop: Header=BB39_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB39_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -140(%rbp)
	je	.LBB39_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB39_222
.LBB39_217:                             # %if.else877
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB39_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB39_108 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB39_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB39_221
.LBB39_220:                             # %if.else886
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB39_221:                             # %if.end889
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_222
.LBB39_222:                             # %if.end890
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_223
.LBB39_223:                             # %if.end891
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_234
.LBB39_224:                             # %sw.bb892
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB39_226:                             # %if.end898
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_234
.LBB39_227:                             # %sw.bb899
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB39_229:                             # %if.end905
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_234
.LBB39_230:                             # %sw.bb906
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB39_232:                             # %if.end912
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_234
.LBB39_233:                             # %sw.default
                                        #   in Loop: Header=BB39_108 Depth=1
	jmp	.LBB39_234
.LBB39_234:                             # %sw.epilog
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB39_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_108
.LBB39_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB39_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB39_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB39_240
.LBB39_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB39_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB39_241:                             # %if.end929
	cmpl	$339430766, -180(%rbp)  # imm = 0x143B4D6E
	jne	.LBB39_243
.LBB39_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_242
.Lfunc_end39:
	.size	SetMotionVectorPredictor.14, .Lfunc_end39-SetMotionVectorPredictor.14
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI39_0:
	.quad	.LBB39_189
	.quad	.LBB39_224
	.quad	.LBB39_227
	.quad	.LBB39_230
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.15
.LCPI40_0:
	.quad	4611686018427387904     # double 2
.LCPI40_1:
	.quad	4607182418800017408     # double 1
.LCPI40_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI40_4:
	.quad	4620693217682128896     # double 8
.LCPI40_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI40_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.15
	.p2align	4, 0x90
	.type	BlockMotionSearch.15,@function
BlockMotionSearch.15:                   # @BlockMotionSearch.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$377357651, -212(%rbp)  # imm = 0x167E0553
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -196(%rbp)
	movl	%ecx, -184(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-184(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-184(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-256(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB40_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB40_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB40_4
.LBB40_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB40_4
.LBB40_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB40_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB40_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB40_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB40_6 Depth=1
	movl	$0, -64(%rbp)
.LBB40_8:                               # %for.cond24
                                        #   Parent Loop BB40_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB40_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB40_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB40_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_8
.LBB40_11:                              # %for.end
                                        #   in Loop: Header=BB40_6 Depth=1
	jmp	.LBB40_12
.LBB40_12:                              # %for.inc37
                                        #   in Loop: Header=BB40_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB40_6
.LBB40_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB40_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB40_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_18
.LBB40_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB40_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB40_37
.LBB40_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB40_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_23
.LBB40_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB40_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB40_36
.LBB40_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB40_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_28
.LBB40_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB40_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB40_35
.LBB40_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB40_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_33
.LBB40_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB40_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB40_34:                              # %if.end276
	jmp	.LBB40_35
.LBB40_35:                              # %if.end277
	jmp	.LBB40_36
.LBB40_36:                              # %if.end278
	jmp	.LBB40_37
.LBB40_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB40_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB40_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB40_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_43
.LBB40_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB40_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB40_62
.LBB40_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB40_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_48
.LBB40_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB40_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB40_61
.LBB40_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB40_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_53
.LBB40_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB40_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB40_60
.LBB40_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB40_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB40_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_58
.LBB40_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB40_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB40_59:                              # %if.end524
	jmp	.LBB40_60
.LBB40_60:                              # %if.end525
	jmp	.LBB40_61
.LBB40_61:                              # %if.end526
	jmp	.LBB40_62
.LBB40_62:                              # %if.end527
	jmp	.LBB40_63
.LBB40_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB40_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB40_66
.LBB40_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB40_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB40_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB40_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB40_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB40_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB40_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB40_73
.LBB40_72:                              # %cond.false626
	vmovsd	.LCPI40_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI40_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB40_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB40_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB40_76
.LBB40_75:                              # %cond.false655
	vmovsd	.LCPI40_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI40_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB40_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB40_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB40_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB40_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB40_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB40_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB40_83
.LBB40_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB40_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB40_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB40_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB40_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB40_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB40_92
.LBB40_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB40_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB40_91
.LBB40_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB40_91:                              # %cond.end787
	vmovss	.LCPI40_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB40_92:                              # %if.end835
	jmp	.LBB40_106
.LBB40_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB40_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB40_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB40_97
.LBB40_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB40_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB40_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB40_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB40_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB40_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB40_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB40_104
.LBB40_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB40_104:                             # %cond.end940
	vmovss	.LCPI40_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB40_105:                             # %if.end988
	jmp	.LBB40_106
.LBB40_106:                             # %if.end989
	jmp	.LBB40_107
.LBB40_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB40_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB40_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	-140(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB40_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB40_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB40_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB40_114
.LBB40_113:                             # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB40_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB40_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB40_120
.LBB40_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB40_119
.LBB40_118:                             # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB40_119:                             # %cond.end1029
.LBB40_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB40_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB40_123
.LBB40_122:                             # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB40_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB40_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB40_129
.LBB40_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB40_128
.LBB40_127:                             # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB40_128:                             # %cond.end1054
.LBB40_129:                             # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB40_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB40_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB40_131 Depth=1
	movl	$0, -72(%rbp)
.LBB40_133:                             # %for.cond1066
                                        #   Parent Loop BB40_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB40_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB40_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB40_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB40_137
.LBB40_136:                             # %if.else1091
                                        #   in Loop: Header=BB40_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB40_137:                             # %if.end1109
                                        #   in Loop: Header=BB40_133 Depth=2
	jmp	.LBB40_138
.LBB40_138:                             # %for.inc1110
                                        #   in Loop: Header=BB40_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB40_133
.LBB40_139:                             # %for.end1112
                                        #   in Loop: Header=BB40_131 Depth=1
	jmp	.LBB40_140
.LBB40_140:                             # %for.inc1113
                                        #   in Loop: Header=BB40_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_131
.LBB40_141:                             # %for.end1115
	jmp	.LBB40_143
.LBB40_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB40_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB40_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB40_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB40_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB40_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB40_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB40_150
.LBB40_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB40_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB40_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB40_151 Depth=1
	movl	$0, -72(%rbp)
.LBB40_153:                             # %for.cond1139
                                        #   Parent Loop BB40_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB40_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB40_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB40_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB40_157
.LBB40_156:                             # %if.else1183
                                        #   in Loop: Header=BB40_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB40_157:                             # %if.end1220
                                        #   in Loop: Header=BB40_153 Depth=2
	jmp	.LBB40_158
.LBB40_158:                             # %for.inc1221
                                        #   in Loop: Header=BB40_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB40_153
.LBB40_159:                             # %for.end1223
                                        #   in Loop: Header=BB40_151 Depth=1
	jmp	.LBB40_160
.LBB40_160:                             # %for.inc1224
                                        #   in Loop: Header=BB40_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_151
.LBB40_161:                             # %for.end1226
	jmp	.LBB40_166
.LBB40_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB40_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB40_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB40_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB40_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB40_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB40_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB40_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB40_173
.LBB40_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI40_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI40_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB40_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB40_172:                             # %if.end1273
	jmp	.LBB40_173
.LBB40_173:                             # %if.end1274
	jmp	.LBB40_174
.LBB40_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB40_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -192(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -64(%rbp)
.LBB40_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB40_176 Depth=1
	movl	$0, -72(%rbp)
.LBB40_178:                             # %for.cond1290
                                        #   Parent Loop BB40_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB40_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-180(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-180(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB40_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB40_178
.LBB40_181:                             # %for.end1337
                                        #   in Loop: Header=BB40_176 Depth=1
	jmp	.LBB40_182
.LBB40_182:                             # %for.inc1338
                                        #   in Loop: Header=BB40_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_176
.LBB40_183:                             # %for.end1340
	jmp	.LBB40_193
.LBB40_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB40_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB40_185 Depth=1
	movl	$0, -72(%rbp)
.LBB40_187:                             # %for.cond1347
                                        #   Parent Loop BB40_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB40_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB40_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB40_187
.LBB40_190:                             # %for.end1380
                                        #   in Loop: Header=BB40_185 Depth=1
	jmp	.LBB40_191
.LBB40_191:                             # %for.inc1381
                                        #   in Loop: Header=BB40_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_185
.LBB40_192:                             # %for.end1383
	jmp	.LBB40_193
.LBB40_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB40_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB40_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB40_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB40_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB40_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB40_200
.LBB40_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB40_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -106(%rbp)
	movw	$0, -108(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-132(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB40_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB40_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB40_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB40_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB40_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -106(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -108(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB40_208
.LBB40_204:                             # %if.else1433
                                        #   in Loop: Header=BB40_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -106(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB40_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB40_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB40_207
.LBB40_206:                             # %if.else1441
                                        #   in Loop: Header=BB40_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -86(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB40_207:                             # %if.end1450
                                        #   in Loop: Header=BB40_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB40_208:                             # %if.end1452
                                        #   in Loop: Header=BB40_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-106(%rbp), %r15w
	movw	-108(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB40_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_201
.LBB40_210:                             # %for.end1458
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB40_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB40_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB40_213:                             # %if.end1469
	vmovsd	.LCPI40_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-106(%rbp), %ax
	movw	-108(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB40_215
.LBB40_214:                             # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB40_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB40_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB40_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB40_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI40_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB40_220
.LBB40_219:                             # %if.else1495
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB40_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB40_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB40_221 Depth=1
	movl	$0, -72(%rbp)
.LBB40_223:                             # %for.cond1502
                                        #   Parent Loop BB40_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB40_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB40_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB40_223
.LBB40_226:                             # %for.end1565
                                        #   in Loop: Header=BB40_221 Depth=1
	jmp	.LBB40_227
.LBB40_227:                             # %for.inc1566
                                        #   in Loop: Header=BB40_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_221
.LBB40_228:                             # %for.end1568
	jmp	.LBB40_229
.LBB40_229:                             # %if.end1569
	leaq	-240(%rbp), %rdi
	callq	ftime
	imulq	$1000, -240(%rbp), %rax # imm = 0x3E8
	movzwl	-232(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -256(%rbp), %rcx # imm = 0x3E8
	movzwl	-248(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-188(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$377357651, -212(%rbp)  # imm = 0x167E0553
	jne	.LBB40_231
.LBB40_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_230
.Lfunc_end40:
	.size	BlockMotionSearch.15, .Lfunc_end40-BlockMotionSearch.15
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.16   # -- Begin function Get_Direct_Cost8x8.16
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.16,@function
Get_Direct_Cost8x8.16:                  # @Get_Direct_Cost8x8.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1475132619, -60(%rbp)  # imm = 0x57ECBCCB
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
                                        #       Child Loop BB41_7 Depth 3
                                        #         Child Loop BB41_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB41_3:                               # %for.cond3
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_7 Depth 3
                                        #         Child Loop BB41_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB41_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB41_30
.LBB41_6:                               # %if.end
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB41_7:                               # %for.cond34
                                        #   Parent Loop BB41_1 Depth=1
                                        #     Parent Loop BB41_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB41_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB41_7 Depth=3
	movl	$0, -16(%rbp)
.LBB41_9:                               # %for.cond38
                                        #   Parent Loop BB41_1 Depth=1
                                        #     Parent Loop BB41_3 Depth=2
                                        #       Parent Loop BB41_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB41_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB41_9 Depth=4
	movq	imgY_org, %rax
	movl	-36(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-400(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB41_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_9
.LBB41_12:                              # %for.end
                                        #   in Loop: Header=BB41_7 Depth=3
	jmp	.LBB41_13
.LBB41_13:                              # %for.inc67
                                        #   in Loop: Header=BB41_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_7
.LBB41_14:                              # %for.end69
                                        #   in Loop: Header=BB41_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_3
.LBB41_16:                              # %for.end73
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_17
.LBB41_17:                              # %for.inc74
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1
.LBB41_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB41_29
# %bb.20:                               # %if.then79
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB41_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB41_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB41_21 Depth=1
	movl	$0, -16(%rbp)
.LBB41_23:                              # %for.cond84
                                        #   Parent Loop BB41_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB41_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB41_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-400(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB41_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_23
.LBB41_26:                              # %for.end97
                                        #   in Loop: Header=BB41_21 Depth=1
	jmp	.LBB41_27
.LBB41_27:                              # %for.inc98
                                        #   in Loop: Header=BB41_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_21
.LBB41_28:                              # %for.end100
	leaq	-656(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB41_29:                              # %if.end105
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB41_30:                              # %return
	movl	-56(%rbp), %ebx
	cmpl	$1475132619, -60(%rbp)  # imm = 0x57ECBCCB
	jne	.LBB41_32
.LBB41_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_31
.Lfunc_end41:
	.size	Get_Direct_Cost8x8.16, .Lfunc_end41-Get_Direct_Cost8x8.16
	.cfi_endproc
                                        # -- End function
	.globl	SATD.17                 # -- Begin function SATD.17
	.p2align	4, 0x90
	.type	SATD.17,@function
SATD.17:                                # @SATD.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$1799906058, -184(%rbp) # imm = 0x6B48630A
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB42_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB42_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB42_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB42_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB42_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB42_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB42_6
.LBB42_5:                               # %cond.false
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-100(%rbp), %eax
.LBB42_6:                               # %cond.end
                                        #   in Loop: Header=BB42_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB42_2
.LBB42_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_14
.LBB42_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB42_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB42_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB42_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB42_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_10
.LBB42_13:                              # %for.end270
	jmp	.LBB42_14
.LBB42_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$1799906058, -184(%rbp) # imm = 0x6B48630A
	jne	.LBB42_16
.LBB42_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_15
.Lfunc_end42:
	.size	SATD.17, .Lfunc_end42-SATD.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.18
.LCPI43_0:
	.quad	4602678819172646912     # double 0.5
.LCPI43_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.18
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.18,@function
FullPelBlockMotionBiPred.18:            # @FullPelBlockMotionBiPred.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$1349222448, -192(%rbp) # imm = 0x506B8030
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -108(%rbp)
	movl	%r8d, -116(%rbp)
	movl	%r9d, -140(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB43_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB43_7
.LBB43_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB43_7:                               # %cond.end12
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -112(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -120(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -172(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -144(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-116(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-108(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movl	-116(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -46(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB43_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB43_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB43_11
.LBB43_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB43_11:                              # %cond.end87
	jmp	.LBB43_13
.LBB43_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB43_13:                              # %cond.end91
	movw	%ax, -50(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB43_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB43_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB43_17
.LBB43_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB43_17:                              # %cond.end114
	jmp	.LBB43_19
.LBB43_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB43_19:                              # %cond.end118
	movw	%ax, -48(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB43_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB43_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB43_23
.LBB43_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB43_23:                              # %cond.end138
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB43_25
.LBB43_25:                              # %cond.end141
	movw	%ax, -134(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB43_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB43_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB43_29
.LBB43_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB43_29:                              # %cond.end161
	jmp	.LBB43_31
.LBB43_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB43_31
.LBB43_31:                              # %cond.end164
	movw	%ax, -136(%rbp)
	movswl	-136(%rbp), %eax
	movswl	-134(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB43_36
# %bb.32:                               # %land.lhs.true176
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_36
# %bb.33:                               # %land.lhs.true182
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB43_36
# %bb.34:                               # %land.lhs.true186
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-124(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB43_37
.LBB43_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB43_37:                              # %if.end
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB43_42
# %bb.38:                               # %land.lhs.true196
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_42
# %bb.39:                               # %land.lhs.true204
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB43_42
# %bb.40:                               # %land.lhs.true208
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-124(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB43_43
.LBB43_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB43_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB43_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_49 Depth 2
                                        #       Child Loop BB43_51 Depth 3
                                        #     Child Loop BB43_85 Depth 2
                                        #       Child Loop BB43_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB43_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB43_44 Depth=1
	movswl	-96(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-94(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-44(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-42(%rbp), %esi
	shll	$2, %esi
	subl	-180(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-184(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-176(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB43_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_99
.LBB43_47:                              # %if.end257
                                        #   in Loop: Header=BB43_44 Depth=1
	cmpw	$0, -46(%rbp)
	je	.LBB43_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	$0, -36(%rbp)
.LBB43_49:                              # %for.cond260
                                        #   Parent Loop BB43_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.LBB43_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB43_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB43_51:                              # %for.cond271
                                        #   Parent Loop BB43_44 Depth=1
                                        #     Parent Loop BB43_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB43_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB43_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB43_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB43_58
.LBB43_54:                              # %cond.false296
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB43_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_57
.LBB43_56:                              # %cond.false310
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB43_57:                              # %cond.end320
                                        #   in Loop: Header=BB43_51 Depth=3
.LBB43_58:                              # %cond.end322
                                        #   in Loop: Header=BB43_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB43_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB43_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB43_64
.LBB43_60:                              # %cond.false354
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB43_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_63
.LBB43_62:                              # %cond.false369
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB43_63:                              # %cond.end379
                                        #   in Loop: Header=BB43_51 Depth=3
.LBB43_64:                              # %cond.end381
                                        #   in Loop: Header=BB43_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB43_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB43_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB43_70
.LBB43_66:                              # %cond.false413
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB43_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_69
.LBB43_68:                              # %cond.false428
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB43_69:                              # %cond.end438
                                        #   in Loop: Header=BB43_51 Depth=3
.LBB43_70:                              # %cond.end440
                                        #   in Loop: Header=BB43_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB43_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB43_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB43_76
.LBB43_72:                              # %cond.false472
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB43_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_75
.LBB43_74:                              # %cond.false487
                                        #   in Loop: Header=BB43_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB43_75:                              # %cond.end497
                                        #   in Loop: Header=BB43_51 Depth=3
.LBB43_76:                              # %cond.end499
                                        #   in Loop: Header=BB43_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB43_51 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB43_51
.LBB43_78:                              # %for.end
                                        #   in Loop: Header=BB43_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB43_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_83
.LBB43_80:                              # %if.end512
                                        #   in Loop: Header=BB43_49 Depth=2
	jmp	.LBB43_81
.LBB43_81:                              # %for.inc513
                                        #   in Loop: Header=BB43_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_49
.LBB43_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_83
.LBB43_83:                              # %for.end515
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_96
.LBB43_84:                              # %if.else516
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	$0, -36(%rbp)
.LBB43_85:                              # %for.cond517
                                        #   Parent Loop BB43_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.LBB43_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB43_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB43_87:                              # %for.cond529
                                        #   Parent Loop BB43_44 Depth=1
                                        #     Parent Loop BB43_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB43_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB43_87 Depth=3
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB43_87 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB43_87
.LBB43_90:                              # %for.end583
                                        #   in Loop: Header=BB43_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB43_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_95
.LBB43_92:                              # %if.end587
                                        #   in Loop: Header=BB43_85 Depth=2
	jmp	.LBB43_93
.LBB43_93:                              # %for.inc588
                                        #   in Loop: Header=BB43_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_85
.LBB43_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_95
.LBB43_95:                              # %for.end590
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_96
.LBB43_96:                              # %if.end591
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB43_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB43_98:                              # %if.end595
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_99
.LBB43_99:                              # %for.inc596
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB43_44
.LBB43_100:                             # %for.end598
	cmpl	$0, -120(%rbp)
	je	.LBB43_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB43_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$1349222448, -192(%rbp) # imm = 0x506B8030
	jne	.LBB43_104
.LBB43_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_103
.Lfunc_end43:
	.size	FullPelBlockMotionBiPred.18, .Lfunc_end43-FullPelBlockMotionBiPred.18
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.19              # -- Begin function SATD8X8.19
	.p2align	4, 0x90
	.type	SATD8X8.19,@function
SATD8X8.19:                             # @SATD8X8.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$245977492, -32(%rbp)   # imm = 0xEA95194
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB44_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB44_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB44_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB44_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_2
.LBB44_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB44_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB44_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB44_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB44_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_6
.LBB44_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB44_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB44_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB44_10 Depth=1
	movl	$0, -12(%rbp)
.LBB44_12:                              # %for.cond499
                                        #   Parent Loop BB44_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB44_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB44_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB44_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB44_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB44_16
.LBB44_15:                              # %cond.false
                                        #   in Loop: Header=BB44_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB44_16:                              # %cond.end
                                        #   in Loop: Header=BB44_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB44_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_12
.LBB44_18:                              # %for.end519
                                        #   in Loop: Header=BB44_10 Depth=1
	jmp	.LBB44_19
.LBB44_19:                              # %for.inc520
                                        #   in Loop: Header=BB44_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_10
.LBB44_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_26
.LBB44_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB44_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB44_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB44_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB44_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_22
.LBB44_25:                              # %for.end534
	jmp	.LBB44_26
.LBB44_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$245977492, -32(%rbp)   # imm = 0xEA95194
	jne	.LBB44_28
.LBB44_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_27
.Lfunc_end44:
	.size	SATD8X8.19, .Lfunc_end44-SATD8X8.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.20
.LCPI45_0:
	.quad	4602678819172646912     # double 0.5
.LCPI45_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.20
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.20,@function
FullPelBlockMotionBiPred.20:            # @FullPelBlockMotionBiPred.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$405936574, -192(%rbp)  # imm = 0x183219BE
	movq	%rdi, -216(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -124(%rbp)
	movl	%r8d, -108(%rbp)
	movl	%r9d, -140(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB45_4
.LBB45_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB45_4
.LBB45_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -200(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB45_6
# %bb.5:                                # %cond.true9
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB45_7
.LBB45_6:                               # %cond.false11
	movl	-36(%rbp), %eax
.LBB45_7:                               # %cond.end12
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	$0, -112(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -172(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -148(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-124(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-108(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-124(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movl	-108(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -46(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB45_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB45_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB45_11
.LBB45_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB45_11:                              # %cond.end87
	jmp	.LBB45_13
.LBB45_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB45_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB45_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB45_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB45_17
.LBB45_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB45_17:                              # %cond.end114
	jmp	.LBB45_19
.LBB45_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB45_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB45_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB45_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB45_23
.LBB45_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB45_23:                              # %cond.end138
	jmp	.LBB45_25
.LBB45_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB45_25
.LBB45_25:                              # %cond.end141
	movw	%ax, -134(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB45_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB45_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB45_29
.LBB45_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB45_29:                              # %cond.end161
	jmp	.LBB45_31
.LBB45_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB45_31
.LBB45_31:                              # %cond.end164
	movw	%ax, -136(%rbp)
	movswl	-136(%rbp), %eax
	movswl	-134(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB45_36
# %bb.32:                               # %land.lhs.true176
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_36
# %bb.33:                               # %land.lhs.true182
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB45_36
# %bb.34:                               # %land.lhs.true186
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB45_37
.LBB45_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB45_37:                              # %if.end
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB45_42
# %bb.38:                               # %land.lhs.true196
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_42
# %bb.39:                               # %land.lhs.true204
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB45_42
# %bb.40:                               # %land.lhs.true208
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB45_43
.LBB45_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB45_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB45_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_49 Depth 2
                                        #       Child Loop BB45_51 Depth 3
                                        #     Child Loop BB45_85 Depth 2
                                        #       Child Loop BB45_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB45_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB45_44 Depth=1
	movswl	-96(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movswl	-94(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-42(%rbp), %edx
	shll	$2, %edx
	subl	-184(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-44(%rbp), %esi
	shll	$2, %esi
	subl	-176(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rcx
	movl	-128(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-132(%rbp), %esi
	shll	$2, %esi
	subl	-180(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB45_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_99
.LBB45_47:                              # %if.end257
                                        #   in Loop: Header=BB45_44 Depth=1
	cmpw	$0, -46(%rbp)
	je	.LBB45_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB45_44 Depth=1
	movl	$0, -40(%rbp)
.LBB45_49:                              # %for.cond260
                                        #   Parent Loop BB45_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_51 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB45_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB45_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB45_51:                              # %for.cond271
                                        #   Parent Loop BB45_44 Depth=1
                                        #     Parent Loop BB45_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB45_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB45_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB45_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB45_58
.LBB45_54:                              # %cond.false296
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB45_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB45_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_57
.LBB45_56:                              # %cond.false310
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB45_57:                              # %cond.end320
                                        #   in Loop: Header=BB45_51 Depth=3
.LBB45_58:                              # %cond.end322
                                        #   in Loop: Header=BB45_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB45_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB45_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB45_64
.LBB45_60:                              # %cond.false354
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB45_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB45_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_63
.LBB45_62:                              # %cond.false369
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB45_63:                              # %cond.end379
                                        #   in Loop: Header=BB45_51 Depth=3
.LBB45_64:                              # %cond.end381
                                        #   in Loop: Header=BB45_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB45_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB45_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB45_70
.LBB45_66:                              # %cond.false413
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB45_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB45_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_69
.LBB45_68:                              # %cond.false428
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB45_69:                              # %cond.end438
                                        #   in Loop: Header=BB45_51 Depth=3
.LBB45_70:                              # %cond.end440
                                        #   in Loop: Header=BB45_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB45_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB45_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB45_76
.LBB45_72:                              # %cond.false472
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB45_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB45_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_75
.LBB45_74:                              # %cond.false487
                                        #   in Loop: Header=BB45_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB45_75:                              # %cond.end497
                                        #   in Loop: Header=BB45_51 Depth=3
.LBB45_76:                              # %cond.end499
                                        #   in Loop: Header=BB45_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB45_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB45_51
.LBB45_78:                              # %for.end
                                        #   in Loop: Header=BB45_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB45_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_83
.LBB45_80:                              # %if.end512
                                        #   in Loop: Header=BB45_49 Depth=2
	jmp	.LBB45_81
.LBB45_81:                              # %for.inc513
                                        #   in Loop: Header=BB45_49 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB45_49
.LBB45_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_83
.LBB45_83:                              # %for.end515
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_96
.LBB45_84:                              # %if.else516
                                        #   in Loop: Header=BB45_44 Depth=1
	movl	$0, -40(%rbp)
.LBB45_85:                              # %for.cond517
                                        #   Parent Loop BB45_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_87 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB45_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB45_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB45_87:                              # %for.cond529
                                        #   Parent Loop BB45_44 Depth=1
                                        #     Parent Loop BB45_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB45_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB45_87 Depth=3
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB45_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB45_87
.LBB45_90:                              # %for.end583
                                        #   in Loop: Header=BB45_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB45_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_95
.LBB45_92:                              # %if.end587
                                        #   in Loop: Header=BB45_85 Depth=2
	jmp	.LBB45_93
.LBB45_93:                              # %for.inc588
                                        #   in Loop: Header=BB45_85 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB45_85
.LBB45_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_95
.LBB45_95:                              # %for.end590
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_96
.LBB45_96:                              # %if.end591
                                        #   in Loop: Header=BB45_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB45_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB45_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB45_98:                              # %if.end595
                                        #   in Loop: Header=BB45_44 Depth=1
	jmp	.LBB45_99
.LBB45_99:                              # %for.inc596
                                        #   in Loop: Header=BB45_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB45_44
.LBB45_100:                             # %for.end598
	cmpl	$0, -112(%rbp)
	je	.LBB45_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB45_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$405936574, -192(%rbp)  # imm = 0x183219BE
	jne	.LBB45_104
.LBB45_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_103
.Lfunc_end45:
	.size	FullPelBlockMotionBiPred.20, .Lfunc_end45-FullPelBlockMotionBiPred.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.21
.LCPI46_0:
	.quad	4602678819172646912     # double 0.5
.LCPI46_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.21
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.21,@function
SubPelBlockMotionSearch.21:             # @SubPelBlockMotionSearch.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI46_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$827001539, -180(%rbp)  # imm = 0x314B0AC3
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -156(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -108(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -148(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -108(%rbp)
	jne	.LBB46_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB46_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB46_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB46_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB46_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB46_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB46_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -200(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -152(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB46_10
.LBB46_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB46_10
.LBB46_10:                              # %cond.end
	movl	%eax, -196(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB46_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB46_14
.LBB46_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB46_14:                              # %cond.end35
	jmp	.LBB46_16
.LBB46_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB46_16:                              # %cond.end38
	movl	%eax, -184(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB46_20
.LBB46_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB46_20
.LBB46_20:                              # %cond.end50
	movl	%ecx, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB46_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB46_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB46_26
.LBB46_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB46_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB46_25:                              # %land.end65
.LBB46_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -192(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB46_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB46_29
.LBB46_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB46_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -164(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-156(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -192(%rbp)
	je	.LBB46_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB46_32
# %bb.31:                               # %if.then
	movl	-156(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB46_33
.LBB46_32:                              # %if.else
	movl	-156(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB46_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-152(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_38
# %bb.34:                               # %land.lhs.true112
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_38
# %bb.35:                               # %land.lhs.true118
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_38
# %bb.36:                               # %land.lhs.true123
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB46_39
.LBB46_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB46_39:                              # %if.end131
	movl	$0, -72(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB46_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_47 Depth 2
                                        #       Child Loop BB46_51 Depth 3
                                        #         Child Loop BB46_57 Depth 4
                                        #           Child Loop BB46_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB46_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB46_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-104(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-100(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB46_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB46_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB46_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	-148(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB46_44:                              # %if.end164
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB46_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB46_40 Depth=1
	jmp	.LBB46_75
.LBB46_46:                              # %if.end168
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -96(%rbp)
.LBB46_47:                              # %for.cond169
                                        #   Parent Loop BB46_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_51 Depth 3
                                        #         Child Loop BB46_57 Depth 4
                                        #           Child Loop BB46_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-140(%rbp), %ecx
	jge	.LBB46_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB46_47 Depth=2
	cmpl	$0, -96(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_49:                              # %land.end174
                                        #   in Loop: Header=BB46_47 Depth=2
	testb	$1, %al
	jne	.LBB46_50
	jmp	.LBB46_70
.LBB46_50:                              # %for.body176
                                        #   in Loop: Header=BB46_47 Depth=2
	movl	-136(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-100(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB46_51:                              # %for.cond180
                                        #   Parent Loop BB46_40 Depth=1
                                        #     Parent Loop BB46_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_57 Depth 4
                                        #           Child Loop BB46_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB46_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB46_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-132(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-104(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB46_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB46_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-164(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB46_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB46_47 Depth=2
	movl	$1, -96(%rbp)
	jmp	.LBB46_68
.LBB46_55:                              # %if.end342
                                        #   in Loop: Header=BB46_51 Depth=3
	jmp	.LBB46_65
.LBB46_56:                              # %if.else343
                                        #   in Loop: Header=BB46_51 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB46_57:                              # %for.cond344
                                        #   Parent Loop BB46_40 Depth=1
                                        #     Parent Loop BB46_47 Depth=2
                                        #       Parent Loop BB46_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB46_59 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB46_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB46_57 Depth=4
	movl	$0, -84(%rbp)
.LBB46_59:                              # %for.cond348
                                        #   Parent Loop BB46_40 Depth=1
                                        #     Parent Loop BB46_47 Depth=2
                                        #       Parent Loop BB46_51 Depth=3
                                        #         Parent Loop BB46_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -84(%rbp)
	jge	.LBB46_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB46_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB46_59 Depth=5
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB46_59
.LBB46_62:                              # %for.end
                                        #   in Loop: Header=BB46_57 Depth=4
	jmp	.LBB46_63
.LBB46_63:                              # %for.inc361
                                        #   in Loop: Header=BB46_57 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB46_57
.LBB46_64:                              # %for.end363
                                        #   in Loop: Header=BB46_51 Depth=3
	jmp	.LBB46_65
.LBB46_65:                              # %if.end364
                                        #   in Loop: Header=BB46_51 Depth=3
	jmp	.LBB46_66
.LBB46_66:                              # %for.inc365
                                        #   in Loop: Header=BB46_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_51
.LBB46_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB46_47 Depth=2
	jmp	.LBB46_68
.LBB46_68:                              # %for.end367
                                        #   in Loop: Header=BB46_47 Depth=2
	jmp	.LBB46_69
.LBB46_69:                              # %for.inc368
                                        #   in Loop: Header=BB46_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB46_47
.LBB46_70:                              # %for.end370
                                        #   in Loop: Header=BB46_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB46_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB46_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-164(%rbp), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB46_72:                              # %if.end377
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB46_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB46_74:                              # %if.end381
                                        #   in Loop: Header=BB46_40 Depth=1
	jmp	.LBB46_75
.LBB46_75:                              # %for.inc382
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB46_40
.LBB46_76:                              # %for.end384
	cmpl	$0, -72(%rbp)
	je	.LBB46_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB46_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB46_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB46_80:                              # %if.end403
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_85
# %bb.81:                               # %land.lhs.true408
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_85
# %bb.82:                               # %land.lhs.true414
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_85
# %bb.83:                               # %land.lhs.true419
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB46_86
.LBB46_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB46_86:                              # %if.end427
	movl	$0, -72(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB46_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_91 Depth 2
                                        #       Child Loop BB46_95 Depth 3
                                        #         Child Loop BB46_101 Depth 4
                                        #           Child Loop BB46_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB46_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB46_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -104(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-104(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-100(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB46_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB46_87 Depth=1
	jmp	.LBB46_119
.LBB46_90:                              # %if.end456
                                        #   in Loop: Header=BB46_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -96(%rbp)
.LBB46_91:                              # %for.cond457
                                        #   Parent Loop BB46_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_95 Depth 3
                                        #         Child Loop BB46_101 Depth 4
                                        #           Child Loop BB46_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-140(%rbp), %ecx
	jge	.LBB46_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB46_91 Depth=2
	cmpl	$0, -96(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_93:                              # %land.end463
                                        #   in Loop: Header=BB46_91 Depth=2
	testb	$1, %al
	jne	.LBB46_94
	jmp	.LBB46_114
.LBB46_94:                              # %for.body465
                                        #   in Loop: Header=BB46_91 Depth=2
	movl	-136(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-100(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB46_95:                              # %for.cond469
                                        #   Parent Loop BB46_87 Depth=1
                                        #     Parent Loop BB46_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_101 Depth 4
                                        #           Child Loop BB46_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB46_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB46_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-132(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-104(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB46_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB46_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB46_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB46_91 Depth=2
	movl	$1, -96(%rbp)
	jmp	.LBB46_112
.LBB46_99:                              # %if.end636
                                        #   in Loop: Header=BB46_95 Depth=3
	jmp	.LBB46_109
.LBB46_100:                             # %if.else637
                                        #   in Loop: Header=BB46_95 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB46_101:                             # %for.cond638
                                        #   Parent Loop BB46_87 Depth=1
                                        #     Parent Loop BB46_91 Depth=2
                                        #       Parent Loop BB46_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB46_103 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB46_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB46_101 Depth=4
	movl	$0, -84(%rbp)
.LBB46_103:                             # %for.cond642
                                        #   Parent Loop BB46_87 Depth=1
                                        #     Parent Loop BB46_91 Depth=2
                                        #       Parent Loop BB46_95 Depth=3
                                        #         Parent Loop BB46_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -84(%rbp)
	jge	.LBB46_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB46_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB46_103 Depth=5
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB46_103
.LBB46_106:                             # %for.end657
                                        #   in Loop: Header=BB46_101 Depth=4
	jmp	.LBB46_107
.LBB46_107:                             # %for.inc658
                                        #   in Loop: Header=BB46_101 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB46_101
.LBB46_108:                             # %for.end660
                                        #   in Loop: Header=BB46_95 Depth=3
	jmp	.LBB46_109
.LBB46_109:                             # %if.end661
                                        #   in Loop: Header=BB46_95 Depth=3
	jmp	.LBB46_110
.LBB46_110:                             # %for.inc662
                                        #   in Loop: Header=BB46_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_95
.LBB46_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB46_91 Depth=2
	jmp	.LBB46_112
.LBB46_112:                             # %for.end664
                                        #   in Loop: Header=BB46_91 Depth=2
	jmp	.LBB46_113
.LBB46_113:                             # %for.inc665
                                        #   in Loop: Header=BB46_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB46_91
.LBB46_114:                             # %for.end667
                                        #   in Loop: Header=BB46_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB46_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB46_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB46_116:                             # %if.end675
                                        #   in Loop: Header=BB46_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB46_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB46_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB46_118:                             # %if.end679
                                        #   in Loop: Header=BB46_87 Depth=1
	jmp	.LBB46_119
.LBB46_119:                             # %for.inc680
                                        #   in Loop: Header=BB46_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB46_87
.LBB46_120:                             # %for.end682
	cmpl	$0, -72(%rbp)
	je	.LBB46_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB46_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$827001539, -180(%rbp)  # imm = 0x314B0AC3
	jne	.LBB46_124
.LBB46_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_123
.Lfunc_end46:
	.size	SubPelBlockMotionSearch.21, .Lfunc_end46-SubPelBlockMotionSearch.21
	.cfi_endproc
                                        # -- End function
	.globl	sign.22                 # -- Begin function sign.22
	.p2align	4, 0x90
	.type	sign.22,@function
sign.22:                                # @sign.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1468255467, -28(%rbp)  # imm = 0x5783CCEB
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB47_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB47_3
.LBB47_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB47_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB47_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_6
.LBB47_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB47_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$1468255467, -28(%rbp)  # imm = 0x5783CCEB
	jne	.LBB47_8
.LBB47_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_7
.Lfunc_end47:
	.size	sign.22, .Lfunc_end47-sign.22
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.23   # -- Begin function Get_Direct_Cost8x8.23
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.23,@function
Get_Direct_Cost8x8.23:                  # @Get_Direct_Cost8x8.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$899750301, -60(%rbp)   # imm = 0x35A1199D
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -44(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
                                        #       Child Loop BB48_7 Depth 3
                                        #         Child Loop BB48_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB48_3:                               # %for.cond3
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_7 Depth 3
                                        #         Child Loop BB48_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB48_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB48_30
.LBB48_6:                               # %if.end
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB48_7:                               # %for.cond34
                                        #   Parent Loop BB48_1 Depth=1
                                        #     Parent Loop BB48_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB48_7 Depth=3
	movl	$0, -16(%rbp)
.LBB48_9:                               # %for.cond38
                                        #   Parent Loop BB48_1 Depth=1
                                        #     Parent Loop BB48_3 Depth=2
                                        #       Parent Loop BB48_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB48_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB48_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_9
.LBB48_12:                              # %for.end
                                        #   in Loop: Header=BB48_7 Depth=3
	jmp	.LBB48_13
.LBB48_13:                              # %for.inc67
                                        #   in Loop: Header=BB48_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_7
.LBB48_14:                              # %for.end69
                                        #   in Loop: Header=BB48_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB48_3
.LBB48_16:                              # %for.end73
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc74
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_1
.LBB48_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB48_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB48_29
# %bb.20:                               # %if.then79
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB48_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB48_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	$0, -16(%rbp)
.LBB48_23:                              # %for.cond84
                                        #   Parent Loop BB48_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB48_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB48_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB48_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_23
.LBB48_26:                              # %for.end97
                                        #   in Loop: Header=BB48_21 Depth=1
	jmp	.LBB48_27
.LBB48_27:                              # %for.inc98
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_21
.LBB48_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB48_29:                              # %if.end105
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB48_30:                              # %return
	movl	-56(%rbp), %ebx
	cmpl	$899750301, -60(%rbp)   # imm = 0x35A1199D
	jne	.LBB48_32
.LBB48_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_31
.Lfunc_end48:
	.size	Get_Direct_Cost8x8.23, .Lfunc_end48-Get_Direct_Cost8x8.23
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.24 # -- Begin function Get_Direct_Motion_Vectors.24
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.24,@function
Get_Direct_Motion_Vectors.24:           # @Get_Direct_Motion_Vectors.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$2040618079, -228(%rbp) # imm = 0x79A15C5F
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB49_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB49_5
.LBB49_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB49_5:                               # %if.end
	jmp	.LBB49_7
.LBB49_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB49_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB49_226
# %bb.8:                                # %if.then9
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB49_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_12
.LBB49_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_12
.LBB49_12:                              # %cond.end
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB49_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_15
.LBB49_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_15
.LBB49_15:                              # %cond.end38
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB49_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_18
.LBB49_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_18
.LBB49_18:                              # %cond.end54
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB49_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_21
.LBB49_20:                              # %cond.false69
	movswl	-52(%rbp), %eax
.LBB49_21:                              # %cond.end71
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB49_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_24
.LBB49_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_24
.LBB49_24:                              # %cond.end87
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB49_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_27
.LBB49_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_27
.LBB49_27:                              # %cond.end103
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB49_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_30
.LBB49_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_30
.LBB49_30:                              # %cond.end119
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB49_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_33
.LBB49_32:                              # %cond.false134
	movswl	-50(%rbp), %eax
.LBB49_33:                              # %cond.end136
	movw	%ax, -24(%rbp)
	jmp	.LBB49_150
.LBB49_34:                              # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB49_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_39
.LBB49_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_40
.LBB49_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_40:                              # %cond.end181
	jmp	.LBB49_42
.LBB49_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_42
.LBB49_42:                              # %cond.end184
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB49_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_46
.LBB49_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_47
.LBB49_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_47:                              # %cond.end229
	jmp	.LBB49_49
.LBB49_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_49
.LBB49_49:                              # %cond.end232
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB49_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_53
.LBB49_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_54
.LBB49_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_54:                              # %cond.end277
	jmp	.LBB49_56
.LBB49_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_56
.LBB49_56:                              # %cond.end280
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB49_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_60
.LBB49_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_61
.LBB49_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_61:                              # %cond.end325
	jmp	.LBB49_63
.LBB49_62:                              # %cond.false327
	movswl	-52(%rbp), %eax
.LBB49_63:                              # %cond.end329
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB49_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_67
.LBB49_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_68
.LBB49_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_68:                              # %cond.end374
	jmp	.LBB49_70
.LBB49_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_70
.LBB49_70:                              # %cond.end377
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB49_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_74
.LBB49_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_75
.LBB49_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_75:                              # %cond.end422
	jmp	.LBB49_77
.LBB49_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_77
.LBB49_77:                              # %cond.end425
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB49_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_81
.LBB49_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_82
.LBB49_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_82:                              # %cond.end470
	jmp	.LBB49_84
.LBB49_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_84
.LBB49_84:                              # %cond.end473
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB49_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_88
.LBB49_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB49_89
.LBB49_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB49_89:                              # %cond.end518
	jmp	.LBB49_91
.LBB49_90:                              # %cond.false520
	movswl	-50(%rbp), %eax
.LBB49_91:                              # %cond.end522
	movw	%ax, -24(%rbp)
	jmp	.LBB49_149
.LBB49_92:                              # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB49_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_96
.LBB49_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_97
.LBB49_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_97:                              # %cond.end567
	jmp	.LBB49_99
.LBB49_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_99
.LBB49_99:                              # %cond.end570
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB49_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_103
.LBB49_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_104
.LBB49_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_104:                             # %cond.end615
	jmp	.LBB49_106
.LBB49_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_106
.LBB49_106:                             # %cond.end618
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB49_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_110
.LBB49_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_111
.LBB49_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_111:                             # %cond.end663
	jmp	.LBB49_113
.LBB49_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_113
.LBB49_113:                             # %cond.end666
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB49_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_117
.LBB49_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_118
.LBB49_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_118:                             # %cond.end711
	jmp	.LBB49_120
.LBB49_119:                             # %cond.false713
	movswl	-52(%rbp), %eax
.LBB49_120:                             # %cond.end715
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB49_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_124
.LBB49_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_125
.LBB49_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_125:                             # %cond.end760
	jmp	.LBB49_127
.LBB49_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_127
.LBB49_127:                             # %cond.end763
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB49_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_131
.LBB49_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_132
.LBB49_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_132:                             # %cond.end808
	jmp	.LBB49_134
.LBB49_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_134
.LBB49_134:                             # %cond.end811
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB49_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_138
.LBB49_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_139
.LBB49_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_139:                             # %cond.end856
	jmp	.LBB49_141
.LBB49_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB49_141
.LBB49_141:                             # %cond.end859
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB49_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_145
.LBB49_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB49_146
.LBB49_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB49_146:                             # %cond.end904
	jmp	.LBB49_148
.LBB49_147:                             # %cond.false906
	movswl	-50(%rbp), %eax
.LBB49_148:                             # %cond.end908
	movw	%ax, -24(%rbp)
.LBB49_149:                             # %if.end911
	jmp	.LBB49_150
.LBB49_150:                             # %if.end912
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_156
# %bb.151:                              # %land.lhs.true916
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_156
# %bb.152:                              # %cond.true920
	movswl	-26(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_154
# %bb.153:                              # %cond.true925
	movswl	-26(%rbp), %eax
	jmp	.LBB49_155
.LBB49_154:                             # %cond.false927
	movswl	-28(%rbp), %eax
.LBB49_155:                             # %cond.end929
	jmp	.LBB49_160
.LBB49_156:                             # %cond.false931
	movswl	-26(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_158
# %bb.157:                              # %cond.true936
	movswl	-26(%rbp), %eax
	jmp	.LBB49_159
.LBB49_158:                             # %cond.false938
	movswl	-28(%rbp), %eax
.LBB49_159:                             # %cond.end940
.LBB49_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_166
# %bb.161:                              # %land.lhs.true948
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB49_165
.LBB49_164:                             # %cond.false959
	movswl	-22(%rbp), %eax
.LBB49_165:                             # %cond.end961
	jmp	.LBB49_170
.LBB49_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB49_169
.LBB49_168:                             # %cond.false970
	movswl	-22(%rbp), %eax
.LBB49_169:                             # %cond.end972
.LBB49_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_176
# %bb.171:                              # %land.lhs.true980
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_176
# %bb.172:                              # %cond.true984
	movswl	-32(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_174
# %bb.173:                              # %cond.true989
	movswl	-32(%rbp), %eax
	jmp	.LBB49_175
.LBB49_174:                             # %cond.false991
	movswl	-30(%rbp), %eax
.LBB49_175:                             # %cond.end993
	jmp	.LBB49_180
.LBB49_176:                             # %cond.false995
	movswl	-32(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_178
# %bb.177:                              # %cond.true1000
	movswl	-32(%rbp), %eax
	jmp	.LBB49_179
.LBB49_178:                             # %cond.false1002
	movswl	-30(%rbp), %eax
.LBB49_179:                             # %cond.end1004
.LBB49_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB49_185
.LBB49_184:                             # %cond.false1023
	movswl	-24(%rbp), %eax
.LBB49_185:                             # %cond.end1025
	jmp	.LBB49_190
.LBB49_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB49_189
.LBB49_188:                             # %cond.false1034
	movswl	-24(%rbp), %eax
.LBB49_189:                             # %cond.end1036
.LBB49_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_192
# %bb.191:                              # %if.then1044
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB49_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_194
# %bb.193:                              # %if.then1051
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB49_194:                             # %if.end1055
	movl	$0, -8(%rbp)
.LBB49_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB49_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB49_197:                             # %for.cond1061
                                        #   Parent Loop BB49_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB49_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB49_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB49_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB49_203
.LBB49_202:                             # %if.else1102
                                        #   in Loop: Header=BB49_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB49_203:                             # %if.end1128
                                        #   in Loop: Header=BB49_197 Depth=2
	jmp	.LBB49_205
.LBB49_204:                             # %if.else1129
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB49_205:                             # %if.end1151
                                        #   in Loop: Header=BB49_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB49_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB49_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB49_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB49_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB49_210
.LBB49_209:                             # %if.else1187
                                        #   in Loop: Header=BB49_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB49_210:                             # %if.end1213
                                        #   in Loop: Header=BB49_197 Depth=2
	jmp	.LBB49_212
.LBB49_211:                             # %if.else1214
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB49_212:                             # %if.end1236
                                        #   in Loop: Header=BB49_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB49_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB49_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB49_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB49_215:                             # %if.end1255
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB49_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB49_221
.LBB49_217:                             # %if.else1269
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB49_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB49_220
.LBB49_219:                             # %if.else1283
                                        #   in Loop: Header=BB49_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB49_220:                             # %if.end1288
                                        #   in Loop: Header=BB49_197 Depth=2
	jmp	.LBB49_221
.LBB49_221:                             # %if.end1289
                                        #   in Loop: Header=BB49_197 Depth=2
	jmp	.LBB49_222
.LBB49_222:                             # %for.inc
                                        #   in Loop: Header=BB49_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_197
.LBB49_223:                             # %for.end
                                        #   in Loop: Header=BB49_195 Depth=1
	jmp	.LBB49_224
.LBB49_224:                             # %for.inc1290
                                        #   in Loop: Header=BB49_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_195
.LBB49_225:                             # %for.end1292
	jmp	.LBB49_259
.LBB49_226:                             # %if.else1293
	movl	$0, -8(%rbp)
.LBB49_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_229 Depth 2
                                        #       Child Loop BB49_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB49_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB49_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB49_229:                             # %for.cond1304
                                        #   Parent Loop BB49_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB49_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB49_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB49_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB49_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB49_234
.LBB49_233:                             # %cond.false1319
                                        #   in Loop: Header=BB49_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB49_234
.LBB49_234:                             # %cond.end1320
                                        #   in Loop: Header=BB49_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-200(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-200(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB49_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB49_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB49_254
.LBB49_236:                             # %if.else1393
                                        #   in Loop: Header=BB49_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB49_237:                             # %for.cond1394
                                        #   Parent Loop BB49_227 Depth=1
                                        #     Parent Loop BB49_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB49_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB49_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB49_240
.LBB49_239:                             # %cond.false1402
                                        #   in Loop: Header=BB49_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB49_240:                             # %cond.end1406
                                        #   in Loop: Header=BB49_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB49_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB49_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB49_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB49_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB49_247
.LBB49_243:                             # %if.else1425
                                        #   in Loop: Header=BB49_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB49_237 Depth=3
	jmp	.LBB49_245
.LBB49_245:                             # %for.inc1427
                                        #   in Loop: Header=BB49_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB49_237
.LBB49_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB49_229 Depth=2
	jmp	.LBB49_247
.LBB49_247:                             # %for.end1429
                                        #   in Loop: Header=BB49_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB49_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB49_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB49_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB49_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB49_251
.LBB49_250:                             # %if.else1487
                                        #   in Loop: Header=BB49_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB49_251:                             # %if.end1571
                                        #   in Loop: Header=BB49_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB49_253
.LBB49_252:                             # %if.else1587
                                        #   in Loop: Header=BB49_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB49_253:                             # %if.end1602
                                        #   in Loop: Header=BB49_229 Depth=2
	jmp	.LBB49_254
.LBB49_254:                             # %if.end1603
                                        #   in Loop: Header=BB49_229 Depth=2
	jmp	.LBB49_255
.LBB49_255:                             # %for.inc1604
                                        #   in Loop: Header=BB49_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_229
.LBB49_256:                             # %for.end1606
                                        #   in Loop: Header=BB49_227 Depth=1
	jmp	.LBB49_257
.LBB49_257:                             # %for.inc1607
                                        #   in Loop: Header=BB49_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_227
.LBB49_258:                             # %for.end1609
	jmp	.LBB49_259
.LBB49_259:                             # %if.end1610
	cmpl	$2040618079, -228(%rbp) # imm = 0x79A15C5F
	jne	.LBB49_261
.LBB49_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_260
.Lfunc_end49:
	.size	Get_Direct_Motion_Vectors.24, .Lfunc_end49-Get_Direct_Motion_Vectors.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.25
.LCPI50_0:
	.quad	4602678819172646912     # double 0.5
.LCPI50_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.25
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.25,@function
FullPelBlockMotionSearch.25:            # @FullPelBlockMotionSearch.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$2016213136, -124(%rbp) # imm = 0x782CF890
	movq	%rdi, -176(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -76(%rbp)
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB50_4
.LBB50_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB50_4
.LBB50_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI50_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -32(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -132(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -116(%rbp)
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-76(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-76(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -136(%rbp)
	movl	-92(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -144(%rbp)
	movl	-84(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movl	-92(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	movl	-84(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	cmpl	$1, -76(%rbp)
	jne	.LBB50_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB50_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB50_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB50_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB50_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB50_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB50_14
.LBB50_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB50_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB50_13:                              # %land.end63
.LBB50_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB50_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB50_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB50_18
.LBB50_17:                              # %if.else
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB50_18:                              # %if.end
	movl	-88(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB50_23
# %bb.19:                               # %land.lhs.true81
	movl	-88(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_23
# %bb.20:                               # %land.lhs.true86
	movl	-60(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB50_23
# %bb.21:                               # %land.lhs.true89
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB50_24
.LBB50_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB50_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB50_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_33 Depth 2
                                        #       Child Loop BB50_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB50_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-88(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	subl	-144(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-64(%rbp), %esi
	shll	$2, %esi
	subl	-128(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB50_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-68(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jne	.LBB50_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-64(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jne	.LBB50_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB50_30:                              # %if.end128
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB50_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB50_25 Depth=1
	jmp	.LBB50_46
.LBB50_32:                              # %if.end132
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	$0, -28(%rbp)
.LBB50_33:                              # %for.cond133
                                        #   Parent Loop BB50_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_35 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB50_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB50_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-80(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-64(%rbp), %edx
	addl	-28(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-132(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-176(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -72(%rbp)
.LBB50_35:                              # %for.cond140
                                        #   Parent Loop BB50_25 Depth=1
                                        #     Parent Loop BB50_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-72(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB50_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB50_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB50_35 Depth=3
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB50_35
.LBB50_38:                              # %for.end
                                        #   in Loop: Header=BB50_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB50_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB50_25 Depth=1
	jmp	.LBB50_43
.LBB50_40:                              # %if.end178
                                        #   in Loop: Header=BB50_33 Depth=2
	jmp	.LBB50_41
.LBB50_41:                              # %for.inc179
                                        #   in Loop: Header=BB50_33 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_33
.LBB50_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB50_25 Depth=1
	jmp	.LBB50_43
.LBB50_43:                              # %for.end181
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB50_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB50_45:                              # %if.end185
                                        #   in Loop: Header=BB50_25 Depth=1
	jmp	.LBB50_46
.LBB50_46:                              # %for.inc186
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_25
.LBB50_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB50_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB50_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$2016213136, -124(%rbp) # imm = 0x782CF890
	jne	.LBB50_51
.LBB50_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_50
.Lfunc_end50:
	.size	FullPelBlockMotionSearch.25, .Lfunc_end50-FullPelBlockMotionSearch.25
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.26 # -- Begin function Get_Direct_Motion_Vectors.26
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.26,@function
Get_Direct_Motion_Vectors.26:           # @Get_Direct_Motion_Vectors.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$534105650, -228(%rbp)  # imm = 0x1FD5CE32
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB51_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB51_5
.LBB51_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB51_5:                               # %if.end
	jmp	.LBB51_7
.LBB51_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB51_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB51_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB51_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB51_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_12
.LBB51_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_12
.LBB51_12:                              # %cond.end
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB51_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_15
.LBB51_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_15
.LBB51_15:                              # %cond.end38
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB51_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_18
.LBB51_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_18
.LBB51_18:                              # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB51_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_21
.LBB51_20:                              # %cond.false69
	movswl	-50(%rbp), %eax
.LBB51_21:                              # %cond.end71
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB51_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_24
.LBB51_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_24
.LBB51_24:                              # %cond.end87
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB51_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_27
.LBB51_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_27
.LBB51_27:                              # %cond.end103
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB51_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_30
.LBB51_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_30
.LBB51_30:                              # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB51_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_33
.LBB51_32:                              # %cond.false134
	movswl	-52(%rbp), %eax
.LBB51_33:                              # %cond.end136
	movw	%ax, -22(%rbp)
	jmp	.LBB51_150
.LBB51_34:                              # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB51_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_39
.LBB51_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_40
.LBB51_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_40:                              # %cond.end181
	jmp	.LBB51_42
.LBB51_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_42
.LBB51_42:                              # %cond.end184
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB51_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_46
.LBB51_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_47
.LBB51_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_47:                              # %cond.end229
	jmp	.LBB51_49
.LBB51_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_49
.LBB51_49:                              # %cond.end232
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB51_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_53
.LBB51_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_54
.LBB51_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_54:                              # %cond.end277
	jmp	.LBB51_56
.LBB51_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_56
.LBB51_56:                              # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB51_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_60
.LBB51_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_61
.LBB51_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_61:                              # %cond.end325
	jmp	.LBB51_63
.LBB51_62:                              # %cond.false327
	movswl	-50(%rbp), %eax
.LBB51_63:                              # %cond.end329
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB51_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_67
.LBB51_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_68
.LBB51_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_68:                              # %cond.end374
	jmp	.LBB51_70
.LBB51_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_70
.LBB51_70:                              # %cond.end377
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB51_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_74
.LBB51_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_75
.LBB51_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_75:                              # %cond.end422
	jmp	.LBB51_77
.LBB51_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_77
.LBB51_77:                              # %cond.end425
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB51_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_81
.LBB51_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_82
.LBB51_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_82:                              # %cond.end470
	jmp	.LBB51_84
.LBB51_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_84
.LBB51_84:                              # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB51_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_88
.LBB51_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB51_89
.LBB51_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB51_89:                              # %cond.end518
	jmp	.LBB51_91
.LBB51_90:                              # %cond.false520
	movswl	-52(%rbp), %eax
.LBB51_91:                              # %cond.end522
	movw	%ax, -22(%rbp)
	jmp	.LBB51_149
.LBB51_92:                              # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB51_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_96
.LBB51_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_97
.LBB51_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_97:                              # %cond.end567
	jmp	.LBB51_99
.LBB51_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_99
.LBB51_99:                              # %cond.end570
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB51_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_103
.LBB51_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_104
.LBB51_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_104:                             # %cond.end615
	jmp	.LBB51_106
.LBB51_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_106
.LBB51_106:                             # %cond.end618
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB51_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_110
.LBB51_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_111
.LBB51_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_111:                             # %cond.end663
	jmp	.LBB51_113
.LBB51_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_113
.LBB51_113:                             # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB51_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_117
.LBB51_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_118
.LBB51_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_118:                             # %cond.end711
	jmp	.LBB51_120
.LBB51_119:                             # %cond.false713
	movswl	-50(%rbp), %eax
.LBB51_120:                             # %cond.end715
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB51_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_124
.LBB51_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_125
.LBB51_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_125:                             # %cond.end760
	jmp	.LBB51_127
.LBB51_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_127
.LBB51_127:                             # %cond.end763
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB51_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_131
.LBB51_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_132
.LBB51_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_132:                             # %cond.end808
	jmp	.LBB51_134
.LBB51_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_134
.LBB51_134:                             # %cond.end811
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB51_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_138
.LBB51_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_139
.LBB51_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_139:                             # %cond.end856
	jmp	.LBB51_141
.LBB51_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB51_141
.LBB51_141:                             # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB51_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_145
.LBB51_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB51_146
.LBB51_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB51_146:                             # %cond.end904
	jmp	.LBB51_148
.LBB51_147:                             # %cond.false906
	movswl	-52(%rbp), %eax
.LBB51_148:                             # %cond.end908
	movw	%ax, -22(%rbp)
.LBB51_149:                             # %if.end911
	jmp	.LBB51_150
.LBB51_150:                             # %if.end912
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_156
# %bb.151:                              # %land.lhs.true916
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_156
# %bb.152:                              # %cond.true920
	movswl	-32(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_154
# %bb.153:                              # %cond.true925
	movswl	-32(%rbp), %eax
	jmp	.LBB51_155
.LBB51_154:                             # %cond.false927
	movswl	-26(%rbp), %eax
.LBB51_155:                             # %cond.end929
	jmp	.LBB51_160
.LBB51_156:                             # %cond.false931
	movswl	-32(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB51_158
# %bb.157:                              # %cond.true936
	movswl	-32(%rbp), %eax
	jmp	.LBB51_159
.LBB51_158:                             # %cond.false938
	movswl	-26(%rbp), %eax
.LBB51_159:                             # %cond.end940
.LBB51_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_166
# %bb.161:                              # %land.lhs.true948
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB51_165
.LBB51_164:                             # %cond.false959
	movswl	-24(%rbp), %eax
.LBB51_165:                             # %cond.end961
	jmp	.LBB51_170
.LBB51_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB51_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB51_169
.LBB51_168:                             # %cond.false970
	movswl	-24(%rbp), %eax
.LBB51_169:                             # %cond.end972
.LBB51_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_176
# %bb.171:                              # %land.lhs.true980
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_176
# %bb.172:                              # %cond.true984
	movswl	-28(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_174
# %bb.173:                              # %cond.true989
	movswl	-28(%rbp), %eax
	jmp	.LBB51_175
.LBB51_174:                             # %cond.false991
	movswl	-30(%rbp), %eax
.LBB51_175:                             # %cond.end993
	jmp	.LBB51_180
.LBB51_176:                             # %cond.false995
	movswl	-28(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB51_178
# %bb.177:                              # %cond.true1000
	movswl	-28(%rbp), %eax
	jmp	.LBB51_179
.LBB51_178:                             # %cond.false1002
	movswl	-30(%rbp), %eax
.LBB51_179:                             # %cond.end1004
.LBB51_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB51_185
.LBB51_184:                             # %cond.false1023
	movswl	-22(%rbp), %eax
.LBB51_185:                             # %cond.end1025
	jmp	.LBB51_190
.LBB51_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB51_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB51_189
.LBB51_188:                             # %cond.false1034
	movswl	-22(%rbp), %eax
.LBB51_189:                             # %cond.end1036
.LBB51_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB51_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB51_194:                             # %if.end1055
	movl	$0, -4(%rbp)
.LBB51_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB51_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB51_197:                             # %for.cond1061
                                        #   Parent Loop BB51_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB51_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB51_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB51_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB51_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB51_203
.LBB51_202:                             # %if.else1102
                                        #   in Loop: Header=BB51_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB51_203:                             # %if.end1128
                                        #   in Loop: Header=BB51_197 Depth=2
	jmp	.LBB51_205
.LBB51_204:                             # %if.else1129
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB51_205:                             # %if.end1151
                                        #   in Loop: Header=BB51_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB51_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB51_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB51_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB51_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB51_210
.LBB51_209:                             # %if.else1187
                                        #   in Loop: Header=BB51_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB51_210:                             # %if.end1213
                                        #   in Loop: Header=BB51_197 Depth=2
	jmp	.LBB51_212
.LBB51_211:                             # %if.else1214
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB51_212:                             # %if.end1236
                                        #   in Loop: Header=BB51_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB51_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB51_215:                             # %if.end1255
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB51_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB51_221
.LBB51_217:                             # %if.else1269
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB51_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB51_220
.LBB51_219:                             # %if.else1283
                                        #   in Loop: Header=BB51_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB51_220:                             # %if.end1288
                                        #   in Loop: Header=BB51_197 Depth=2
	jmp	.LBB51_221
.LBB51_221:                             # %if.end1289
                                        #   in Loop: Header=BB51_197 Depth=2
	jmp	.LBB51_222
.LBB51_222:                             # %for.inc
                                        #   in Loop: Header=BB51_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_197
.LBB51_223:                             # %for.end
                                        #   in Loop: Header=BB51_195 Depth=1
	jmp	.LBB51_224
.LBB51_224:                             # %for.inc1290
                                        #   in Loop: Header=BB51_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_195
.LBB51_225:                             # %for.end1292
	jmp	.LBB51_259
.LBB51_226:                             # %if.else1293
	movl	$0, -4(%rbp)
.LBB51_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_229 Depth 2
                                        #       Child Loop BB51_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB51_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB51_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB51_229:                             # %for.cond1304
                                        #   Parent Loop BB51_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB51_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB51_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB51_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB51_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB51_234
.LBB51_233:                             # %cond.false1319
                                        #   in Loop: Header=BB51_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB51_234
.LBB51_234:                             # %cond.end1320
                                        #   in Loop: Header=BB51_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -40(%rbp)
	movq	-200(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-200(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB51_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB51_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB51_254
.LBB51_236:                             # %if.else1393
                                        #   in Loop: Header=BB51_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB51_237:                             # %for.cond1394
                                        #   Parent Loop BB51_227 Depth=1
                                        #     Parent Loop BB51_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB51_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB51_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB51_240
.LBB51_239:                             # %cond.false1402
                                        #   in Loop: Header=BB51_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB51_240:                             # %cond.end1406
                                        #   in Loop: Header=BB51_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB51_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB51_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB51_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB51_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB51_247
.LBB51_243:                             # %if.else1425
                                        #   in Loop: Header=BB51_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB51_237 Depth=3
	jmp	.LBB51_245
.LBB51_245:                             # %for.inc1427
                                        #   in Loop: Header=BB51_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB51_237
.LBB51_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB51_229 Depth=2
	jmp	.LBB51_247
.LBB51_247:                             # %for.end1429
                                        #   in Loop: Header=BB51_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB51_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB51_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB51_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB51_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB51_251
.LBB51_250:                             # %if.else1487
                                        #   in Loop: Header=BB51_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB51_251:                             # %if.end1571
                                        #   in Loop: Header=BB51_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB51_253
.LBB51_252:                             # %if.else1587
                                        #   in Loop: Header=BB51_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB51_253:                             # %if.end1602
                                        #   in Loop: Header=BB51_229 Depth=2
	jmp	.LBB51_254
.LBB51_254:                             # %if.end1603
                                        #   in Loop: Header=BB51_229 Depth=2
	jmp	.LBB51_255
.LBB51_255:                             # %for.inc1604
                                        #   in Loop: Header=BB51_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_229
.LBB51_256:                             # %for.end1606
                                        #   in Loop: Header=BB51_227 Depth=1
	jmp	.LBB51_257
.LBB51_257:                             # %for.inc1607
                                        #   in Loop: Header=BB51_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_227
.LBB51_258:                             # %for.end1609
	jmp	.LBB51_259
.LBB51_259:                             # %if.end1610
	cmpl	$534105650, -228(%rbp)  # imm = 0x1FD5CE32
	jne	.LBB51_261
.LBB51_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_260
.Lfunc_end51:
	.size	Get_Direct_Motion_Vectors.26, .Lfunc_end51-Get_Direct_Motion_Vectors.26
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.27 # -- Begin function PartitionMotionSearch.27
	.p2align	4, 0x90
	.type	PartitionMotionSearch.27,@function
PartitionMotionSearch.27:               # @PartitionMotionSearch.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1689603104, -64(%rbp)  # imm = 0x64B54C20
	movl	%edi, -8(%rbp)
	movl	%esi, -36(%rbp)
	vmovsd	%xmm0, -104(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB52_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB52_3
.LBB52_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB52_3
.LBB52_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -84(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB52_6
# %bb.5:                                # %if.then20
	movl	$4, -44(%rbp)
	jmp	.LBB52_7
.LBB52_6:                               # %if.else
	movl	$2, -44(%rbp)
.LBB52_7:                               # %if.end
	jmp	.LBB52_9
.LBB52_8:                               # %if.else21
	movl	$0, -44(%rbp)
.LBB52_9:                               # %if.end22
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB52_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_12 Depth 2
                                        #       Child Loop BB52_29 Depth 3
                                        #         Child Loop BB52_31 Depth 4
                                        #           Child Loop BB52_33 Depth 5
                                        #             Child Loop BB52_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB52_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB52_10 Depth=1
	movw	$0, -2(%rbp)
.LBB52_12:                              # %for.cond27
                                        #   Parent Loop BB52_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_29 Depth 3
                                        #         Child Loop BB52_31 Depth 4
                                        #           Child Loop BB52_33 Depth 5
                                        #             Child Loop BB52_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB52_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB52_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB52_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB52_28
.LBB52_15:                              # %if.else38
                                        #   in Loop: Header=BB52_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB52_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB52_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB52_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB52_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB52_19
.LBB52_18:                              # %cond.false49
                                        #   in Loop: Header=BB52_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB52_19
.LBB52_19:                              # %cond.end50
                                        #   in Loop: Header=BB52_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	jmp	.LBB52_27
.LBB52_20:                              # %if.else53
                                        #   in Loop: Header=BB52_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB52_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB52_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB52_23
.LBB52_22:                              # %cond.false60
                                        #   in Loop: Header=BB52_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB52_23
.LBB52_23:                              # %cond.end61
                                        #   in Loop: Header=BB52_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB52_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB52_12 Depth=2
	movl	$2, %edx
	jmp	.LBB52_26
.LBB52_25:                              # %cond.false67
                                        #   in Loop: Header=BB52_12 Depth=2
	movl	-8(%rbp), %edx
.LBB52_26:                              # %cond.end68
                                        #   in Loop: Header=BB52_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
.LBB52_27:                              # %if.end71
                                        #   in Loop: Header=BB52_12 Depth=2
	jmp	.LBB52_28
.LBB52_28:                              # %if.end72
                                        #   in Loop: Header=BB52_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -112(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB52_29:                              # %for.cond89
                                        #   Parent Loop BB52_10 Depth=1
                                        #     Parent Loop BB52_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_31 Depth 4
                                        #           Child Loop BB52_33 Depth 5
                                        #             Child Loop BB52_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-32(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-36(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB52_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB52_31:                              # %for.cond103
                                        #   Parent Loop BB52_10 Depth=1
                                        #     Parent Loop BB52_12 Depth=2
                                        #       Parent Loop BB52_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB52_33 Depth 5
                                        #             Child Loop BB52_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-32(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-36(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-84(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB52_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-20(%rbp), %edx
	shll	$2, %edx
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-48(%rbp), %r9d
	vmovsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -24(%rbp)
.LBB52_33:                              # %for.cond123
                                        #   Parent Loop BB52_10 Depth=1
                                        #     Parent Loop BB52_12 Depth=2
                                        #       Parent Loop BB52_29 Depth=3
                                        #         Parent Loop BB52_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB52_35 Depth 6
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB52_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB52_33 Depth=5
	movl	$0, -28(%rbp)
.LBB52_35:                              # %for.cond127
                                        #   Parent Loop BB52_10 Depth=1
                                        #     Parent Loop BB52_12 Depth=2
                                        #       Parent Loop BB52_29 Depth=3
                                        #         Parent Loop BB52_31 Depth=4
                                        #           Parent Loop BB52_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-28(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB52_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB52_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-40(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-40(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-112(%rbp), %rcx
	movl	-40(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB52_35 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_35
.LBB52_38:                              # %for.end
                                        #   in Loop: Header=BB52_33 Depth=5
	jmp	.LBB52_39
.LBB52_39:                              # %for.inc174
                                        #   in Loop: Header=BB52_33 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_33
.LBB52_40:                              # %for.end176
                                        #   in Loop: Header=BB52_31 Depth=4
	jmp	.LBB52_41
.LBB52_41:                              # %for.inc177
                                        #   in Loop: Header=BB52_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_31
.LBB52_42:                              # %for.end179
                                        #   in Loop: Header=BB52_29 Depth=3
	jmp	.LBB52_43
.LBB52_43:                              # %for.inc180
                                        #   in Loop: Header=BB52_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_29
.LBB52_44:                              # %for.end182
                                        #   in Loop: Header=BB52_12 Depth=2
	jmp	.LBB52_45
.LBB52_45:                              # %for.inc183
                                        #   in Loop: Header=BB52_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB52_12
.LBB52_46:                              # %for.end185
                                        #   in Loop: Header=BB52_10 Depth=1
	jmp	.LBB52_47
.LBB52_47:                              # %for.inc186
                                        #   in Loop: Header=BB52_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_10
.LBB52_48:                              # %for.end188
	cmpl	$1689603104, -64(%rbp)  # imm = 0x64B54C20
	jne	.LBB52_50
.LBB52_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_49
.Lfunc_end52:
	.size	PartitionMotionSearch.27, .Lfunc_end52-PartitionMotionSearch.27
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.28 # -- Begin function SetupFastFullPelSearch.28
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.28,@function
SetupFastFullPelSearch.28:              # @SetupFastFullPelSearch.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$549253370, -148(%rbp)  # imm = 0x20BCF0FA
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB53_4
.LBB53_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB53_4
.LBB53_4:                               # %cond.end
	movl	%ecx, -156(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB53_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB53_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB53_10
.LBB53_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB53_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB53_9:                               # %land.end
.LBB53_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-8(%rbp), %eax
	addl	-156(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -152(%rbp)
	je	.LBB53_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB53_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB53_14
.LBB53_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB53_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB53_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB53_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB53_18
.LBB53_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB53_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB53_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB53_24
.LBB53_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB53_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB53_23
.LBB53_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB53_23:                              # %cond.end82
.LBB53_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB53_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB53_27
.LBB53_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB53_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB53_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB53_33
.LBB53_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB53_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB53_32
.LBB53_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB53_32:                              # %cond.end122
.LBB53_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB53_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB53_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB53_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -68(%rbp)
.LBB53_37:                              # %for.cond155
                                        #   Parent Loop BB53_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB53_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB53_37 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB53_37
.LBB53_40:                              # %for.end
                                        #   in Loop: Header=BB53_35 Depth=1
	jmp	.LBB53_41
.LBB53_41:                              # %for.inc165
                                        #   in Loop: Header=BB53_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB53_35
.LBB53_42:                              # %for.end167
	movl	-76(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB53_47
# %bb.43:                               # %land.lhs.true170
	movl	-76(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB53_47
# %bb.44:                               # %land.lhs.true174
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB53_47
# %bb.45:                               # %land.lhs.true177
	movl	-80(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB53_47
# %bb.46:                               # %if.then181
	movl	$0, -116(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB53_48
.LBB53_47:                              # %if.else182
	movl	$1, -116(%rbp)
.LBB53_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB53_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB53_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB53_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB53_50 Depth=1
	movl	-136(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB53_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB53_50 Depth=1
	movl	-144(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB53_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_57
.LBB53_54:                              # %if.end209
                                        #   in Loop: Header=BB53_50 Depth=1
	jmp	.LBB53_55
.LBB53_55:                              # %for.inc210
                                        #   in Loop: Header=BB53_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_50
.LBB53_56:                              # %for.end212.loopexit
	jmp	.LBB53_57
.LBB53_57:                              # %for.end212
	jmp	.LBB53_58
.LBB53_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB53_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_69 Depth 2
                                        #       Child Loop BB53_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB53_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB53_59 Depth=1
	movl	-80(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB53_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB53_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB53_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB53_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB53_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB53_59 Depth=1
	cmpl	$0, -84(%rbp)
	jl	.LBB53_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB53_59 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB53_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB53_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB53_67
.LBB53_66:                              # %if.else238
                                        #   in Loop: Header=BB53_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB53_67:                              # %if.end239
                                        #   in Loop: Header=BB53_59 Depth=1
	jmp	.LBB53_68
.LBB53_68:                              # %if.end240
                                        #   in Loop: Header=BB53_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -88(%rbp)
.LBB53_69:                              # %for.cond242
                                        #   Parent Loop BB53_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_71 Depth 3
	cmpl	$4, -88(%rbp)
	jge	.LBB53_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB53_69 Depth=2
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -60(%rbp)
.LBB53_71:                              # %for.cond246
                                        #   Parent Loop BB53_59 Depth=1
                                        #     Parent Loop BB53_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB53_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB53_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-84(%rbp), %edx
	movl	-140(%rbp), %ecx
	movl	-132(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB53_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB53_71
.LBB53_74:                              # %for.end381
                                        #   in Loop: Header=BB53_69 Depth=2
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB53_69 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB53_69
.LBB53_76:                              # %for.end404
                                        #   in Loop: Header=BB53_59 Depth=1
	jmp	.LBB53_77
.LBB53_77:                              # %for.inc405
                                        #   in Loop: Header=BB53_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_59
.LBB53_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-92(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$549253370, -148(%rbp)  # imm = 0x20BCF0FA
	jne	.LBB53_80
.LBB53_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_79
.Lfunc_end53:
	.size	SetupFastFullPelSearch.28, .Lfunc_end53-SetupFastFullPelSearch.28
	.cfi_endproc
                                        # -- End function
	.globl	sign.29                 # -- Begin function sign.29
	.p2align	4, 0x90
	.type	sign.29,@function
sign.29:                                # @sign.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2004603473, -28(%rbp)  # imm = 0x777BD251
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB54_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB54_3
.LBB54_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB54_3:                               # %cond.end
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB54_5
# %bb.4:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_6
.LBB54_5:                               # %if.else
	xorl	%eax, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB54_6:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$2004603473, -28(%rbp)  # imm = 0x777BD251
	jne	.LBB54_8
.LBB54_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_7
.Lfunc_end54:
	.size	sign.29, .Lfunc_end54-sign.29
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.30 # -- Begin function SetupFastFullPelSearch.30
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.30,@function
SetupFastFullPelSearch.30:              # @SetupFastFullPelSearch.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$711240833, -132(%rbp)  # imm = 0x2A64AC81
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB55_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB55_4
.LBB55_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB55_4
.LBB55_4:                               # %cond.end
	movl	%ecx, -152(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB55_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB55_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB55_10
.LBB55_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB55_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB55_9:                               # %land.end
.LBB55_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	movl	-8(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB55_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB55_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB55_14
.LBB55_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB55_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -144(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB55_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB55_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB55_18
.LBB55_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB55_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB55_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB55_24
.LBB55_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB55_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB55_23
.LBB55_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB55_23:                              # %cond.end82
.LBB55_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB55_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB55_27
.LBB55_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB55_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB55_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB55_33
.LBB55_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB55_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB55_32
.LBB55_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB55_32:                              # %cond.end122
.LBB55_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB55_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB55_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -72(%rbp)
.LBB55_37:                              # %for.cond155
                                        #   Parent Loop BB55_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB55_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB55_37 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB55_37
.LBB55_40:                              # %for.end
                                        #   in Loop: Header=BB55_35 Depth=1
	jmp	.LBB55_41
.LBB55_41:                              # %for.inc165
                                        #   in Loop: Header=BB55_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB55_35
.LBB55_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB55_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB55_47
# %bb.44:                               # %land.lhs.true174
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB55_47
# %bb.45:                               # %land.lhs.true177
	movl	-68(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB55_47
# %bb.46:                               # %if.then181
	movl	$0, -108(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB55_48
.LBB55_47:                              # %if.else182
	movl	$1, -108(%rbp)
.LBB55_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB55_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -28(%rbp)
.LBB55_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB55_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB55_50 Depth=1
	movl	-140(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB55_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB55_50 Depth=1
	movl	-156(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB55_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB55_57
.LBB55_54:                              # %if.end209
                                        #   in Loop: Header=BB55_50 Depth=1
	jmp	.LBB55_55
.LBB55_55:                              # %for.inc210
                                        #   in Loop: Header=BB55_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB55_50
.LBB55_56:                              # %for.end212.loopexit
	jmp	.LBB55_57
.LBB55_57:                              # %for.end212
	jmp	.LBB55_58
.LBB55_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB55_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_69 Depth 2
                                        #       Child Loop BB55_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB55_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB55_59 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB55_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB55_59 Depth=1
	cmpl	$0, -76(%rbp)
	jl	.LBB55_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB55_59 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB55_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB55_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB55_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB55_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB55_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB55_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB55_67
.LBB55_66:                              # %if.else238
                                        #   in Loop: Header=BB55_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB55_67:                              # %if.end239
                                        #   in Loop: Header=BB55_59 Depth=1
	jmp	.LBB55_68
.LBB55_68:                              # %if.end240
                                        #   in Loop: Header=BB55_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -84(%rbp)
.LBB55_69:                              # %for.cond242
                                        #   Parent Loop BB55_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_71 Depth 3
	cmpl	$4, -84(%rbp)
	jge	.LBB55_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB55_69 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -60(%rbp)
.LBB55_71:                              # %for.cond246
                                        #   Parent Loop BB55_59 Depth=1
                                        #     Parent Loop BB55_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB55_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB55_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-76(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -76(%rbp)
	movl	-88(%rbp), %edx
	movl	-144(%rbp), %ecx
	movl	-136(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB55_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB55_71
.LBB55_74:                              # %for.end381
                                        #   in Loop: Header=BB55_69 Depth=2
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB55_69 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB55_69
.LBB55_76:                              # %for.end404
                                        #   in Loop: Header=BB55_59 Depth=1
	jmp	.LBB55_77
.LBB55_77:                              # %for.inc405
                                        #   in Loop: Header=BB55_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB55_59
.LBB55_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-92(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$711240833, -132(%rbp)  # imm = 0x2A64AC81
	jne	.LBB55_80
.LBB55_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_79
.Lfunc_end55:
	.size	SetupFastFullPelSearch.30, .Lfunc_end55-SetupFastFullPelSearch.30
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.31    # -- Begin function Get_Direct_CostMB.31
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.31,@function
Get_Direct_CostMB.31:                   # @Get_Direct_CostMB.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$849920601, -28(%rbp)   # imm = 0x32A8C259
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB56_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB56_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB56_5
.LBB56_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_18
.LBB56_5:                               # %if.end
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_6
.LBB56_6:                               # %for.inc
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_1
.LBB56_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB56_9
	jmp	.LBB56_8
.LBB56_8:                               # %for.end
	subl	$2, %eax
	je	.LBB56_15
	jmp	.LBB56_16
.LBB56_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB56_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB56_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB56_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB56_14
.LBB56_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB56_14:                              # %if.end9
	jmp	.LBB56_17
.LBB56_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_17
.LBB56_16:                              # %sw.default
	jmp	.LBB56_17
.LBB56_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$849920601, -28(%rbp)   # imm = 0x32A8C259
	jne	.LBB56_20
.LBB56_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_19
.Lfunc_end56:
	.size	Get_Direct_CostMB.31, .Lfunc_end56-Get_Direct_CostMB.31
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.32 # -- Begin function SetMotionVectorPredictor.32
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.32,@function
SetMotionVectorPredictor.32:            # @SetMotionVectorPredictor.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$179341464, -180(%rbp)  # imm = 0xAB08898
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB57_2:                               # %if.end
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB57_19
# %bb.3:                                # %if.then2
	cmpl	$8, -164(%rbp)
	jge	.LBB57_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB57_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB57_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB57_8
.LBB57_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB57_8:                               # %if.end10
	jmp	.LBB57_13
.LBB57_9:                               # %if.else11
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB57_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_12
.LBB57_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB57_12:                              # %if.end18
	jmp	.LBB57_13
.LBB57_13:                              # %if.end19
	jmp	.LBB57_18
.LBB57_14:                              # %if.else20
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB57_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB57_17
.LBB57_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB57_17:                              # %if.end28
	jmp	.LBB57_18
.LBB57_18:                              # %if.end29
	jmp	.LBB57_19
.LBB57_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB57_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB57_21:                              # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB57_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB57_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_25
.LBB57_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_25
.LBB57_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_28
.LBB57_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_28
.LBB57_28:                              # %cond.end56
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB57_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_31
.LBB57_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_31
.LBB57_31:                              # %cond.end71
	movl	%eax, -84(%rbp)
	jmp	.LBB57_72
.LBB57_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB57_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_37
.LBB57_36:                              # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB57_37:                              # %cond.end108
	jmp	.LBB57_39
.LBB57_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_39
.LBB57_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_43
.LBB57_42:                              # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB57_43:                              # %cond.end143
	jmp	.LBB57_45
.LBB57_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_45
.LBB57_45:                              # %cond.end146
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB57_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_49
.LBB57_48:                              # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB57_49:                              # %cond.end178
	jmp	.LBB57_51
.LBB57_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_51
.LBB57_51:                              # %cond.end181
	movl	%eax, -84(%rbp)
	jmp	.LBB57_71
.LBB57_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB57_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB57_56
.LBB57_55:                              # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB57_56:                              # %cond.end213
	jmp	.LBB57_58
.LBB57_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_58
.LBB57_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB57_62
.LBB57_61:                              # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB57_62:                              # %cond.end248
	jmp	.LBB57_64
.LBB57_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_64
.LBB57_64:                              # %cond.end251
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB57_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB57_68
.LBB57_67:                              # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB57_68:                              # %cond.end283
	jmp	.LBB57_70
.LBB57_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB57_70
.LBB57_70:                              # %cond.end286
	movl	%eax, -84(%rbp)
.LBB57_71:                              # %if.end288
	jmp	.LBB57_72
.LBB57_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_76
# %bb.73:                               # %land.lhs.true
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB57_76
# %bb.74:                               # %land.lhs.true296
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB57_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB57_86
.LBB57_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB57_80
# %bb.77:                               # %land.lhs.true305
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_80
# %bb.78:                               # %land.lhs.true309
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB57_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB57_85
.LBB57_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB57_84
# %bb.81:                               # %land.lhs.true318
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB57_84
# %bb.82:                               # %land.lhs.true322
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB57_84:                              # %if.end327
	jmp	.LBB57_85
.LBB57_85:                              # %if.end328
	jmp	.LBB57_86
.LBB57_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB57_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB57_96
# %bb.88:                               # %if.then335
	cmpl	$0, -164(%rbp)
	jne	.LBB57_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB57_91:                              # %if.end343
	jmp	.LBB57_95
.LBB57_92:                              # %if.else344
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB57_94:                              # %if.end349
	jmp	.LBB57_95
.LBB57_95:                              # %if.end350
	jmp	.LBB57_107
.LBB57_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB57_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB57_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB57_102
# %bb.99:                               # %if.then360
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB57_101:                             # %if.end365
	jmp	.LBB57_105
.LBB57_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB57_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB57_104:                             # %if.end371
	jmp	.LBB57_105
.LBB57_105:                             # %if.end372
	jmp	.LBB57_106
.LBB57_106:                             # %if.end373
	jmp	.LBB57_107
.LBB57_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB57_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB57_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB57_121
.LBB57_111:                             # %if.then381
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB57_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_114
.LBB57_113:                             # %cond.false396
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_114
.LBB57_114:                             # %cond.end397
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_117
.LBB57_116:                             # %cond.false413
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_117
.LBB57_117:                             # %cond.end414
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB57_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_120
.LBB57_119:                             # %cond.false430
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_120
.LBB57_120:                             # %cond.end431
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB57_161
.LBB57_121:                             # %if.else433
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB57_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_126
.LBB57_125:                             # %cond.false462
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB57_126:                             # %cond.end474
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_128
.LBB57_127:                             # %cond.false476
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_128
.LBB57_128:                             # %cond.end477
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_132
.LBB57_131:                             # %cond.false500
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB57_132:                             # %cond.end513
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_134
.LBB57_133:                             # %cond.false515
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_134
.LBB57_134:                             # %cond.end516
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB57_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB57_138
.LBB57_137:                             # %cond.false539
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB57_138:                             # %cond.end552
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_140
.LBB57_139:                             # %cond.false554
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_140
.LBB57_140:                             # %cond.end555
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB57_160
.LBB57_141:                             # %if.else557
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB57_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB57_145
.LBB57_144:                             # %cond.false580
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB57_145:                             # %cond.end592
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_147
.LBB57_146:                             # %cond.false594
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_147
.LBB57_147:                             # %cond.end595
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB57_151
.LBB57_150:                             # %cond.false619
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB57_151:                             # %cond.end631
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_153
.LBB57_152:                             # %cond.false633
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_153
.LBB57_153:                             # %cond.end634
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB57_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB57_157
.LBB57_156:                             # %cond.false658
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB57_157:                             # %cond.end670
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_159
.LBB57_158:                             # %cond.false672
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_159
.LBB57_159:                             # %cond.end673
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB57_160:                             # %if.end675
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_161
.LBB57_161:                             # %if.end676
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB57_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB57_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB57_166
.LBB57_165:                             # %cond.false696
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB57_166:                             # %cond.end708
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_168
.LBB57_167:                             # %cond.false710
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_168
.LBB57_168:                             # %cond.end711
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB57_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB57_172
.LBB57_171:                             # %cond.false729
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB57_172:                             # %cond.end741
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_174
.LBB57_173:                             # %cond.false743
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_174
.LBB57_174:                             # %cond.end744
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB57_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB57_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB57_178
.LBB57_177:                             # %cond.false762
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB57_178:                             # %cond.end774
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_180
.LBB57_179:                             # %cond.false776
                                        #   in Loop: Header=BB57_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_180
.LBB57_180:                             # %cond.end777
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB57_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB57_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB57_184
.LBB57_183:                             # %cond.false795
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB57_184:                             # %cond.end807
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_186
.LBB57_185:                             # %cond.false809
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-176(%rbp), %eax
.LBB57_186:                             # %cond.end810
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB57_187:                             # %if.end812
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB57_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	.LJTI57_0(,%rax,8), %rax
	jmpq	*%rax
.LBB57_189:                             # %sw.bb
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB57_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB57_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB57_193:                             # %if.end824
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_213
.LBB57_194:                             # %if.else825
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB57_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB57_197
.LBB57_196:                             # %cond.false831
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-20(%rbp), %edx
.LBB57_197:                             # %cond.end832
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB57_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB57_203
.LBB57_199:                             # %cond.false837
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB57_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB57_202
.LBB57_201:                             # %cond.false841
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB57_202:                             # %cond.end842
                                        #   in Loop: Header=BB57_108 Depth=1
.LBB57_203:                             # %cond.end844
                                        #   in Loop: Header=BB57_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB57_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB57_206
.LBB57_205:                             # %cond.false849
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-20(%rbp), %edx
.LBB57_206:                             # %cond.end850
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB57_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB57_212
.LBB57_208:                             # %cond.false855
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB57_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB57_211
.LBB57_210:                             # %cond.false859
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB57_211:                             # %cond.end860
                                        #   in Loop: Header=BB57_108 Depth=1
.LBB57_212:                             # %cond.end862
                                        #   in Loop: Header=BB57_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB57_213:                             # %if.end865
                                        #   in Loop: Header=BB57_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB57_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB57_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB57_222
.LBB57_217:                             # %if.else877
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB57_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB57_108 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB57_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB57_221
.LBB57_220:                             # %if.else886
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB57_221:                             # %if.end889
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_222
.LBB57_222:                             # %if.end890
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_223
.LBB57_223:                             # %if.end891
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_234
.LBB57_224:                             # %sw.bb892
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB57_226:                             # %if.end898
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_234
.LBB57_227:                             # %sw.bb899
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB57_229:                             # %if.end905
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_234
.LBB57_230:                             # %sw.bb906
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB57_232:                             # %if.end912
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_234
.LBB57_233:                             # %sw.default
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_234
.LBB57_234:                             # %sw.epilog
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_108
.LBB57_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB57_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB57_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB57_240
.LBB57_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB57_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB57_241:                             # %if.end929
	cmpl	$179341464, -180(%rbp)  # imm = 0xAB08898
	jne	.LBB57_243
.LBB57_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_242
.Lfunc_end57:
	.size	SetMotionVectorPredictor.32, .Lfunc_end57-SetMotionVectorPredictor.32
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI57_0:
	.quad	.LBB57_189
	.quad	.LBB57_224
	.quad	.LBB57_227
	.quad	.LBB57_230
                                        # -- End function
	.text
	.globl	BPredPartitionCost.33   # -- Begin function BPredPartitionCost.33
	.p2align	4, 0x90
	.type	BPredPartitionCost.33,@function
BPredPartitionCost.33:                  # @BPredPartitionCost.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$2036475941, -108(%rbp) # imm = 0x79622825
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -80(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB58_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB58_3
.LBB58_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB58_3
.LBB58_3:                               # %cond.end
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB58_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB58_6
.LBB58_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB58_6
.LBB58_6:                               # %cond.end17
	movl	%eax, -124(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB58_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB58_9
.LBB58_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB58_9
.LBB58_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -80(%rbp)
	je	.LBB58_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB58_12
.LBB58_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB58_12:                              # %cond.end41
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB58_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB58_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB58_15:                              # %for.cond56
                                        #   Parent Loop BB58_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB58_15 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB58_15 Depth=2
	movl	-128(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_15
.LBB58_18:                              # %for.end
                                        #   in Loop: Header=BB58_13 Depth=1
	jmp	.LBB58_19
.LBB58_19:                              # %for.inc167
                                        #   in Loop: Header=BB58_13 Depth=1
	movl	-116(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_13
.LBB58_20:                              # %for.end169
	movl	-100(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB58_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_23 Depth 2
                                        #       Child Loop BB58_25 Depth 3
                                        #         Child Loop BB58_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB58_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB58_23:                              # %for.cond188
                                        #   Parent Loop BB58_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_25 Depth 3
                                        #         Child Loop BB58_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB58_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	-64(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movw	-34(%rbp), %bx
	movl	-80(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB58_25:                              # %for.cond199
                                        #   Parent Loop BB58_21 Depth=1
                                        #     Parent Loop BB58_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB58_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB58_25 Depth=3
	movl	$0, -32(%rbp)
.LBB58_27:                              # %for.cond203
                                        #   Parent Loop BB58_21 Depth=1
                                        #     Parent Loop BB58_23 Depth=2
                                        #       Parent Loop BB58_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB58_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB58_27 Depth=4
	movq	imgY_org, %rax
	movl	-112(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB58_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB58_27
.LBB58_30:                              # %for.end232
                                        #   in Loop: Header=BB58_25 Depth=3
	jmp	.LBB58_31
.LBB58_31:                              # %for.inc233
                                        #   in Loop: Header=BB58_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_25
.LBB58_32:                              # %for.end235
                                        #   in Loop: Header=BB58_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB58_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB58_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB58_35
.LBB58_34:                              # %if.then
                                        #   in Loop: Header=BB58_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB58_35:                              # %if.end
                                        #   in Loop: Header=BB58_23 Depth=2
	jmp	.LBB58_36
.LBB58_36:                              # %for.inc240
                                        #   in Loop: Header=BB58_23 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_23
.LBB58_37:                              # %for.end243
                                        #   in Loop: Header=BB58_21 Depth=1
	jmp	.LBB58_38
.LBB58_38:                              # %for.inc244
                                        #   in Loop: Header=BB58_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_21
.LBB58_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB58_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB58_58
# %bb.41:                               # %if.then252
	movl	$0, -52(%rbp)
.LBB58_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_44 Depth 2
                                        #       Child Loop BB58_46 Depth 3
                                        #         Child Loop BB58_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB58_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB58_42 Depth=1
	movl	$0, -48(%rbp)
.LBB58_44:                              # %for.cond261
                                        #   Parent Loop BB58_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_46 Depth 3
                                        #         Child Loop BB58_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB58_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB58_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB58_46:                              # %for.cond269
                                        #   Parent Loop BB58_42 Depth=1
                                        #     Parent Loop BB58_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB58_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB58_46 Depth=3
	movl	$0, -28(%rbp)
.LBB58_48:                              # %for.cond273
                                        #   Parent Loop BB58_42 Depth=1
                                        #     Parent Loop BB58_44 Depth=2
                                        #       Parent Loop BB58_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB58_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB58_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB58_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_48
.LBB58_51:                              # %for.end288
                                        #   in Loop: Header=BB58_46 Depth=3
	jmp	.LBB58_52
.LBB58_52:                              # %for.inc289
                                        #   in Loop: Header=BB58_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_46
.LBB58_53:                              # %for.end291
                                        #   in Loop: Header=BB58_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB58_44 Depth=2
	movl	-104(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB58_44
.LBB58_55:                              # %for.end298
                                        #   in Loop: Header=BB58_42 Depth=1
	jmp	.LBB58_56
.LBB58_56:                              # %for.inc299
                                        #   in Loop: Header=BB58_42 Depth=1
	movl	-124(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB58_42
.LBB58_57:                              # %for.end301
	jmp	.LBB58_58
.LBB58_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$2036475941, -108(%rbp) # imm = 0x79622825
	jne	.LBB58_60
.LBB58_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_59
.Lfunc_end58:
	.size	BPredPartitionCost.33, .Lfunc_end58-BPredPartitionCost.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.34
.LCPI59_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI59_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.34
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.34,@function
Init_Motion_Search_Module.34:           # @Init_Motion_Search_Module.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$836117148, -56(%rbp)   # imm = 0x31D6229C
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB59_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB59_3
.LBB59_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB59_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB59_6
.LBB59_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB59_6:                               # %cond.end19
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB59_9
.LBB59_8:                               # %cond.false24
	movl	-40(%rbp), %eax
	addl	$1, %eax
.LBB59_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI59_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI59_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB59_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB59_11:                              # %if.end
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB59_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB59_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB59_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB59_15:                              # %if.end66
	movslq	-60(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB59_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB59_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB59_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB59_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB59_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB59_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB59_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_22:                              # %for.cond90
                                        #   Parent Loop BB59_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB59_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB59_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_22
.LBB59_25:                              # %for.end
                                        #   in Loop: Header=BB59_20 Depth=1
	jmp	.LBB59_26
.LBB59_26:                              # %for.inc98
                                        #   in Loop: Header=BB59_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_20
.LBB59_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB59_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB59_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB59_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_30:                              # %for.cond111
                                        #   Parent Loop BB59_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB59_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB59_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_30
.LBB59_33:                              # %for.end119
                                        #   in Loop: Header=BB59_28 Depth=1
	jmp	.LBB59_34
.LBB59_34:                              # %for.inc120
                                        #   in Loop: Header=BB59_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_28
.LBB59_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB59_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB59_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB59_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_36
.LBB59_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB59_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_45 Depth 2
                                        #     Child Loop BB59_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB59_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB59_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB59_43
.LBB59_42:                              # %cond.false143
                                        #   in Loop: Header=BB59_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB59_43:                              # %cond.end144
                                        #   in Loop: Header=BB59_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB59_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB59_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB59_45:                              # %for.cond151
                                        #   Parent Loop BB59_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB59_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB59_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB59_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_45
.LBB59_48:                              # %for.end168
                                        #   in Loop: Header=BB59_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_49:                              # %for.cond170
                                        #   Parent Loop BB59_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB59_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB59_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB59_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_52:                              # %for.end187
                                        #   in Loop: Header=BB59_40 Depth=1
	jmp	.LBB59_53
.LBB59_53:                              # %for.inc188
                                        #   in Loop: Header=BB59_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_40
.LBB59_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB59_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB59_56:                              # %if.end192
	cmpl	$836117148, -56(%rbp)   # imm = 0x31D6229C
	jne	.LBB59_58
.LBB59_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_57
.Lfunc_end59:
	.size	Init_Motion_Search_Module.34, .Lfunc_end59-Init_Motion_Search_Module.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.35
.LCPI60_0:
	.quad	4611686018427387904     # double 2
.LCPI60_1:
	.quad	4607182418800017408     # double 1
.LCPI60_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI60_4:
	.quad	4620693217682128896     # double 8
.LCPI60_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI60_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.35
	.p2align	4, 0x90
	.type	BlockMotionSearch.35,@function
BlockMotionSearch.35:                   # @BlockMotionSearch.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1207127754, -212(%rbp) # imm = 0x47F34ECA
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -180(%rbp)
	movl	%ecx, -192(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB60_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB60_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB60_4
.LBB60_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB60_4
.LBB60_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB60_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB60_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB60_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB60_6 Depth=1
	movl	$0, -64(%rbp)
.LBB60_8:                               # %for.cond24
                                        #   Parent Loop BB60_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB60_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB60_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_8
.LBB60_11:                              # %for.end
                                        #   in Loop: Header=BB60_6 Depth=1
	jmp	.LBB60_12
.LBB60_12:                              # %for.inc37
                                        #   in Loop: Header=BB60_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB60_6
.LBB60_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB60_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB60_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_18
.LBB60_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB60_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB60_37
.LBB60_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB60_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_23
.LBB60_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB60_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB60_36
.LBB60_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB60_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_28
.LBB60_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB60_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB60_35
.LBB60_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB60_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_33
.LBB60_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB60_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB60_34:                              # %if.end276
	jmp	.LBB60_35
.LBB60_35:                              # %if.end277
	jmp	.LBB60_36
.LBB60_36:                              # %if.end278
	jmp	.LBB60_37
.LBB60_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB60_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB60_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_43
.LBB60_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB60_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB60_62
.LBB60_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB60_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_48
.LBB60_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB60_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB60_61
.LBB60_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB60_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_53
.LBB60_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB60_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB60_60
.LBB60_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB60_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB60_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB60_58
.LBB60_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB60_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB60_59:                              # %if.end524
	jmp	.LBB60_60
.LBB60_60:                              # %if.end525
	jmp	.LBB60_61
.LBB60_61:                              # %if.end526
	jmp	.LBB60_62
.LBB60_62:                              # %if.end527
	jmp	.LBB60_63
.LBB60_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB60_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB60_66
.LBB60_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB60_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB60_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB60_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB60_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB60_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB60_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB60_73
.LBB60_72:                              # %cond.false626
	vmovsd	.LCPI60_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB60_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB60_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB60_76
.LBB60_75:                              # %cond.false655
	vmovsd	.LCPI60_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB60_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB60_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB60_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB60_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB60_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB60_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB60_83
.LBB60_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB60_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB60_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB60_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB60_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB60_92
.LBB60_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB60_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB60_91
.LBB60_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB60_91:                              # %cond.end787
	vmovss	.LCPI60_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB60_92:                              # %if.end835
	jmp	.LBB60_106
.LBB60_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB60_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB60_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB60_97
.LBB60_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB60_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB60_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB60_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB60_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB60_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB60_104
.LBB60_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB60_104:                             # %cond.end940
	vmovss	.LCPI60_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB60_105:                             # %if.end988
	jmp	.LBB60_106
.LBB60_106:                             # %if.end989
	jmp	.LBB60_107
.LBB60_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB60_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB60_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	-136(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB60_142
# %bb.110:                              # %if.then1000
	movswl	-96(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-94(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB60_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB60_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB60_114
.LBB60_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB60_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB60_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB60_120
.LBB60_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB60_119
.LBB60_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB60_119:                             # %cond.end1029
.LBB60_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB60_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB60_123
.LBB60_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB60_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB60_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB60_129
.LBB60_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB60_128
.LBB60_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB60_128:                             # %cond.end1054
.LBB60_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB60_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB60_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB60_131 Depth=1
	movl	$0, -72(%rbp)
.LBB60_133:                             # %for.cond1066
                                        #   Parent Loop BB60_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB60_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB60_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB60_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB60_137
.LBB60_136:                             # %if.else1091
                                        #   in Loop: Header=BB60_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB60_137:                             # %if.end1109
                                        #   in Loop: Header=BB60_133 Depth=2
	jmp	.LBB60_138
.LBB60_138:                             # %for.inc1110
                                        #   in Loop: Header=BB60_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB60_133
.LBB60_139:                             # %for.end1112
                                        #   in Loop: Header=BB60_131 Depth=1
	jmp	.LBB60_140
.LBB60_140:                             # %for.inc1113
                                        #   in Loop: Header=BB60_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_131
.LBB60_141:                             # %for.end1115
	jmp	.LBB60_143
.LBB60_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB60_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB60_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB60_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB60_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB60_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB60_150
.LBB60_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB60_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB60_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB60_151 Depth=1
	movl	$0, -72(%rbp)
.LBB60_153:                             # %for.cond1139
                                        #   Parent Loop BB60_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB60_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB60_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB60_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB60_157
.LBB60_156:                             # %if.else1183
                                        #   in Loop: Header=BB60_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB60_157:                             # %if.end1220
                                        #   in Loop: Header=BB60_153 Depth=2
	jmp	.LBB60_158
.LBB60_158:                             # %for.inc1221
                                        #   in Loop: Header=BB60_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB60_153
.LBB60_159:                             # %for.end1223
                                        #   in Loop: Header=BB60_151 Depth=1
	jmp	.LBB60_160
.LBB60_160:                             # %for.inc1224
                                        #   in Loop: Header=BB60_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_151
.LBB60_161:                             # %for.end1226
	jmp	.LBB60_166
.LBB60_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB60_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB60_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB60_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB60_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB60_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB60_173
.LBB60_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI60_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB60_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB60_172:                             # %if.end1273
	jmp	.LBB60_173
.LBB60_173:                             # %if.end1274
	jmp	.LBB60_174
.LBB60_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB60_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -196(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -64(%rbp)
.LBB60_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB60_176 Depth=1
	movl	$0, -72(%rbp)
.LBB60_178:                             # %for.cond1290
                                        #   Parent Loop BB60_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB60_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-184(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-184(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB60_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB60_178
.LBB60_181:                             # %for.end1337
                                        #   in Loop: Header=BB60_176 Depth=1
	jmp	.LBB60_182
.LBB60_182:                             # %for.inc1338
                                        #   in Loop: Header=BB60_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_176
.LBB60_183:                             # %for.end1340
	jmp	.LBB60_193
.LBB60_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB60_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB60_185 Depth=1
	movl	$0, -72(%rbp)
.LBB60_187:                             # %for.cond1347
                                        #   Parent Loop BB60_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB60_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB60_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB60_187
.LBB60_190:                             # %for.end1380
                                        #   in Loop: Header=BB60_185 Depth=1
	jmp	.LBB60_191
.LBB60_191:                             # %for.inc1381
                                        #   in Loop: Header=BB60_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_185
.LBB60_192:                             # %for.end1383
	jmp	.LBB60_193
.LBB60_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB60_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB60_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB60_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB60_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB60_200
.LBB60_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB60_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-140(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB60_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB60_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB60_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB60_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB60_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB60_208
.LBB60_204:                             # %if.else1433
                                        #   in Loop: Header=BB60_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB60_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB60_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB60_207
.LBB60_206:                             # %if.else1441
                                        #   in Loop: Header=BB60_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB60_207:                             # %if.end1450
                                        #   in Loop: Header=BB60_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB60_208:                             # %if.end1452
                                        #   in Loop: Header=BB60_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-132(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -132(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB60_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_201
.LBB60_210:                             # %for.end1458
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB60_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB60_213:                             # %if.end1469
	vmovsd	.LCPI60_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB60_215
.LBB60_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB60_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB60_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB60_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI60_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %ax
	movw	-94(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB60_220
.LBB60_219:                             # %if.else1495
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB60_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB60_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB60_221 Depth=1
	movl	$0, -72(%rbp)
.LBB60_223:                             # %for.cond1502
                                        #   Parent Loop BB60_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB60_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB60_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB60_223
.LBB60_226:                             # %for.end1565
                                        #   in Loop: Header=BB60_221 Depth=1
	jmp	.LBB60_227
.LBB60_227:                             # %for.inc1566
                                        #   in Loop: Header=BB60_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB60_221
.LBB60_228:                             # %for.end1568
	jmp	.LBB60_229
.LBB60_229:                             # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-188(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$1207127754, -212(%rbp) # imm = 0x47F34ECA
	jne	.LBB60_231
.LBB60_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_230
.Lfunc_end60:
	.size	BlockMotionSearch.35, .Lfunc_end60-BlockMotionSearch.35
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.36 # -- Begin function ResetFastFullIntegerSearch.36
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.36,@function
ResetFastFullIntegerSearch.36:          # @ResetFastFullIntegerSearch.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$483337133, -12(%rbp)   # imm = 0x1CCF23AD
	movl	$0, -8(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB61_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$0, -4(%rbp)
.LBB61_3:                               # %for.cond1
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB61_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_3
.LBB61_6:                               # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_7
.LBB61_7:                               # %for.inc6
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_1
.LBB61_8:                               # %for.end8
	cmpl	$483337133, -12(%rbp)   # imm = 0x1CCF23AD
	jne	.LBB61_10
.LBB61_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_9
.Lfunc_end61:
	.size	ResetFastFullIntegerSearch.36, .Lfunc_end61-ResetFastFullIntegerSearch.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.37
.LCPI62_0:
	.quad	4602678819172646912     # double 0.5
.LCPI62_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.37
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.37,@function
FullPelBlockMotionSearch.37:            # @FullPelBlockMotionSearch.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1956725635, -144(%rbp) # imm = 0x74A14383
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -80(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB62_4
.LBB62_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB62_4
.LBB62_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -24(%rbp)
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -120(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-80(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-80(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -92(%rbp)
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -148(%rbp)
	movl	-84(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movl	-76(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movl	-84(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	cmpl	$1, -80(%rbp)
	jne	.LBB62_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB62_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB62_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB62_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB62_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB62_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB62_14
.LBB62_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB62_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB62_13:                              # %land.end63
.LBB62_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB62_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB62_17
# %bb.16:                               # %if.then
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB62_18
.LBB62_17:                              # %if.else
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB62_18:                              # %if.end
	movl	-72(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB62_23
# %bb.19:                               # %land.lhs.true81
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_23
# %bb.20:                               # %land.lhs.true86
	movl	-88(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB62_23
# %bb.21:                               # %land.lhs.true89
	movl	-88(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB62_24
.LBB62_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB62_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB62_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_33 Depth 2
                                        #       Child Loop BB62_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB62_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-72(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movl	-88(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	subl	-132(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	subl	-116(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -124(%rbp)
	je	.LBB62_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-64(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jne	.LBB62_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jne	.LBB62_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB62_30:                              # %if.end128
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB62_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB62_25 Depth=1
	jmp	.LBB62_46
.LBB62_32:                              # %if.end132
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	$0, -28(%rbp)
.LBB62_33:                              # %for.cond133
                                        #   Parent Loop BB62_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_35 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB62_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB62_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-60(%rbp), %edx
	addl	-28(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-136(%rbp), %r9d
	callq	*%rax
	movq	%rax, -56(%rbp)
	movq	-168(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -68(%rbp)
.LBB62_35:                              # %for.cond140
                                        #   Parent Loop BB62_25 Depth=1
                                        #     Parent Loop BB62_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB62_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB62_35 Depth=3
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB62_35 Depth=3
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB62_35
.LBB62_38:                              # %for.end
                                        #   in Loop: Header=BB62_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB62_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB62_25 Depth=1
	jmp	.LBB62_43
.LBB62_40:                              # %if.end178
                                        #   in Loop: Header=BB62_33 Depth=2
	jmp	.LBB62_41
.LBB62_41:                              # %for.inc179
                                        #   in Loop: Header=BB62_33 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_33
.LBB62_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB62_25 Depth=1
	jmp	.LBB62_43
.LBB62_43:                              # %for.end181
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB62_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB62_45:                              # %if.end185
                                        #   in Loop: Header=BB62_25 Depth=1
	jmp	.LBB62_46
.LBB62_46:                              # %for.inc186
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_25
.LBB62_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB62_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB62_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1956725635, -144(%rbp) # imm = 0x74A14383
	jne	.LBB62_51
.LBB62_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_50
.Lfunc_end62:
	.size	FullPelBlockMotionSearch.37, .Lfunc_end62-FullPelBlockMotionSearch.37
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.38        # -- Begin function GetSkipCostMB.38
	.p2align	4, 0x90
	.type	GetSkipCostMB.38,@function
GetSkipCostMB.38:                       # @GetSkipCostMB.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$968910815, -56(%rbp)   # imm = 0x39C067DF
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
                                        #       Child Loop BB63_5 Depth 3
                                        #         Child Loop BB63_7 Depth 4
                                        #           Child Loop BB63_9 Depth 5
                                        #     Child Loop BB63_24 Depth 2
                                        #       Child Loop BB63_26 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB63_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB63_3:                               # %for.cond2
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_5 Depth 3
                                        #         Child Loop BB63_7 Depth 4
                                        #           Child Loop BB63_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB63_5:                               # %for.cond6
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_7 Depth 4
                                        #           Child Loop BB63_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB63_7:                               # %for.cond11
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        #       Parent Loop BB63_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_9 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB63_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB63_7 Depth=4
	movl	$0, -16(%rbp)
.LBB63_9:                               # %for.cond14
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        #       Parent Loop BB63_5 Depth=3
                                        #         Parent Loop BB63_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB63_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB63_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-640(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB63_9 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_9
.LBB63_12:                              # %for.end
                                        #   in Loop: Header=BB63_7 Depth=4
	jmp	.LBB63_13
.LBB63_13:                              # %for.inc39
                                        #   in Loop: Header=BB63_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_7
.LBB63_14:                              # %for.end41
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB63_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB63_17
.LBB63_16:                              # %if.then
                                        #   in Loop: Header=BB63_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB63_17:                              # %if.end
                                        #   in Loop: Header=BB63_5 Depth=3
	jmp	.LBB63_18
.LBB63_18:                              # %for.inc45
                                        #   in Loop: Header=BB63_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_5
.LBB63_19:                              # %for.end47
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_20
.LBB63_20:                              # %for.inc48
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_3
.LBB63_21:                              # %for.end50
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB63_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB63_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB63_24:                              # %for.cond58
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_26 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB63_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB63_24 Depth=2
	movl	$0, -16(%rbp)
.LBB63_26:                              # %for.cond62
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -16(%rbp)
	jge	.LBB63_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB63_26 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-640(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB63_26 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_26
.LBB63_29:                              # %for.end75
                                        #   in Loop: Header=BB63_24 Depth=2
	jmp	.LBB63_30
.LBB63_30:                              # %for.inc76
                                        #   in Loop: Header=BB63_24 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_24
.LBB63_31:                              # %for.end78
                                        #   in Loop: Header=BB63_1 Depth=1
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB63_32:                              # %if.end83
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_33
.LBB63_33:                              # %for.inc84
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB63_1
.LBB63_34:                              # %for.end86
	movl	-36(%rbp), %ebx
	cmpl	$968910815, -56(%rbp)   # imm = 0x39C067DF
	jne	.LBB63_36
.LBB63_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_35
.Lfunc_end63:
	.size	GetSkipCostMB.38, .Lfunc_end63-GetSkipCostMB.38
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.39    # -- Begin function Get_Direct_CostMB.39
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.39,@function
Get_Direct_CostMB.39:                   # @Get_Direct_CostMB.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$282574460, -28(%rbp)   # imm = 0x10D7BE7C
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB64_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB64_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB64_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB64_5
.LBB64_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_18
.LBB64_5:                               # %if.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_6
.LBB64_6:                               # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_1
.LBB64_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB64_9
	jmp	.LBB64_8
.LBB64_8:                               # %for.end
	subl	$2, %eax
	je	.LBB64_15
	jmp	.LBB64_16
.LBB64_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB64_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB64_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB64_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB64_14
.LBB64_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_14:                              # %if.end9
	jmp	.LBB64_17
.LBB64_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_17
.LBB64_16:                              # %sw.default
	jmp	.LBB64_17
.LBB64_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB64_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$282574460, -28(%rbp)   # imm = 0x10D7BE7C
	jne	.LBB64_20
.LBB64_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_19
.Lfunc_end64:
	.size	Get_Direct_CostMB.39, .Lfunc_end64-Get_Direct_CostMB.39
	.cfi_endproc
                                        # -- End function
	.globl	SATD.40                 # -- Begin function SATD.40
	.p2align	4, 0x90
	.type	SATD.40,@function
SATD.40:                                # @SATD.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$896619964, -184(%rbp)  # imm = 0x357155BC
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB65_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB65_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB65_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB65_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB65_6
.LBB65_5:                               # %cond.false
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-100(%rbp), %eax
.LBB65_6:                               # %cond.end
                                        #   in Loop: Header=BB65_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB65_2
.LBB65_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_14
.LBB65_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB65_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB65_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB65_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB65_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_10
.LBB65_13:                              # %for.end270
	jmp	.LBB65_14
.LBB65_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$896619964, -184(%rbp)  # imm = 0x357155BC
	jne	.LBB65_16
.LBB65_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_15
.Lfunc_end65:
	.size	SATD.40, .Lfunc_end65-SATD.40
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.41 # -- Begin function ClearFastFullIntegerSearch.41
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.41,@function
ClearFastFullIntegerSearch.41:          # @ClearFastFullIntegerSearch.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$118545370, -20(%rbp)   # imm = 0x710DBDA
	movl	$0, -4(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_3 Depth 2
                                        #       Child Loop BB66_5 Depth 3
                                        #         Child Loop BB66_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB66_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_3:                               # %for.cond1
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_5 Depth 3
                                        #         Child Loop BB66_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB66_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	$1, -12(%rbp)
.LBB66_5:                               # %for.cond4
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB66_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB66_5 Depth=3
	movl	$0, -16(%rbp)
.LBB66_7:                               # %for.cond7
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_3 Depth=2
                                        #       Parent Loop BB66_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB66_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB66_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB66_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_7
.LBB66_10:                              # %for.end
                                        #   in Loop: Header=BB66_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB66_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_5
.LBB66_12:                              # %for.end24
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_3
.LBB66_14:                              # %for.end31
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_1
.LBB66_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB66_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB66_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB66_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB66_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_17
.LBB66_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$118545370, -20(%rbp)   # imm = 0x710DBDA
	jne	.LBB66_22
.LBB66_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_21
.Lfunc_end66:
	.size	ClearFastFullIntegerSearch.41, .Lfunc_end66-ClearFastFullIntegerSearch.41
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.42 # -- Begin function FindSkipModeMotionVector.42
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.42,@function
FindSkipModeMotionVector.42:            # @FindSkipModeMotionVector.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1065958894, -60(%rbp)  # imm = 0x3F893DEE
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -112(%rbp)
	je	.LBB67_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_4
# %bb.3:                                # %if.then24
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB67_4:                               # %if.end
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_7
# %bb.6:                                # %if.then34
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB67_7:                               # %if.end36
	jmp	.LBB67_8
.LBB67_8:                               # %if.end37
	cmpl	$0, -88(%rbp)
	je	.LBB67_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_12
# %bb.11:                               # %if.then69
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB67_12:                              # %if.end72
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_15
# %bb.14:                               # %if.then82
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB67_15:                              # %if.end85
	jmp	.LBB67_16
.LBB67_16:                              # %if.end86
	cmpl	$0, -112(%rbp)
	jne	.LBB67_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB67_22
.LBB67_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB67_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB67_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB67_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB67_22:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -88(%rbp)
	jne	.LBB67_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB67_28
.LBB67_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB67_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB67_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB67_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB67_28:                              # %cond.end130
	movl	%ecx, -56(%rbp)
	cmpl	$0, -56(%rbp)
	jne	.LBB67_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB67_39
.LBB67_30:                              # %if.then134
	movl	$0, -4(%rbp)
.LBB67_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_33 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB67_31 Depth=1
	movl	$0, -8(%rbp)
.LBB67_33:                              # %for.cond137
                                        #   Parent Loop BB67_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB67_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB67_33 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_33
.LBB67_36:                              # %for.end
                                        #   in Loop: Header=BB67_31 Depth=1
	jmp	.LBB67_37
.LBB67_37:                              # %for.inc157
                                        #   in Loop: Header=BB67_31 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_31
.LBB67_38:                              # %for.end159
	jmp	.LBB67_48
.LBB67_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -4(%rbp)
.LBB67_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_42 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	$0, -8(%rbp)
.LBB67_42:                              # %for.cond166
                                        #   Parent Loop BB67_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB67_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB67_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB67_42 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_42
.LBB67_45:                              # %for.end190
                                        #   in Loop: Header=BB67_40 Depth=1
	jmp	.LBB67_46
.LBB67_46:                              # %for.inc191
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_40
.LBB67_47:                              # %for.end193
	jmp	.LBB67_48
.LBB67_48:                              # %if.end194
	cmpl	$1065958894, -60(%rbp)  # imm = 0x3F893DEE
	jne	.LBB67_50
.LBB67_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_49
.Lfunc_end67:
	.size	FindSkipModeMotionVector.42, .Lfunc_end67-FindSkipModeMotionVector.42
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.43   # -- Begin function Get_Direct_Cost8x8.43
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.43,@function
Get_Direct_Cost8x8.43:                  # @Get_Direct_Cost8x8.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1585218671, -60(%rbp)  # imm = 0x5E7C846F
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
                                        #       Child Loop BB68_7 Depth 3
                                        #         Child Loop BB68_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB68_3:                               # %for.cond3
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_7 Depth 3
                                        #         Child Loop BB68_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB68_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB68_30
.LBB68_6:                               # %if.end
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -28(%rbp)
.LBB68_7:                               # %for.cond34
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB68_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB68_7 Depth=3
	movl	$0, -16(%rbp)
.LBB68_9:                               # %for.cond38
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        #       Parent Loop BB68_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB68_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB68_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB68_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB68_9
.LBB68_12:                              # %for.end
                                        #   in Loop: Header=BB68_7 Depth=3
	jmp	.LBB68_13
.LBB68_13:                              # %for.inc67
                                        #   in Loop: Header=BB68_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_7
.LBB68_14:                              # %for.end69
                                        #   in Loop: Header=BB68_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_3
.LBB68_16:                              # %for.end73
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_17
.LBB68_17:                              # %for.inc74
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_1
.LBB68_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB68_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB68_29
# %bb.20:                               # %if.then79
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB68_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB68_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB68_21 Depth=1
	movl	$0, -16(%rbp)
.LBB68_23:                              # %for.cond84
                                        #   Parent Loop BB68_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB68_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB68_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB68_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB68_23
.LBB68_26:                              # %for.end97
                                        #   in Loop: Header=BB68_21 Depth=1
	jmp	.LBB68_27
.LBB68_27:                              # %for.inc98
                                        #   in Loop: Header=BB68_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_21
.LBB68_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB68_29:                              # %if.end105
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB68_30:                              # %return
	movl	-56(%rbp), %ebx
	cmpl	$1585218671, -60(%rbp)  # imm = 0x5E7C846F
	jne	.LBB68_32
.LBB68_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_31
.Lfunc_end68:
	.size	Get_Direct_Cost8x8.43, .Lfunc_end68-Get_Direct_Cost8x8.43
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.44        # -- Begin function GetSkipCostMB.44
	.p2align	4, 0x90
	.type	GetSkipCostMB.44,@function
GetSkipCostMB.44:                       # @GetSkipCostMB.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1427006718, -52(%rbp)  # imm = 0x550E64FE
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
                                        #       Child Loop BB69_5 Depth 3
                                        #         Child Loop BB69_7 Depth 4
                                        #           Child Loop BB69_9 Depth 5
                                        #     Child Loop BB69_24 Depth 2
                                        #       Child Loop BB69_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB69_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB69_3:                               # %for.cond2
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_5 Depth 3
                                        #         Child Loop BB69_7 Depth 4
                                        #           Child Loop BB69_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB69_5:                               # %for.cond6
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_7 Depth 4
                                        #           Child Loop BB69_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB69_7:                               # %for.cond11
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        #       Parent Loop BB69_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB69_9 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB69_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB69_7 Depth=4
	movl	$0, -16(%rbp)
.LBB69_9:                               # %for.cond14
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        #       Parent Loop BB69_5 Depth=3
                                        #         Parent Loop BB69_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB69_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB69_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB69_9 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_9
.LBB69_12:                              # %for.end
                                        #   in Loop: Header=BB69_7 Depth=4
	jmp	.LBB69_13
.LBB69_13:                              # %for.inc39
                                        #   in Loop: Header=BB69_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_7
.LBB69_14:                              # %for.end41
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB69_17
.LBB69_16:                              # %if.then
                                        #   in Loop: Header=BB69_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB69_17:                              # %if.end
                                        #   in Loop: Header=BB69_5 Depth=3
	jmp	.LBB69_18
.LBB69_18:                              # %for.inc45
                                        #   in Loop: Header=BB69_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB69_5
.LBB69_19:                              # %for.end47
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_20
.LBB69_20:                              # %for.inc48
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_3
.LBB69_21:                              # %for.end50
                                        #   in Loop: Header=BB69_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB69_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB69_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB69_24:                              # %for.cond58
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_26 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB69_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB69_24 Depth=2
	movl	$0, -16(%rbp)
.LBB69_26:                              # %for.cond62
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -16(%rbp)
	jge	.LBB69_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB69_26 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB69_26 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_26
.LBB69_29:                              # %for.end75
                                        #   in Loop: Header=BB69_24 Depth=2
	jmp	.LBB69_30
.LBB69_30:                              # %for.inc76
                                        #   in Loop: Header=BB69_24 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_24
.LBB69_31:                              # %for.end78
                                        #   in Loop: Header=BB69_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB69_32:                              # %if.end83
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_33
.LBB69_33:                              # %for.inc84
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_1
.LBB69_34:                              # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$1427006718, -52(%rbp)  # imm = 0x550E64FE
	jne	.LBB69_36
.LBB69_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_35
.Lfunc_end69:
	.size	GetSkipCostMB.44, .Lfunc_end69-GetSkipCostMB.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.45
.LCPI70_0:
	.quad	4602678819172646912     # double 0.5
.LCPI70_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.45
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.45,@function
SubPelBlockMotionSearch.45:             # @SubPelBlockMotionSearch.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI70_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI70_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$216944868, -192(%rbp)  # imm = 0xCEE50E4
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -136(%rbp)
	movl	%ecx, -152(%rbp)
	movl	%r8d, -156(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -148(%rbp)
	movl	$0, -112(%rbp)
	cmpl	$1, -104(%rbp)
	jne	.LBB70_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB70_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB70_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB70_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB70_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB70_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB70_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movl	-156(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB70_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB70_10
.LBB70_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB70_10
.LBB70_10:                              # %cond.end
	movl	%eax, -196(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB70_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB70_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB70_14
.LBB70_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB70_14:                              # %cond.end35
	jmp	.LBB70_16
.LBB70_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB70_16:                              # %cond.end38
	movl	%eax, -184(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB70_20
.LBB70_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB70_20
.LBB70_20:                              # %cond.end50
	movl	%ecx, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB70_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB70_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB70_26
.LBB70_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB70_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB70_25:                              # %land.end65
.LBB70_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB70_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB70_29
.LBB70_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB70_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -164(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-136(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -188(%rbp)
	je	.LBB70_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB70_32
# %bb.31:                               # %if.then
	movl	-136(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB70_33
.LBB70_32:                              # %if.else
	movl	-136(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB70_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-132(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB70_38
# %bb.34:                               # %land.lhs.true112
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_38
# %bb.35:                               # %land.lhs.true118
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB70_38
# %bb.36:                               # %land.lhs.true123
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB70_39
.LBB70_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB70_39:                              # %if.end131
	movl	$0, -84(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB70_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_47 Depth 2
                                        #       Child Loop BB70_51 Depth 3
                                        #         Child Loop BB70_57 Depth 4
                                        #           Child Loop BB70_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB70_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB70_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB70_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB70_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB70_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-148(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB70_44:                              # %if.end164
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB70_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB70_40 Depth=1
	jmp	.LBB70_75
.LBB70_46:                              # %if.end168
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB70_47:                              # %for.cond169
                                        #   Parent Loop BB70_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_51 Depth 3
                                        #         Child Loop BB70_57 Depth 4
                                        #           Child Loop BB70_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-140(%rbp), %ecx
	jge	.LBB70_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB70_47 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB70_49:                              # %land.end174
                                        #   in Loop: Header=BB70_47 Depth=2
	testb	$1, %al
	jne	.LBB70_50
	jmp	.LBB70_70
.LBB70_50:                              # %for.body176
                                        #   in Loop: Header=BB70_47 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB70_51:                              # %for.cond180
                                        #   Parent Loop BB70_40 Depth=1
                                        #     Parent Loop BB70_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_57 Depth 4
                                        #           Child Loop BB70_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB70_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB70_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB70_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB70_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-164(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB70_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB70_47 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB70_68
.LBB70_55:                              # %if.end342
                                        #   in Loop: Header=BB70_51 Depth=3
	jmp	.LBB70_65
.LBB70_56:                              # %if.else343
                                        #   in Loop: Header=BB70_51 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB70_57:                              # %for.cond344
                                        #   Parent Loop BB70_40 Depth=1
                                        #     Parent Loop BB70_47 Depth=2
                                        #       Parent Loop BB70_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB70_59 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB70_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB70_57 Depth=4
	movl	$0, -80(%rbp)
.LBB70_59:                              # %for.cond348
                                        #   Parent Loop BB70_40 Depth=1
                                        #     Parent Loop BB70_47 Depth=2
                                        #       Parent Loop BB70_51 Depth=3
                                        #         Parent Loop BB70_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB70_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB70_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB70_59 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB70_59
.LBB70_62:                              # %for.end
                                        #   in Loop: Header=BB70_57 Depth=4
	jmp	.LBB70_63
.LBB70_63:                              # %for.inc361
                                        #   in Loop: Header=BB70_57 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB70_57
.LBB70_64:                              # %for.end363
                                        #   in Loop: Header=BB70_51 Depth=3
	jmp	.LBB70_65
.LBB70_65:                              # %if.end364
                                        #   in Loop: Header=BB70_51 Depth=3
	jmp	.LBB70_66
.LBB70_66:                              # %for.inc365
                                        #   in Loop: Header=BB70_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_51
.LBB70_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB70_47 Depth=2
	jmp	.LBB70_68
.LBB70_68:                              # %for.end367
                                        #   in Loop: Header=BB70_47 Depth=2
	jmp	.LBB70_69
.LBB70_69:                              # %for.inc368
                                        #   in Loop: Header=BB70_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB70_47
.LBB70_70:                              # %for.end370
                                        #   in Loop: Header=BB70_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB70_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB70_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-164(%rbp), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB70_72:                              # %if.end377
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB70_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB70_74:                              # %if.end381
                                        #   in Loop: Header=BB70_40 Depth=1
	jmp	.LBB70_75
.LBB70_75:                              # %for.inc382
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB70_40
.LBB70_76:                              # %for.end384
	cmpl	$0, -84(%rbp)
	je	.LBB70_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB70_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB70_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB70_80:                              # %if.end403
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB70_85
# %bb.81:                               # %land.lhs.true408
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_85
# %bb.82:                               # %land.lhs.true414
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB70_85
# %bb.83:                               # %land.lhs.true419
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB70_86
.LBB70_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB70_86:                              # %if.end427
	movl	$0, -84(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB70_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_91 Depth 2
                                        #       Child Loop BB70_95 Depth 3
                                        #         Child Loop BB70_101 Depth 4
                                        #           Child Loop BB70_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB70_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB70_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB70_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB70_87 Depth=1
	jmp	.LBB70_119
.LBB70_90:                              # %if.end456
                                        #   in Loop: Header=BB70_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB70_91:                              # %for.cond457
                                        #   Parent Loop BB70_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_95 Depth 3
                                        #         Child Loop BB70_101 Depth 4
                                        #           Child Loop BB70_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-140(%rbp), %ecx
	jge	.LBB70_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB70_91 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB70_93:                              # %land.end463
                                        #   in Loop: Header=BB70_91 Depth=2
	testb	$1, %al
	jne	.LBB70_94
	jmp	.LBB70_114
.LBB70_94:                              # %for.body465
                                        #   in Loop: Header=BB70_91 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB70_95:                              # %for.cond469
                                        #   Parent Loop BB70_87 Depth=1
                                        #     Parent Loop BB70_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_101 Depth 4
                                        #           Child Loop BB70_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB70_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB70_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB70_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB70_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB70_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB70_91 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB70_112
.LBB70_99:                              # %if.end636
                                        #   in Loop: Header=BB70_95 Depth=3
	jmp	.LBB70_109
.LBB70_100:                             # %if.else637
                                        #   in Loop: Header=BB70_95 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB70_101:                             # %for.cond638
                                        #   Parent Loop BB70_87 Depth=1
                                        #     Parent Loop BB70_91 Depth=2
                                        #       Parent Loop BB70_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB70_103 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB70_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB70_101 Depth=4
	movl	$0, -80(%rbp)
.LBB70_103:                             # %for.cond642
                                        #   Parent Loop BB70_87 Depth=1
                                        #     Parent Loop BB70_91 Depth=2
                                        #       Parent Loop BB70_95 Depth=3
                                        #         Parent Loop BB70_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB70_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB70_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB70_103 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB70_103
.LBB70_106:                             # %for.end657
                                        #   in Loop: Header=BB70_101 Depth=4
	jmp	.LBB70_107
.LBB70_107:                             # %for.inc658
                                        #   in Loop: Header=BB70_101 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB70_101
.LBB70_108:                             # %for.end660
                                        #   in Loop: Header=BB70_95 Depth=3
	jmp	.LBB70_109
.LBB70_109:                             # %if.end661
                                        #   in Loop: Header=BB70_95 Depth=3
	jmp	.LBB70_110
.LBB70_110:                             # %for.inc662
                                        #   in Loop: Header=BB70_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_95
.LBB70_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB70_91 Depth=2
	jmp	.LBB70_112
.LBB70_112:                             # %for.end664
                                        #   in Loop: Header=BB70_91 Depth=2
	jmp	.LBB70_113
.LBB70_113:                             # %for.inc665
                                        #   in Loop: Header=BB70_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB70_91
.LBB70_114:                             # %for.end667
                                        #   in Loop: Header=BB70_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB70_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB70_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB70_116:                             # %if.end675
                                        #   in Loop: Header=BB70_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB70_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB70_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB70_118:                             # %if.end679
                                        #   in Loop: Header=BB70_87 Depth=1
	jmp	.LBB70_119
.LBB70_119:                             # %for.inc680
                                        #   in Loop: Header=BB70_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB70_87
.LBB70_120:                             # %for.end682
	cmpl	$0, -84(%rbp)
	je	.LBB70_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB70_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$216944868, -192(%rbp)  # imm = 0xCEE50E4
	jne	.LBB70_124
.LBB70_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_123
.Lfunc_end70:
	.size	SubPelBlockMotionSearch.45, .Lfunc_end70-SubPelBlockMotionSearch.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.46
.LCPI71_0:
	.quad	4611686018427387904     # double 2
.LCPI71_1:
	.quad	4607182418800017408     # double 1
.LCPI71_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI71_4:
	.quad	4620693217682128896     # double 8
.LCPI71_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI71_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.46
	.p2align	4, 0x90
	.type	BlockMotionSearch.46,@function
BlockMotionSearch.46:                   # @BlockMotionSearch.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1354138986, -212(%rbp) # imm = 0x50B6856A
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -192(%rbp)
	movl	%ecx, -188(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-188(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-188(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-256(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB71_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB71_4
.LBB71_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB71_4
.LBB71_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB71_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB71_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB71_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB71_6 Depth=1
	movl	$0, -64(%rbp)
.LBB71_8:                               # %for.cond24
                                        #   Parent Loop BB71_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB71_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB71_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB71_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB71_8
.LBB71_11:                              # %for.end
                                        #   in Loop: Header=BB71_6 Depth=1
	jmp	.LBB71_12
.LBB71_12:                              # %for.inc37
                                        #   in Loop: Header=BB71_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB71_6
.LBB71_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB71_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_18
.LBB71_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB71_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB71_37
.LBB71_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB71_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_23
.LBB71_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB71_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB71_36
.LBB71_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB71_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_28
.LBB71_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB71_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB71_35
.LBB71_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB71_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_33
.LBB71_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB71_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB71_34:                              # %if.end276
	jmp	.LBB71_35
.LBB71_35:                              # %if.end277
	jmp	.LBB71_36
.LBB71_36:                              # %if.end278
	jmp	.LBB71_37
.LBB71_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB71_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB71_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_43
.LBB71_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB71_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB71_62
.LBB71_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB71_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_48
.LBB71_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB71_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB71_61
.LBB71_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB71_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_53
.LBB71_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB71_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB71_60
.LBB71_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB71_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB71_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB71_58
.LBB71_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB71_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB71_59:                              # %if.end524
	jmp	.LBB71_60
.LBB71_60:                              # %if.end525
	jmp	.LBB71_61
.LBB71_61:                              # %if.end526
	jmp	.LBB71_62
.LBB71_62:                              # %if.end527
	jmp	.LBB71_63
.LBB71_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB71_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB71_66
.LBB71_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB71_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB71_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB71_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB71_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB71_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB71_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB71_73
.LBB71_72:                              # %cond.false626
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB71_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB71_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB71_76
.LBB71_75:                              # %cond.false655
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB71_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB71_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB71_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB71_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB71_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB71_83
.LBB71_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB71_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB71_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB71_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB71_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB71_92
.LBB71_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB71_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB71_91
.LBB71_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB71_91:                              # %cond.end787
	vmovss	.LCPI71_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB71_92:                              # %if.end835
	jmp	.LBB71_106
.LBB71_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB71_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB71_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB71_97
.LBB71_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB71_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB71_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB71_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB71_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB71_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB71_104
.LBB71_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB71_104:                             # %cond.end940
	vmovss	.LCPI71_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB71_105:                             # %if.end988
	jmp	.LBB71_106
.LBB71_106:                             # %if.end989
	jmp	.LBB71_107
.LBB71_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB71_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	-140(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB71_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB71_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB71_114
.LBB71_113:                             # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB71_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB71_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB71_120
.LBB71_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB71_119
.LBB71_118:                             # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB71_119:                             # %cond.end1029
.LBB71_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB71_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB71_123
.LBB71_122:                             # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB71_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB71_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB71_129
.LBB71_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB71_128
.LBB71_127:                             # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB71_128:                             # %cond.end1054
.LBB71_129:                             # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB71_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB71_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB71_131 Depth=1
	movl	$0, -72(%rbp)
.LBB71_133:                             # %for.cond1066
                                        #   Parent Loop BB71_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB71_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB71_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB71_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB71_137
.LBB71_136:                             # %if.else1091
                                        #   in Loop: Header=BB71_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB71_137:                             # %if.end1109
                                        #   in Loop: Header=BB71_133 Depth=2
	jmp	.LBB71_138
.LBB71_138:                             # %for.inc1110
                                        #   in Loop: Header=BB71_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB71_133
.LBB71_139:                             # %for.end1112
                                        #   in Loop: Header=BB71_131 Depth=1
	jmp	.LBB71_140
.LBB71_140:                             # %for.inc1113
                                        #   in Loop: Header=BB71_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB71_131
.LBB71_141:                             # %for.end1115
	jmp	.LBB71_143
.LBB71_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB71_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB71_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB71_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB71_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB71_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB71_150
.LBB71_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB71_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB71_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB71_151 Depth=1
	movl	$0, -72(%rbp)
.LBB71_153:                             # %for.cond1139
                                        #   Parent Loop BB71_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB71_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB71_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB71_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB71_157
.LBB71_156:                             # %if.else1183
                                        #   in Loop: Header=BB71_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB71_157:                             # %if.end1220
                                        #   in Loop: Header=BB71_153 Depth=2
	jmp	.LBB71_158
.LBB71_158:                             # %for.inc1221
                                        #   in Loop: Header=BB71_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB71_153
.LBB71_159:                             # %for.end1223
                                        #   in Loop: Header=BB71_151 Depth=1
	jmp	.LBB71_160
.LBB71_160:                             # %for.inc1224
                                        #   in Loop: Header=BB71_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB71_151
.LBB71_161:                             # %for.end1226
	jmp	.LBB71_166
.LBB71_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB71_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB71_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB71_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB71_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB71_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB71_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB71_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB71_173
.LBB71_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI71_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB71_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB71_172:                             # %if.end1273
	jmp	.LBB71_173
.LBB71_173:                             # %if.end1274
	jmp	.LBB71_174
.LBB71_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -64(%rbp)
.LBB71_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB71_176 Depth=1
	movl	$0, -72(%rbp)
.LBB71_178:                             # %for.cond1290
                                        #   Parent Loop BB71_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB71_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-180(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-180(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB71_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB71_178
.LBB71_181:                             # %for.end1337
                                        #   in Loop: Header=BB71_176 Depth=1
	jmp	.LBB71_182
.LBB71_182:                             # %for.inc1338
                                        #   in Loop: Header=BB71_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB71_176
.LBB71_183:                             # %for.end1340
	jmp	.LBB71_193
.LBB71_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB71_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB71_185 Depth=1
	movl	$0, -72(%rbp)
.LBB71_187:                             # %for.cond1347
                                        #   Parent Loop BB71_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB71_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB71_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB71_187
.LBB71_190:                             # %for.end1380
                                        #   in Loop: Header=BB71_185 Depth=1
	jmp	.LBB71_191
.LBB71_191:                             # %for.inc1381
                                        #   in Loop: Header=BB71_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB71_185
.LBB71_192:                             # %for.end1383
	jmp	.LBB71_193
.LBB71_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB71_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB71_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB71_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB71_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB71_200
.LBB71_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB71_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -106(%rbp)
	movw	$0, -108(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-132(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB71_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB71_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB71_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB71_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB71_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -106(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -108(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB71_208
.LBB71_204:                             # %if.else1433
                                        #   in Loop: Header=BB71_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -106(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB71_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB71_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB71_207
.LBB71_206:                             # %if.else1441
                                        #   in Loop: Header=BB71_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB71_207:                             # %if.end1450
                                        #   in Loop: Header=BB71_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB71_208:                             # %if.end1452
                                        #   in Loop: Header=BB71_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-106(%rbp), %r15w
	movw	-108(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB71_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB71_201
.LBB71_210:                             # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB71_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB71_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB71_213:                             # %if.end1469
	vmovsd	.LCPI71_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-106(%rbp), %ax
	movw	-108(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB71_215
.LBB71_214:                             # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB71_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB71_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB71_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB71_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI71_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB71_220
.LBB71_219:                             # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB71_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB71_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB71_221 Depth=1
	movl	$0, -72(%rbp)
.LBB71_223:                             # %for.cond1502
                                        #   Parent Loop BB71_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB71_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB71_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB71_223
.LBB71_226:                             # %for.end1565
                                        #   in Loop: Header=BB71_221 Depth=1
	jmp	.LBB71_227
.LBB71_227:                             # %for.inc1566
                                        #   in Loop: Header=BB71_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB71_221
.LBB71_228:                             # %for.end1568
	jmp	.LBB71_229
.LBB71_229:                             # %if.end1569
	leaq	-240(%rbp), %rdi
	callq	ftime
	imulq	$1000, -240(%rbp), %rax # imm = 0x3E8
	movzwl	-232(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -256(%rbp), %rcx # imm = 0x3E8
	movzwl	-248(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -196(%rbp)
	movl	-196(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-196(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$1354138986, -212(%rbp) # imm = 0x50B6856A
	jne	.LBB71_231
.LBB71_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_230
.Lfunc_end71:
	.size	BlockMotionSearch.46, .Lfunc_end71-BlockMotionSearch.46
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.47 # -- Begin function InitializeFastFullIntegerSearch.47
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.47,@function
InitializeFastFullIntegerSearch.47:     # @InitializeFastFullIntegerSearch.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1495010218, -28(%rbp)  # imm = 0x591C0BAA
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB72_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB72_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_7 Depth 2
                                        #       Child Loop BB72_11 Depth 3
                                        #         Child Loop BB72_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB72_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB72_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB72_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_6:                               # %if.end12
                                        #   in Loop: Header=BB72_3 Depth=1
	movl	$0, -8(%rbp)
.LBB72_7:                               # %for.cond13
                                        #   Parent Loop BB72_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_11 Depth 3
                                        #         Child Loop BB72_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB72_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB72_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB72_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_10:                              # %if.end26
                                        #   in Loop: Header=BB72_7 Depth=2
	movl	$1, -12(%rbp)
.LBB72_11:                              # %for.cond27
                                        #   Parent Loop BB72_3 Depth=1
                                        #     Parent Loop BB72_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB72_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB72_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB72_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_14:                              # %if.end41
                                        #   in Loop: Header=BB72_11 Depth=3
	movl	$0, -20(%rbp)
.LBB72_15:                              # %for.cond42
                                        #   Parent Loop BB72_3 Depth=1
                                        #     Parent Loop BB72_7 Depth=2
                                        #       Parent Loop BB72_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB72_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB72_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB72_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_18:                              # %if.end60
                                        #   in Loop: Header=BB72_15 Depth=4
	jmp	.LBB72_19
.LBB72_19:                              # %for.inc
                                        #   in Loop: Header=BB72_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_15
.LBB72_20:                              # %for.end
                                        #   in Loop: Header=BB72_11 Depth=3
	jmp	.LBB72_21
.LBB72_21:                              # %for.inc61
                                        #   in Loop: Header=BB72_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_11
.LBB72_22:                              # %for.end63
                                        #   in Loop: Header=BB72_7 Depth=2
	jmp	.LBB72_23
.LBB72_23:                              # %for.inc64
                                        #   in Loop: Header=BB72_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_7
.LBB72_24:                              # %for.end66
                                        #   in Loop: Header=BB72_3 Depth=1
	jmp	.LBB72_25
.LBB72_25:                              # %for.inc67
                                        #   in Loop: Header=BB72_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_3
.LBB72_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB72_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB72_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB72_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB72_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB72_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB72_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB72_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB72_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB72_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB72_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB72_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB72_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB72_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_40:                              # %if.end109
                                        #   in Loop: Header=BB72_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB72_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB72_42:                              # %if.end120
                                        #   in Loop: Header=BB72_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB72_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB72_44:                              # %if.end131
                                        #   in Loop: Header=BB72_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB72_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB72_46:                              # %if.end142
                                        #   in Loop: Header=BB72_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB72_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB72_48:                              # %if.end153
                                        #   in Loop: Header=BB72_37 Depth=1
	jmp	.LBB72_49
.LBB72_49:                              # %for.inc154
                                        #   in Loop: Header=BB72_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_37
.LBB72_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB72_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB72_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB72_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB72_52 Depth=1
	movl	$0, -8(%rbp)
.LBB72_54:                              # %for.cond164
                                        #   Parent Loop BB72_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB72_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB72_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB72_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_54
.LBB72_57:                              # %for.end175
                                        #   in Loop: Header=BB72_52 Depth=1
	jmp	.LBB72_58
.LBB72_58:                              # %for.inc176
                                        #   in Loop: Header=BB72_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_52
.LBB72_59:                              # %for.end178
	jmp	.LBB72_69
.LBB72_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB72_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB72_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB72_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB72_63:                              # %for.cond191
                                        #   Parent Loop BB72_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB72_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB72_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB72_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_63
.LBB72_66:                              # %for.end202
                                        #   in Loop: Header=BB72_61 Depth=1
	jmp	.LBB72_67
.LBB72_67:                              # %for.inc203
                                        #   in Loop: Header=BB72_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_61
.LBB72_68:                              # %for.end205
	jmp	.LBB72_69
.LBB72_69:                              # %if.end206
	cmpl	$1495010218, -28(%rbp)  # imm = 0x591C0BAA
	jne	.LBB72_71
.LBB72_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_70
.Lfunc_end72:
	.size	InitializeFastFullIntegerSearch.47, .Lfunc_end72-InitializeFastFullIntegerSearch.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.48
.LCPI73_0:
	.quad	4611686018427387904     # double 2
.LCPI73_1:
	.quad	4607182418800017408     # double 1
.LCPI73_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI73_4:
	.quad	4620693217682128896     # double 8
.LCPI73_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI73_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.48
	.p2align	4, 0x90
	.type	BlockMotionSearch.48,@function
BlockMotionSearch.48:                   # @BlockMotionSearch.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1117046364, -212(%rbp) # imm = 0x4294C65C
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -188(%rbp)
	movl	%ecx, -192(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-188(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-188(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-256(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB73_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB73_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB73_4
.LBB73_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB73_4
.LBB73_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB73_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB73_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB73_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB73_6 Depth=1
	movl	$0, -64(%rbp)
.LBB73_8:                               # %for.cond24
                                        #   Parent Loop BB73_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB73_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB73_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB73_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_8
.LBB73_11:                              # %for.end
                                        #   in Loop: Header=BB73_6 Depth=1
	jmp	.LBB73_12
.LBB73_12:                              # %for.inc37
                                        #   in Loop: Header=BB73_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB73_6
.LBB73_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB73_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB73_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_18
.LBB73_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB73_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB73_37
.LBB73_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB73_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_23
.LBB73_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB73_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB73_36
.LBB73_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB73_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_28
.LBB73_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB73_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB73_35
.LBB73_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB73_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_33
.LBB73_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB73_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB73_34:                              # %if.end276
	jmp	.LBB73_35
.LBB73_35:                              # %if.end277
	jmp	.LBB73_36
.LBB73_36:                              # %if.end278
	jmp	.LBB73_37
.LBB73_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB73_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB73_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_43
.LBB73_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB73_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB73_62
.LBB73_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB73_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_48
.LBB73_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB73_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB73_61
.LBB73_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB73_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_53
.LBB73_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB73_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB73_60
.LBB73_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB73_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB73_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB73_58
.LBB73_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB73_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB73_59:                              # %if.end524
	jmp	.LBB73_60
.LBB73_60:                              # %if.end525
	jmp	.LBB73_61
.LBB73_61:                              # %if.end526
	jmp	.LBB73_62
.LBB73_62:                              # %if.end527
	jmp	.LBB73_63
.LBB73_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB73_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB73_66
.LBB73_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB73_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB73_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB73_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB73_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB73_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB73_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB73_73
.LBB73_72:                              # %cond.false626
	vmovsd	.LCPI73_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI73_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB73_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB73_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB73_76
.LBB73_75:                              # %cond.false655
	vmovsd	.LCPI73_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI73_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB73_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB73_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB73_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB73_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB73_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB73_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB73_83
.LBB73_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB73_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB73_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB73_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB73_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB73_92
.LBB73_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB73_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB73_91
.LBB73_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB73_91:                              # %cond.end787
	vmovss	.LCPI73_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB73_92:                              # %if.end835
	jmp	.LBB73_106
.LBB73_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB73_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB73_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB73_97
.LBB73_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB73_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB73_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB73_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB73_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB73_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB73_104
.LBB73_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB73_104:                             # %cond.end940
	vmovss	.LCPI73_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB73_105:                             # %if.end988
	jmp	.LBB73_106
.LBB73_106:                             # %if.end989
	jmp	.LBB73_107
.LBB73_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB73_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB73_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	-136(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB73_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB73_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB73_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB73_114
.LBB73_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB73_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB73_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB73_120
.LBB73_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB73_119
.LBB73_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB73_119:                             # %cond.end1029
.LBB73_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB73_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB73_123
.LBB73_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB73_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB73_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB73_129
.LBB73_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB73_128
.LBB73_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB73_128:                             # %cond.end1054
.LBB73_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB73_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB73_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB73_131 Depth=1
	movl	$0, -72(%rbp)
.LBB73_133:                             # %for.cond1066
                                        #   Parent Loop BB73_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB73_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB73_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB73_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB73_137
.LBB73_136:                             # %if.else1091
                                        #   in Loop: Header=BB73_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB73_137:                             # %if.end1109
                                        #   in Loop: Header=BB73_133 Depth=2
	jmp	.LBB73_138
.LBB73_138:                             # %for.inc1110
                                        #   in Loop: Header=BB73_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB73_133
.LBB73_139:                             # %for.end1112
                                        #   in Loop: Header=BB73_131 Depth=1
	jmp	.LBB73_140
.LBB73_140:                             # %for.inc1113
                                        #   in Loop: Header=BB73_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_131
.LBB73_141:                             # %for.end1115
	jmp	.LBB73_143
.LBB73_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB73_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB73_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB73_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB73_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB73_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB73_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB73_150
.LBB73_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB73_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB73_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB73_151 Depth=1
	movl	$0, -72(%rbp)
.LBB73_153:                             # %for.cond1139
                                        #   Parent Loop BB73_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB73_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB73_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB73_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB73_157
.LBB73_156:                             # %if.else1183
                                        #   in Loop: Header=BB73_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB73_157:                             # %if.end1220
                                        #   in Loop: Header=BB73_153 Depth=2
	jmp	.LBB73_158
.LBB73_158:                             # %for.inc1221
                                        #   in Loop: Header=BB73_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB73_153
.LBB73_159:                             # %for.end1223
                                        #   in Loop: Header=BB73_151 Depth=1
	jmp	.LBB73_160
.LBB73_160:                             # %for.inc1224
                                        #   in Loop: Header=BB73_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_151
.LBB73_161:                             # %for.end1226
	jmp	.LBB73_166
.LBB73_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB73_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB73_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB73_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB73_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB73_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB73_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB73_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB73_173
.LBB73_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI73_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI73_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB73_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB73_172:                             # %if.end1273
	jmp	.LBB73_173
.LBB73_173:                             # %if.end1274
	jmp	.LBB73_174
.LBB73_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB73_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -196(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -64(%rbp)
.LBB73_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB73_176 Depth=1
	movl	$0, -72(%rbp)
.LBB73_178:                             # %for.cond1290
                                        #   Parent Loop BB73_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB73_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-184(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-184(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB73_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB73_178
.LBB73_181:                             # %for.end1337
                                        #   in Loop: Header=BB73_176 Depth=1
	jmp	.LBB73_182
.LBB73_182:                             # %for.inc1338
                                        #   in Loop: Header=BB73_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_176
.LBB73_183:                             # %for.end1340
	jmp	.LBB73_193
.LBB73_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB73_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB73_185 Depth=1
	movl	$0, -72(%rbp)
.LBB73_187:                             # %for.cond1347
                                        #   Parent Loop BB73_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB73_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB73_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB73_187
.LBB73_190:                             # %for.end1380
                                        #   in Loop: Header=BB73_185 Depth=1
	jmp	.LBB73_191
.LBB73_191:                             # %for.inc1381
                                        #   in Loop: Header=BB73_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_185
.LBB73_192:                             # %for.end1383
	jmp	.LBB73_193
.LBB73_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB73_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB73_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB73_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB73_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB73_200
.LBB73_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB73_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %eax
	movl	-132(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB73_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB73_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB73_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB73_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB73_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB73_208
.LBB73_204:                             # %if.else1433
                                        #   in Loop: Header=BB73_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB73_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB73_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB73_207
.LBB73_206:                             # %if.else1441
                                        #   in Loop: Header=BB73_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB73_207:                             # %if.end1450
                                        #   in Loop: Header=BB73_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB73_208:                             # %if.end1452
                                        #   in Loop: Header=BB73_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-140(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -140(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB73_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_201
.LBB73_210:                             # %for.end1458
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB73_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB73_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB73_213:                             # %if.end1469
	vmovsd	.LCPI73_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-140(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -140(%rbp)
	jmp	.LBB73_215
.LBB73_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB73_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB73_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB73_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB73_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI73_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-140(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -140(%rbp)
	jmp	.LBB73_220
.LBB73_219:                             # %if.else1495
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB73_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB73_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB73_221 Depth=1
	movl	$0, -72(%rbp)
.LBB73_223:                             # %for.cond1502
                                        #   Parent Loop BB73_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB73_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-48(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB73_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB73_223
.LBB73_226:                             # %for.end1565
                                        #   in Loop: Header=BB73_221 Depth=1
	jmp	.LBB73_227
.LBB73_227:                             # %for.inc1566
                                        #   in Loop: Header=BB73_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB73_221
.LBB73_228:                             # %for.end1568
	jmp	.LBB73_229
.LBB73_229:                             # %if.end1569
	leaq	-240(%rbp), %rdi
	callq	ftime
	imulq	$1000, -240(%rbp), %rax # imm = 0x3E8
	movzwl	-232(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -256(%rbp), %rcx # imm = 0x3E8
	movzwl	-248(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-180(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$1117046364, -212(%rbp) # imm = 0x4294C65C
	jne	.LBB73_231
.LBB73_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_230
.Lfunc_end73:
	.size	BlockMotionSearch.48, .Lfunc_end73-BlockMotionSearch.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.49
.LCPI74_0:
	.quad	4602678819172646912     # double 0.5
.LCPI74_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.49
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.49,@function
SubPelBlockMotionSearch.49:             # @SubPelBlockMotionSearch.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI74_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI74_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$666706222, -192(%rbp)  # imm = 0x27BD212E
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -132(%rbp)
	movl	%ecx, -156(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -96(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -152(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -96(%rbp)
	jne	.LBB74_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB74_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB74_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB74_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB74_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB74_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB74_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movl	-156(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB74_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB74_10
.LBB74_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB74_10
.LBB74_10:                              # %cond.end
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB74_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB74_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB74_14
.LBB74_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB74_14:                              # %cond.end35
	jmp	.LBB74_16
.LBB74_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB74_16:                              # %cond.end38
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB74_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB74_20
.LBB74_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB74_20
.LBB74_20:                              # %cond.end50
	movl	%ecx, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB74_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB74_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB74_26
.LBB74_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB74_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB74_25:                              # %land.end65
.LBB74_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -196(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB74_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB74_29
.LBB74_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB74_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -160(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-132(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -196(%rbp)
	je	.LBB74_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB74_32
# %bb.31:                               # %if.then
	movl	-132(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB74_33
.LBB74_32:                              # %if.else
	movl	-132(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB74_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-136(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB74_38
# %bb.34:                               # %land.lhs.true112
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_38
# %bb.35:                               # %land.lhs.true118
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB74_38
# %bb.36:                               # %land.lhs.true123
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB74_39
.LBB74_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB74_39:                              # %if.end131
	movl	$0, -84(%rbp)
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB74_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_47 Depth 2
                                        #       Child Loop BB74_51 Depth 3
                                        #         Child Loop BB74_57 Depth 4
                                        #           Child Loop BB74_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB74_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB74_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-152(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -188(%rbp)
	je	.LBB74_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB74_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB74_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	-152(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB74_44:                              # %if.end164
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB74_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB74_40 Depth=1
	jmp	.LBB74_75
.LBB74_46:                              # %if.end168
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB74_47:                              # %for.cond169
                                        #   Parent Loop BB74_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_51 Depth 3
                                        #         Child Loop BB74_57 Depth 4
                                        #           Child Loop BB74_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-136(%rbp), %ecx
	jge	.LBB74_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB74_47 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_49:                              # %land.end174
                                        #   in Loop: Header=BB74_47 Depth=2
	testb	$1, %al
	jne	.LBB74_50
	jmp	.LBB74_70
.LBB74_50:                              # %for.body176
                                        #   in Loop: Header=BB74_47 Depth=2
	movl	-144(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB74_51:                              # %for.cond180
                                        #   Parent Loop BB74_40 Depth=1
                                        #     Parent Loop BB74_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_57 Depth 4
                                        #           Child Loop BB74_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB74_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB74_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-156(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB74_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB74_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB74_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB74_47 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB74_68
.LBB74_55:                              # %if.end342
                                        #   in Loop: Header=BB74_51 Depth=3
	jmp	.LBB74_65
.LBB74_56:                              # %if.else343
                                        #   in Loop: Header=BB74_51 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB74_57:                              # %for.cond344
                                        #   Parent Loop BB74_40 Depth=1
                                        #     Parent Loop BB74_47 Depth=2
                                        #       Parent Loop BB74_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB74_59 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB74_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB74_57 Depth=4
	movl	$0, -72(%rbp)
.LBB74_59:                              # %for.cond348
                                        #   Parent Loop BB74_40 Depth=1
                                        #     Parent Loop BB74_47 Depth=2
                                        #       Parent Loop BB74_51 Depth=3
                                        #         Parent Loop BB74_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB74_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB74_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB74_59 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB74_59
.LBB74_62:                              # %for.end
                                        #   in Loop: Header=BB74_57 Depth=4
	jmp	.LBB74_63
.LBB74_63:                              # %for.inc361
                                        #   in Loop: Header=BB74_57 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB74_57
.LBB74_64:                              # %for.end363
                                        #   in Loop: Header=BB74_51 Depth=3
	jmp	.LBB74_65
.LBB74_65:                              # %if.end364
                                        #   in Loop: Header=BB74_51 Depth=3
	jmp	.LBB74_66
.LBB74_66:                              # %for.inc365
                                        #   in Loop: Header=BB74_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_51
.LBB74_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB74_47 Depth=2
	jmp	.LBB74_68
.LBB74_68:                              # %for.end367
                                        #   in Loop: Header=BB74_47 Depth=2
	jmp	.LBB74_69
.LBB74_69:                              # %for.inc368
                                        #   in Loop: Header=BB74_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB74_47
.LBB74_70:                              # %for.end370
                                        #   in Loop: Header=BB74_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB74_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB74_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-160(%rbp), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB74_72:                              # %if.end377
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB74_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB74_74:                              # %if.end381
                                        #   in Loop: Header=BB74_40 Depth=1
	jmp	.LBB74_75
.LBB74_75:                              # %for.inc382
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB74_40
.LBB74_76:                              # %for.end384
	cmpl	$0, -84(%rbp)
	je	.LBB74_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB74_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB74_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB74_80:                              # %if.end403
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB74_85
# %bb.81:                               # %land.lhs.true408
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_85
# %bb.82:                               # %land.lhs.true414
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB74_85
# %bb.83:                               # %land.lhs.true419
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB74_86
.LBB74_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB74_86:                              # %if.end427
	movl	$0, -84(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB74_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_91 Depth 2
                                        #       Child Loop BB74_95 Depth 3
                                        #         Child Loop BB74_101 Depth 4
                                        #           Child Loop BB74_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB74_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB74_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movl	-152(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB74_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB74_87 Depth=1
	jmp	.LBB74_119
.LBB74_90:                              # %if.end456
                                        #   in Loop: Header=BB74_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB74_91:                              # %for.cond457
                                        #   Parent Loop BB74_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_95 Depth 3
                                        #         Child Loop BB74_101 Depth 4
                                        #           Child Loop BB74_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-136(%rbp), %ecx
	jge	.LBB74_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB74_91 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_93:                              # %land.end463
                                        #   in Loop: Header=BB74_91 Depth=2
	testb	$1, %al
	jne	.LBB74_94
	jmp	.LBB74_114
.LBB74_94:                              # %for.body465
                                        #   in Loop: Header=BB74_91 Depth=2
	movl	-144(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB74_95:                              # %for.cond469
                                        #   Parent Loop BB74_87 Depth=1
                                        #     Parent Loop BB74_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_101 Depth 4
                                        #           Child Loop BB74_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB74_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB74_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-156(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB74_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB74_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB74_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB74_91 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB74_112
.LBB74_99:                              # %if.end636
                                        #   in Loop: Header=BB74_95 Depth=3
	jmp	.LBB74_109
.LBB74_100:                             # %if.else637
                                        #   in Loop: Header=BB74_95 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB74_101:                             # %for.cond638
                                        #   Parent Loop BB74_87 Depth=1
                                        #     Parent Loop BB74_91 Depth=2
                                        #       Parent Loop BB74_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB74_103 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB74_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB74_101 Depth=4
	movl	$0, -72(%rbp)
.LBB74_103:                             # %for.cond642
                                        #   Parent Loop BB74_87 Depth=1
                                        #     Parent Loop BB74_91 Depth=2
                                        #       Parent Loop BB74_95 Depth=3
                                        #         Parent Loop BB74_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB74_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB74_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB74_103 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB74_103
.LBB74_106:                             # %for.end657
                                        #   in Loop: Header=BB74_101 Depth=4
	jmp	.LBB74_107
.LBB74_107:                             # %for.inc658
                                        #   in Loop: Header=BB74_101 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB74_101
.LBB74_108:                             # %for.end660
                                        #   in Loop: Header=BB74_95 Depth=3
	jmp	.LBB74_109
.LBB74_109:                             # %if.end661
                                        #   in Loop: Header=BB74_95 Depth=3
	jmp	.LBB74_110
.LBB74_110:                             # %for.inc662
                                        #   in Loop: Header=BB74_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_95
.LBB74_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB74_91 Depth=2
	jmp	.LBB74_112
.LBB74_112:                             # %for.end664
                                        #   in Loop: Header=BB74_91 Depth=2
	jmp	.LBB74_113
.LBB74_113:                             # %for.inc665
                                        #   in Loop: Header=BB74_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB74_91
.LBB74_114:                             # %for.end667
                                        #   in Loop: Header=BB74_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB74_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB74_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB74_116:                             # %if.end675
                                        #   in Loop: Header=BB74_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB74_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB74_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB74_118:                             # %if.end679
                                        #   in Loop: Header=BB74_87 Depth=1
	jmp	.LBB74_119
.LBB74_119:                             # %for.inc680
                                        #   in Loop: Header=BB74_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB74_87
.LBB74_120:                             # %for.end682
	cmpl	$0, -84(%rbp)
	je	.LBB74_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB74_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$666706222, -192(%rbp)  # imm = 0x27BD212E
	jne	.LBB74_124
.LBB74_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_123
.Lfunc_end74:
	.size	SubPelBlockMotionSearch.49, .Lfunc_end74-SubPelBlockMotionSearch.49
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.50 # -- Begin function InitializeFastFullIntegerSearch.50
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.50,@function
InitializeFastFullIntegerSearch.50:     # @InitializeFastFullIntegerSearch.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$511233470, -24(%rbp)   # imm = 0x1E78CDBE
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB75_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB75_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_7 Depth 2
                                        #       Child Loop BB75_11 Depth 3
                                        #         Child Loop BB75_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB75_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB75_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB75_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_6:                               # %if.end12
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	$0, -8(%rbp)
.LBB75_7:                               # %for.cond13
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_11 Depth 3
                                        #         Child Loop BB75_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB75_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB75_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_10:                              # %if.end26
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	$1, -16(%rbp)
.LBB75_11:                              # %for.cond27
                                        #   Parent Loop BB75_3 Depth=1
                                        #     Parent Loop BB75_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_15 Depth 4
	cmpl	$8, -16(%rbp)
	jge	.LBB75_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB75_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB75_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_14:                              # %if.end41
                                        #   in Loop: Header=BB75_11 Depth=3
	movl	$0, -20(%rbp)
.LBB75_15:                              # %for.cond42
                                        #   Parent Loop BB75_3 Depth=1
                                        #     Parent Loop BB75_7 Depth=2
                                        #       Parent Loop BB75_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB75_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB75_15 Depth=4
	movslq	-28(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB75_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_18:                              # %if.end60
                                        #   in Loop: Header=BB75_15 Depth=4
	jmp	.LBB75_19
.LBB75_19:                              # %for.inc
                                        #   in Loop: Header=BB75_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_15
.LBB75_20:                              # %for.end
                                        #   in Loop: Header=BB75_11 Depth=3
	jmp	.LBB75_21
.LBB75_21:                              # %for.inc61
                                        #   in Loop: Header=BB75_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_11
.LBB75_22:                              # %for.end63
                                        #   in Loop: Header=BB75_7 Depth=2
	jmp	.LBB75_23
.LBB75_23:                              # %for.inc64
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_7
.LBB75_24:                              # %for.end66
                                        #   in Loop: Header=BB75_3 Depth=1
	jmp	.LBB75_25
.LBB75_25:                              # %for.inc67
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_3
.LBB75_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB75_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB75_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB75_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB75_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB75_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB75_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB75_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB75_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB75_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB75_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB75_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_40:                              # %if.end109
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB75_42:                              # %if.end120
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB75_44:                              # %if.end131
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB75_46:                              # %if.end142
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB75_48:                              # %if.end153
                                        #   in Loop: Header=BB75_37 Depth=1
	jmp	.LBB75_49
.LBB75_49:                              # %for.inc154
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_37
.LBB75_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB75_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB75_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB75_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	$0, -8(%rbp)
.LBB75_54:                              # %for.cond164
                                        #   Parent Loop BB75_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB75_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB75_54 Depth=2
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB75_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_54
.LBB75_57:                              # %for.end175
                                        #   in Loop: Header=BB75_52 Depth=1
	jmp	.LBB75_58
.LBB75_58:                              # %for.inc176
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_52
.LBB75_59:                              # %for.end178
	jmp	.LBB75_69
.LBB75_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB75_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB75_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB75_61 Depth=1
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB75_63:                              # %for.cond191
                                        #   Parent Loop BB75_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB75_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB75_63 Depth=2
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB75_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_63
.LBB75_66:                              # %for.end202
                                        #   in Loop: Header=BB75_61 Depth=1
	jmp	.LBB75_67
.LBB75_67:                              # %for.inc203
                                        #   in Loop: Header=BB75_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_61
.LBB75_68:                              # %for.end205
	jmp	.LBB75_69
.LBB75_69:                              # %if.end206
	cmpl	$511233470, -24(%rbp)   # imm = 0x1E78CDBE
	jne	.LBB75_71
.LBB75_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_70
.Lfunc_end75:
	.size	InitializeFastFullIntegerSearch.50, .Lfunc_end75-InitializeFastFullIntegerSearch.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.51
.LCPI76_0:
	.quad	4602678819172646912     # double 0.5
.LCPI76_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.51
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.51,@function
FullPelBlockMotionBiPred.51:            # @FullPelBlockMotionBiPred.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$931090337, -184(%rbp)  # imm = 0x377F4FA1
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -124(%rbp)
	movl	%r8d, -108(%rbp)
	movl	%r9d, -144(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB76_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB76_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB76_4
.LBB76_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB76_4
.LBB76_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB76_6
# %bb.5:                                # %cond.true9
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB76_7
.LBB76_6:                               # %cond.false11
	movl	-36(%rbp), %eax
.LBB76_7:                               # %cond.end12
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -112(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -180(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -148(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-124(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-108(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-124(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movl	-108(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -46(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB76_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB76_11
.LBB76_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB76_11:                              # %cond.end87
	jmp	.LBB76_13
.LBB76_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB76_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB76_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB76_17
.LBB76_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB76_17:                              # %cond.end114
	jmp	.LBB76_19
.LBB76_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB76_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB76_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB76_23
.LBB76_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB76_23:                              # %cond.end138
	jmp	.LBB76_25
.LBB76_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB76_25
.LBB76_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB76_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB76_29
.LBB76_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB76_29:                              # %cond.end161
	jmp	.LBB76_31
.LBB76_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB76_31
.LBB76_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_36
# %bb.32:                               # %land.lhs.true176
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_36
# %bb.33:                               # %land.lhs.true182
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_36
# %bb.34:                               # %land.lhs.true186
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB76_37
.LBB76_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB76_37:                              # %if.end
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_42
# %bb.38:                               # %land.lhs.true196
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_42
# %bb.39:                               # %land.lhs.true204
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_42
# %bb.40:                               # %land.lhs.true208
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB76_43
.LBB76_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB76_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB76_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_49 Depth 2
                                        #       Child Loop BB76_51 Depth 3
                                        #     Child Loop BB76_85 Depth 2
                                        #       Child Loop BB76_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB76_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB76_44 Depth=1
	movswl	-96(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movswl	-94(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-44(%rbp), %edx
	shll	$2, %edx
	subl	-192(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-42(%rbp), %esi
	shll	$2, %esi
	subl	-172(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-128(%rbp), %edx
	shll	$2, %edx
	subl	-176(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-132(%rbp), %esi
	shll	$2, %esi
	subl	-188(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_99
.LBB76_47:                              # %if.end257
                                        #   in Loop: Header=BB76_44 Depth=1
	cmpw	$0, -46(%rbp)
	je	.LBB76_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	$0, -40(%rbp)
.LBB76_49:                              # %for.cond260
                                        #   Parent Loop BB76_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_51 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB76_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB76_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB76_51:                              # %for.cond271
                                        #   Parent Loop BB76_44 Depth=1
                                        #     Parent Loop BB76_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB76_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_58
.LBB76_54:                              # %cond.false296
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_57
.LBB76_56:                              # %cond.false310
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_57:                              # %cond.end320
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_58:                              # %cond.end322
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_64
.LBB76_60:                              # %cond.false354
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_63
.LBB76_62:                              # %cond.false369
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_63:                              # %cond.end379
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_64:                              # %cond.end381
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_70
.LBB76_66:                              # %cond.false413
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_69
.LBB76_68:                              # %cond.false428
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_69:                              # %cond.end438
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_70:                              # %cond.end440
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_76
.LBB76_72:                              # %cond.false472
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_75
.LBB76_74:                              # %cond.false487
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_75:                              # %cond.end497
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_76:                              # %cond.end499
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB76_51 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB76_51
.LBB76_78:                              # %for.end
                                        #   in Loop: Header=BB76_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_83
.LBB76_80:                              # %if.end512
                                        #   in Loop: Header=BB76_49 Depth=2
	jmp	.LBB76_81
.LBB76_81:                              # %for.inc513
                                        #   in Loop: Header=BB76_49 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB76_49
.LBB76_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_83
.LBB76_83:                              # %for.end515
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_96
.LBB76_84:                              # %if.else516
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	$0, -40(%rbp)
.LBB76_85:                              # %for.cond517
                                        #   Parent Loop BB76_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_87 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB76_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB76_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB76_87:                              # %for.cond529
                                        #   Parent Loop BB76_44 Depth=1
                                        #     Parent Loop BB76_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB76_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB76_87 Depth=3
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB76_87 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB76_87
.LBB76_90:                              # %for.end583
                                        #   in Loop: Header=BB76_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_95
.LBB76_92:                              # %if.end587
                                        #   in Loop: Header=BB76_85 Depth=2
	jmp	.LBB76_93
.LBB76_93:                              # %for.inc588
                                        #   in Loop: Header=BB76_85 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB76_85
.LBB76_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_95
.LBB76_95:                              # %for.end590
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_96
.LBB76_96:                              # %if.end591
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB76_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB76_98:                              # %if.end595
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_99
.LBB76_99:                              # %for.inc596
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB76_44
.LBB76_100:                             # %for.end598
	cmpl	$0, -112(%rbp)
	je	.LBB76_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB76_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$931090337, -184(%rbp)  # imm = 0x377F4FA1
	jne	.LBB76_104
.LBB76_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_103
.Lfunc_end76:
	.size	FullPelBlockMotionBiPred.51, .Lfunc_end76-FullPelBlockMotionBiPred.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.52
.LCPI77_0:
	.quad	4602678819172646912     # double 0.5
.LCPI77_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.52
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.52,@function
SubPelBlockMotionSearch.52:             # @SubPelBlockMotionSearch.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI77_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1605873409, -192(%rbp) # imm = 0x5FB7AF01
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -144(%rbp)
	movl	%ecx, -152(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -96(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -132(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -96(%rbp)
	jne	.LBB77_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB77_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB77_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB77_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB77_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB77_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB77_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -196(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -156(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB77_10
.LBB77_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB77_10
.LBB77_10:                              # %cond.end
	movl	%eax, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB77_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB77_14
.LBB77_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB77_14:                              # %cond.end35
	jmp	.LBB77_16
.LBB77_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB77_16:                              # %cond.end38
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB77_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB77_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB77_20
.LBB77_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB77_20
.LBB77_20:                              # %cond.end50
	movl	%ecx, -136(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB77_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB77_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB77_26
.LBB77_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB77_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB77_25:                              # %land.end65
.LBB77_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB77_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB77_29
.LBB77_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB77_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -160(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-144(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB77_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB77_32
# %bb.31:                               # %if.then
	movl	-144(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB77_33
.LBB77_32:                              # %if.else
	movl	-144(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB77_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-156(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB77_38
# %bb.34:                               # %land.lhs.true112
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_38
# %bb.35:                               # %land.lhs.true118
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB77_38
# %bb.36:                               # %land.lhs.true123
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB77_39
.LBB77_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB77_39:                              # %if.end131
	movl	$0, -80(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB77_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_47 Depth 2
                                        #       Child Loop BB77_51 Depth 3
                                        #         Child Loop BB77_57 Depth 4
                                        #           Child Loop BB77_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB77_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB77_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -196(%rbp)
	je	.LBB77_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB77_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB77_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB77_44:                              # %if.end164
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB77_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB77_40 Depth=1
	jmp	.LBB77_75
.LBB77_46:                              # %if.end168
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB77_47:                              # %for.cond169
                                        #   Parent Loop BB77_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_51 Depth 3
                                        #         Child Loop BB77_57 Depth 4
                                        #           Child Loop BB77_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-156(%rbp), %ecx
	jge	.LBB77_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB77_47 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_49:                              # %land.end174
                                        #   in Loop: Header=BB77_47 Depth=2
	testb	$1, %al
	jne	.LBB77_50
	jmp	.LBB77_70
.LBB77_50:                              # %for.body176
                                        #   in Loop: Header=BB77_47 Depth=2
	movl	-148(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB77_51:                              # %for.cond180
                                        #   Parent Loop BB77_40 Depth=1
                                        #     Parent Loop BB77_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_57 Depth 4
                                        #           Child Loop BB77_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB77_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB77_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB77_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB77_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB77_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB77_47 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB77_68
.LBB77_55:                              # %if.end342
                                        #   in Loop: Header=BB77_51 Depth=3
	jmp	.LBB77_65
.LBB77_56:                              # %if.else343
                                        #   in Loop: Header=BB77_51 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB77_57:                              # %for.cond344
                                        #   Parent Loop BB77_40 Depth=1
                                        #     Parent Loop BB77_47 Depth=2
                                        #       Parent Loop BB77_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB77_59 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB77_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB77_57 Depth=4
	movl	$0, -72(%rbp)
.LBB77_59:                              # %for.cond348
                                        #   Parent Loop BB77_40 Depth=1
                                        #     Parent Loop BB77_47 Depth=2
                                        #       Parent Loop BB77_51 Depth=3
                                        #         Parent Loop BB77_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB77_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB77_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB77_59 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB77_59
.LBB77_62:                              # %for.end
                                        #   in Loop: Header=BB77_57 Depth=4
	jmp	.LBB77_63
.LBB77_63:                              # %for.inc361
                                        #   in Loop: Header=BB77_57 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB77_57
.LBB77_64:                              # %for.end363
                                        #   in Loop: Header=BB77_51 Depth=3
	jmp	.LBB77_65
.LBB77_65:                              # %if.end364
                                        #   in Loop: Header=BB77_51 Depth=3
	jmp	.LBB77_66
.LBB77_66:                              # %for.inc365
                                        #   in Loop: Header=BB77_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_51
.LBB77_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB77_47 Depth=2
	jmp	.LBB77_68
.LBB77_68:                              # %for.end367
                                        #   in Loop: Header=BB77_47 Depth=2
	jmp	.LBB77_69
.LBB77_69:                              # %for.inc368
                                        #   in Loop: Header=BB77_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB77_47
.LBB77_70:                              # %for.end370
                                        #   in Loop: Header=BB77_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB77_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB77_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-160(%rbp), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB77_72:                              # %if.end377
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB77_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB77_74:                              # %if.end381
                                        #   in Loop: Header=BB77_40 Depth=1
	jmp	.LBB77_75
.LBB77_75:                              # %for.inc382
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB77_40
.LBB77_76:                              # %for.end384
	cmpl	$0, -80(%rbp)
	je	.LBB77_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB77_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB77_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB77_80:                              # %if.end403
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB77_85
# %bb.81:                               # %land.lhs.true408
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_85
# %bb.82:                               # %land.lhs.true414
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB77_85
# %bb.83:                               # %land.lhs.true419
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB77_86
.LBB77_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB77_86:                              # %if.end427
	movl	$0, -80(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB77_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_91 Depth 2
                                        #       Child Loop BB77_95 Depth 3
                                        #         Child Loop BB77_101 Depth 4
                                        #           Child Loop BB77_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB77_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB77_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB77_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB77_87 Depth=1
	jmp	.LBB77_119
.LBB77_90:                              # %if.end456
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB77_91:                              # %for.cond457
                                        #   Parent Loop BB77_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_95 Depth 3
                                        #         Child Loop BB77_101 Depth 4
                                        #           Child Loop BB77_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-156(%rbp), %ecx
	jge	.LBB77_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB77_91 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_93:                              # %land.end463
                                        #   in Loop: Header=BB77_91 Depth=2
	testb	$1, %al
	jne	.LBB77_94
	jmp	.LBB77_114
.LBB77_94:                              # %for.body465
                                        #   in Loop: Header=BB77_91 Depth=2
	movl	-148(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB77_95:                              # %for.cond469
                                        #   Parent Loop BB77_87 Depth=1
                                        #     Parent Loop BB77_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_101 Depth 4
                                        #           Child Loop BB77_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB77_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB77_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB77_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB77_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB77_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB77_91 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB77_112
.LBB77_99:                              # %if.end636
                                        #   in Loop: Header=BB77_95 Depth=3
	jmp	.LBB77_109
.LBB77_100:                             # %if.else637
                                        #   in Loop: Header=BB77_95 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB77_101:                             # %for.cond638
                                        #   Parent Loop BB77_87 Depth=1
                                        #     Parent Loop BB77_91 Depth=2
                                        #       Parent Loop BB77_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB77_103 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB77_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB77_101 Depth=4
	movl	$0, -72(%rbp)
.LBB77_103:                             # %for.cond642
                                        #   Parent Loop BB77_87 Depth=1
                                        #     Parent Loop BB77_91 Depth=2
                                        #       Parent Loop BB77_95 Depth=3
                                        #         Parent Loop BB77_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB77_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB77_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB77_103 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB77_103
.LBB77_106:                             # %for.end657
                                        #   in Loop: Header=BB77_101 Depth=4
	jmp	.LBB77_107
.LBB77_107:                             # %for.inc658
                                        #   in Loop: Header=BB77_101 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB77_101
.LBB77_108:                             # %for.end660
                                        #   in Loop: Header=BB77_95 Depth=3
	jmp	.LBB77_109
.LBB77_109:                             # %if.end661
                                        #   in Loop: Header=BB77_95 Depth=3
	jmp	.LBB77_110
.LBB77_110:                             # %for.inc662
                                        #   in Loop: Header=BB77_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_95
.LBB77_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB77_91 Depth=2
	jmp	.LBB77_112
.LBB77_112:                             # %for.end664
                                        #   in Loop: Header=BB77_91 Depth=2
	jmp	.LBB77_113
.LBB77_113:                             # %for.inc665
                                        #   in Loop: Header=BB77_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB77_91
.LBB77_114:                             # %for.end667
                                        #   in Loop: Header=BB77_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB77_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB77_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB77_116:                             # %if.end675
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB77_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB77_118:                             # %if.end679
                                        #   in Loop: Header=BB77_87 Depth=1
	jmp	.LBB77_119
.LBB77_119:                             # %for.inc680
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB77_87
.LBB77_120:                             # %for.end682
	cmpl	$0, -80(%rbp)
	je	.LBB77_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB77_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$1605873409, -192(%rbp) # imm = 0x5FB7AF01
	jne	.LBB77_124
.LBB77_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_123
.Lfunc_end77:
	.size	SubPelBlockMotionSearch.52, .Lfunc_end77-SubPelBlockMotionSearch.52
	.cfi_endproc
                                        # -- End function
	.globl	SATD.53                 # -- Begin function SATD.53
	.p2align	4, 0x90
	.type	SATD.53,@function
SATD.53:                                # @SATD.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$536439257, -184(%rbp)  # imm = 0x1FF969D9
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB78_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB78_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB78_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB78_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB78_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB78_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB78_6
.LBB78_5:                               # %cond.false
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	-100(%rbp), %eax
.LBB78_6:                               # %cond.end
                                        #   in Loop: Header=BB78_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB78_2
.LBB78_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_14
.LBB78_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB78_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB78_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB78_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB78_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_10
.LBB78_13:                              # %for.end270
	jmp	.LBB78_14
.LBB78_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$536439257, -184(%rbp)  # imm = 0x1FF969D9
	jne	.LBB78_16
.LBB78_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_15
.Lfunc_end78:
	.size	SATD.53, .Lfunc_end78-SATD.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.54
.LCPI79_0:
	.quad	4602678819172646912     # double 0.5
.LCPI79_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.54
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.54,@function
FullPelBlockMotionBiPred.54:            # @FullPelBlockMotionBiPred.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$919668248, -180(%rbp)  # imm = 0x36D10618
	movq	%rdi, -216(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -124(%rbp)
	movl	%r8d, -120(%rbp)
	movl	%r9d, -144(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB79_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB79_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB79_4
.LBB79_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB79_4
.LBB79_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -200(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB79_6
# %bb.5:                                # %cond.true9
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB79_7
.LBB79_6:                               # %cond.false11
	movl	-36(%rbp), %eax
.LBB79_7:                               # %cond.end12
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -116(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -108(%rbp)
	movl	$0, -112(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -184(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -148(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-120(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movl	-120(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-124(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-120(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-124(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movl	-120(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -44(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB79_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB79_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_11
.LBB79_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB79_11:                              # %cond.end87
	jmp	.LBB79_13
.LBB79_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB79_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB79_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB79_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_17
.LBB79_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB79_17:                              # %cond.end114
	jmp	.LBB79_19
.LBB79_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB79_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB79_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB79_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB79_23
.LBB79_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB79_23:                              # %cond.end138
	jmp	.LBB79_25
.LBB79_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB79_25
.LBB79_25:                              # %cond.end141
	movw	%ax, -134(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB79_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB79_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB79_29
.LBB79_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB79_29:                              # %cond.end161
	jmp	.LBB79_31
.LBB79_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB79_31
.LBB79_31:                              # %cond.end164
	movw	%ax, -136(%rbp)
	movswl	-136(%rbp), %eax
	movswl	-134(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB79_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB79_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB79_37
.LBB79_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB79_37:                              # %if.end
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB79_42
# %bb.38:                               # %land.lhs.true196
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_42
# %bb.39:                               # %land.lhs.true204
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB79_42
# %bb.40:                               # %land.lhs.true208
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB79_43
.LBB79_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB79_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB79_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_49 Depth 2
                                        #       Child Loop BB79_51 Depth 3
                                        #     Child Loop BB79_85 Depth 2
                                        #       Child Loop BB79_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB79_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB79_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-42(%rbp), %edx
	shll	$2, %edx
	subl	-192(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-46(%rbp), %esi
	shll	$2, %esi
	subl	-176(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-172(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-188(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB79_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_99
.LBB79_47:                              # %if.end257
                                        #   in Loop: Header=BB79_44 Depth=1
	cmpw	$0, -44(%rbp)
	je	.LBB79_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB79_44 Depth=1
	movl	$0, -40(%rbp)
.LBB79_49:                              # %for.cond260
                                        #   Parent Loop BB79_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_51 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB79_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB79_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-216(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB79_51:                              # %for.cond271
                                        #   Parent Loop BB79_44 Depth=1
                                        #     Parent Loop BB79_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB79_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB79_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB79_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_58
.LBB79_54:                              # %cond.false296
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB79_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB79_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_57
.LBB79_56:                              # %cond.false310
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB79_57:                              # %cond.end320
                                        #   in Loop: Header=BB79_51 Depth=3
.LBB79_58:                              # %cond.end322
                                        #   in Loop: Header=BB79_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB79_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB79_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_64
.LBB79_60:                              # %cond.false354
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB79_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB79_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_63
.LBB79_62:                              # %cond.false369
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB79_63:                              # %cond.end379
                                        #   in Loop: Header=BB79_51 Depth=3
.LBB79_64:                              # %cond.end381
                                        #   in Loop: Header=BB79_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB79_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB79_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_70
.LBB79_66:                              # %cond.false413
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB79_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB79_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_69
.LBB79_68:                              # %cond.false428
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB79_69:                              # %cond.end438
                                        #   in Loop: Header=BB79_51 Depth=3
.LBB79_70:                              # %cond.end440
                                        #   in Loop: Header=BB79_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB79_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB79_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB79_76
.LBB79_72:                              # %cond.false472
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB79_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB79_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_75
.LBB79_74:                              # %cond.false487
                                        #   in Loop: Header=BB79_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB79_75:                              # %cond.end497
                                        #   in Loop: Header=BB79_51 Depth=3
.LBB79_76:                              # %cond.end499
                                        #   in Loop: Header=BB79_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB79_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB79_51
.LBB79_78:                              # %for.end
                                        #   in Loop: Header=BB79_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB79_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_83
.LBB79_80:                              # %if.end512
                                        #   in Loop: Header=BB79_49 Depth=2
	jmp	.LBB79_81
.LBB79_81:                              # %for.inc513
                                        #   in Loop: Header=BB79_49 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB79_49
.LBB79_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_83
.LBB79_83:                              # %for.end515
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_96
.LBB79_84:                              # %if.else516
                                        #   in Loop: Header=BB79_44 Depth=1
	movl	$0, -40(%rbp)
.LBB79_85:                              # %for.cond517
                                        #   Parent Loop BB79_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_87 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB79_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB79_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-216(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB79_87:                              # %for.cond529
                                        #   Parent Loop BB79_44 Depth=1
                                        #     Parent Loop BB79_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB79_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB79_87 Depth=3
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB79_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB79_87
.LBB79_90:                              # %for.end583
                                        #   in Loop: Header=BB79_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB79_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_95
.LBB79_92:                              # %if.end587
                                        #   in Loop: Header=BB79_85 Depth=2
	jmp	.LBB79_93
.LBB79_93:                              # %for.inc588
                                        #   in Loop: Header=BB79_85 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB79_85
.LBB79_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_95
.LBB79_95:                              # %for.end590
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_96
.LBB79_96:                              # %if.end591
                                        #   in Loop: Header=BB79_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB79_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB79_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB79_98:                              # %if.end595
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_99
.LBB79_99:                              # %for.inc596
                                        #   in Loop: Header=BB79_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB79_44
.LBB79_100:                             # %for.end598
	cmpl	$0, -112(%rbp)
	je	.LBB79_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB79_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$919668248, -180(%rbp)  # imm = 0x36D10618
	jne	.LBB79_104
.LBB79_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_103
.Lfunc_end79:
	.size	FullPelBlockMotionBiPred.54, .Lfunc_end79-FullPelBlockMotionBiPred.54
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.55     # -- Begin function BIDPartitionCost.55
	.p2align	4, 0x90
	.type	BIDPartitionCost.55,@function
BIDPartitionCost.55:                    # @BIDPartitionCost.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1844904711, -116(%rbp) # imm = 0x6DF70307
	movl	%edi, -12(%rbp)
	movl	%esi, -48(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB80_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB80_3
.LBB80_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB80_3
.LBB80_3:                               # %cond.end
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB80_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB80_6
.LBB80_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB80_6
.LBB80_6:                               # %cond.end17
	movl	%eax, -100(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB80_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB80_9
.LBB80_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB80_9
.LBB80_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB80_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB80_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB80_12:                              # %for.cond53
                                        #   Parent Loop BB80_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB80_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB80_12 Depth=2
	movl	-124(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_12
.LBB80_15:                              # %for.end
                                        #   in Loop: Header=BB80_10 Depth=1
	jmp	.LBB80_16
.LBB80_16:                              # %for.inc164
                                        #   in Loop: Header=BB80_10 Depth=1
	movl	-120(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_10
.LBB80_17:                              # %for.end166
	movl	-104(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB80_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_20 Depth 2
                                        #       Child Loop BB80_22 Depth 3
                                        #         Child Loop BB80_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB80_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB80_20:                              # %for.cond185
                                        #   Parent Loop BB80_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_22 Depth 3
                                        #         Child Loop BB80_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB80_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	-76(%rbp), %edi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB80_22:                              # %for.cond196
                                        #   Parent Loop BB80_18 Depth=1
                                        #     Parent Loop BB80_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_24 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB80_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB80_22 Depth=3
	movl	$0, -28(%rbp)
.LBB80_24:                              # %for.cond200
                                        #   Parent Loop BB80_18 Depth=1
                                        #     Parent Loop BB80_20 Depth=2
                                        #       Parent Loop BB80_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB80_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB80_24 Depth=4
	movq	imgY_org, %rax
	movl	-108(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB80_24 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB80_24
.LBB80_27:                              # %for.end229
                                        #   in Loop: Header=BB80_22 Depth=3
	jmp	.LBB80_28
.LBB80_28:                              # %for.inc230
                                        #   in Loop: Header=BB80_22 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB80_22
.LBB80_29:                              # %for.end232
                                        #   in Loop: Header=BB80_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB80_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB80_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB80_32
.LBB80_31:                              # %if.then
                                        #   in Loop: Header=BB80_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB80_32:                              # %if.end
                                        #   in Loop: Header=BB80_20 Depth=2
	jmp	.LBB80_33
.LBB80_33:                              # %for.inc236
                                        #   in Loop: Header=BB80_20 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_20
.LBB80_34:                              # %for.end239
                                        #   in Loop: Header=BB80_18 Depth=1
	jmp	.LBB80_35
.LBB80_35:                              # %for.inc240
                                        #   in Loop: Header=BB80_18 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_18
.LBB80_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB80_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB80_55
# %bb.38:                               # %if.then248
	movl	$0, -44(%rbp)
.LBB80_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_41 Depth 2
                                        #       Child Loop BB80_43 Depth 3
                                        #         Child Loop BB80_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB80_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB80_39 Depth=1
	movl	$0, -52(%rbp)
.LBB80_41:                              # %for.cond257
                                        #   Parent Loop BB80_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_43 Depth 3
                                        #         Child Loop BB80_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB80_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB80_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB80_43:                              # %for.cond265
                                        #   Parent Loop BB80_39 Depth=1
                                        #     Parent Loop BB80_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_45 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB80_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB80_43 Depth=3
	movl	$0, -32(%rbp)
.LBB80_45:                              # %for.cond269
                                        #   Parent Loop BB80_39 Depth=1
                                        #     Parent Loop BB80_41 Depth=2
                                        #       Parent Loop BB80_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB80_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB80_45 Depth=4
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB80_45 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB80_45
.LBB80_48:                              # %for.end284
                                        #   in Loop: Header=BB80_43 Depth=3
	jmp	.LBB80_49
.LBB80_49:                              # %for.inc285
                                        #   in Loop: Header=BB80_43 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB80_43
.LBB80_50:                              # %for.end287
                                        #   in Loop: Header=BB80_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB80_41 Depth=2
	movl	-112(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB80_41
.LBB80_52:                              # %for.end294
                                        #   in Loop: Header=BB80_39 Depth=1
	jmp	.LBB80_53
.LBB80_53:                              # %for.inc295
                                        #   in Loop: Header=BB80_39 Depth=1
	movl	-100(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB80_39
.LBB80_54:                              # %for.end297
	jmp	.LBB80_55
.LBB80_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1844904711, -116(%rbp) # imm = 0x6DF70307
	jne	.LBB80_57
.LBB80_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_56
.Lfunc_end80:
	.size	BIDPartitionCost.55, .Lfunc_end80-BIDPartitionCost.55
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.56   # -- Begin function Get_Direct_Cost8x8.56
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.56,@function
Get_Direct_Cost8x8.56:                  # @Get_Direct_Cost8x8.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1365988459, -60(%rbp)  # imm = 0x516B546B
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_3 Depth 2
                                        #       Child Loop BB81_7 Depth 3
                                        #         Child Loop BB81_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB81_3:                               # %for.cond3
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_7 Depth 3
                                        #         Child Loop BB81_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB81_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB81_30
.LBB81_6:                               # %if.end
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -28(%rbp)
.LBB81_7:                               # %for.cond34
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_9 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB81_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB81_7 Depth=3
	movl	$0, -12(%rbp)
.LBB81_9:                               # %for.cond38
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_3 Depth=2
                                        #       Parent Loop BB81_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB81_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB81_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB81_9
.LBB81_12:                              # %for.end
                                        #   in Loop: Header=BB81_7 Depth=3
	jmp	.LBB81_13
.LBB81_13:                              # %for.inc67
                                        #   in Loop: Header=BB81_7 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_7
.LBB81_14:                              # %for.end69
                                        #   in Loop: Header=BB81_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_3
.LBB81_16:                              # %for.end73
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_17
.LBB81_17:                              # %for.inc74
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_1
.LBB81_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB81_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB81_29
# %bb.20:                               # %if.then79
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB81_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_23 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB81_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB81_21 Depth=1
	movl	$0, -12(%rbp)
.LBB81_23:                              # %for.cond84
                                        #   Parent Loop BB81_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB81_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB81_23 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB81_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB81_23
.LBB81_26:                              # %for.end97
                                        #   in Loop: Header=BB81_21 Depth=1
	jmp	.LBB81_27
.LBB81_27:                              # %for.inc98
                                        #   in Loop: Header=BB81_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_21
.LBB81_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB81_29:                              # %if.end105
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB81_30:                              # %return
	movl	-56(%rbp), %ebx
	cmpl	$1365988459, -60(%rbp)  # imm = 0x516B546B
	jne	.LBB81_32
.LBB81_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_31
.Lfunc_end81:
	.size	Get_Direct_Cost8x8.56, .Lfunc_end81-Get_Direct_Cost8x8.56
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.57            # -- Begin function find_SATD.57
	.p2align	4, 0x90
	.type	find_SATD.57,@function
find_SATD.57:                           # @find_SATD.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$1976749794, -52(%rbp)  # imm = 0x75D2CEE2
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -24(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_3 Depth 2
                                        #       Child Loop BB82_5 Depth 3
                                        #         Child Loop BB82_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB82_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	$0, -20(%rbp)
.LBB82_3:                               # %for.cond7
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_5 Depth 3
                                        #         Child Loop BB82_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB82_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB82_5:                               # %for.cond10
                                        #   Parent Loop BB82_1 Depth=1
                                        #     Parent Loop BB82_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB82_5 Depth=3
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB82_7:                               # %for.cond13
                                        #   Parent Loop BB82_1 Depth=1
                                        #     Parent Loop BB82_3 Depth=2
                                        #       Parent Loop BB82_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB82_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB82_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB82_7
.LBB82_10:                              # %for.end
                                        #   in Loop: Header=BB82_5 Depth=3
	jmp	.LBB82_11
.LBB82_11:                              # %for.inc24
                                        #   in Loop: Header=BB82_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_5
.LBB82_12:                              # %for.end26
                                        #   in Loop: Header=BB82_3 Depth=2
	jmp	.LBB82_13
.LBB82_13:                              # %for.inc27
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_3
.LBB82_14:                              # %for.end29
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_15
.LBB82_15:                              # %for.inc30
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1
.LBB82_16:                              # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB82_26
# %bb.17:                               # %if.then
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB82_24
# %bb.18:                               # %if.then
	movq	.LJTI82_0(,%rax,8), %rax
	jmpq	*%rax
.LBB82_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_25
.LBB82_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_25
.LBB82_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB82_25
.LBB82_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_25
.LBB82_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB82_25
.LBB82_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB82_25:                              # %sw.epilog
	jmp	.LBB82_31
.LBB82_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB82_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB82_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB82_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_27
.LBB82_30:                              # %for.end79
	jmp	.LBB82_31
.LBB82_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$1976749794, -52(%rbp)  # imm = 0x75D2CEE2
	jne	.LBB82_33
.LBB82_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_32
.Lfunc_end82:
	.size	find_SATD.57, .Lfunc_end82-find_SATD.57
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI82_0:
	.quad	.LBB82_19
	.quad	.LBB82_20
	.quad	.LBB82_20
	.quad	.LBB82_21
	.quad	.LBB82_22
	.quad	.LBB82_22
	.quad	.LBB82_23
                                        # -- End function
	.text
	.globl	SetMotionVectorPredictor.58 # -- Begin function SetMotionVectorPredictor.58
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.58,@function
SetMotionVectorPredictor.58:            # @SetMotionVectorPredictor.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$498283101, -180(%rbp)  # imm = 0x1DB3325D
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -160(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB83_2:                               # %if.end
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -172(%rbp)
	jle	.LBB83_19
# %bb.3:                                # %if.then2
	cmpl	$8, -164(%rbp)
	jge	.LBB83_14
# %bb.4:                                # %if.then4
	cmpl	$8, -172(%rbp)
	jne	.LBB83_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB83_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB83_8
.LBB83_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB83_8:                               # %if.end10
	jmp	.LBB83_13
.LBB83_9:                               # %if.else11
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB83_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB83_12
.LBB83_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB83_12:                              # %if.end18
	jmp	.LBB83_13
.LBB83_13:                              # %if.end19
	jmp	.LBB83_18
.LBB83_14:                              # %if.else20
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB83_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB83_17
.LBB83_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB83_17:                              # %if.end28
	jmp	.LBB83_18
.LBB83_18:                              # %if.end29
	jmp	.LBB83_19
.LBB83_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB83_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB83_21:                              # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB83_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB83_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_25
.LBB83_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_25
.LBB83_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_28
.LBB83_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_28
.LBB83_28:                              # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_31
.LBB83_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_31
.LBB83_31:                              # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB83_72
.LBB83_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB83_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_37
.LBB83_36:                              # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB83_37:                              # %cond.end108
	jmp	.LBB83_39
.LBB83_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_39
.LBB83_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_43
.LBB83_42:                              # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB83_43:                              # %cond.end143
	jmp	.LBB83_45
.LBB83_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_45
.LBB83_45:                              # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_49
.LBB83_48:                              # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB83_49:                              # %cond.end178
	jmp	.LBB83_51
.LBB83_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_51
.LBB83_51:                              # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB83_71
.LBB83_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB83_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB83_56
.LBB83_55:                              # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_56:                              # %cond.end213
	jmp	.LBB83_58
.LBB83_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_58
.LBB83_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB83_62
.LBB83_61:                              # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_62:                              # %cond.end248
	jmp	.LBB83_64
.LBB83_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_64
.LBB83_64:                              # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB83_68
.LBB83_67:                              # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_68:                              # %cond.end283
	jmp	.LBB83_70
.LBB83_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_70
.LBB83_70:                              # %cond.end286
	movl	%eax, -80(%rbp)
.LBB83_71:                              # %if.end288
	jmp	.LBB83_72
.LBB83_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB83_86
.LBB83_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB83_85
.LBB83_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB83_84:                              # %if.end327
	jmp	.LBB83_85
.LBB83_85:                              # %if.end328
	jmp	.LBB83_86
.LBB83_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB83_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB83_96
# %bb.88:                               # %if.then335
	cmpl	$0, -164(%rbp)
	jne	.LBB83_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB83_91:                              # %if.end343
	jmp	.LBB83_95
.LBB83_92:                              # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB83_94:                              # %if.end349
	jmp	.LBB83_95
.LBB83_95:                              # %if.end350
	jmp	.LBB83_107
.LBB83_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB83_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB83_106
# %bb.98:                               # %if.then357
	cmpl	$0, -172(%rbp)
	jne	.LBB83_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB83_101:                             # %if.end365
	jmp	.LBB83_105
.LBB83_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB83_104:                             # %if.end371
	jmp	.LBB83_105
.LBB83_105:                             # %if.end372
	jmp	.LBB83_106
.LBB83_106:                             # %if.end373
	jmp	.LBB83_107
.LBB83_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB83_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB83_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB83_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB83_121
.LBB83_111:                             # %if.then381
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_114
.LBB83_113:                             # %cond.false396
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_114
.LBB83_114:                             # %cond.end397
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_117
.LBB83_116:                             # %cond.false413
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_117
.LBB83_117:                             # %cond.end414
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_120
.LBB83_119:                             # %cond.false430
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_120
.LBB83_120:                             # %cond.end431
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB83_161
.LBB83_121:                             # %if.else433
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_126
.LBB83_125:                             # %cond.false462
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB83_126:                             # %cond.end474
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_128
.LBB83_127:                             # %cond.false476
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_128
.LBB83_128:                             # %cond.end477
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_132
.LBB83_131:                             # %cond.false500
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB83_132:                             # %cond.end513
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_134
.LBB83_133:                             # %cond.false515
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_134
.LBB83_134:                             # %cond.end516
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_138
.LBB83_137:                             # %cond.false539
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB83_138:                             # %cond.end552
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_140
.LBB83_139:                             # %cond.false554
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_140
.LBB83_140:                             # %cond.end555
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB83_160
.LBB83_141:                             # %if.else557
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB83_145
.LBB83_144:                             # %cond.false580
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_145:                             # %cond.end592
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_147
.LBB83_146:                             # %cond.false594
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_147
.LBB83_147:                             # %cond.end595
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB83_151
.LBB83_150:                             # %cond.false619
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_151:                             # %cond.end631
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_153
.LBB83_152:                             # %cond.false633
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_153
.LBB83_153:                             # %cond.end634
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB83_157
.LBB83_156:                             # %cond.false658
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_157:                             # %cond.end670
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_159
.LBB83_158:                             # %cond.false672
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_159
.LBB83_159:                             # %cond.end673
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB83_160:                             # %if.end675
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_161
.LBB83_161:                             # %if.end676
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_166
.LBB83_165:                             # %cond.false696
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_166:                             # %cond.end708
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_168
.LBB83_167:                             # %cond.false710
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_168
.LBB83_168:                             # %cond.end711
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_172
.LBB83_171:                             # %cond.false729
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_172:                             # %cond.end741
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_174
.LBB83_173:                             # %cond.false743
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_174
.LBB83_174:                             # %cond.end744
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -156(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB83_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_178
.LBB83_177:                             # %cond.false762
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_178:                             # %cond.end774
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_180
.LBB83_179:                             # %cond.false776
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_180
.LBB83_180:                             # %cond.end777
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_184
.LBB83_183:                             # %cond.false795
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_184:                             # %cond.end807
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_186
.LBB83_185:                             # %cond.false809
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-176(%rbp), %eax
.LBB83_186:                             # %cond.end810
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -168(%rbp)
.LBB83_187:                             # %if.end812
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB83_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	.LJTI83_0(,%rax,8), %rax
	jmpq	*%rax
.LBB83_189:                             # %sw.bb
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB83_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB83_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_193:                             # %if.end824
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_213
.LBB83_194:                             # %if.else825
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB83_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB83_197
.LBB83_196:                             # %cond.false831
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %edx
.LBB83_197:                             # %cond.end832
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB83_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB83_203
.LBB83_199:                             # %cond.false837
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB83_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB83_202
.LBB83_201:                             # %cond.false841
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB83_202:                             # %cond.end842
                                        #   in Loop: Header=BB83_108 Depth=1
.LBB83_203:                             # %cond.end844
                                        #   in Loop: Header=BB83_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB83_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB83_206
.LBB83_205:                             # %cond.false849
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %edx
.LBB83_206:                             # %cond.end850
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB83_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB83_212
.LBB83_208:                             # %cond.false855
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB83_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB83_211
.LBB83_210:                             # %cond.false859
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB83_211:                             # %cond.end860
                                        #   in Loop: Header=BB83_108 Depth=1
.LBB83_212:                             # %cond.end862
                                        #   in Loop: Header=BB83_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB83_213:                             # %if.end865
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB83_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB83_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB83_222
.LBB83_217:                             # %if.else877
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB83_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB83_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB83_221
.LBB83_220:                             # %if.else886
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_221:                             # %if.end889
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_222
.LBB83_222:                             # %if.end890
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_223
.LBB83_223:                             # %if.end891
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_224:                             # %sw.bb892
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_226:                             # %if.end898
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_227:                             # %sw.bb899
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_229:                             # %if.end905
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_230:                             # %sw.bb906
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_232:                             # %if.end912
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_233:                             # %sw.default
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_234:                             # %sw.epilog
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_108
.LBB83_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB83_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB83_240
.LBB83_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB83_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB83_241:                             # %if.end929
	cmpl	$498283101, -180(%rbp)  # imm = 0x1DB3325D
	jne	.LBB83_243
.LBB83_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_242
.Lfunc_end83:
	.size	SetMotionVectorPredictor.58, .Lfunc_end83-SetMotionVectorPredictor.58
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_189
	.quad	.LBB83_224
	.quad	.LBB83_227
	.quad	.LBB83_230
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.59
.LCPI84_0:
	.quad	4602678819172646912     # double 0.5
.LCPI84_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.59
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.59,@function
FastFullPelBlockMotionSearch.59:        # @FastFullPelBlockMotionSearch.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI84_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1683770070, -72(%rbp)  # imm = 0x645C4AD6
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -64(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -68(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-76(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -80(%rbp)
	movq	BlockSAD, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB84_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-20(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB84_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	search_center_y, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB84_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-52(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB84_5
# %bb.4:                                # %if.then51
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB84_5:                               # %if.end56
	jmp	.LBB84_6
.LBB84_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB84_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB84_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB84_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB84_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB84_7 Depth=1
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-52(%rbp), %eax
	movq	mvbits, %rcx
	movl	-56(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB84_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB84_7 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB84_11:                              # %if.end85
                                        #   in Loop: Header=BB84_7 Depth=1
	jmp	.LBB84_12
.LBB84_12:                              # %if.end86
                                        #   in Loop: Header=BB84_7 Depth=1
	jmp	.LBB84_13
.LBB84_13:                              # %for.inc
                                        #   in Loop: Header=BB84_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB84_7
.LBB84_14:                              # %for.end
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1683770070, -72(%rbp)  # imm = 0x645C4AD6
	jne	.LBB84_16
.LBB84_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_15
.Lfunc_end84:
	.size	FastFullPelBlockMotionSearch.59, .Lfunc_end84-FastFullPelBlockMotionSearch.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.60
.LCPI85_0:
	.quad	4602678819172646912     # double 0.5
.LCPI85_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.60
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.60,@function
FastFullPelBlockMotionSearch.60:        # @FastFullPelBlockMotionSearch.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI85_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$973782579, -64(%rbp)   # imm = 0x3A0ABE33
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -68(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-76(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movq	BlockSAD, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB85_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-20(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB85_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	search_center_y, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB85_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-48(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB85_5
# %bb.4:                                # %if.then51
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB85_5:                               # %if.end56
	jmp	.LBB85_6
.LBB85_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB85_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB85_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB85_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB85_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB85_7 Depth=1
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-48(%rbp), %eax
	movq	mvbits, %rcx
	movl	-56(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-72(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB85_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB85_7 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB85_11:                              # %if.end85
                                        #   in Loop: Header=BB85_7 Depth=1
	jmp	.LBB85_12
.LBB85_12:                              # %if.end86
                                        #   in Loop: Header=BB85_7 Depth=1
	jmp	.LBB85_13
.LBB85_13:                              # %for.inc
                                        #   in Loop: Header=BB85_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB85_7
.LBB85_14:                              # %for.end
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$973782579, -64(%rbp)   # imm = 0x3A0ABE33
	jne	.LBB85_16
.LBB85_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_15
.Lfunc_end85:
	.size	FastFullPelBlockMotionSearch.60, .Lfunc_end85-FastFullPelBlockMotionSearch.60
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.61 # -- Begin function SetupFastFullPelSearch.61
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.61,@function
SetupFastFullPelSearch.61:              # @SetupFastFullPelSearch.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$1593232498, -144(%rbp) # imm = 0x5EF6CC72
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB86_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB86_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB86_4
.LBB86_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB86_4
.LBB86_4:                               # %cond.end
	movl	%ecx, -140(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB86_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB86_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB86_10
.LBB86_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB86_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB86_9:                               # %land.end
.LBB86_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-8(%rbp), %eax
	addl	-140(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -152(%rbp)
	je	.LBB86_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB86_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB86_14
.LBB86_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB86_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -156(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB86_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB86_18
.LBB86_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB86_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB86_24
.LBB86_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB86_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB86_23
.LBB86_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB86_23:                              # %cond.end82
.LBB86_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB86_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB86_27
.LBB86_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB86_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB86_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB86_33
.LBB86_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB86_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB86_32
.LBB86_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB86_32:                              # %cond.end122
.LBB86_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB86_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB86_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_37 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB86_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -72(%rbp)
.LBB86_37:                              # %for.cond155
                                        #   Parent Loop BB86_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB86_37 Depth=2
	movq	imgY_org, %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB86_37 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB86_37
.LBB86_40:                              # %for.end
                                        #   in Loop: Header=BB86_35 Depth=1
	jmp	.LBB86_41
.LBB86_41:                              # %for.inc165
                                        #   in Loop: Header=BB86_35 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB86_35
.LBB86_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB86_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB86_47
# %bb.44:                               # %land.lhs.true174
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB86_47
# %bb.45:                               # %land.lhs.true177
	movl	-68(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB86_47
# %bb.46:                               # %if.then181
	movl	$0, -112(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB86_48
.LBB86_47:                              # %if.else182
	movl	$1, -112(%rbp)
.LBB86_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -28(%rbp)
.LBB86_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB86_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB86_50 Depth=1
	movl	-132(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB86_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB86_50 Depth=1
	movl	-148(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB86_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB86_57
.LBB86_54:                              # %if.end209
                                        #   in Loop: Header=BB86_50 Depth=1
	jmp	.LBB86_55
.LBB86_55:                              # %for.inc210
                                        #   in Loop: Header=BB86_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_50
.LBB86_56:                              # %for.end212.loopexit
	jmp	.LBB86_57
.LBB86_57:                              # %for.end212
	jmp	.LBB86_58
.LBB86_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB86_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_69 Depth 2
                                        #       Child Loop BB86_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB86_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB86_59 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB86_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB86_59 Depth=1
	cmpl	$0, -76(%rbp)
	jl	.LBB86_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB86_59 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB86_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB86_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB86_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB86_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB86_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB86_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB86_67
.LBB86_66:                              # %if.else238
                                        #   in Loop: Header=BB86_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB86_67:                              # %if.end239
                                        #   in Loop: Header=BB86_59 Depth=1
	jmp	.LBB86_68
.LBB86_68:                              # %if.end240
                                        #   in Loop: Header=BB86_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
.LBB86_69:                              # %for.cond242
                                        #   Parent Loop BB86_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB86_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB86_69 Depth=2
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -64(%rbp)
.LBB86_71:                              # %for.cond246
                                        #   Parent Loop BB86_59 Depth=1
                                        #     Parent Loop BB86_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -64(%rbp)
	jge	.LBB86_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB86_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-76(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -76(%rbp)
	movl	-88(%rbp), %edx
	movl	-156(%rbp), %ecx
	movl	-136(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB86_71 Depth=3
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB86_71
.LBB86_74:                              # %for.end381
                                        #   in Loop: Header=BB86_69 Depth=2
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB86_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB86_69
.LBB86_76:                              # %for.end404
                                        #   in Loop: Header=BB86_59 Depth=1
	jmp	.LBB86_77
.LBB86_77:                              # %for.inc405
                                        #   in Loop: Header=BB86_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_59
.LBB86_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$1593232498, -144(%rbp) # imm = 0x5EF6CC72
	jne	.LBB86_80
.LBB86_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_79
.Lfunc_end86:
	.size	SetupFastFullPelSearch.61, .Lfunc_end86-SetupFastFullPelSearch.61
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.62 # -- Begin function SetupFastFullPelSearch.62
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.62,@function
SetupFastFullPelSearch.62:              # @SetupFastFullPelSearch.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$1713513628, -140(%rbp) # imm = 0x6622249C
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB87_4
.LBB87_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_4
.LBB87_4:                               # %cond.end
	movl	%ecx, -132(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB87_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB87_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB87_10
.LBB87_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB87_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB87_9:                               # %land.end
.LBB87_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	movl	-8(%rbp), %eax
	addl	-132(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB87_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB87_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB87_14
.LBB87_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB87_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -144(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -156(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB87_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB87_18
.LBB87_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB87_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB87_24
.LBB87_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB87_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB87_23
.LBB87_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB87_23:                              # %cond.end82
.LBB87_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB87_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB87_27
.LBB87_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB87_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB87_33
.LBB87_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB87_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB87_32
.LBB87_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB87_32:                              # %cond.end122
.LBB87_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB87_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_37 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB87_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -72(%rbp)
.LBB87_37:                              # %for.cond155
                                        #   Parent Loop BB87_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB87_37 Depth=2
	movq	imgY_org, %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB87_37 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB87_37
.LBB87_40:                              # %for.end
                                        #   in Loop: Header=BB87_35 Depth=1
	jmp	.LBB87_41
.LBB87_41:                              # %for.inc165
                                        #   in Loop: Header=BB87_35 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB87_35
.LBB87_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB87_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB87_47
# %bb.44:                               # %land.lhs.true174
	movl	-76(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB87_47
# %bb.45:                               # %land.lhs.true177
	movl	-76(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB87_47
# %bb.46:                               # %if.then181
	movl	$0, -108(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB87_48
.LBB87_47:                              # %if.else182
	movl	$1, -108(%rbp)
.LBB87_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	$0, -28(%rbp)
.LBB87_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB87_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-136(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB87_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-152(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB87_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB87_57
.LBB87_54:                              # %if.end209
                                        #   in Loop: Header=BB87_50 Depth=1
	jmp	.LBB87_55
.LBB87_55:                              # %for.inc210
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_50
.LBB87_56:                              # %for.end212.loopexit
	jmp	.LBB87_57
.LBB87_57:                              # %for.end212
	jmp	.LBB87_58
.LBB87_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB87_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_69 Depth 2
                                        #       Child Loop BB87_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB87_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-76(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB87_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB87_59 Depth=1
	cmpl	$0, -68(%rbp)
	jl	.LBB87_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-68(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB87_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB87_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB87_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB87_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB87_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB87_67
.LBB87_66:                              # %if.else238
                                        #   in Loop: Header=BB87_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB87_67:                              # %if.end239
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_68
.LBB87_68:                              # %if.end240
                                        #   in Loop: Header=BB87_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
.LBB87_69:                              # %for.cond242
                                        #   Parent Loop BB87_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB87_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -64(%rbp)
.LBB87_71:                              # %for.cond246
                                        #   Parent Loop BB87_59 Depth=1
                                        #     Parent Loop BB87_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -64(%rbp)
	jge	.LBB87_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB87_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -68(%rbp)
	movl	-88(%rbp), %edx
	movl	-156(%rbp), %ecx
	movl	-144(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB87_71 Depth=3
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB87_71
.LBB87_74:                              # %for.end381
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB87_69
.LBB87_76:                              # %for.end404
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_77
.LBB87_77:                              # %for.inc405
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_59
.LBB87_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$1713513628, -140(%rbp) # imm = 0x6622249C
	jne	.LBB87_80
.LBB87_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_79
.Lfunc_end87:
	.size	SetupFastFullPelSearch.62, .Lfunc_end87-SetupFastFullPelSearch.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.63
.LCPI88_0:
	.quad	4602678819172646912     # double 0.5
.LCPI88_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.63
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.63,@function
SubPelBlockSearchBiPred.63:             # @SubPelBlockSearchBiPred.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI88_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$63932668, -200(%rbp)   # imm = 0x3CF88FC
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -152(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB88_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB88_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB88_4
.LBB88_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB88_4:                               # %cond.end
	jmp	.LBB88_6
.LBB88_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB88_6:                               # %cond.end18
	movw	%ax, -170(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB88_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB88_10
.LBB88_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB88_10
.LBB88_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -118(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB88_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB88_14
.LBB88_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB88_14:                              # %cond.end55
	jmp	.LBB88_16
.LBB88_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB88_16
.LBB88_16:                              # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB88_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB88_20
.LBB88_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB88_20:                              # %cond.end82
	jmp	.LBB88_22
.LBB88_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB88_22
.LBB88_22:                              # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB88_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB88_26
.LBB88_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB88_26:                              # %cond.end106
	jmp	.LBB88_28
.LBB88_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB88_28
.LBB88_28:                              # %cond.end109
	movw	%ax, -176(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB88_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB88_32
.LBB88_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB88_32:                              # %cond.end130
	jmp	.LBB88_34
.LBB88_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB88_34
.LBB88_34:                              # %cond.end133
	movw	%ax, -174(%rbp)
	movswl	-174(%rbp), %eax
	movswl	-176(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB88_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB88_37
.LBB88_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB88_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB88_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB88_40
.LBB88_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB88_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-152(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_45
# %bb.42:                               # %land.lhs.true205
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_45
# %bb.43:                               # %land.lhs.true211
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB88_46
.LBB88_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB88_46:                              # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_51
# %bb.48:                               # %land.lhs.true232
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_51
# %bb.49:                               # %land.lhs.true238
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB88_52
.LBB88_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB88_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-172(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB88_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_55 Depth 2
                                        #       Child Loop BB88_60 Depth 3
                                        #         Child Loop BB88_162 Depth 4
                                        #           Child Loop BB88_164 Depth 5
                                        #       Child Loop BB88_175 Depth 3
                                        #         Child Loop BB88_181 Depth 4
                                        #           Child Loop BB88_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-170(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB88_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB88_55:                              # %for.cond283
                                        #   Parent Loop BB88_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_60 Depth 3
                                        #         Child Loop BB88_162 Depth 4
                                        #           Child Loop BB88_164 Depth 5
                                        #       Child Loop BB88_175 Depth 3
                                        #         Child Loop BB88_181 Depth 4
                                        #           Child Loop BB88_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB88_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB88_55 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_57:                              # %land.end
                                        #   in Loop: Header=BB88_55 Depth=2
	testb	$1, %al
	jne	.LBB88_58
	jmp	.LBB88_195
.LBB88_58:                              # %for.body289
                                        #   in Loop: Header=BB88_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB88_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$0, -40(%rbp)
.LBB88_60:                              # %for.cond304
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_162 Depth 4
                                        #           Child Loop BB88_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB88_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_67
.LBB88_63:                              # %cond.false345
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_66
.LBB88_65:                              # %cond.false369
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_66:                              # %cond.end389
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_67:                              # %cond.end391
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_73
.LBB88_69:                              # %cond.false421
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_72
.LBB88_71:                              # %cond.false448
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_72:                              # %cond.end470
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_73:                              # %cond.end472
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_79
.LBB88_75:                              # %cond.false505
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_78
.LBB88_77:                              # %cond.false532
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_78:                              # %cond.end554
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_79:                              # %cond.end556
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_85
.LBB88_81:                              # %cond.false589
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_84
.LBB88_83:                              # %cond.false616
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_84:                              # %cond.end638
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_85:                              # %cond.end640
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_91
.LBB88_87:                              # %cond.false681
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_90
.LBB88_89:                              # %cond.false706
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_90:                              # %cond.end726
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_91:                              # %cond.end728
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_97
.LBB88_93:                              # %cond.false759
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_96
.LBB88_95:                              # %cond.false786
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_96:                              # %cond.end808
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_97:                              # %cond.end810
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_103
.LBB88_99:                              # %cond.false843
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_102
.LBB88_101:                             # %cond.false870
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_102:                             # %cond.end892
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_103:                             # %cond.end894
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_109
.LBB88_105:                             # %cond.false927
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_108
.LBB88_107:                             # %cond.false954
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_108:                             # %cond.end976
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_109:                             # %cond.end978
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_115
.LBB88_111:                             # %cond.false1019
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_114
.LBB88_113:                             # %cond.false1044
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_114:                             # %cond.end1064
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_115:                             # %cond.end1066
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_121
.LBB88_117:                             # %cond.false1097
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_120
.LBB88_119:                             # %cond.false1124
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_120:                             # %cond.end1146
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_121:                             # %cond.end1148
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_127
.LBB88_123:                             # %cond.false1181
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_126
.LBB88_125:                             # %cond.false1208
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_126:                             # %cond.end1230
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_127:                             # %cond.end1232
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_133
.LBB88_129:                             # %cond.false1265
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_132
.LBB88_131:                             # %cond.false1292
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_132:                             # %cond.end1314
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_133:                             # %cond.end1316
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_139
.LBB88_135:                             # %cond.false1357
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_138
.LBB88_137:                             # %cond.false1382
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_138:                             # %cond.end1402
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_139:                             # %cond.end1404
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_145
.LBB88_141:                             # %cond.false1435
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_144
.LBB88_143:                             # %cond.false1462
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_144:                             # %cond.end1484
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_145:                             # %cond.end1486
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_151
.LBB88_147:                             # %cond.false1519
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_150
.LBB88_149:                             # %cond.false1546
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_150:                             # %cond.end1568
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_151:                             # %cond.end1570
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_157
.LBB88_153:                             # %cond.false1603
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_156
.LBB88_155:                             # %cond.false1630
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_156:                             # %cond.end1652
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_157:                             # %cond.end1654
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB88_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB88_173
.LBB88_160:                             # %if.end1673
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_170
.LBB88_161:                             # %if.else1674
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB88_162:                             # %for.cond1675
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_164 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB88_162 Depth=4
	movl	$0, -96(%rbp)
.LBB88_164:                             # %for.cond1679
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_60 Depth=3
                                        #         Parent Loop BB88_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB88_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB88_164 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_164
.LBB88_167:                             # %for.end
                                        #   in Loop: Header=BB88_162 Depth=4
	jmp	.LBB88_168
.LBB88_168:                             # %for.inc1694
                                        #   in Loop: Header=BB88_162 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB88_162
.LBB88_169:                             # %for.end1696
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_170
.LBB88_170:                             # %if.end1697
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_171
.LBB88_171:                             # %for.inc1698
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_60
.LBB88_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_173
.LBB88_173:                             # %for.end1702
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_193
.LBB88_174:                             # %if.else1703
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$0, -40(%rbp)
.LBB88_175:                             # %for.cond1704
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_181 Depth 4
                                        #           Child Loop BB88_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB88_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB88_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB88_192
.LBB88_179:                             # %if.end2054
                                        #   in Loop: Header=BB88_175 Depth=3
	jmp	.LBB88_189
.LBB88_180:                             # %if.else2055
                                        #   in Loop: Header=BB88_175 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB88_181:                             # %for.cond2056
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_183 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB88_181 Depth=4
	movl	$0, -96(%rbp)
.LBB88_183:                             # %for.cond2060
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_175 Depth=3
                                        #         Parent Loop BB88_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB88_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB88_183 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_183
.LBB88_186:                             # %for.end2077
                                        #   in Loop: Header=BB88_181 Depth=4
	jmp	.LBB88_187
.LBB88_187:                             # %for.inc2078
                                        #   in Loop: Header=BB88_181 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB88_181
.LBB88_188:                             # %for.end2080
                                        #   in Loop: Header=BB88_175 Depth=3
	jmp	.LBB88_189
.LBB88_189:                             # %if.end2081
                                        #   in Loop: Header=BB88_175 Depth=3
	jmp	.LBB88_190
.LBB88_190:                             # %for.inc2082
                                        #   in Loop: Header=BB88_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_175
.LBB88_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_192
.LBB88_192:                             # %for.end2086
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_193
.LBB88_193:                             # %if.end2087
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_194
.LBB88_194:                             # %for.inc2088
                                        #   in Loop: Header=BB88_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB88_55
.LBB88_195:                             # %for.end2092
                                        #   in Loop: Header=BB88_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB88_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB88_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB88_197:                             # %if.end2101
                                        #   in Loop: Header=BB88_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB88_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB88_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB88_199:                             # %if.end2107
                                        #   in Loop: Header=BB88_53 Depth=1
	jmp	.LBB88_200
.LBB88_200:                             # %for.inc2108
                                        #   in Loop: Header=BB88_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB88_53
.LBB88_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB88_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB88_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB88_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB88_205:                             # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB88_211
.LBB88_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB88_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-196(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB88_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_214 Depth 2
                                        #       Child Loop BB88_219 Depth 3
                                        #         Child Loop BB88_321 Depth 4
                                        #           Child Loop BB88_323 Depth 5
                                        #       Child Loop BB88_334 Depth 3
                                        #         Child Loop BB88_340 Depth 4
                                        #           Child Loop BB88_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB88_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB88_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB88_214:                             # %for.cond2194
                                        #   Parent Loop BB88_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_219 Depth 3
                                        #         Child Loop BB88_321 Depth 4
                                        #           Child Loop BB88_323 Depth 5
                                        #       Child Loop BB88_334 Depth 3
                                        #         Child Loop BB88_340 Depth 4
                                        #           Child Loop BB88_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB88_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB88_214 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_216:                             # %land.end2202
                                        #   in Loop: Header=BB88_214 Depth=2
	testb	$1, %al
	jne	.LBB88_217
	jmp	.LBB88_354
.LBB88_217:                             # %for.body2203
                                        #   in Loop: Header=BB88_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB88_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$0, -40(%rbp)
.LBB88_219:                             # %for.cond2218
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_321 Depth 4
                                        #           Child Loop BB88_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB88_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_226
.LBB88_222:                             # %cond.false2261
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_225
.LBB88_224:                             # %cond.false2286
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_225:                             # %cond.end2306
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_226:                             # %cond.end2308
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_232
.LBB88_228:                             # %cond.false2339
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_231
.LBB88_230:                             # %cond.false2366
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_231:                             # %cond.end2388
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_232:                             # %cond.end2390
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_238
.LBB88_234:                             # %cond.false2423
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_237
.LBB88_236:                             # %cond.false2450
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_237:                             # %cond.end2472
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_238:                             # %cond.end2474
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_244
.LBB88_240:                             # %cond.false2507
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_243
.LBB88_242:                             # %cond.false2534
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_243:                             # %cond.end2556
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_244:                             # %cond.end2558
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_250
.LBB88_246:                             # %cond.false2599
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_249
.LBB88_248:                             # %cond.false2624
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_249:                             # %cond.end2644
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_250:                             # %cond.end2646
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_256
.LBB88_252:                             # %cond.false2677
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_255
.LBB88_254:                             # %cond.false2704
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_255:                             # %cond.end2726
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_256:                             # %cond.end2728
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_262
.LBB88_258:                             # %cond.false2761
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_261
.LBB88_260:                             # %cond.false2788
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_261:                             # %cond.end2810
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_262:                             # %cond.end2812
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_268
.LBB88_264:                             # %cond.false2845
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_267
.LBB88_266:                             # %cond.false2872
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_267:                             # %cond.end2894
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_268:                             # %cond.end2896
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_274
.LBB88_270:                             # %cond.false2937
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_273
.LBB88_272:                             # %cond.false2962
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_273:                             # %cond.end2982
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_274:                             # %cond.end2984
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_280
.LBB88_276:                             # %cond.false3015
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_279
.LBB88_278:                             # %cond.false3042
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_279:                             # %cond.end3064
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_280:                             # %cond.end3066
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_286
.LBB88_282:                             # %cond.false3099
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_285
.LBB88_284:                             # %cond.false3126
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_285:                             # %cond.end3148
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_286:                             # %cond.end3150
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_292
.LBB88_288:                             # %cond.false3183
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_291
.LBB88_290:                             # %cond.false3210
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_291:                             # %cond.end3232
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_292:                             # %cond.end3234
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_298
.LBB88_294:                             # %cond.false3275
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_297
.LBB88_296:                             # %cond.false3300
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_297:                             # %cond.end3320
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_298:                             # %cond.end3322
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_304
.LBB88_300:                             # %cond.false3353
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_303
.LBB88_302:                             # %cond.false3380
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_303:                             # %cond.end3402
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_304:                             # %cond.end3404
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_310
.LBB88_306:                             # %cond.false3437
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_309
.LBB88_308:                             # %cond.false3464
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_309:                             # %cond.end3486
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_310:                             # %cond.end3488
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_316
.LBB88_312:                             # %cond.false3521
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_315
.LBB88_314:                             # %cond.false3548
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_315:                             # %cond.end3570
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_316:                             # %cond.end3572
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB88_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB88_332
.LBB88_319:                             # %if.end3593
                                        #   in Loop: Header=BB88_219 Depth=3
	jmp	.LBB88_329
.LBB88_320:                             # %if.else3594
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB88_321:                             # %for.cond3595
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_323 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB88_321 Depth=4
	movl	$0, -96(%rbp)
.LBB88_323:                             # %for.cond3599
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_219 Depth=3
                                        #         Parent Loop BB88_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB88_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB88_323 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_323
.LBB88_326:                             # %for.end3616
                                        #   in Loop: Header=BB88_321 Depth=4
	jmp	.LBB88_327
.LBB88_327:                             # %for.inc3617
                                        #   in Loop: Header=BB88_321 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB88_321
.LBB88_328:                             # %for.end3619
                                        #   in Loop: Header=BB88_219 Depth=3
	jmp	.LBB88_329
.LBB88_329:                             # %if.end3620
                                        #   in Loop: Header=BB88_219 Depth=3
	jmp	.LBB88_330
.LBB88_330:                             # %for.inc3621
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_219
.LBB88_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_332
.LBB88_332:                             # %for.end3625
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_352
.LBB88_333:                             # %if.else3626
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$0, -40(%rbp)
.LBB88_334:                             # %for.cond3627
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_340 Depth 4
                                        #           Child Loop BB88_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB88_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB88_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB88_351
.LBB88_338:                             # %if.end3978
                                        #   in Loop: Header=BB88_334 Depth=3
	jmp	.LBB88_348
.LBB88_339:                             # %if.else3979
                                        #   in Loop: Header=BB88_334 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB88_340:                             # %for.cond3980
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_342 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB88_340 Depth=4
	movl	$0, -96(%rbp)
.LBB88_342:                             # %for.cond3984
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_334 Depth=3
                                        #         Parent Loop BB88_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB88_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB88_342 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_342
.LBB88_345:                             # %for.end4001
                                        #   in Loop: Header=BB88_340 Depth=4
	jmp	.LBB88_346
.LBB88_346:                             # %for.inc4002
                                        #   in Loop: Header=BB88_340 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB88_340
.LBB88_347:                             # %for.end4004
                                        #   in Loop: Header=BB88_334 Depth=3
	jmp	.LBB88_348
.LBB88_348:                             # %if.end4005
                                        #   in Loop: Header=BB88_334 Depth=3
	jmp	.LBB88_349
.LBB88_349:                             # %for.inc4006
                                        #   in Loop: Header=BB88_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_334
.LBB88_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_351
.LBB88_351:                             # %for.end4010
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_352
.LBB88_352:                             # %if.end4011
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_353
.LBB88_353:                             # %for.inc4012
                                        #   in Loop: Header=BB88_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB88_214
.LBB88_354:                             # %for.end4016
                                        #   in Loop: Header=BB88_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB88_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB88_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB88_356:                             # %if.end4026
                                        #   in Loop: Header=BB88_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB88_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB88_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB88_358:                             # %if.end4032
                                        #   in Loop: Header=BB88_212 Depth=1
	jmp	.LBB88_359
.LBB88_359:                             # %for.inc4033
                                        #   in Loop: Header=BB88_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB88_212
.LBB88_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB88_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB88_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$63932668, -200(%rbp)   # imm = 0x3CF88FC
	jne	.LBB88_364
.LBB88_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_363
.Lfunc_end88:
	.size	SubPelBlockSearchBiPred.63, .Lfunc_end88-SubPelBlockSearchBiPred.63
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.64     # -- Begin function BIDPartitionCost.64
	.p2align	4, 0x90
	.type	BIDPartitionCost.64,@function
BIDPartitionCost.64:                    # @BIDPartitionCost.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$984900976, -124(%rbp)  # imm = 0x3AB46570
	movl	%edi, -12(%rbp)
	movl	%esi, -48(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB89_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB89_3
.LBB89_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB89_3
.LBB89_3:                               # %cond.end
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB89_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB89_6
.LBB89_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB89_6
.LBB89_6:                               # %cond.end17
	movl	%eax, -108(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB89_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB89_9
.LBB89_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB89_9
.LBB89_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB89_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB89_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB89_12:                              # %for.cond53
                                        #   Parent Loop BB89_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB89_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB89_12 Depth=2
	movl	-120(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_12
.LBB89_15:                              # %for.end
                                        #   in Loop: Header=BB89_10 Depth=1
	jmp	.LBB89_16
.LBB89_16:                              # %for.inc164
                                        #   in Loop: Header=BB89_10 Depth=1
	movl	-116(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_10
.LBB89_17:                              # %for.end166
	movl	-104(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB89_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_20 Depth 2
                                        #       Child Loop BB89_22 Depth 3
                                        #         Child Loop BB89_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB89_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB89_20:                              # %for.cond185
                                        #   Parent Loop BB89_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_22 Depth 3
                                        #         Child Loop BB89_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB89_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	-72(%rbp), %edi
	movl	-76(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-36(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB89_22:                              # %for.cond196
                                        #   Parent Loop BB89_18 Depth=1
                                        #     Parent Loop BB89_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB89_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB89_22 Depth=3
	movl	$0, -32(%rbp)
.LBB89_24:                              # %for.cond200
                                        #   Parent Loop BB89_18 Depth=1
                                        #     Parent Loop BB89_20 Depth=2
                                        #       Parent Loop BB89_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB89_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB89_24 Depth=4
	movq	imgY_org, %rax
	movl	-112(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB89_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB89_24
.LBB89_27:                              # %for.end229
                                        #   in Loop: Header=BB89_22 Depth=3
	jmp	.LBB89_28
.LBB89_28:                              # %for.inc230
                                        #   in Loop: Header=BB89_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB89_22
.LBB89_29:                              # %for.end232
                                        #   in Loop: Header=BB89_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB89_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB89_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB89_32
.LBB89_31:                              # %if.then
                                        #   in Loop: Header=BB89_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB89_32:                              # %if.end
                                        #   in Loop: Header=BB89_20 Depth=2
	jmp	.LBB89_33
.LBB89_33:                              # %for.inc236
                                        #   in Loop: Header=BB89_20 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_20
.LBB89_34:                              # %for.end239
                                        #   in Loop: Header=BB89_18 Depth=1
	jmp	.LBB89_35
.LBB89_35:                              # %for.inc240
                                        #   in Loop: Header=BB89_18 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_18
.LBB89_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB89_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB89_55
# %bb.38:                               # %if.then248
	movl	$0, -44(%rbp)
.LBB89_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_41 Depth 2
                                        #       Child Loop BB89_43 Depth 3
                                        #         Child Loop BB89_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB89_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB89_39 Depth=1
	movl	$0, -52(%rbp)
.LBB89_41:                              # %for.cond257
                                        #   Parent Loop BB89_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_43 Depth 3
                                        #         Child Loop BB89_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB89_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB89_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB89_43:                              # %for.cond265
                                        #   Parent Loop BB89_39 Depth=1
                                        #     Parent Loop BB89_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB89_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB89_43 Depth=3
	movl	$0, -28(%rbp)
.LBB89_45:                              # %for.cond269
                                        #   Parent Loop BB89_39 Depth=1
                                        #     Parent Loop BB89_41 Depth=2
                                        #       Parent Loop BB89_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB89_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB89_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB89_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB89_45
.LBB89_48:                              # %for.end284
                                        #   in Loop: Header=BB89_43 Depth=3
	jmp	.LBB89_49
.LBB89_49:                              # %for.inc285
                                        #   in Loop: Header=BB89_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB89_43
.LBB89_50:                              # %for.end287
                                        #   in Loop: Header=BB89_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB89_41 Depth=2
	movl	-100(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB89_41
.LBB89_52:                              # %for.end294
                                        #   in Loop: Header=BB89_39 Depth=1
	jmp	.LBB89_53
.LBB89_53:                              # %for.inc295
                                        #   in Loop: Header=BB89_39 Depth=1
	movl	-108(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_39
.LBB89_54:                              # %for.end297
	jmp	.LBB89_55
.LBB89_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$984900976, -124(%rbp)  # imm = 0x3AB46570
	jne	.LBB89_57
.LBB89_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_56
.Lfunc_end89:
	.size	BIDPartitionCost.64, .Lfunc_end89-BIDPartitionCost.64
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.65 # -- Begin function PartitionMotionSearch.65
	.p2align	4, 0x90
	.type	PartitionMotionSearch.65,@function
PartitionMotionSearch.65:               # @PartitionMotionSearch.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$893615276, -80(%rbp)   # imm = 0x35437CAC
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB90_2
# %bb.1:                                # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB90_3
.LBB90_3:                               # %cond.end
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB90_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB90_6
# %bb.5:                                # %if.then20
	movl	$4, -40(%rbp)
	jmp	.LBB90_7
.LBB90_6:                               # %if.else
	movl	$2, -40(%rbp)
.LBB90_7:                               # %if.end
	jmp	.LBB90_9
.LBB90_8:                               # %if.else21
	movl	$0, -40(%rbp)
.LBB90_9:                               # %if.end22
	movl	-72(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -8(%rbp)
.LBB90_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_12 Depth 2
                                        #       Child Loop BB90_29 Depth 3
                                        #         Child Loop BB90_31 Depth 4
                                        #           Child Loop BB90_33 Depth 5
                                        #             Child Loop BB90_35 Depth 6
	movl	-8(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB90_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB90_10 Depth=1
	movw	$0, -2(%rbp)
.LBB90_12:                              # %for.cond27
                                        #   Parent Loop BB90_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_29 Depth 3
                                        #         Child Loop BB90_31 Depth 4
                                        #           Child Loop BB90_33 Depth 5
                                        #             Child Loop BB90_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB90_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB90_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB90_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB90_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB90_28
.LBB90_15:                              # %if.else38
                                        #   in Loop: Header=BB90_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB90_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB90_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB90_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB90_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB90_19
.LBB90_18:                              # %cond.false49
                                        #   in Loop: Header=BB90_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB90_19
.LBB90_19:                              # %cond.end50
                                        #   in Loop: Header=BB90_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	jmp	.LBB90_27
.LBB90_20:                              # %if.else53
                                        #   in Loop: Header=BB90_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB90_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB90_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB90_23
.LBB90_22:                              # %cond.false60
                                        #   in Loop: Header=BB90_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB90_23
.LBB90_23:                              # %cond.end61
                                        #   in Loop: Header=BB90_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-12(%rbp), %edx
	jge	.LBB90_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB90_12 Depth=2
	movl	$2, %edx
	jmp	.LBB90_26
.LBB90_25:                              # %cond.false67
                                        #   in Loop: Header=BB90_12 Depth=2
	movl	-12(%rbp), %edx
.LBB90_26:                              # %cond.end68
                                        #   in Loop: Header=BB90_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
.LBB90_27:                              # %if.end71
                                        #   in Loop: Header=BB90_12 Depth=2
	jmp	.LBB90_28
.LBB90_28:                              # %if.end72
                                        #   in Loop: Header=BB90_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB90_29:                              # %for.cond89
                                        #   Parent Loop BB90_10 Depth=1
                                        #     Parent Loop BB90_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_31 Depth 4
                                        #           Child Loop BB90_33 Depth 5
                                        #             Child Loop BB90_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB90_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB90_31:                              # %for.cond103
                                        #   Parent Loop BB90_10 Depth=1
                                        #     Parent Loop BB90_12 Depth=2
                                        #       Parent Loop BB90_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_33 Depth 5
                                        #             Child Loop BB90_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB90_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-12(%rbp), %r8d
	movl	-48(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -32(%rbp)
.LBB90_33:                              # %for.cond123
                                        #   Parent Loop BB90_10 Depth=1
                                        #     Parent Loop BB90_12 Depth=2
                                        #       Parent Loop BB90_29 Depth=3
                                        #         Parent Loop BB90_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB90_35 Depth 6
	movl	-32(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB90_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB90_33 Depth=5
	movl	$0, -24(%rbp)
.LBB90_35:                              # %for.cond127
                                        #   Parent Loop BB90_10 Depth=1
                                        #     Parent Loop BB90_12 Depth=2
                                        #       Parent Loop BB90_29 Depth=3
                                        #         Parent Loop BB90_31 Depth=4
                                        #           Parent Loop BB90_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB90_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB90_35 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB90_35
.LBB90_38:                              # %for.end
                                        #   in Loop: Header=BB90_33 Depth=5
	jmp	.LBB90_39
.LBB90_39:                              # %for.inc174
                                        #   in Loop: Header=BB90_33 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_33
.LBB90_40:                              # %for.end176
                                        #   in Loop: Header=BB90_31 Depth=4
	jmp	.LBB90_41
.LBB90_41:                              # %for.inc177
                                        #   in Loop: Header=BB90_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_31
.LBB90_42:                              # %for.end179
                                        #   in Loop: Header=BB90_29 Depth=3
	jmp	.LBB90_43
.LBB90_43:                              # %for.inc180
                                        #   in Loop: Header=BB90_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_29
.LBB90_44:                              # %for.end182
                                        #   in Loop: Header=BB90_12 Depth=2
	jmp	.LBB90_45
.LBB90_45:                              # %for.inc183
                                        #   in Loop: Header=BB90_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB90_12
.LBB90_46:                              # %for.end185
                                        #   in Loop: Header=BB90_10 Depth=1
	jmp	.LBB90_47
.LBB90_47:                              # %for.inc186
                                        #   in Loop: Header=BB90_10 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_10
.LBB90_48:                              # %for.end188
	cmpl	$893615276, -80(%rbp)   # imm = 0x35437CAC
	jne	.LBB90_50
.LBB90_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_49
.Lfunc_end90:
	.size	PartitionMotionSearch.65, .Lfunc_end90-PartitionMotionSearch.65
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.66   # -- Begin function BPredPartitionCost.66
	.p2align	4, 0x90
	.type	BPredPartitionCost.66,@function
BPredPartitionCost.66:                  # @BPredPartitionCost.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$482209675, -124(%rbp)  # imm = 0x1CBDEF8B
	movl	%edi, -12(%rbp)
	movl	%esi, -48(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -108(%rbp)
	movl	%r9d, -80(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB91_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB91_3
.LBB91_3:                               # %cond.end
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB91_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB91_6
.LBB91_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB91_6
.LBB91_6:                               # %cond.end17
	movl	%eax, -116(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB91_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB91_9
.LBB91_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB91_9
.LBB91_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -80(%rbp)
	je	.LBB91_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB91_12
.LBB91_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB91_12:                              # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB91_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_15 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB91_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB91_15:                              # %for.cond56
                                        #   Parent Loop BB91_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB91_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB91_15 Depth=2
	movl	-104(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_15
.LBB91_18:                              # %for.end
                                        #   in Loop: Header=BB91_13 Depth=1
	jmp	.LBB91_19
.LBB91_19:                              # %for.inc167
                                        #   in Loop: Header=BB91_13 Depth=1
	movl	-112(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB91_13
.LBB91_20:                              # %for.end169
	movl	-108(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB91_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_23 Depth 2
                                        #       Child Loop BB91_25 Depth 3
                                        #         Child Loop BB91_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB91_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB91_23:                              # %for.cond188
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_25 Depth 3
                                        #         Child Loop BB91_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB91_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movw	-34(%rbp), %bx
	movl	-80(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB91_25:                              # %for.cond199
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB91_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB91_25 Depth=3
	movl	$0, -32(%rbp)
.LBB91_27:                              # %for.cond203
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_23 Depth=2
                                        #       Parent Loop BB91_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB91_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB91_27 Depth=4
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB91_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB91_27
.LBB91_30:                              # %for.end232
                                        #   in Loop: Header=BB91_25 Depth=3
	jmp	.LBB91_31
.LBB91_31:                              # %for.inc233
                                        #   in Loop: Header=BB91_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB91_25
.LBB91_32:                              # %for.end235
                                        #   in Loop: Header=BB91_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB91_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB91_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB91_35
.LBB91_34:                              # %if.then
                                        #   in Loop: Header=BB91_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB91_35:                              # %if.end
                                        #   in Loop: Header=BB91_23 Depth=2
	jmp	.LBB91_36
.LBB91_36:                              # %for.inc240
                                        #   in Loop: Header=BB91_23 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_23
.LBB91_37:                              # %for.end243
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_38
.LBB91_38:                              # %for.inc244
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB91_21
.LBB91_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB91_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB91_58
# %bb.41:                               # %if.then252
	movl	$0, -52(%rbp)
.LBB91_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_44 Depth 2
                                        #       Child Loop BB91_46 Depth 3
                                        #         Child Loop BB91_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB91_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB91_42 Depth=1
	movl	$0, -44(%rbp)
.LBB91_44:                              # %for.cond261
                                        #   Parent Loop BB91_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_46 Depth 3
                                        #         Child Loop BB91_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB91_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB91_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB91_46:                              # %for.cond269
                                        #   Parent Loop BB91_42 Depth=1
                                        #     Parent Loop BB91_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB91_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB91_46 Depth=3
	movl	$0, -28(%rbp)
.LBB91_48:                              # %for.cond273
                                        #   Parent Loop BB91_42 Depth=1
                                        #     Parent Loop BB91_44 Depth=2
                                        #       Parent Loop BB91_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB91_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB91_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB91_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB91_48
.LBB91_51:                              # %for.end288
                                        #   in Loop: Header=BB91_46 Depth=3
	jmp	.LBB91_52
.LBB91_52:                              # %for.inc289
                                        #   in Loop: Header=BB91_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB91_46
.LBB91_53:                              # %for.end291
                                        #   in Loop: Header=BB91_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB91_44 Depth=2
	movl	-100(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_44
.LBB91_55:                              # %for.end298
                                        #   in Loop: Header=BB91_42 Depth=1
	jmp	.LBB91_56
.LBB91_56:                              # %for.inc299
                                        #   in Loop: Header=BB91_42 Depth=1
	movl	-116(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB91_42
.LBB91_57:                              # %for.end301
	jmp	.LBB91_58
.LBB91_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$482209675, -124(%rbp)  # imm = 0x1CBDEF8B
	jne	.LBB91_60
.LBB91_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_59
.Lfunc_end91:
	.size	BPredPartitionCost.66, .Lfunc_end91-BPredPartitionCost.66
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.67     # -- Begin function BIDPartitionCost.67
	.p2align	4, 0x90
	.type	BIDPartitionCost.67,@function
BIDPartitionCost.67:                    # @BIDPartitionCost.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$429875574, -112(%rbp)  # imm = 0x199F6176
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB92_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB92_3
.LBB92_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB92_3
.LBB92_3:                               # %cond.end
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB92_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB92_6
.LBB92_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB92_6
.LBB92_6:                               # %cond.end17
	movl	%eax, -108(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB92_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB92_9
.LBB92_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB92_9
.LBB92_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB92_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_12 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB92_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB92_12:                              # %for.cond53
                                        #   Parent Loop BB92_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB92_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB92_12 Depth=2
	movl	-116(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_12
.LBB92_15:                              # %for.end
                                        #   in Loop: Header=BB92_10 Depth=1
	jmp	.LBB92_16
.LBB92_16:                              # %for.inc164
                                        #   in Loop: Header=BB92_10 Depth=1
	movl	-100(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_10
.LBB92_17:                              # %for.end166
	movl	-104(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB92_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_20 Depth 2
                                        #       Child Loop BB92_22 Depth 3
                                        #         Child Loop BB92_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB92_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB92_20:                              # %for.cond185
                                        #   Parent Loop BB92_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_22 Depth 3
                                        #         Child Loop BB92_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB92_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	-72(%rbp), %edi
	movl	-76(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-36(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB92_22:                              # %for.cond196
                                        #   Parent Loop BB92_18 Depth=1
                                        #     Parent Loop BB92_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB92_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB92_22 Depth=3
	movl	$0, -32(%rbp)
.LBB92_24:                              # %for.cond200
                                        #   Parent Loop BB92_18 Depth=1
                                        #     Parent Loop BB92_20 Depth=2
                                        #       Parent Loop BB92_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB92_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB92_24 Depth=4
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB92_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB92_24
.LBB92_27:                              # %for.end229
                                        #   in Loop: Header=BB92_22 Depth=3
	jmp	.LBB92_28
.LBB92_28:                              # %for.inc230
                                        #   in Loop: Header=BB92_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_22
.LBB92_29:                              # %for.end232
                                        #   in Loop: Header=BB92_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB92_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB92_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB92_32
.LBB92_31:                              # %if.then
                                        #   in Loop: Header=BB92_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB92_32:                              # %if.end
                                        #   in Loop: Header=BB92_20 Depth=2
	jmp	.LBB92_33
.LBB92_33:                              # %for.inc236
                                        #   in Loop: Header=BB92_20 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_20
.LBB92_34:                              # %for.end239
                                        #   in Loop: Header=BB92_18 Depth=1
	jmp	.LBB92_35
.LBB92_35:                              # %for.inc240
                                        #   in Loop: Header=BB92_18 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_18
.LBB92_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB92_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB92_55
# %bb.38:                               # %if.then248
	movl	$0, -52(%rbp)
.LBB92_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_41 Depth 2
                                        #       Child Loop BB92_43 Depth 3
                                        #         Child Loop BB92_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB92_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB92_39 Depth=1
	movl	$0, -48(%rbp)
.LBB92_41:                              # %for.cond257
                                        #   Parent Loop BB92_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_43 Depth 3
                                        #         Child Loop BB92_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB92_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB92_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB92_43:                              # %for.cond265
                                        #   Parent Loop BB92_39 Depth=1
                                        #     Parent Loop BB92_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB92_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB92_43 Depth=3
	movl	$0, -28(%rbp)
.LBB92_45:                              # %for.cond269
                                        #   Parent Loop BB92_39 Depth=1
                                        #     Parent Loop BB92_41 Depth=2
                                        #       Parent Loop BB92_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB92_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB92_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB92_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_45
.LBB92_48:                              # %for.end284
                                        #   in Loop: Header=BB92_43 Depth=3
	jmp	.LBB92_49
.LBB92_49:                              # %for.inc285
                                        #   in Loop: Header=BB92_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB92_43
.LBB92_50:                              # %for.end287
                                        #   in Loop: Header=BB92_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB92_41 Depth=2
	movl	-120(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB92_41
.LBB92_52:                              # %for.end294
                                        #   in Loop: Header=BB92_39 Depth=1
	jmp	.LBB92_53
.LBB92_53:                              # %for.inc295
                                        #   in Loop: Header=BB92_39 Depth=1
	movl	-108(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB92_39
.LBB92_54:                              # %for.end297
	jmp	.LBB92_55
.LBB92_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$429875574, -112(%rbp)  # imm = 0x199F6176
	jne	.LBB92_57
.LBB92_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_56
.Lfunc_end92:
	.size	BIDPartitionCost.67, .Lfunc_end92-BIDPartitionCost.67
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.68 # -- Begin function InitializeFastFullIntegerSearch.68
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.68,@function
InitializeFastFullIntegerSearch.68:     # @InitializeFastFullIntegerSearch.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1806836099, -28(%rbp)  # imm = 0x6BB22183
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB93_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB93_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_7 Depth 2
                                        #       Child Loop BB93_11 Depth 3
                                        #         Child Loop BB93_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB93_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB93_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB93_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_6:                               # %if.end12
                                        #   in Loop: Header=BB93_3 Depth=1
	movl	$0, -8(%rbp)
.LBB93_7:                               # %for.cond13
                                        #   Parent Loop BB93_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_11 Depth 3
                                        #         Child Loop BB93_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB93_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB93_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_10:                              # %if.end26
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	$1, -12(%rbp)
.LBB93_11:                              # %for.cond27
                                        #   Parent Loop BB93_3 Depth=1
                                        #     Parent Loop BB93_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB93_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB93_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB93_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_14:                              # %if.end41
                                        #   in Loop: Header=BB93_11 Depth=3
	movl	$0, -20(%rbp)
.LBB93_15:                              # %for.cond42
                                        #   Parent Loop BB93_3 Depth=1
                                        #     Parent Loop BB93_7 Depth=2
                                        #       Parent Loop BB93_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB93_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB93_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB93_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_18:                              # %if.end60
                                        #   in Loop: Header=BB93_15 Depth=4
	jmp	.LBB93_19
.LBB93_19:                              # %for.inc
                                        #   in Loop: Header=BB93_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_15
.LBB93_20:                              # %for.end
                                        #   in Loop: Header=BB93_11 Depth=3
	jmp	.LBB93_21
.LBB93_21:                              # %for.inc61
                                        #   in Loop: Header=BB93_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_11
.LBB93_22:                              # %for.end63
                                        #   in Loop: Header=BB93_7 Depth=2
	jmp	.LBB93_23
.LBB93_23:                              # %for.inc64
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_7
.LBB93_24:                              # %for.end66
                                        #   in Loop: Header=BB93_3 Depth=1
	jmp	.LBB93_25
.LBB93_25:                              # %for.inc67
                                        #   in Loop: Header=BB93_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_3
.LBB93_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB93_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB93_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB93_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB93_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB93_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB93_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB93_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB93_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB93_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB93_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB93_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB93_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB93_40:                              # %if.end109
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB93_42:                              # %if.end120
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB93_44:                              # %if.end131
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB93_46:                              # %if.end142
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB93_48:                              # %if.end153
                                        #   in Loop: Header=BB93_37 Depth=1
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc154
                                        #   in Loop: Header=BB93_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_37
.LBB93_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB93_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB93_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB93_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	$0, -8(%rbp)
.LBB93_54:                              # %for.cond164
                                        #   Parent Loop BB93_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB93_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_54
.LBB93_57:                              # %for.end175
                                        #   in Loop: Header=BB93_52 Depth=1
	jmp	.LBB93_58
.LBB93_58:                              # %for.inc176
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_52
.LBB93_59:                              # %for.end178
	jmp	.LBB93_69
.LBB93_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB93_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB93_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB93_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB93_63:                              # %for.cond191
                                        #   Parent Loop BB93_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB93_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB93_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB93_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_63
.LBB93_66:                              # %for.end202
                                        #   in Loop: Header=BB93_61 Depth=1
	jmp	.LBB93_67
.LBB93_67:                              # %for.inc203
                                        #   in Loop: Header=BB93_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_61
.LBB93_68:                              # %for.end205
	jmp	.LBB93_69
.LBB93_69:                              # %if.end206
	cmpl	$1806836099, -28(%rbp)  # imm = 0x6BB22183
	jne	.LBB93_71
.LBB93_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_70
.Lfunc_end93:
	.size	InitializeFastFullIntegerSearch.68, .Lfunc_end93-InitializeFastFullIntegerSearch.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.69
.LCPI94_0:
	.quad	4602678819172646912     # double 0.5
.LCPI94_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.69
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.69,@function
FullPelBlockMotionSearch.69:            # @FullPelBlockMotionSearch.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1347200860, -128(%rbp) # imm = 0x504CA75C
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -68(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB94_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB94_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB94_4
.LBB94_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB94_4
.LBB94_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -24(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -148(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-68(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-68(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -144(%rbp)
	movl	-88(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -124(%rbp)
	movl	-84(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -140(%rbp)
	movl	-88(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movl	-84(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	cmpl	$1, -68(%rbp)
	jne	.LBB94_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB94_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB94_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB94_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -132(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB94_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB94_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB94_14
.LBB94_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB94_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB94_13:                              # %land.end63
.LBB94_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -136(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB94_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB94_17
# %bb.16:                               # %if.then
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB94_18
.LBB94_17:                              # %if.else
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB94_18:                              # %if.end
	movl	-64(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB94_23
# %bb.19:                               # %land.lhs.true81
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_23
# %bb.20:                               # %land.lhs.true86
	movl	-92(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB94_23
# %bb.21:                               # %land.lhs.true89
	movl	-92(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB94_24
.LBB94_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB94_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB94_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_33 Depth 2
                                        #       Child Loop BB94_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB94_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-64(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	subl	-124(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	subl	-140(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -132(%rbp)
	je	.LBB94_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jne	.LBB94_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jne	.LBB94_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB94_30:                              # %if.end128
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB94_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB94_25 Depth=1
	jmp	.LBB94_46
.LBB94_32:                              # %if.end132
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	$0, -32(%rbp)
.LBB94_33:                              # %for.cond133
                                        #   Parent Loop BB94_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_35 Depth 3
	movl	-32(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB94_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB94_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-80(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-60(%rbp), %edx
	addl	-32(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-168(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -76(%rbp)
.LBB94_35:                              # %for.cond140
                                        #   Parent Loop BB94_25 Depth=1
                                        #     Parent Loop BB94_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-76(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB94_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB94_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB94_35 Depth=3
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB94_35
.LBB94_38:                              # %for.end
                                        #   in Loop: Header=BB94_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB94_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB94_25 Depth=1
	jmp	.LBB94_43
.LBB94_40:                              # %if.end178
                                        #   in Loop: Header=BB94_33 Depth=2
	jmp	.LBB94_41
.LBB94_41:                              # %for.inc179
                                        #   in Loop: Header=BB94_33 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB94_33
.LBB94_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB94_25 Depth=1
	jmp	.LBB94_43
.LBB94_43:                              # %for.end181
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB94_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB94_45:                              # %if.end185
                                        #   in Loop: Header=BB94_25 Depth=1
	jmp	.LBB94_46
.LBB94_46:                              # %for.inc186
                                        #   in Loop: Header=BB94_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_25
.LBB94_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB94_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB94_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1347200860, -128(%rbp) # imm = 0x504CA75C
	jne	.LBB94_51
.LBB94_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_50
.Lfunc_end94:
	.size	FullPelBlockMotionSearch.69, .Lfunc_end94-FullPelBlockMotionSearch.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.70
.LCPI95_0:
	.quad	4602678819172646912     # double 0.5
.LCPI95_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.70
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.70,@function
FullPelBlockMotionSearch.70:            # @FullPelBlockMotionSearch.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1867087655, -124(%rbp) # imm = 0x6F497F27
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -76(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB95_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB95_4
.LBB95_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB95_4
.LBB95_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI95_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI95_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -28(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -144(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-76(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-76(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -136(%rbp)
	movl	-64(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movl	-60(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -140(%rbp)
	movl	-64(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-60(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	cmpl	$1, -76(%rbp)
	jne	.LBB95_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB95_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB95_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB95_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB95_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB95_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB95_14
.LBB95_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB95_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB95_13:                              # %land.end63
.LBB95_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -120(%rbp)
	cmpl	$0, -120(%rbp)
	je	.LBB95_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB95_17
# %bb.16:                               # %if.then
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB95_18
.LBB95_17:                              # %if.else
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB95_18:                              # %if.end
	movl	-80(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB95_23
# %bb.19:                               # %land.lhs.true81
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_23
# %bb.20:                               # %land.lhs.true86
	movl	-72(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB95_23
# %bb.21:                               # %land.lhs.true89
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB95_24
.LBB95_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB95_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB95_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_33 Depth 2
                                        #       Child Loop BB95_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB95_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-72(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-84(%rbp), %edx
	shll	$2, %edx
	subl	-132(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-92(%rbp), %esi
	shll	$2, %esi
	subl	-140(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB95_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB95_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB95_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB95_30:                              # %if.end128
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB95_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB95_25 Depth=1
	jmp	.LBB95_46
.LBB95_32:                              # %if.end132
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	$0, -24(%rbp)
.LBB95_33:                              # %for.cond133
                                        #   Parent Loop BB95_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_35 Depth 3
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB95_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB95_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-68(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -88(%rbp)
.LBB95_35:                              # %for.cond140
                                        #   Parent Loop BB95_25 Depth=1
                                        #     Parent Loop BB95_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB95_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB95_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB95_35 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB95_35
.LBB95_38:                              # %for.end
                                        #   in Loop: Header=BB95_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB95_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB95_25 Depth=1
	jmp	.LBB95_43
.LBB95_40:                              # %if.end178
                                        #   in Loop: Header=BB95_33 Depth=2
	jmp	.LBB95_41
.LBB95_41:                              # %for.inc179
                                        #   in Loop: Header=BB95_33 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_33
.LBB95_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB95_25 Depth=1
	jmp	.LBB95_43
.LBB95_43:                              # %for.end181
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB95_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB95_45:                              # %if.end185
                                        #   in Loop: Header=BB95_25 Depth=1
	jmp	.LBB95_46
.LBB95_46:                              # %for.inc186
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_25
.LBB95_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB95_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB95_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1867087655, -124(%rbp) # imm = 0x6F497F27
	jne	.LBB95_51
.LBB95_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_50
.Lfunc_end95:
	.size	FullPelBlockMotionSearch.70, .Lfunc_end95-FullPelBlockMotionSearch.70
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.71 # -- Begin function ResetFastFullIntegerSearch.71
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.71,@function
ResetFastFullIntegerSearch.71:          # @ResetFastFullIntegerSearch.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$446715010, -12(%rbp)   # imm = 0x1AA05482
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_3 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB96_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	$0, -8(%rbp)
.LBB96_3:                               # %for.cond1
                                        #   Parent Loop BB96_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB96_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB96_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB96_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_3
.LBB96_6:                               # %for.end
                                        #   in Loop: Header=BB96_1 Depth=1
	jmp	.LBB96_7
.LBB96_7:                               # %for.inc6
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_8:                               # %for.end8
	cmpl	$446715010, -12(%rbp)   # imm = 0x1AA05482
	jne	.LBB96_10
.LBB96_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_9
.Lfunc_end96:
	.size	ResetFastFullIntegerSearch.71, .Lfunc_end96-ResetFastFullIntegerSearch.71
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.72 # -- Begin function PartitionMotionSearch.72
	.p2align	4, 0x90
	.type	PartitionMotionSearch.72,@function
PartitionMotionSearch.72:               # @PartitionMotionSearch.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1599423611, -80(%rbp)  # imm = 0x5F55447B
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB97_2
# %bb.1:                                # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB97_3
.LBB97_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB97_3
.LBB97_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB97_6
# %bb.5:                                # %if.then20
	movl	$4, -48(%rbp)
	jmp	.LBB97_7
.LBB97_6:                               # %if.else
	movl	$2, -48(%rbp)
.LBB97_7:                               # %if.end
	jmp	.LBB97_9
.LBB97_8:                               # %if.else21
	movl	$0, -48(%rbp)
.LBB97_9:                               # %if.end22
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -64(%rbp)
	movl	$0, -8(%rbp)
.LBB97_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_12 Depth 2
                                        #       Child Loop BB97_29 Depth 3
                                        #         Child Loop BB97_31 Depth 4
                                        #           Child Loop BB97_33 Depth 5
                                        #             Child Loop BB97_35 Depth 6
	movl	-8(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB97_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB97_10 Depth=1
	movw	$0, -2(%rbp)
.LBB97_12:                              # %for.cond27
                                        #   Parent Loop BB97_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_29 Depth 3
                                        #         Child Loop BB97_31 Depth 4
                                        #           Child Loop BB97_33 Depth 5
                                        #             Child Loop BB97_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB97_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB97_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB97_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB97_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB97_28
.LBB97_15:                              # %if.else38
                                        #   in Loop: Header=BB97_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB97_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB97_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB97_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB97_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB97_19
.LBB97_18:                              # %cond.false49
                                        #   in Loop: Header=BB97_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB97_19
.LBB97_19:                              # %cond.end50
                                        #   in Loop: Header=BB97_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	jmp	.LBB97_27
.LBB97_20:                              # %if.else53
                                        #   in Loop: Header=BB97_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB97_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB97_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB97_23
.LBB97_22:                              # %cond.false60
                                        #   in Loop: Header=BB97_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB97_23
.LBB97_23:                              # %cond.end61
                                        #   in Loop: Header=BB97_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-12(%rbp), %edx
	jge	.LBB97_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB97_12 Depth=2
	movl	$2, %edx
	jmp	.LBB97_26
.LBB97_25:                              # %cond.false67
                                        #   in Loop: Header=BB97_12 Depth=2
	movl	-12(%rbp), %edx
.LBB97_26:                              # %cond.end68
                                        #   in Loop: Header=BB97_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
.LBB97_27:                              # %if.end71
                                        #   in Loop: Header=BB97_12 Depth=2
	jmp	.LBB97_28
.LBB97_28:                              # %if.end72
                                        #   in Loop: Header=BB97_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-28(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB97_29:                              # %for.cond89
                                        #   Parent Loop BB97_10 Depth=1
                                        #     Parent Loop BB97_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB97_31 Depth 4
                                        #           Child Loop BB97_33 Depth 5
                                        #             Child Loop BB97_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB97_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB97_31:                              # %for.cond103
                                        #   Parent Loop BB97_10 Depth=1
                                        #     Parent Loop BB97_12 Depth=2
                                        #       Parent Loop BB97_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB97_33 Depth 5
                                        #             Child Loop BB97_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-28(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB97_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-12(%rbp), %r8d
	movl	-44(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -32(%rbp)
.LBB97_33:                              # %for.cond123
                                        #   Parent Loop BB97_10 Depth=1
                                        #     Parent Loop BB97_12 Depth=2
                                        #       Parent Loop BB97_29 Depth=3
                                        #         Parent Loop BB97_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB97_35 Depth 6
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB97_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB97_33 Depth=5
	movl	$0, -36(%rbp)
.LBB97_35:                              # %for.cond127
                                        #   Parent Loop BB97_10 Depth=1
                                        #     Parent Loop BB97_12 Depth=2
                                        #       Parent Loop BB97_29 Depth=3
                                        #         Parent Loop BB97_31 Depth=4
                                        #           Parent Loop BB97_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB97_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB97_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB97_35
.LBB97_38:                              # %for.end
                                        #   in Loop: Header=BB97_33 Depth=5
	jmp	.LBB97_39
.LBB97_39:                              # %for.inc174
                                        #   in Loop: Header=BB97_33 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB97_33
.LBB97_40:                              # %for.end176
                                        #   in Loop: Header=BB97_31 Depth=4
	jmp	.LBB97_41
.LBB97_41:                              # %for.inc177
                                        #   in Loop: Header=BB97_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_31
.LBB97_42:                              # %for.end179
                                        #   in Loop: Header=BB97_29 Depth=3
	jmp	.LBB97_43
.LBB97_43:                              # %for.inc180
                                        #   in Loop: Header=BB97_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_29
.LBB97_44:                              # %for.end182
                                        #   in Loop: Header=BB97_12 Depth=2
	jmp	.LBB97_45
.LBB97_45:                              # %for.inc183
                                        #   in Loop: Header=BB97_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB97_12
.LBB97_46:                              # %for.end185
                                        #   in Loop: Header=BB97_10 Depth=1
	jmp	.LBB97_47
.LBB97_47:                              # %for.inc186
                                        #   in Loop: Header=BB97_10 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_10
.LBB97_48:                              # %for.end188
	cmpl	$1599423611, -80(%rbp)  # imm = 0x5F55447B
	jne	.LBB97_50
.LBB97_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_49
.Lfunc_end97:
	.size	PartitionMotionSearch.72, .Lfunc_end97-PartitionMotionSearch.72
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.73 # -- Begin function PartitionMotionSearch.73
	.p2align	4, 0x90
	.type	PartitionMotionSearch.73,@function
PartitionMotionSearch.73:               # @PartitionMotionSearch.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$908720264, -80(%rbp)   # imm = 0x3629F888
	movl	%edi, -8(%rbp)
	movl	%esi, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB98_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB98_3
.LBB98_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB98_3
.LBB98_3:                               # %cond.end
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB98_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB98_6
# %bb.5:                                # %if.then20
	movl	$4, -40(%rbp)
	jmp	.LBB98_7
.LBB98_6:                               # %if.else
	movl	$2, -40(%rbp)
.LBB98_7:                               # %if.end
	jmp	.LBB98_9
.LBB98_8:                               # %if.else21
	movl	$0, -40(%rbp)
.LBB98_9:                               # %if.end22
	movl	-84(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB98_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_12 Depth 2
                                        #       Child Loop BB98_29 Depth 3
                                        #         Child Loop BB98_31 Depth 4
                                        #           Child Loop BB98_33 Depth 5
                                        #             Child Loop BB98_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB98_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB98_10 Depth=1
	movw	$0, -2(%rbp)
.LBB98_12:                              # %for.cond27
                                        #   Parent Loop BB98_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_29 Depth 3
                                        #         Child Loop BB98_31 Depth 4
                                        #           Child Loop BB98_33 Depth 5
                                        #             Child Loop BB98_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB98_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB98_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB98_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB98_28
.LBB98_15:                              # %if.else38
                                        #   in Loop: Header=BB98_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB98_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB98_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB98_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB98_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB98_19
.LBB98_18:                              # %cond.false49
                                        #   in Loop: Header=BB98_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB98_19
.LBB98_19:                              # %cond.end50
                                        #   in Loop: Header=BB98_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
	jmp	.LBB98_27
.LBB98_20:                              # %if.else53
                                        #   in Loop: Header=BB98_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB98_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB98_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB98_23
.LBB98_22:                              # %cond.false60
                                        #   in Loop: Header=BB98_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB98_23
.LBB98_23:                              # %cond.end61
                                        #   in Loop: Header=BB98_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB98_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB98_12 Depth=2
	movl	$2, %edx
	jmp	.LBB98_26
.LBB98_25:                              # %cond.false67
                                        #   in Loop: Header=BB98_12 Depth=2
	movl	-8(%rbp), %edx
.LBB98_26:                              # %cond.end68
                                        #   in Loop: Header=BB98_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
.LBB98_27:                              # %if.end71
                                        #   in Loop: Header=BB98_12 Depth=2
	jmp	.LBB98_28
.LBB98_28:                              # %if.end72
                                        #   in Loop: Header=BB98_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB98_29:                              # %for.cond89
                                        #   Parent Loop BB98_10 Depth=1
                                        #     Parent Loop BB98_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_31 Depth 4
                                        #           Child Loop BB98_33 Depth 5
                                        #             Child Loop BB98_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-36(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB98_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB98_31:                              # %for.cond103
                                        #   Parent Loop BB98_10 Depth=1
                                        #     Parent Loop BB98_12 Depth=2
                                        #       Parent Loop BB98_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_33 Depth 5
                                        #             Child Loop BB98_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-36(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB98_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-52(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -32(%rbp)
.LBB98_33:                              # %for.cond123
                                        #   Parent Loop BB98_10 Depth=1
                                        #     Parent Loop BB98_12 Depth=2
                                        #       Parent Loop BB98_29 Depth=3
                                        #         Parent Loop BB98_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_35 Depth 6
	movl	-32(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB98_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB98_33 Depth=5
	movl	$0, -28(%rbp)
.LBB98_35:                              # %for.cond127
                                        #   Parent Loop BB98_10 Depth=1
                                        #     Parent Loop BB98_12 Depth=2
                                        #       Parent Loop BB98_29 Depth=3
                                        #         Parent Loop BB98_31 Depth=4
                                        #           Parent Loop BB98_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB98_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB98_35 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB98_35
.LBB98_38:                              # %for.end
                                        #   in Loop: Header=BB98_33 Depth=5
	jmp	.LBB98_39
.LBB98_39:                              # %for.inc174
                                        #   in Loop: Header=BB98_33 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_33
.LBB98_40:                              # %for.end176
                                        #   in Loop: Header=BB98_31 Depth=4
	jmp	.LBB98_41
.LBB98_41:                              # %for.inc177
                                        #   in Loop: Header=BB98_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_31
.LBB98_42:                              # %for.end179
                                        #   in Loop: Header=BB98_29 Depth=3
	jmp	.LBB98_43
.LBB98_43:                              # %for.inc180
                                        #   in Loop: Header=BB98_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_29
.LBB98_44:                              # %for.end182
                                        #   in Loop: Header=BB98_12 Depth=2
	jmp	.LBB98_45
.LBB98_45:                              # %for.inc183
                                        #   in Loop: Header=BB98_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB98_12
.LBB98_46:                              # %for.end185
                                        #   in Loop: Header=BB98_10 Depth=1
	jmp	.LBB98_47
.LBB98_47:                              # %for.inc186
                                        #   in Loop: Header=BB98_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_10
.LBB98_48:                              # %for.end188
	cmpl	$908720264, -80(%rbp)   # imm = 0x3629F888
	jne	.LBB98_50
.LBB98_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_49
.Lfunc_end98:
	.size	PartitionMotionSearch.73, .Lfunc_end98-PartitionMotionSearch.73
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.74            # -- Begin function find_SATD.74
	.p2align	4, 0x90
	.type	find_SATD.74,@function
find_SATD.74:                           # @find_SATD.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$155901462, -52(%rbp)   # imm = 0x94ADE16
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -24(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_3 Depth 2
                                        #       Child Loop BB99_5 Depth 3
                                        #         Child Loop BB99_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB99_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	$0, -20(%rbp)
.LBB99_3:                               # %for.cond7
                                        #   Parent Loop BB99_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_5 Depth 3
                                        #         Child Loop BB99_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB99_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB99_5:                               # %for.cond10
                                        #   Parent Loop BB99_1 Depth=1
                                        #     Parent Loop BB99_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_7 Depth 4
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB99_5 Depth=3
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB99_7:                               # %for.cond13
                                        #   Parent Loop BB99_1 Depth=1
                                        #     Parent Loop BB99_3 Depth=2
                                        #       Parent Loop BB99_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB99_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB99_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB99_7
.LBB99_10:                              # %for.end
                                        #   in Loop: Header=BB99_5 Depth=3
	jmp	.LBB99_11
.LBB99_11:                              # %for.inc24
                                        #   in Loop: Header=BB99_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB99_5
.LBB99_12:                              # %for.end26
                                        #   in Loop: Header=BB99_3 Depth=2
	jmp	.LBB99_13
.LBB99_13:                              # %for.inc27
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_3
.LBB99_14:                              # %for.end29
                                        #   in Loop: Header=BB99_1 Depth=1
	jmp	.LBB99_15
.LBB99_15:                              # %for.inc30
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB99_1
.LBB99_16:                              # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB99_26
# %bb.17:                               # %if.then
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB99_24
# %bb.18:                               # %if.then
	movq	.LJTI99_0(,%rax,8), %rax
	jmpq	*%rax
.LBB99_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_25
.LBB99_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_25
.LBB99_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB99_25
.LBB99_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_25
.LBB99_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB99_25
.LBB99_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB99_25:                              # %sw.epilog
	jmp	.LBB99_31
.LBB99_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB99_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB99_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_27
.LBB99_30:                              # %for.end79
	jmp	.LBB99_31
.LBB99_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$155901462, -52(%rbp)   # imm = 0x94ADE16
	jne	.LBB99_33
.LBB99_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_32
.Lfunc_end99:
	.size	find_SATD.74, .Lfunc_end99-find_SATD.74
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI99_0:
	.quad	.LBB99_19
	.quad	.LBB99_20
	.quad	.LBB99_20
	.quad	.LBB99_21
	.quad	.LBB99_22
	.quad	.LBB99_22
	.quad	.LBB99_23
                                        # -- End function
	.text
	.globl	SATD.75                 # -- Begin function SATD.75
	.p2align	4, 0x90
	.type	SATD.75,@function
SATD.75:                                # @SATD.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$1357957626, -180(%rbp) # imm = 0x50F0C9FA
	movq	%rdi, -16(%rbp)
	movl	%esi, -184(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB100_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB100_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB100_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB100_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB100_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB100_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB100_6
.LBB100_5:                              # %cond.false
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-100(%rbp), %eax
.LBB100_6:                              # %cond.end
                                        #   in Loop: Header=BB100_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB100_2
.LBB100_8:                              # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_14
.LBB100_9:                              # %if.else
	movl	$0, -20(%rbp)
.LBB100_10:                             # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB100_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB100_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB100_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_10
.LBB100_13:                             # %for.end270
	jmp	.LBB100_14
.LBB100_14:                             # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$1357957626, -180(%rbp) # imm = 0x50F0C9FA
	jne	.LBB100_16
.LBB100_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_15
.Lfunc_end100:
	.size	SATD.75, .Lfunc_end100-SATD.75
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.76 # -- Begin function Get_Direct_Motion_Vectors.76
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.76,@function
Get_Direct_Motion_Vectors.76:           # @Get_Direct_Motion_Vectors.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$289596805, -228(%rbp)  # imm = 0x1142E585
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB101_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB101_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB101_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB101_5
.LBB101_4:                              # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB101_5:                              # %if.end
	jmp	.LBB101_7
.LBB101_6:                              # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB101_7:                              # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB101_226
# %bb.8:                                # %if.then9
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB101_34
# %bb.9:                                # %if.then16
	cmpl	$0, -112(%rbp)
	je	.LBB101_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_12
.LBB101_11:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_12
.LBB101_12:                             # %cond.end
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB101_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_15
.LBB101_14:                             # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_15
.LBB101_15:                             # %cond.end38
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB101_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_18
.LBB101_17:                             # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_18
.LBB101_18:                             # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB101_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_21
.LBB101_20:                             # %cond.false69
	movswl	-50(%rbp), %eax
.LBB101_21:                             # %cond.end71
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB101_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_24
.LBB101_23:                             # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_24
.LBB101_24:                             # %cond.end87
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB101_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_27
.LBB101_26:                             # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_27
.LBB101_27:                             # %cond.end103
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB101_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_30
.LBB101_29:                             # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_30
.LBB101_30:                             # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB101_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_33
.LBB101_32:                             # %cond.false134
	movswl	-52(%rbp), %eax
.LBB101_33:                             # %cond.end136
	movw	%ax, -28(%rbp)
	jmp	.LBB101_150
.LBB101_34:                             # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB101_92
# %bb.35:                               # %if.then142
	cmpl	$0, -112(%rbp)
	je	.LBB101_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_39
.LBB101_38:                             # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_40
.LBB101_39:                             # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_40:                             # %cond.end181
	jmp	.LBB101_42
.LBB101_41:                             # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_42
.LBB101_42:                             # %cond.end184
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB101_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_46
.LBB101_45:                             # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_47
.LBB101_46:                             # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_47:                             # %cond.end229
	jmp	.LBB101_49
.LBB101_48:                             # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_49
.LBB101_49:                             # %cond.end232
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB101_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_53
.LBB101_52:                             # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_54
.LBB101_53:                             # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_54:                             # %cond.end277
	jmp	.LBB101_56
.LBB101_55:                             # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_56
.LBB101_56:                             # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB101_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_60
.LBB101_59:                             # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_61
.LBB101_60:                             # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_61:                             # %cond.end325
	jmp	.LBB101_63
.LBB101_62:                             # %cond.false327
	movswl	-50(%rbp), %eax
.LBB101_63:                             # %cond.end329
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB101_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_67
.LBB101_66:                             # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_68
.LBB101_67:                             # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_68:                             # %cond.end374
	jmp	.LBB101_70
.LBB101_69:                             # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_70
.LBB101_70:                             # %cond.end377
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB101_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_74
.LBB101_73:                             # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_75
.LBB101_74:                             # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_75:                             # %cond.end422
	jmp	.LBB101_77
.LBB101_76:                             # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_77
.LBB101_77:                             # %cond.end425
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB101_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_81
.LBB101_80:                             # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_82
.LBB101_81:                             # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_82:                             # %cond.end470
	jmp	.LBB101_84
.LBB101_83:                             # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_84
.LBB101_84:                             # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB101_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_88
.LBB101_87:                             # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB101_89
.LBB101_88:                             # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB101_89:                             # %cond.end518
	jmp	.LBB101_91
.LBB101_90:                             # %cond.false520
	movswl	-52(%rbp), %eax
.LBB101_91:                             # %cond.end522
	movw	%ax, -28(%rbp)
	jmp	.LBB101_149
.LBB101_92:                             # %if.else525
	cmpl	$0, -112(%rbp)
	je	.LBB101_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_96
.LBB101_95:                             # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_97
.LBB101_96:                             # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_97:                             # %cond.end567
	jmp	.LBB101_99
.LBB101_98:                             # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_99
.LBB101_99:                             # %cond.end570
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB101_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_103
.LBB101_102:                            # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_104
.LBB101_103:                            # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_104:                            # %cond.end615
	jmp	.LBB101_106
.LBB101_105:                            # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_106
.LBB101_106:                            # %cond.end618
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB101_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_110
.LBB101_109:                            # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_111
.LBB101_110:                            # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_111:                            # %cond.end663
	jmp	.LBB101_113
.LBB101_112:                            # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_113
.LBB101_113:                            # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB101_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_117
.LBB101_116:                            # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_118
.LBB101_117:                            # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_118:                            # %cond.end711
	jmp	.LBB101_120
.LBB101_119:                            # %cond.false713
	movswl	-50(%rbp), %eax
.LBB101_120:                            # %cond.end715
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB101_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_124
.LBB101_123:                            # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_125
.LBB101_124:                            # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_125:                            # %cond.end760
	jmp	.LBB101_127
.LBB101_126:                            # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_127
.LBB101_127:                            # %cond.end763
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB101_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_131
.LBB101_130:                            # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_132
.LBB101_131:                            # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_132:                            # %cond.end808
	jmp	.LBB101_134
.LBB101_133:                            # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_134
.LBB101_134:                            # %cond.end811
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB101_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_138
.LBB101_137:                            # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_139
.LBB101_138:                            # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_139:                            # %cond.end856
	jmp	.LBB101_141
.LBB101_140:                            # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_141
.LBB101_141:                            # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB101_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB101_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB101_145
.LBB101_144:                            # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB101_146
.LBB101_145:                            # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB101_146:                            # %cond.end904
	jmp	.LBB101_148
.LBB101_147:                            # %cond.false906
	movswl	-52(%rbp), %eax
.LBB101_148:                            # %cond.end908
	movw	%ax, -28(%rbp)
.LBB101_149:                            # %if.end911
	jmp	.LBB101_150
.LBB101_150:                            # %if.end912
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_156
# %bb.151:                              # %land.lhs.true916
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_156
# %bb.152:                              # %cond.true920
	movswl	-26(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_154
# %bb.153:                              # %cond.true925
	movswl	-26(%rbp), %eax
	jmp	.LBB101_155
.LBB101_154:                            # %cond.false927
	movswl	-22(%rbp), %eax
.LBB101_155:                            # %cond.end929
	jmp	.LBB101_160
.LBB101_156:                            # %cond.false931
	movswl	-26(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB101_158
# %bb.157:                              # %cond.true936
	movswl	-26(%rbp), %eax
	jmp	.LBB101_159
.LBB101_158:                            # %cond.false938
	movswl	-22(%rbp), %eax
.LBB101_159:                            # %cond.end940
.LBB101_160:                            # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_166
# %bb.161:                              # %land.lhs.true948
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB101_165
.LBB101_164:                            # %cond.false959
	movswl	-30(%rbp), %eax
.LBB101_165:                            # %cond.end961
	jmp	.LBB101_170
.LBB101_166:                            # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB101_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB101_169
.LBB101_168:                            # %cond.false970
	movswl	-30(%rbp), %eax
.LBB101_169:                            # %cond.end972
.LBB101_170:                            # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_176
# %bb.171:                              # %land.lhs.true980
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_176
# %bb.172:                              # %cond.true984
	movswl	-32(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_174
# %bb.173:                              # %cond.true989
	movswl	-32(%rbp), %eax
	jmp	.LBB101_175
.LBB101_174:                            # %cond.false991
	movswl	-24(%rbp), %eax
.LBB101_175:                            # %cond.end993
	jmp	.LBB101_180
.LBB101_176:                            # %cond.false995
	movswl	-32(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB101_178
# %bb.177:                              # %cond.true1000
	movswl	-32(%rbp), %eax
	jmp	.LBB101_179
.LBB101_178:                            # %cond.false1002
	movswl	-24(%rbp), %eax
.LBB101_179:                            # %cond.end1004
.LBB101_180:                            # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB101_185
.LBB101_184:                            # %cond.false1023
	movswl	-28(%rbp), %eax
.LBB101_185:                            # %cond.end1025
	jmp	.LBB101_190
.LBB101_186:                            # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB101_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB101_189
.LBB101_188:                            # %cond.false1034
	movswl	-28(%rbp), %eax
.LBB101_189:                            # %cond.end1036
.LBB101_190:                            # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_192
# %bb.191:                              # %if.then1044
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB101_192:                            # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_194
# %bb.193:                              # %if.then1051
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB101_194:                            # %if.end1055
	movl	$0, -4(%rbp)
.LBB101_195:                            # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB101_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB101_197:                            # %for.cond1061
                                        #   Parent Loop BB101_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB101_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB101_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB101_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB101_203
.LBB101_202:                            # %if.else1102
                                        #   in Loop: Header=BB101_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB101_203:                            # %if.end1128
                                        #   in Loop: Header=BB101_197 Depth=2
	jmp	.LBB101_205
.LBB101_204:                            # %if.else1129
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB101_205:                            # %if.end1151
                                        #   in Loop: Header=BB101_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB101_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB101_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB101_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB101_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB101_210
.LBB101_209:                            # %if.else1187
                                        #   in Loop: Header=BB101_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB101_210:                            # %if.end1213
                                        #   in Loop: Header=BB101_197 Depth=2
	jmp	.LBB101_212
.LBB101_211:                            # %if.else1214
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB101_212:                            # %if.end1236
                                        #   in Loop: Header=BB101_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB101_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB101_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB101_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB101_215:                            # %if.end1255
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB101_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB101_221
.LBB101_217:                            # %if.else1269
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB101_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB101_220
.LBB101_219:                            # %if.else1283
                                        #   in Loop: Header=BB101_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB101_220:                            # %if.end1288
                                        #   in Loop: Header=BB101_197 Depth=2
	jmp	.LBB101_221
.LBB101_221:                            # %if.end1289
                                        #   in Loop: Header=BB101_197 Depth=2
	jmp	.LBB101_222
.LBB101_222:                            # %for.inc
                                        #   in Loop: Header=BB101_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_197
.LBB101_223:                            # %for.end
                                        #   in Loop: Header=BB101_195 Depth=1
	jmp	.LBB101_224
.LBB101_224:                            # %for.inc1290
                                        #   in Loop: Header=BB101_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_195
.LBB101_225:                            # %for.end1292
	jmp	.LBB101_259
.LBB101_226:                            # %if.else1293
	movl	$0, -4(%rbp)
.LBB101_227:                            # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_229 Depth 2
                                        #       Child Loop BB101_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB101_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB101_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB101_229:                            # %for.cond1304
                                        #   Parent Loop BB101_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB101_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB101_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB101_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB101_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB101_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB101_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB101_234
.LBB101_233:                            # %cond.false1319
                                        #   in Loop: Header=BB101_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB101_234
.LBB101_234:                            # %cond.end1320
                                        #   in Loop: Header=BB101_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB101_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB101_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB101_254
.LBB101_236:                            # %if.else1393
                                        #   in Loop: Header=BB101_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB101_237:                            # %for.cond1394
                                        #   Parent Loop BB101_227 Depth=1
                                        #     Parent Loop BB101_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB101_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB101_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB101_240
.LBB101_239:                            # %cond.false1402
                                        #   in Loop: Header=BB101_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB101_240:                            # %cond.end1406
                                        #   in Loop: Header=BB101_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB101_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB101_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB101_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB101_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB101_247
.LBB101_243:                            # %if.else1425
                                        #   in Loop: Header=BB101_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB101_237 Depth=3
	jmp	.LBB101_245
.LBB101_245:                            # %for.inc1427
                                        #   in Loop: Header=BB101_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB101_237
.LBB101_246:                            # %for.end1429.loopexit
                                        #   in Loop: Header=BB101_229 Depth=2
	jmp	.LBB101_247
.LBB101_247:                            # %for.end1429
                                        #   in Loop: Header=BB101_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB101_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB101_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB101_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB101_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB101_251
.LBB101_250:                            # %if.else1487
                                        #   in Loop: Header=BB101_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB101_251:                            # %if.end1571
                                        #   in Loop: Header=BB101_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB101_253
.LBB101_252:                            # %if.else1587
                                        #   in Loop: Header=BB101_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB101_253:                            # %if.end1602
                                        #   in Loop: Header=BB101_229 Depth=2
	jmp	.LBB101_254
.LBB101_254:                            # %if.end1603
                                        #   in Loop: Header=BB101_229 Depth=2
	jmp	.LBB101_255
.LBB101_255:                            # %for.inc1604
                                        #   in Loop: Header=BB101_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_229
.LBB101_256:                            # %for.end1606
                                        #   in Loop: Header=BB101_227 Depth=1
	jmp	.LBB101_257
.LBB101_257:                            # %for.inc1607
                                        #   in Loop: Header=BB101_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_227
.LBB101_258:                            # %for.end1609
	jmp	.LBB101_259
.LBB101_259:                            # %if.end1610
	cmpl	$289596805, -228(%rbp)  # imm = 0x1142E585
	jne	.LBB101_261
.LBB101_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_261:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_260
.Lfunc_end101:
	.size	Get_Direct_Motion_Vectors.76, .Lfunc_end101-Get_Direct_Motion_Vectors.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.77
.LCPI102_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI102_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.77
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.77,@function
Init_Motion_Search_Module.77:           # @Init_Motion_Search_Module.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$798358135, -52(%rbp)   # imm = 0x2F95FA77
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB102_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB102_3
.LBB102_2:                              # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB102_3:                              # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB102_6
.LBB102_5:                              # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB102_6:                              # %cond.end19
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB102_9
.LBB102_8:                              # %cond.false24
	movl	-40(%rbp), %eax
	addl	$1, %eax
.LBB102_9:                              # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI102_1(%rip), %xmm0 # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI102_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI102_1(%rip), %xmm0 # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI102_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB102_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB102_11:                             # %if.end
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB102_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB102_13:                             # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB102_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB102_15:                             # %if.end66
	movslq	-60(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB102_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB102_17:                             # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB102_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB102_19:                             # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB102_20:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_22 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB102_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB102_20 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_22:                             # %for.cond90
                                        #   Parent Loop BB102_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB102_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB102_22 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB102_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_22
.LBB102_25:                             # %for.end
                                        #   in Loop: Header=BB102_20 Depth=1
	jmp	.LBB102_26
.LBB102_26:                             # %for.inc98
                                        #   in Loop: Header=BB102_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_20
.LBB102_27:                             # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB102_28:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_30 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB102_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB102_28 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_30:                             # %for.cond111
                                        #   Parent Loop BB102_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB102_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB102_30 Depth=2
	movl	-16(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB102_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_30
.LBB102_33:                             # %for.end119
                                        #   in Loop: Header=BB102_28 Depth=1
	jmp	.LBB102_34
.LBB102_34:                             # %for.inc120
                                        #   in Loop: Header=BB102_28 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_28
.LBB102_35:                             # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB102_36:                             # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB102_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB102_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_36
.LBB102_39:                             # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -12(%rbp)
.LBB102_40:                             # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_45 Depth 2
                                        #     Child Loop BB102_49 Depth 2
	movl	-12(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB102_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB102_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB102_43
.LBB102_42:                             # %cond.false143
                                        #   in Loop: Header=BB102_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB102_43:                             # %cond.end144
                                        #   in Loop: Header=BB102_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB102_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB102_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB102_45:                             # %for.cond151
                                        #   Parent Loop BB102_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB102_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB102_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_45
.LBB102_48:                             # %for.end168
                                        #   in Loop: Header=BB102_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_49:                             # %for.cond170
                                        #   Parent Loop BB102_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB102_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB102_49 Depth=2
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB102_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_49
.LBB102_52:                             # %for.end187
                                        #   in Loop: Header=BB102_40 Depth=1
	jmp	.LBB102_53
.LBB102_53:                             # %for.inc188
                                        #   in Loop: Header=BB102_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_40
.LBB102_54:                             # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB102_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB102_56:                             # %if.end192
	cmpl	$798358135, -52(%rbp)   # imm = 0x2F95FA77
	jne	.LBB102_58
.LBB102_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_58:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_57
.Lfunc_end102:
	.size	Init_Motion_Search_Module.77, .Lfunc_end102-Init_Motion_Search_Module.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.78
.LCPI103_0:
	.quad	4602678819172646912     # double 0.5
.LCPI103_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.78
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.78,@function
SubPelBlockSearchBiPred.78:             # @SubPelBlockSearchBiPred.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI103_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI103_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$2026350911, -200(%rbp) # imm = 0x78C7A93F
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -150(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -170(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB103_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB103_4
.LBB103_3:                              # %cond.false
	movl	64(%rbp), %eax
.LBB103_4:                              # %cond.end
	jmp	.LBB103_6
.LBB103_5:                              # %cond.false17
	movl	64(%rbp), %eax
.LBB103_6:                              # %cond.end18
	movw	%ax, -174(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB103_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB103_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB103_10
.LBB103_9:                              # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB103_10
.LBB103_10:                             # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -118(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB103_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB103_14
.LBB103_13:                             # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB103_14:                             # %cond.end55
	jmp	.LBB103_16
.LBB103_15:                             # %cond.false57
	movl	$1, %eax
	jmp	.LBB103_16
.LBB103_16:                             # %cond.end58
	movw	%ax, -38(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB103_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB103_20
.LBB103_19:                             # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB103_20:                             # %cond.end82
	jmp	.LBB103_22
.LBB103_21:                             # %cond.false84
	movl	$1, %eax
	jmp	.LBB103_22
.LBB103_22:                             # %cond.end85
	movw	%ax, -34(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB103_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB103_26
.LBB103_25:                             # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB103_26:                             # %cond.end106
	jmp	.LBB103_28
.LBB103_27:                             # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB103_28
.LBB103_28:                             # %cond.end109
	movw	%ax, -176(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB103_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB103_32
.LBB103_31:                             # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB103_32:                             # %cond.end130
	jmp	.LBB103_34
.LBB103_33:                             # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB103_34
.LBB103_34:                             # %cond.end133
	movw	%ax, -172(%rbp)
	movswl	-172(%rbp), %eax
	movswl	-176(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB103_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB103_37
.LBB103_36:                             # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB103_37:                             # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB103_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB103_40
.LBB103_39:                             # %cond.false161
	movswl	-90(%rbp), %eax
.LBB103_40:                             # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-150(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_45
# %bb.42:                               # %land.lhs.true205
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_45
# %bb.43:                               # %land.lhs.true211
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB103_46
.LBB103_45:                             # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB103_46:                             # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_51
# %bb.48:                               # %land.lhs.true232
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_51
# %bb.49:                               # %land.lhs.true238
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB103_52
.LBB103_51:                             # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB103_52:                             # %if.end248
	movw	$0, -102(%rbp)
	movw	-170(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB103_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_55 Depth 2
                                        #       Child Loop BB103_60 Depth 3
                                        #         Child Loop BB103_162 Depth 4
                                        #           Child Loop BB103_164 Depth 5
                                        #       Child Loop BB103_175 Depth 3
                                        #         Child Loop BB103_181 Depth 4
                                        #           Child Loop BB103_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-174(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB103_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB103_55:                             # %for.cond283
                                        #   Parent Loop BB103_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_60 Depth 3
                                        #         Child Loop BB103_162 Depth 4
                                        #           Child Loop BB103_164 Depth 5
                                        #       Child Loop BB103_175 Depth 3
                                        #         Child Loop BB103_181 Depth 4
                                        #           Child Loop BB103_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB103_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB103_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB103_57:                             # %land.end
                                        #   in Loop: Header=BB103_55 Depth=2
	testb	$1, %al
	jne	.LBB103_58
	jmp	.LBB103_195
.LBB103_58:                             # %for.body289
                                        #   in Loop: Header=BB103_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB103_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$0, -40(%rbp)
.LBB103_60:                             # %for.cond304
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_162 Depth 4
                                        #           Child Loop BB103_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB103_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_67
.LBB103_63:                             # %cond.false345
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_66
.LBB103_65:                             # %cond.false369
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_66:                             # %cond.end389
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_67:                             # %cond.end391
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_73
.LBB103_69:                             # %cond.false421
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_72
.LBB103_71:                             # %cond.false448
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_72:                             # %cond.end470
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_73:                             # %cond.end472
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_79
.LBB103_75:                             # %cond.false505
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_78
.LBB103_77:                             # %cond.false532
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_78:                             # %cond.end554
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_79:                             # %cond.end556
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_85
.LBB103_81:                             # %cond.false589
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_84
.LBB103_83:                             # %cond.false616
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_84:                             # %cond.end638
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_85:                             # %cond.end640
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_91
.LBB103_87:                             # %cond.false681
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_90
.LBB103_89:                             # %cond.false706
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_90:                             # %cond.end726
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_91:                             # %cond.end728
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_97
.LBB103_93:                             # %cond.false759
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_96
.LBB103_95:                             # %cond.false786
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_96:                             # %cond.end808
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_97:                             # %cond.end810
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_103
.LBB103_99:                             # %cond.false843
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_102
.LBB103_101:                            # %cond.false870
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_102:                            # %cond.end892
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_103:                            # %cond.end894
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_109
.LBB103_105:                            # %cond.false927
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_108
.LBB103_107:                            # %cond.false954
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_108:                            # %cond.end976
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_109:                            # %cond.end978
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_115
.LBB103_111:                            # %cond.false1019
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_114
.LBB103_113:                            # %cond.false1044
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_114:                            # %cond.end1064
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_115:                            # %cond.end1066
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_121
.LBB103_117:                            # %cond.false1097
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_120
.LBB103_119:                            # %cond.false1124
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_120:                            # %cond.end1146
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_121:                            # %cond.end1148
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_127
.LBB103_123:                            # %cond.false1181
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_126
.LBB103_125:                            # %cond.false1208
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_126:                            # %cond.end1230
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_127:                            # %cond.end1232
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_133
.LBB103_129:                            # %cond.false1265
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_132
.LBB103_131:                            # %cond.false1292
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_132:                            # %cond.end1314
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_133:                            # %cond.end1316
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_139
.LBB103_135:                            # %cond.false1357
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_138
.LBB103_137:                            # %cond.false1382
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_138:                            # %cond.end1402
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_139:                            # %cond.end1404
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_145
.LBB103_141:                            # %cond.false1435
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_144
.LBB103_143:                            # %cond.false1462
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_144:                            # %cond.end1484
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_145:                            # %cond.end1486
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_151
.LBB103_147:                            # %cond.false1519
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_150
.LBB103_149:                            # %cond.false1546
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_150:                            # %cond.end1568
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_151:                            # %cond.end1570
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_157
.LBB103_153:                            # %cond.false1603
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_156
.LBB103_155:                            # %cond.false1630
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_156:                            # %cond.end1652
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_157:                            # %cond.end1654
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB103_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB103_173
.LBB103_160:                            # %if.end1673
                                        #   in Loop: Header=BB103_60 Depth=3
	jmp	.LBB103_170
.LBB103_161:                            # %if.else1674
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB103_162:                            # %for.cond1675
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_164 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB103_162 Depth=4
	movl	$0, -96(%rbp)
.LBB103_164:                            # %for.cond1679
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_60 Depth=3
                                        #         Parent Loop BB103_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB103_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB103_164 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_164
.LBB103_167:                            # %for.end
                                        #   in Loop: Header=BB103_162 Depth=4
	jmp	.LBB103_168
.LBB103_168:                            # %for.inc1694
                                        #   in Loop: Header=BB103_162 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB103_162
.LBB103_169:                            # %for.end1696
                                        #   in Loop: Header=BB103_60 Depth=3
	jmp	.LBB103_170
.LBB103_170:                            # %if.end1697
                                        #   in Loop: Header=BB103_60 Depth=3
	jmp	.LBB103_171
.LBB103_171:                            # %for.inc1698
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_60
.LBB103_172:                            # %for.end1702.loopexit
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_173
.LBB103_173:                            # %for.end1702
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_193
.LBB103_174:                            # %if.else1703
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$0, -40(%rbp)
.LBB103_175:                            # %for.cond1704
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_181 Depth 4
                                        #           Child Loop BB103_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB103_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB103_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB103_192
.LBB103_179:                            # %if.end2054
                                        #   in Loop: Header=BB103_175 Depth=3
	jmp	.LBB103_189
.LBB103_180:                            # %if.else2055
                                        #   in Loop: Header=BB103_175 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB103_181:                            # %for.cond2056
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_183 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB103_181 Depth=4
	movl	$0, -96(%rbp)
.LBB103_183:                            # %for.cond2060
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_175 Depth=3
                                        #         Parent Loop BB103_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB103_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB103_183 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_183
.LBB103_186:                            # %for.end2077
                                        #   in Loop: Header=BB103_181 Depth=4
	jmp	.LBB103_187
.LBB103_187:                            # %for.inc2078
                                        #   in Loop: Header=BB103_181 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB103_181
.LBB103_188:                            # %for.end2080
                                        #   in Loop: Header=BB103_175 Depth=3
	jmp	.LBB103_189
.LBB103_189:                            # %if.end2081
                                        #   in Loop: Header=BB103_175 Depth=3
	jmp	.LBB103_190
.LBB103_190:                            # %for.inc2082
                                        #   in Loop: Header=BB103_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_175
.LBB103_191:                            # %for.end2086.loopexit
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_192
.LBB103_192:                            # %for.end2086
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_193
.LBB103_193:                            # %if.end2087
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_194
.LBB103_194:                            # %for.inc2088
                                        #   in Loop: Header=BB103_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB103_55
.LBB103_195:                            # %for.end2092
                                        #   in Loop: Header=BB103_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB103_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB103_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB103_197:                            # %if.end2101
                                        #   in Loop: Header=BB103_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB103_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB103_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB103_199:                            # %if.end2107
                                        #   in Loop: Header=BB103_53 Depth=1
	jmp	.LBB103_200
.LBB103_200:                            # %for.inc2108
                                        #   in Loop: Header=BB103_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB103_53
.LBB103_201:                            # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB103_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB103_203:                            # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB103_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB103_205:                            # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB103_211
.LBB103_210:                            # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB103_211:                            # %if.end2159
	movw	$0, -102(%rbp)
	movl	-196(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB103_212:                            # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_214 Depth 2
                                        #       Child Loop BB103_219 Depth 3
                                        #         Child Loop BB103_321 Depth 4
                                        #           Child Loop BB103_323 Depth 5
                                        #       Child Loop BB103_334 Depth 3
                                        #         Child Loop BB103_340 Depth 4
                                        #           Child Loop BB103_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB103_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB103_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB103_214:                            # %for.cond2194
                                        #   Parent Loop BB103_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_219 Depth 3
                                        #         Child Loop BB103_321 Depth 4
                                        #           Child Loop BB103_323 Depth 5
                                        #       Child Loop BB103_334 Depth 3
                                        #         Child Loop BB103_340 Depth 4
                                        #           Child Loop BB103_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB103_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB103_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB103_216:                            # %land.end2202
                                        #   in Loop: Header=BB103_214 Depth=2
	testb	$1, %al
	jne	.LBB103_217
	jmp	.LBB103_354
.LBB103_217:                            # %for.body2203
                                        #   in Loop: Header=BB103_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB103_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$0, -40(%rbp)
.LBB103_219:                            # %for.cond2218
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_321 Depth 4
                                        #           Child Loop BB103_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB103_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_226
.LBB103_222:                            # %cond.false2261
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_225
.LBB103_224:                            # %cond.false2286
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_225:                            # %cond.end2306
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_226:                            # %cond.end2308
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_232
.LBB103_228:                            # %cond.false2339
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_231
.LBB103_230:                            # %cond.false2366
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_231:                            # %cond.end2388
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_232:                            # %cond.end2390
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_238
.LBB103_234:                            # %cond.false2423
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_237
.LBB103_236:                            # %cond.false2450
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_237:                            # %cond.end2472
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_238:                            # %cond.end2474
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_244
.LBB103_240:                            # %cond.false2507
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_243
.LBB103_242:                            # %cond.false2534
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_243:                            # %cond.end2556
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_244:                            # %cond.end2558
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_250
.LBB103_246:                            # %cond.false2599
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_249
.LBB103_248:                            # %cond.false2624
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_249:                            # %cond.end2644
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_250:                            # %cond.end2646
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_256
.LBB103_252:                            # %cond.false2677
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_255
.LBB103_254:                            # %cond.false2704
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_255:                            # %cond.end2726
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_256:                            # %cond.end2728
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_262
.LBB103_258:                            # %cond.false2761
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_261
.LBB103_260:                            # %cond.false2788
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_261:                            # %cond.end2810
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_262:                            # %cond.end2812
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_268
.LBB103_264:                            # %cond.false2845
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_267
.LBB103_266:                            # %cond.false2872
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_267:                            # %cond.end2894
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_268:                            # %cond.end2896
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_274
.LBB103_270:                            # %cond.false2937
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_273
.LBB103_272:                            # %cond.false2962
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_273:                            # %cond.end2982
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_274:                            # %cond.end2984
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_280
.LBB103_276:                            # %cond.false3015
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_279
.LBB103_278:                            # %cond.false3042
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_279:                            # %cond.end3064
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_280:                            # %cond.end3066
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_286
.LBB103_282:                            # %cond.false3099
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_285
.LBB103_284:                            # %cond.false3126
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_285:                            # %cond.end3148
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_286:                            # %cond.end3150
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_292
.LBB103_288:                            # %cond.false3183
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_291
.LBB103_290:                            # %cond.false3210
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_291:                            # %cond.end3232
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_292:                            # %cond.end3234
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_298
.LBB103_294:                            # %cond.false3275
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_297
.LBB103_296:                            # %cond.false3300
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_297:                            # %cond.end3320
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_298:                            # %cond.end3322
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_304
.LBB103_300:                            # %cond.false3353
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_303
.LBB103_302:                            # %cond.false3380
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_303:                            # %cond.end3402
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_304:                            # %cond.end3404
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_310
.LBB103_306:                            # %cond.false3437
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_309
.LBB103_308:                            # %cond.false3464
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_309:                            # %cond.end3486
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_310:                            # %cond.end3488
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_316
.LBB103_312:                            # %cond.false3521
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_315
.LBB103_314:                            # %cond.false3548
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_315:                            # %cond.end3570
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_316:                            # %cond.end3572
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB103_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB103_332
.LBB103_319:                            # %if.end3593
                                        #   in Loop: Header=BB103_219 Depth=3
	jmp	.LBB103_329
.LBB103_320:                            # %if.else3594
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB103_321:                            # %for.cond3595
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_323 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB103_321 Depth=4
	movl	$0, -96(%rbp)
.LBB103_323:                            # %for.cond3599
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_219 Depth=3
                                        #         Parent Loop BB103_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB103_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB103_323 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_323
.LBB103_326:                            # %for.end3616
                                        #   in Loop: Header=BB103_321 Depth=4
	jmp	.LBB103_327
.LBB103_327:                            # %for.inc3617
                                        #   in Loop: Header=BB103_321 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB103_321
.LBB103_328:                            # %for.end3619
                                        #   in Loop: Header=BB103_219 Depth=3
	jmp	.LBB103_329
.LBB103_329:                            # %if.end3620
                                        #   in Loop: Header=BB103_219 Depth=3
	jmp	.LBB103_330
.LBB103_330:                            # %for.inc3621
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_219
.LBB103_331:                            # %for.end3625.loopexit
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_332
.LBB103_332:                            # %for.end3625
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_352
.LBB103_333:                            # %if.else3626
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$0, -40(%rbp)
.LBB103_334:                            # %for.cond3627
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_340 Depth 4
                                        #           Child Loop BB103_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB103_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB103_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB103_351
.LBB103_338:                            # %if.end3978
                                        #   in Loop: Header=BB103_334 Depth=3
	jmp	.LBB103_348
.LBB103_339:                            # %if.else3979
                                        #   in Loop: Header=BB103_334 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB103_340:                            # %for.cond3980
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_342 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB103_340 Depth=4
	movl	$0, -96(%rbp)
.LBB103_342:                            # %for.cond3984
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_334 Depth=3
                                        #         Parent Loop BB103_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB103_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB103_342 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_342
.LBB103_345:                            # %for.end4001
                                        #   in Loop: Header=BB103_340 Depth=4
	jmp	.LBB103_346
.LBB103_346:                            # %for.inc4002
                                        #   in Loop: Header=BB103_340 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB103_340
.LBB103_347:                            # %for.end4004
                                        #   in Loop: Header=BB103_334 Depth=3
	jmp	.LBB103_348
.LBB103_348:                            # %if.end4005
                                        #   in Loop: Header=BB103_334 Depth=3
	jmp	.LBB103_349
.LBB103_349:                            # %for.inc4006
                                        #   in Loop: Header=BB103_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_334
.LBB103_350:                            # %for.end4010.loopexit
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_351
.LBB103_351:                            # %for.end4010
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_352
.LBB103_352:                            # %if.end4011
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_353
.LBB103_353:                            # %for.inc4012
                                        #   in Loop: Header=BB103_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB103_214
.LBB103_354:                            # %for.end4016
                                        #   in Loop: Header=BB103_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB103_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB103_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB103_356:                            # %if.end4026
                                        #   in Loop: Header=BB103_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB103_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB103_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB103_358:                            # %if.end4032
                                        #   in Loop: Header=BB103_212 Depth=1
	jmp	.LBB103_359
.LBB103_359:                            # %for.inc4033
                                        #   in Loop: Header=BB103_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB103_212
.LBB103_360:                            # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB103_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB103_362:                            # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$2026350911, -200(%rbp) # imm = 0x78C7A93F
	jne	.LBB103_364
.LBB103_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_364:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_363
.Lfunc_end103:
	.size	SubPelBlockSearchBiPred.78, .Lfunc_end103-SubPelBlockSearchBiPred.78
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.79 # -- Begin function FindSkipModeMotionVector.79
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.79,@function
FindSkipModeMotionVector.79:            # @FindSkipModeMotionVector.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$2846276, -52(%rbp)     # imm = 0x2B6E44
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -112(%rbp)
	je	.LBB104_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB104_4
# %bb.3:                                # %if.then24
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB104_4:                              # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB104_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_7
# %bb.6:                                # %if.then34
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB104_7:                              # %if.end36
	jmp	.LBB104_8
.LBB104_8:                              # %if.end37
	cmpl	$0, -88(%rbp)
	je	.LBB104_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB104_12
# %bb.11:                               # %if.then69
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB104_12:                             # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB104_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_15
# %bb.14:                               # %if.then82
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB104_15:                             # %if.end85
	jmp	.LBB104_16
.LBB104_16:                             # %if.end86
	cmpl	$0, -112(%rbp)
	jne	.LBB104_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB104_22
.LBB104_18:                             # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB104_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB104_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB104_21:                             # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB104_22:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, -88(%rbp)
	jne	.LBB104_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB104_28
.LBB104_24:                             # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB104_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB104_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB104_27:                             # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB104_28:                             # %cond.end130
	movl	%ecx, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB104_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -56(%rbp)
	je	.LBB104_39
.LBB104_30:                             # %if.then134
	movl	$0, -4(%rbp)
.LBB104_31:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_33 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB104_31 Depth=1
	movl	$0, -8(%rbp)
.LBB104_33:                             # %for.cond137
                                        #   Parent Loop BB104_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB104_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB104_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_33
.LBB104_36:                             # %for.end
                                        #   in Loop: Header=BB104_31 Depth=1
	jmp	.LBB104_37
.LBB104_37:                             # %for.inc157
                                        #   in Loop: Header=BB104_31 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_31
.LBB104_38:                             # %for.end159
	jmp	.LBB104_48
.LBB104_39:                             # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -4(%rbp)
.LBB104_40:                             # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_42 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	$0, -8(%rbp)
.LBB104_42:                             # %for.cond166
                                        #   Parent Loop BB104_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB104_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB104_42 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_42
.LBB104_45:                             # %for.end190
                                        #   in Loop: Header=BB104_40 Depth=1
	jmp	.LBB104_46
.LBB104_46:                             # %for.inc191
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_40
.LBB104_47:                             # %for.end193
	jmp	.LBB104_48
.LBB104_48:                             # %if.end194
	cmpl	$2846276, -52(%rbp)     # imm = 0x2B6E44
	jne	.LBB104_50
.LBB104_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_49
.Lfunc_end104:
	.size	FindSkipModeMotionVector.79, .Lfunc_end104-FindSkipModeMotionVector.79
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.80 # -- Begin function InitializeFastFullIntegerSearch.80
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.80,@function
InitializeFastFullIntegerSearch.80:     # @InitializeFastFullIntegerSearch.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2003883417, -24(%rbp)  # imm = 0x7770D599
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB105_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB105_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB105_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_7 Depth 2
                                        #       Child Loop BB105_11 Depth 3
                                        #         Child Loop BB105_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB105_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB105_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB105_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB105_6:                              # %if.end12
                                        #   in Loop: Header=BB105_3 Depth=1
	movl	$0, -8(%rbp)
.LBB105_7:                              # %for.cond13
                                        #   Parent Loop BB105_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_11 Depth 3
                                        #         Child Loop BB105_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB105_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB105_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB105_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB105_10:                             # %if.end26
                                        #   in Loop: Header=BB105_7 Depth=2
	movl	$1, -16(%rbp)
.LBB105_11:                             # %for.cond27
                                        #   Parent Loop BB105_3 Depth=1
                                        #     Parent Loop BB105_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_15 Depth 4
	cmpl	$8, -16(%rbp)
	jge	.LBB105_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB105_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB105_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB105_14:                             # %if.end41
                                        #   in Loop: Header=BB105_11 Depth=3
	movl	$0, -20(%rbp)
.LBB105_15:                             # %for.cond42
                                        #   Parent Loop BB105_3 Depth=1
                                        #     Parent Loop BB105_7 Depth=2
                                        #       Parent Loop BB105_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB105_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB105_15 Depth=4
	movslq	-28(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB105_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB105_18:                             # %if.end60
                                        #   in Loop: Header=BB105_15 Depth=4
	jmp	.LBB105_19
.LBB105_19:                             # %for.inc
                                        #   in Loop: Header=BB105_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_15
.LBB105_20:                             # %for.end
                                        #   in Loop: Header=BB105_11 Depth=3
	jmp	.LBB105_21
.LBB105_21:                             # %for.inc61
                                        #   in Loop: Header=BB105_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_11
.LBB105_22:                             # %for.end63
                                        #   in Loop: Header=BB105_7 Depth=2
	jmp	.LBB105_23
.LBB105_23:                             # %for.inc64
                                        #   in Loop: Header=BB105_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_7
.LBB105_24:                             # %for.end66
                                        #   in Loop: Header=BB105_3 Depth=1
	jmp	.LBB105_25
.LBB105_25:                             # %for.inc67
                                        #   in Loop: Header=BB105_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_3
.LBB105_26:                             # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB105_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB105_28:                             # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB105_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB105_30:                             # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB105_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB105_32:                             # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB105_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB105_34:                             # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB105_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB105_36:                             # %if.end94
	movl	$0, -4(%rbp)
.LBB105_37:                             # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB105_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB105_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB105_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB105_40:                             # %if.end109
                                        #   in Loop: Header=BB105_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB105_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB105_42:                             # %if.end120
                                        #   in Loop: Header=BB105_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB105_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB105_44:                             # %if.end131
                                        #   in Loop: Header=BB105_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB105_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB105_46:                             # %if.end142
                                        #   in Loop: Header=BB105_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB105_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB105_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB105_48:                             # %if.end153
                                        #   in Loop: Header=BB105_37 Depth=1
	jmp	.LBB105_49
.LBB105_49:                             # %for.inc154
                                        #   in Loop: Header=BB105_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_37
.LBB105_50:                             # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB105_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB105_52:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB105_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB105_52 Depth=1
	movl	$0, -8(%rbp)
.LBB105_54:                             # %for.cond164
                                        #   Parent Loop BB105_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB105_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB105_54 Depth=2
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB105_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_54
.LBB105_57:                             # %for.end175
                                        #   in Loop: Header=BB105_52 Depth=1
	jmp	.LBB105_58
.LBB105_58:                             # %for.inc176
                                        #   in Loop: Header=BB105_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_52
.LBB105_59:                             # %for.end178
	jmp	.LBB105_69
.LBB105_60:                             # %if.else
	movl	$0, -4(%rbp)
.LBB105_61:                             # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB105_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB105_61 Depth=1
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB105_63:                             # %for.cond191
                                        #   Parent Loop BB105_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB105_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB105_63 Depth=2
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB105_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_63
.LBB105_66:                             # %for.end202
                                        #   in Loop: Header=BB105_61 Depth=1
	jmp	.LBB105_67
.LBB105_67:                             # %for.inc203
                                        #   in Loop: Header=BB105_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_61
.LBB105_68:                             # %for.end205
	jmp	.LBB105_69
.LBB105_69:                             # %if.end206
	cmpl	$2003883417, -24(%rbp)  # imm = 0x7770D599
	jne	.LBB105_71
.LBB105_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_70
.Lfunc_end105:
	.size	InitializeFastFullIntegerSearch.80, .Lfunc_end105-InitializeFastFullIntegerSearch.80
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.81 # -- Begin function Get_Direct_Motion_Vectors.81
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.81,@function
Get_Direct_Motion_Vectors.81:           # @Get_Direct_Motion_Vectors.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$2106073515, -228(%rbp) # imm = 0x7D8821AB
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB106_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB106_5
.LBB106_4:                              # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB106_5:                              # %if.end
	jmp	.LBB106_7
.LBB106_6:                              # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB106_7:                              # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB106_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB106_34
# %bb.9:                                # %if.then16
	cmpl	$0, -160(%rbp)
	je	.LBB106_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_12
.LBB106_11:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_12
.LBB106_12:                             # %cond.end
	movw	%ax, -24(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB106_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_15
.LBB106_14:                             # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_15
.LBB106_15:                             # %cond.end38
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB106_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_18
.LBB106_17:                             # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_18
.LBB106_18:                             # %cond.end54
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_21
.LBB106_20:                             # %cond.false69
	movswl	-52(%rbp), %eax
.LBB106_21:                             # %cond.end71
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB106_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_24
.LBB106_23:                             # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_24
.LBB106_24:                             # %cond.end87
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB106_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_27
.LBB106_26:                             # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_27
.LBB106_27:                             # %cond.end103
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB106_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_30
.LBB106_29:                             # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_30
.LBB106_30:                             # %cond.end119
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_33
.LBB106_32:                             # %cond.false134
	movswl	-50(%rbp), %eax
.LBB106_33:                             # %cond.end136
	movw	%ax, -26(%rbp)
	jmp	.LBB106_150
.LBB106_34:                             # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_92
# %bb.35:                               # %if.then142
	cmpl	$0, -160(%rbp)
	je	.LBB106_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_39
.LBB106_38:                             # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_40
.LBB106_39:                             # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_40:                             # %cond.end181
	jmp	.LBB106_42
.LBB106_41:                             # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_42
.LBB106_42:                             # %cond.end184
	movw	%ax, -24(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB106_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_46
.LBB106_45:                             # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_47
.LBB106_46:                             # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_47:                             # %cond.end229
	jmp	.LBB106_49
.LBB106_48:                             # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_49
.LBB106_49:                             # %cond.end232
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB106_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_53
.LBB106_52:                             # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_54
.LBB106_53:                             # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_54:                             # %cond.end277
	jmp	.LBB106_56
.LBB106_55:                             # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_56
.LBB106_56:                             # %cond.end280
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_60
.LBB106_59:                             # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_61
.LBB106_60:                             # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_61:                             # %cond.end325
	jmp	.LBB106_63
.LBB106_62:                             # %cond.false327
	movswl	-52(%rbp), %eax
.LBB106_63:                             # %cond.end329
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB106_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_67
.LBB106_66:                             # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_68
.LBB106_67:                             # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_68:                             # %cond.end374
	jmp	.LBB106_70
.LBB106_69:                             # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_70
.LBB106_70:                             # %cond.end377
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB106_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_74
.LBB106_73:                             # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_75
.LBB106_74:                             # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_75:                             # %cond.end422
	jmp	.LBB106_77
.LBB106_76:                             # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_77
.LBB106_77:                             # %cond.end425
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB106_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_81
.LBB106_80:                             # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_82
.LBB106_81:                             # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_82:                             # %cond.end470
	jmp	.LBB106_84
.LBB106_83:                             # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_84
.LBB106_84:                             # %cond.end473
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_88
.LBB106_87:                             # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_89
.LBB106_88:                             # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_89:                             # %cond.end518
	jmp	.LBB106_91
.LBB106_90:                             # %cond.false520
	movswl	-50(%rbp), %eax
.LBB106_91:                             # %cond.end522
	movw	%ax, -26(%rbp)
	jmp	.LBB106_149
.LBB106_92:                             # %if.else525
	cmpl	$0, -160(%rbp)
	je	.LBB106_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_96
.LBB106_95:                             # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_97
.LBB106_96:                             # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_97:                             # %cond.end567
	jmp	.LBB106_99
.LBB106_98:                             # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_99
.LBB106_99:                             # %cond.end570
	movw	%ax, -24(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB106_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_103
.LBB106_102:                            # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_104
.LBB106_103:                            # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_104:                            # %cond.end615
	jmp	.LBB106_106
.LBB106_105:                            # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_106
.LBB106_106:                            # %cond.end618
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB106_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_110
.LBB106_109:                            # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_111
.LBB106_110:                            # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_111:                            # %cond.end663
	jmp	.LBB106_113
.LBB106_112:                            # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_113
.LBB106_113:                            # %cond.end666
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_117
.LBB106_116:                            # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_118
.LBB106_117:                            # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_118:                            # %cond.end711
	jmp	.LBB106_120
.LBB106_119:                            # %cond.false713
	movswl	-52(%rbp), %eax
.LBB106_120:                            # %cond.end715
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB106_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_124
.LBB106_123:                            # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_125
.LBB106_124:                            # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_125:                            # %cond.end760
	jmp	.LBB106_127
.LBB106_126:                            # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_127
.LBB106_127:                            # %cond.end763
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB106_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_131
.LBB106_130:                            # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_132
.LBB106_131:                            # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_132:                            # %cond.end808
	jmp	.LBB106_134
.LBB106_133:                            # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_134
.LBB106_134:                            # %cond.end811
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB106_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_138
.LBB106_137:                            # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_139
.LBB106_138:                            # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_139:                            # %cond.end856
	jmp	.LBB106_141
.LBB106_140:                            # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_141
.LBB106_141:                            # %cond.end859
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB106_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB106_145
.LBB106_144:                            # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_146
.LBB106_145:                            # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_146:                            # %cond.end904
	jmp	.LBB106_148
.LBB106_147:                            # %cond.false906
	movswl	-50(%rbp), %eax
.LBB106_148:                            # %cond.end908
	movw	%ax, -26(%rbp)
.LBB106_149:                            # %if.end911
	jmp	.LBB106_150
.LBB106_150:                            # %if.end912
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_156
# %bb.151:                              # %land.lhs.true916
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_156
# %bb.152:                              # %cond.true920
	movswl	-24(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_154
# %bb.153:                              # %cond.true925
	movswl	-24(%rbp), %eax
	jmp	.LBB106_155
.LBB106_154:                            # %cond.false927
	movswl	-30(%rbp), %eax
.LBB106_155:                            # %cond.end929
	jmp	.LBB106_160
.LBB106_156:                            # %cond.false931
	movswl	-24(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB106_158
# %bb.157:                              # %cond.true936
	movswl	-24(%rbp), %eax
	jmp	.LBB106_159
.LBB106_158:                            # %cond.false938
	movswl	-30(%rbp), %eax
.LBB106_159:                            # %cond.end940
.LBB106_160:                            # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_166
# %bb.161:                              # %land.lhs.true948
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB106_165
.LBB106_164:                            # %cond.false959
	movswl	-32(%rbp), %eax
.LBB106_165:                            # %cond.end961
	jmp	.LBB106_170
.LBB106_166:                            # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB106_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB106_169
.LBB106_168:                            # %cond.false970
	movswl	-32(%rbp), %eax
.LBB106_169:                            # %cond.end972
.LBB106_170:                            # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_176
# %bb.171:                              # %land.lhs.true980
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_176
# %bb.172:                              # %cond.true984
	movswl	-28(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_174
# %bb.173:                              # %cond.true989
	movswl	-28(%rbp), %eax
	jmp	.LBB106_175
.LBB106_174:                            # %cond.false991
	movswl	-22(%rbp), %eax
.LBB106_175:                            # %cond.end993
	jmp	.LBB106_180
.LBB106_176:                            # %cond.false995
	movswl	-28(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB106_178
# %bb.177:                              # %cond.true1000
	movswl	-28(%rbp), %eax
	jmp	.LBB106_179
.LBB106_178:                            # %cond.false1002
	movswl	-22(%rbp), %eax
.LBB106_179:                            # %cond.end1004
.LBB106_180:                            # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB106_185
.LBB106_184:                            # %cond.false1023
	movswl	-26(%rbp), %eax
.LBB106_185:                            # %cond.end1025
	jmp	.LBB106_190
.LBB106_186:                            # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB106_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB106_189
.LBB106_188:                            # %cond.false1034
	movswl	-26(%rbp), %eax
.LBB106_189:                            # %cond.end1036
.LBB106_190:                            # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB106_192:                            # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB106_194:                            # %if.end1055
	movl	$0, -8(%rbp)
.LBB106_195:                            # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB106_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB106_197:                            # %for.cond1061
                                        #   Parent Loop BB106_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB106_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB106_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB106_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB106_203
.LBB106_202:                            # %if.else1102
                                        #   in Loop: Header=BB106_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB106_203:                            # %if.end1128
                                        #   in Loop: Header=BB106_197 Depth=2
	jmp	.LBB106_205
.LBB106_204:                            # %if.else1129
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB106_205:                            # %if.end1151
                                        #   in Loop: Header=BB106_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB106_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB106_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB106_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB106_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB106_210
.LBB106_209:                            # %if.else1187
                                        #   in Loop: Header=BB106_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB106_210:                            # %if.end1213
                                        #   in Loop: Header=BB106_197 Depth=2
	jmp	.LBB106_212
.LBB106_211:                            # %if.else1214
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB106_212:                            # %if.end1236
                                        #   in Loop: Header=BB106_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB106_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB106_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB106_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB106_215:                            # %if.end1255
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB106_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB106_221
.LBB106_217:                            # %if.else1269
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB106_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB106_220
.LBB106_219:                            # %if.else1283
                                        #   in Loop: Header=BB106_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB106_220:                            # %if.end1288
                                        #   in Loop: Header=BB106_197 Depth=2
	jmp	.LBB106_221
.LBB106_221:                            # %if.end1289
                                        #   in Loop: Header=BB106_197 Depth=2
	jmp	.LBB106_222
.LBB106_222:                            # %for.inc
                                        #   in Loop: Header=BB106_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_197
.LBB106_223:                            # %for.end
                                        #   in Loop: Header=BB106_195 Depth=1
	jmp	.LBB106_224
.LBB106_224:                            # %for.inc1290
                                        #   in Loop: Header=BB106_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_195
.LBB106_225:                            # %for.end1292
	jmp	.LBB106_259
.LBB106_226:                            # %if.else1293
	movl	$0, -8(%rbp)
.LBB106_227:                            # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_229 Depth 2
                                        #       Child Loop BB106_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB106_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB106_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB106_229:                            # %for.cond1304
                                        #   Parent Loop BB106_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB106_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB106_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB106_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB106_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB106_234
.LBB106_233:                            # %cond.false1319
                                        #   in Loop: Header=BB106_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB106_234
.LBB106_234:                            # %cond.end1320
                                        #   in Loop: Header=BB106_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -40(%rbp)
	movq	-200(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-200(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB106_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB106_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB106_254
.LBB106_236:                            # %if.else1393
                                        #   in Loop: Header=BB106_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB106_237:                            # %for.cond1394
                                        #   Parent Loop BB106_227 Depth=1
                                        #     Parent Loop BB106_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB106_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB106_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB106_240
.LBB106_239:                            # %cond.false1402
                                        #   in Loop: Header=BB106_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB106_240:                            # %cond.end1406
                                        #   in Loop: Header=BB106_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB106_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB106_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB106_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB106_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB106_247
.LBB106_243:                            # %if.else1425
                                        #   in Loop: Header=BB106_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB106_237 Depth=3
	jmp	.LBB106_245
.LBB106_245:                            # %for.inc1427
                                        #   in Loop: Header=BB106_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB106_237
.LBB106_246:                            # %for.end1429.loopexit
                                        #   in Loop: Header=BB106_229 Depth=2
	jmp	.LBB106_247
.LBB106_247:                            # %for.end1429
                                        #   in Loop: Header=BB106_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB106_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB106_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB106_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB106_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB106_251
.LBB106_250:                            # %if.else1487
                                        #   in Loop: Header=BB106_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB106_251:                            # %if.end1571
                                        #   in Loop: Header=BB106_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB106_253
.LBB106_252:                            # %if.else1587
                                        #   in Loop: Header=BB106_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB106_253:                            # %if.end1602
                                        #   in Loop: Header=BB106_229 Depth=2
	jmp	.LBB106_254
.LBB106_254:                            # %if.end1603
                                        #   in Loop: Header=BB106_229 Depth=2
	jmp	.LBB106_255
.LBB106_255:                            # %for.inc1604
                                        #   in Loop: Header=BB106_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_229
.LBB106_256:                            # %for.end1606
                                        #   in Loop: Header=BB106_227 Depth=1
	jmp	.LBB106_257
.LBB106_257:                            # %for.inc1607
                                        #   in Loop: Header=BB106_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_227
.LBB106_258:                            # %for.end1609
	jmp	.LBB106_259
.LBB106_259:                            # %if.end1610
	cmpl	$2106073515, -228(%rbp) # imm = 0x7D8821AB
	jne	.LBB106_261
.LBB106_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_261:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_260
.Lfunc_end106:
	.size	Get_Direct_Motion_Vectors.81, .Lfunc_end106-Get_Direct_Motion_Vectors.81
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.82     # -- Begin function BIDPartitionCost.82
	.p2align	4, 0x90
	.type	BIDPartitionCost.82,@function
BIDPartitionCost.82:                    # @BIDPartitionCost.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1301884152, -116(%rbp) # imm = 0x4D992CF8
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB107_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB107_3
.LBB107_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB107_3
.LBB107_3:                              # %cond.end
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB107_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB107_6
.LBB107_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB107_6
.LBB107_6:                              # %cond.end17
	movl	%eax, -108(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB107_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB107_9
.LBB107_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB107_9
.LBB107_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB107_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB107_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB107_12:                             # %for.cond53
                                        #   Parent Loop BB107_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB107_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB107_12 Depth=2
	movl	-104(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_12
.LBB107_15:                             # %for.end
                                        #   in Loop: Header=BB107_10 Depth=1
	jmp	.LBB107_16
.LBB107_16:                             # %for.inc164
                                        #   in Loop: Header=BB107_10 Depth=1
	movl	-128(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_10
.LBB107_17:                             # %for.end166
	movl	-124(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB107_18:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_20 Depth 2
                                        #       Child Loop BB107_22 Depth 3
                                        #         Child Loop BB107_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB107_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB107_20:                             # %for.cond185
                                        #   Parent Loop BB107_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_22 Depth 3
                                        #         Child Loop BB107_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB107_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	-68(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB107_22:                             # %for.cond196
                                        #   Parent Loop BB107_18 Depth=1
                                        #     Parent Loop BB107_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_24 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB107_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB107_22 Depth=3
	movl	$0, -28(%rbp)
.LBB107_24:                             # %for.cond200
                                        #   Parent Loop BB107_18 Depth=1
                                        #     Parent Loop BB107_20 Depth=2
                                        #       Parent Loop BB107_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB107_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB107_24 Depth=4
	movq	imgY_org, %rax
	movl	-100(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB107_24 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB107_24
.LBB107_27:                             # %for.end229
                                        #   in Loop: Header=BB107_22 Depth=3
	jmp	.LBB107_28
.LBB107_28:                             # %for.inc230
                                        #   in Loop: Header=BB107_22 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB107_22
.LBB107_29:                             # %for.end232
                                        #   in Loop: Header=BB107_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB107_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB107_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB107_32
.LBB107_31:                             # %if.then
                                        #   in Loop: Header=BB107_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB107_32:                             # %if.end
                                        #   in Loop: Header=BB107_20 Depth=2
	jmp	.LBB107_33
.LBB107_33:                             # %for.inc236
                                        #   in Loop: Header=BB107_20 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_20
.LBB107_34:                             # %for.end239
                                        #   in Loop: Header=BB107_18 Depth=1
	jmp	.LBB107_35
.LBB107_35:                             # %for.inc240
                                        #   in Loop: Header=BB107_18 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_18
.LBB107_36:                             # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB107_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB107_55
# %bb.38:                               # %if.then248
	movl	$0, -52(%rbp)
.LBB107_39:                             # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_41 Depth 2
                                        #       Child Loop BB107_43 Depth 3
                                        #         Child Loop BB107_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB107_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB107_39 Depth=1
	movl	$0, -48(%rbp)
.LBB107_41:                             # %for.cond257
                                        #   Parent Loop BB107_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_43 Depth 3
                                        #         Child Loop BB107_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB107_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB107_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB107_43:                             # %for.cond265
                                        #   Parent Loop BB107_39 Depth=1
                                        #     Parent Loop BB107_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_45 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB107_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB107_43 Depth=3
	movl	$0, -32(%rbp)
.LBB107_45:                             # %for.cond269
                                        #   Parent Loop BB107_39 Depth=1
                                        #     Parent Loop BB107_41 Depth=2
                                        #       Parent Loop BB107_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB107_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB107_45 Depth=4
	movl	-28(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB107_45 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB107_45
.LBB107_48:                             # %for.end284
                                        #   in Loop: Header=BB107_43 Depth=3
	jmp	.LBB107_49
.LBB107_49:                             # %for.inc285
                                        #   in Loop: Header=BB107_43 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB107_43
.LBB107_50:                             # %for.end287
                                        #   in Loop: Header=BB107_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB107_41 Depth=2
	movl	-112(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB107_41
.LBB107_52:                             # %for.end294
                                        #   in Loop: Header=BB107_39 Depth=1
	jmp	.LBB107_53
.LBB107_53:                             # %for.inc295
                                        #   in Loop: Header=BB107_39 Depth=1
	movl	-108(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB107_39
.LBB107_54:                             # %for.end297
	jmp	.LBB107_55
.LBB107_55:                             # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1301884152, -116(%rbp) # imm = 0x4D992CF8
	jne	.LBB107_57
.LBB107_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_56
.Lfunc_end107:
	.size	BIDPartitionCost.82, .Lfunc_end107-BIDPartitionCost.82
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.83   # -- Begin function BPredPartitionCost.83
	.p2align	4, 0x90
	.type	BPredPartitionCost.83,@function
BPredPartitionCost.83:                  # @BPredPartitionCost.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$989852007, -104(%rbp)  # imm = 0x3AFFF167
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -108(%rbp)
	movl	%r9d, -80(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB108_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB108_3
.LBB108_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB108_3
.LBB108_3:                              # %cond.end
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB108_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB108_6
.LBB108_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB108_6
.LBB108_6:                              # %cond.end17
	movl	%eax, -120(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB108_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB108_9
.LBB108_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB108_9
.LBB108_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -80(%rbp)
	je	.LBB108_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB108_12
.LBB108_11:                             # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB108_12:                             # %cond.end41
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB108_13:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_15 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB108_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB108_15:                             # %for.cond56
                                        #   Parent Loop BB108_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB108_15 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB108_15 Depth=2
	movl	-128(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_15
.LBB108_18:                             # %for.end
                                        #   in Loop: Header=BB108_13 Depth=1
	jmp	.LBB108_19
.LBB108_19:                             # %for.inc167
                                        #   in Loop: Header=BB108_13 Depth=1
	movl	-100(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_13
.LBB108_20:                             # %for.end169
	movl	-108(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB108_21:                             # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_23 Depth 2
                                        #       Child Loop BB108_25 Depth 3
                                        #         Child Loop BB108_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB108_23:                             # %for.cond188
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_25 Depth 3
                                        #         Child Loop BB108_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB108_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	-72(%rbp), %edi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-80(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB108_25:                             # %for.cond199
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB108_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB108_25 Depth=3
	movl	$0, -28(%rbp)
.LBB108_27:                             # %for.cond203
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_23 Depth=2
                                        #       Parent Loop BB108_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB108_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB108_27 Depth=4
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-112(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB108_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB108_27
.LBB108_30:                             # %for.end232
                                        #   in Loop: Header=BB108_25 Depth=3
	jmp	.LBB108_31
.LBB108_31:                             # %for.inc233
                                        #   in Loop: Header=BB108_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB108_25
.LBB108_32:                             # %for.end235
                                        #   in Loop: Header=BB108_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB108_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB108_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB108_35
.LBB108_34:                             # %if.then
                                        #   in Loop: Header=BB108_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB108_35:                             # %if.end
                                        #   in Loop: Header=BB108_23 Depth=2
	jmp	.LBB108_36
.LBB108_36:                             # %for.inc240
                                        #   in Loop: Header=BB108_23 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_23
.LBB108_37:                             # %for.end243
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_38
.LBB108_38:                             # %for.inc244
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_21
.LBB108_39:                             # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB108_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB108_58
# %bb.41:                               # %if.then252
	movl	$0, -48(%rbp)
.LBB108_42:                             # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_44 Depth 2
                                        #       Child Loop BB108_46 Depth 3
                                        #         Child Loop BB108_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB108_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB108_42 Depth=1
	movl	$0, -52(%rbp)
.LBB108_44:                             # %for.cond261
                                        #   Parent Loop BB108_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_46 Depth 3
                                        #         Child Loop BB108_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB108_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB108_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB108_46:                             # %for.cond269
                                        #   Parent Loop BB108_42 Depth=1
                                        #     Parent Loop BB108_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB108_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB108_46 Depth=3
	movl	$0, -32(%rbp)
.LBB108_48:                             # %for.cond273
                                        #   Parent Loop BB108_42 Depth=1
                                        #     Parent Loop BB108_44 Depth=2
                                        #       Parent Loop BB108_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB108_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB108_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB108_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB108_48
.LBB108_51:                             # %for.end288
                                        #   in Loop: Header=BB108_46 Depth=3
	jmp	.LBB108_52
.LBB108_52:                             # %for.inc289
                                        #   in Loop: Header=BB108_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB108_46
.LBB108_53:                             # %for.end291
                                        #   in Loop: Header=BB108_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB108_44 Depth=2
	movl	-116(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB108_44
.LBB108_55:                             # %for.end298
                                        #   in Loop: Header=BB108_42 Depth=1
	jmp	.LBB108_56
.LBB108_56:                             # %for.inc299
                                        #   in Loop: Header=BB108_42 Depth=1
	movl	-120(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB108_42
.LBB108_57:                             # %for.end301
	jmp	.LBB108_58
.LBB108_58:                             # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$989852007, -104(%rbp)  # imm = 0x3AFFF167
	jne	.LBB108_60
.LBB108_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_60:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_59
.Lfunc_end108:
	.size	BPredPartitionCost.83, .Lfunc_end108-BPredPartitionCost.83
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.84            # -- Begin function find_SATD.84
	.p2align	4, 0x90
	.type	find_SATD.84,@function
find_SATD.84:                           # @find_SATD.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$320837871, -52(%rbp)   # imm = 0x131F98EF
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -24(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_3 Depth 2
                                        #       Child Loop BB109_5 Depth 3
                                        #         Child Loop BB109_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB109_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	$0, -20(%rbp)
.LBB109_3:                              # %for.cond7
                                        #   Parent Loop BB109_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_5 Depth 3
                                        #         Child Loop BB109_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB109_5:                              # %for.cond10
                                        #   Parent Loop BB109_1 Depth=1
                                        #     Parent Loop BB109_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_7 Depth 4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB109_5 Depth=3
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB109_7:                              # %for.cond13
                                        #   Parent Loop BB109_1 Depth=1
                                        #     Parent Loop BB109_3 Depth=2
                                        #       Parent Loop BB109_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB109_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB109_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB109_7
.LBB109_10:                             # %for.end
                                        #   in Loop: Header=BB109_5 Depth=3
	jmp	.LBB109_11
.LBB109_11:                             # %for.inc24
                                        #   in Loop: Header=BB109_5 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB109_5
.LBB109_12:                             # %for.end26
                                        #   in Loop: Header=BB109_3 Depth=2
	jmp	.LBB109_13
.LBB109_13:                             # %for.inc27
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_3
.LBB109_14:                             # %for.end29
                                        #   in Loop: Header=BB109_1 Depth=1
	jmp	.LBB109_15
.LBB109_15:                             # %for.inc30
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1
.LBB109_16:                             # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB109_26
# %bb.17:                               # %if.then
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB109_24
# %bb.18:                               # %if.then
	movq	.LJTI109_0(,%rax,8), %rax
	jmpq	*%rax
.LBB109_19:                             # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_25
.LBB109_20:                             # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_25
.LBB109_21:                             # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB109_25
.LBB109_22:                             # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_25
.LBB109_23:                             # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB109_25
.LBB109_24:                             # %sw.default
	movl	$-1, -12(%rbp)
.LBB109_25:                             # %sw.epilog
	jmp	.LBB109_31
.LBB109_26:                             # %if.else
	movl	$0, -16(%rbp)
.LBB109_27:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB109_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB109_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_27
.LBB109_30:                             # %for.end79
	jmp	.LBB109_31
.LBB109_31:                             # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$320837871, -52(%rbp)   # imm = 0x131F98EF
	jne	.LBB109_33
.LBB109_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_32
.Lfunc_end109:
	.size	find_SATD.84, .Lfunc_end109-find_SATD.84
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI109_0:
	.quad	.LBB109_19
	.quad	.LBB109_20
	.quad	.LBB109_20
	.quad	.LBB109_21
	.quad	.LBB109_22
	.quad	.LBB109_22
	.quad	.LBB109_23
                                        # -- End function
	.text
	.globl	sign.85                 # -- Begin function sign.85
	.p2align	4, 0x90
	.type	sign.85,@function
sign.85:                                # @sign.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$502229040, -24(%rbp)   # imm = 0x1DEF6830
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB110_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB110_3
.LBB110_2:                              # %cond.false
	movl	-12(%rbp), %eax
.LBB110_3:                              # %cond.end
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB110_5
# %bb.4:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_6
.LBB110_5:                              # %if.else
	xorl	%eax, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_6:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$502229040, -24(%rbp)   # imm = 0x1DEF6830
	jne	.LBB110_8
.LBB110_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_7
.Lfunc_end110:
	.size	sign.85, .Lfunc_end110-sign.85
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.86 # -- Begin function SetMotionVectorPredictor.86
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.86,@function
SetMotionVectorPredictor.86:            # @SetMotionVectorPredictor.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$971327537, -180(%rbp)  # imm = 0x39E54831
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -144(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -156(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -164(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB111_2:                              # %if.end
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB111_19
# %bb.3:                                # %if.then2
	cmpl	$8, -156(%rbp)
	jge	.LBB111_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB111_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB111_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB111_8
.LBB111_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB111_8:                              # %if.end10
	jmp	.LBB111_13
.LBB111_9:                              # %if.else11
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB111_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB111_12
.LBB111_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB111_12:                             # %if.end18
	jmp	.LBB111_13
.LBB111_13:                             # %if.end19
	jmp	.LBB111_18
.LBB111_14:                             # %if.else20
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB111_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB111_17
.LBB111_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB111_17:                             # %if.end28
	jmp	.LBB111_18
.LBB111_18:                             # %if.end29
	jmp	.LBB111_19
.LBB111_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB111_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB111_21:                             # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB111_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB111_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_25
.LBB111_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_25
.LBB111_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB111_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_28
.LBB111_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_28
.LBB111_28:                             # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB111_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_31
.LBB111_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_31
.LBB111_31:                             # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB111_72
.LBB111_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB111_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_37
.LBB111_36:                             # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB111_37:                             # %cond.end108
	jmp	.LBB111_39
.LBB111_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_39
.LBB111_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB111_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_43
.LBB111_42:                             # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB111_43:                             # %cond.end143
	jmp	.LBB111_45
.LBB111_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_45
.LBB111_45:                             # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB111_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_49
.LBB111_48:                             # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB111_49:                             # %cond.end178
	jmp	.LBB111_51
.LBB111_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_51
.LBB111_51:                             # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB111_71
.LBB111_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB111_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB111_56
.LBB111_55:                             # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB111_56:                             # %cond.end213
	jmp	.LBB111_58
.LBB111_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_58
.LBB111_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB111_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB111_62
.LBB111_61:                             # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB111_62:                             # %cond.end248
	jmp	.LBB111_64
.LBB111_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_64
.LBB111_64:                             # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB111_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB111_68
.LBB111_67:                             # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB111_68:                             # %cond.end283
	jmp	.LBB111_70
.LBB111_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_70
.LBB111_70:                             # %cond.end286
	movl	%eax, -80(%rbp)
.LBB111_71:                             # %if.end288
	jmp	.LBB111_72
.LBB111_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB111_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB111_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB111_86
.LBB111_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB111_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB111_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB111_85
.LBB111_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB111_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB111_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB111_84:                             # %if.end327
	jmp	.LBB111_85
.LBB111_85:                             # %if.end328
	jmp	.LBB111_86
.LBB111_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB111_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB111_96
# %bb.88:                               # %if.then335
	cmpl	$0, -156(%rbp)
	jne	.LBB111_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB111_91:                             # %if.end343
	jmp	.LBB111_95
.LBB111_92:                             # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB111_94:                             # %if.end349
	jmp	.LBB111_95
.LBB111_95:                             # %if.end350
	jmp	.LBB111_107
.LBB111_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB111_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB111_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB111_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB111_101:                            # %if.end365
	jmp	.LBB111_105
.LBB111_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB111_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB111_104:                            # %if.end371
	jmp	.LBB111_105
.LBB111_105:                            # %if.end372
	jmp	.LBB111_106
.LBB111_106:                            # %if.end373
	jmp	.LBB111_107
.LBB111_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB111_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB111_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB111_121
.LBB111_111:                            # %if.then381
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB111_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_114
.LBB111_113:                            # %cond.false396
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_114
.LBB111_114:                            # %cond.end397
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB111_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_117
.LBB111_116:                            # %cond.false413
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_117
.LBB111_117:                            # %cond.end414
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB111_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_120
.LBB111_119:                            # %cond.false430
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_120
.LBB111_120:                            # %cond.end431
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB111_161
.LBB111_121:                            # %if.else433
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB111_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_126
.LBB111_125:                            # %cond.false462
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB111_126:                            # %cond.end474
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_128
.LBB111_127:                            # %cond.false476
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_128
.LBB111_128:                            # %cond.end477
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB111_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_132
.LBB111_131:                            # %cond.false500
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB111_132:                            # %cond.end513
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_134
.LBB111_133:                            # %cond.false515
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_134
.LBB111_134:                            # %cond.end516
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB111_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB111_138
.LBB111_137:                            # %cond.false539
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB111_138:                            # %cond.end552
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_140
.LBB111_139:                            # %cond.false554
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_140
.LBB111_140:                            # %cond.end555
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB111_160
.LBB111_141:                            # %if.else557
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB111_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB111_145
.LBB111_144:                            # %cond.false580
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB111_145:                            # %cond.end592
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_147
.LBB111_146:                            # %cond.false594
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_147
.LBB111_147:                            # %cond.end595
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB111_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB111_151
.LBB111_150:                            # %cond.false619
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB111_151:                            # %cond.end631
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_153
.LBB111_152:                            # %cond.false633
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_153
.LBB111_153:                            # %cond.end634
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB111_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB111_157
.LBB111_156:                            # %cond.false658
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB111_157:                            # %cond.end670
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_159
.LBB111_158:                            # %cond.false672
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_159
.LBB111_159:                            # %cond.end673
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB111_160:                            # %if.end675
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_161
.LBB111_161:                            # %if.end676
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB111_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB111_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB111_166
.LBB111_165:                            # %cond.false696
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB111_166:                            # %cond.end708
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_168
.LBB111_167:                            # %cond.false710
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_168
.LBB111_168:                            # %cond.end711
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -140(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB111_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB111_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB111_172
.LBB111_171:                            # %cond.false729
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB111_172:                            # %cond.end741
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_174
.LBB111_173:                            # %cond.false743
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_174
.LBB111_174:                            # %cond.end744
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB111_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB111_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB111_178
.LBB111_177:                            # %cond.false762
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB111_178:                            # %cond.end774
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_180
.LBB111_179:                            # %cond.false776
                                        #   in Loop: Header=BB111_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB111_180
.LBB111_180:                            # %cond.end777
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB111_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB111_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB111_184
.LBB111_183:                            # %cond.false795
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB111_184:                            # %cond.end807
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_186
.LBB111_185:                            # %cond.false809
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-176(%rbp), %eax
.LBB111_186:                            # %cond.end810
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB111_187:                            # %if.end812
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB111_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	.LJTI111_0(,%rax,8), %rax
	jmpq	*%rax
.LBB111_189:                            # %sw.bb
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB111_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB111_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB111_193:                            # %if.end824
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_213
.LBB111_194:                            # %if.else825
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB111_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB111_197
.LBB111_196:                            # %cond.false831
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-20(%rbp), %edx
.LBB111_197:                            # %cond.end832
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB111_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB111_203
.LBB111_199:                            # %cond.false837
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB111_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB111_202
.LBB111_201:                            # %cond.false841
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB111_202:                            # %cond.end842
                                        #   in Loop: Header=BB111_108 Depth=1
.LBB111_203:                            # %cond.end844
                                        #   in Loop: Header=BB111_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB111_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB111_206
.LBB111_205:                            # %cond.false849
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-20(%rbp), %edx
.LBB111_206:                            # %cond.end850
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB111_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB111_212
.LBB111_208:                            # %cond.false855
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB111_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB111_211
.LBB111_210:                            # %cond.false859
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB111_211:                            # %cond.end860
                                        #   in Loop: Header=BB111_108 Depth=1
.LBB111_212:                            # %cond.end862
                                        #   in Loop: Header=BB111_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB111_213:                            # %if.end865
                                        #   in Loop: Header=BB111_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB111_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -140(%rbp)
	je	.LBB111_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB111_222
.LBB111_217:                            # %if.else877
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB111_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB111_108 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB111_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB111_221
.LBB111_220:                            # %if.else886
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB111_221:                            # %if.end889
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_222
.LBB111_222:                            # %if.end890
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_223
.LBB111_223:                            # %if.end891
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_234
.LBB111_224:                            # %sw.bb892
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB111_226:                            # %if.end898
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_234
.LBB111_227:                            # %sw.bb899
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB111_229:                            # %if.end905
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_234
.LBB111_230:                            # %sw.bb906
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB111_232:                            # %if.end912
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_234
.LBB111_233:                            # %sw.default
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_234
.LBB111_234:                            # %sw.epilog
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_108
.LBB111_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB111_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB111_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB111_240
.LBB111_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB111_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB111_241:                            # %if.end929
	cmpl	$971327537, -180(%rbp)  # imm = 0x39E54831
	jne	.LBB111_243
.LBB111_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_242
.Lfunc_end111:
	.size	SetMotionVectorPredictor.86, .Lfunc_end111-SetMotionVectorPredictor.86
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI111_0:
	.quad	.LBB111_189
	.quad	.LBB111_224
	.quad	.LBB111_227
	.quad	.LBB111_230
                                        # -- End function
	.text
	.globl	FindSkipModeMotionVector.87 # -- Begin function FindSkipModeMotionVector.87
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.87,@function
FindSkipModeMotionVector.87:            # @FindSkipModeMotionVector.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1364754296, -56(%rbp)  # imm = 0x51587F78
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB112_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB112_4
# %bb.3:                                # %if.then24
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB112_4:                              # %if.end
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB112_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_7
# %bb.6:                                # %if.then34
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB112_7:                              # %if.end36
	jmp	.LBB112_8
.LBB112_8:                              # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB112_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB112_12
# %bb.11:                               # %if.then69
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
.LBB112_12:                             # %if.end72
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB112_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_15
# %bb.14:                               # %if.then82
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB112_15:                             # %if.end85
	jmp	.LBB112_16
.LBB112_16:                             # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB112_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB112_22
.LBB112_18:                             # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB112_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB112_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB112_21:                             # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB112_22:                             # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB112_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB112_28
.LBB112_24:                             # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jne	.LBB112_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB112_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB112_27:                             # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB112_28:                             # %cond.end130
	movl	%ecx, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB112_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB112_39
.LBB112_30:                             # %if.then134
	movl	$0, -4(%rbp)
.LBB112_31:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_33 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB112_31 Depth=1
	movl	$0, -8(%rbp)
.LBB112_33:                             # %for.cond137
                                        #   Parent Loop BB112_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB112_33 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB112_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_33
.LBB112_36:                             # %for.end
                                        #   in Loop: Header=BB112_31 Depth=1
	jmp	.LBB112_37
.LBB112_37:                             # %for.inc157
                                        #   in Loop: Header=BB112_31 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_31
.LBB112_38:                             # %for.end159
	jmp	.LBB112_48
.LBB112_39:                             # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -4(%rbp)
.LBB112_40:                             # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_42 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB112_40 Depth=1
	movl	$0, -8(%rbp)
.LBB112_42:                             # %for.cond166
                                        #   Parent Loop BB112_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB112_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB112_42 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_42
.LBB112_45:                             # %for.end190
                                        #   in Loop: Header=BB112_40 Depth=1
	jmp	.LBB112_46
.LBB112_46:                             # %for.inc191
                                        #   in Loop: Header=BB112_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_40
.LBB112_47:                             # %for.end193
	jmp	.LBB112_48
.LBB112_48:                             # %if.end194
	cmpl	$1364754296, -56(%rbp)  # imm = 0x51587F78
	jne	.LBB112_50
.LBB112_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_49
.Lfunc_end112:
	.size	FindSkipModeMotionVector.87, .Lfunc_end112-FindSkipModeMotionVector.87
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.88    # -- Begin function Get_Direct_CostMB.88
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.88,@function
Get_Direct_CostMB.88:                   # @Get_Direct_CostMB.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2131954068, -28(%rbp)  # imm = 0x7F130994
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB113_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB113_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB113_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB113_5
.LBB113_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_18
.LBB113_5:                              # %if.end
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_6
.LBB113_6:                              # %for.inc
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_1
.LBB113_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB113_9
	jmp	.LBB113_8
.LBB113_8:                              # %for.end
	subl	$2, %eax
	je	.LBB113_15
	jmp	.LBB113_16
.LBB113_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB113_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB113_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB113_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB113_14
.LBB113_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_14:                             # %if.end9
	jmp	.LBB113_17
.LBB113_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_17
.LBB113_16:                             # %sw.default
	jmp	.LBB113_17
.LBB113_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$2131954068, -28(%rbp)  # imm = 0x7F130994
	jne	.LBB113_20
.LBB113_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_19
.Lfunc_end113:
	.size	Get_Direct_CostMB.88, .Lfunc_end113-Get_Direct_CostMB.88
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.89            # -- Begin function find_SATD.89
	.p2align	4, 0x90
	.type	find_SATD.89,@function
find_SATD.89:                           # @find_SATD.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$476388585, -56(%rbp)   # imm = 0x1C651CE9
	movq	%rdi, -64(%rbp)
	movl	%esi, -52(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_3 Depth 2
                                        #       Child Loop BB114_5 Depth 3
                                        #         Child Loop BB114_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB114_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	$0, -24(%rbp)
.LBB114_3:                              # %for.cond7
                                        #   Parent Loop BB114_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_5 Depth 3
                                        #         Child Loop BB114_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB114_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB114_5:                              # %for.cond10
                                        #   Parent Loop BB114_1 Depth=1
                                        #     Parent Loop BB114_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB114_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB114_7:                              # %for.cond13
                                        #   Parent Loop BB114_1 Depth=1
                                        #     Parent Loop BB114_3 Depth=2
                                        #       Parent Loop BB114_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB114_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB114_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB114_7
.LBB114_10:                             # %for.end
                                        #   in Loop: Header=BB114_5 Depth=3
	jmp	.LBB114_11
.LBB114_11:                             # %for.inc24
                                        #   in Loop: Header=BB114_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB114_5
.LBB114_12:                             # %for.end26
                                        #   in Loop: Header=BB114_3 Depth=2
	jmp	.LBB114_13
.LBB114_13:                             # %for.inc27
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB114_3
.LBB114_14:                             # %for.end29
                                        #   in Loop: Header=BB114_1 Depth=1
	jmp	.LBB114_15
.LBB114_15:                             # %for.inc30
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_1
.LBB114_16:                             # %for.end32
	cmpl	$0, -52(%rbp)
	je	.LBB114_26
# %bb.17:                               # %if.then
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB114_24
# %bb.18:                               # %if.then
	movq	.LJTI114_0(,%rax,8), %rax
	jmpq	*%rax
.LBB114_19:                             # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_25
.LBB114_20:                             # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_25
.LBB114_21:                             # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB114_25
.LBB114_22:                             # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_25
.LBB114_23:                             # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB114_25
.LBB114_24:                             # %sw.default
	movl	$-1, -12(%rbp)
.LBB114_25:                             # %sw.epilog
	jmp	.LBB114_31
.LBB114_26:                             # %if.else
	movl	$0, -16(%rbp)
.LBB114_27:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB114_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB114_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_27
.LBB114_30:                             # %for.end79
	jmp	.LBB114_31
.LBB114_31:                             # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$476388585, -56(%rbp)   # imm = 0x1C651CE9
	jne	.LBB114_33
.LBB114_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_32
.Lfunc_end114:
	.size	find_SATD.89, .Lfunc_end114-find_SATD.89
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI114_0:
	.quad	.LBB114_19
	.quad	.LBB114_20
	.quad	.LBB114_20
	.quad	.LBB114_21
	.quad	.LBB114_22
	.quad	.LBB114_22
	.quad	.LBB114_23
                                        # -- End function
	.text
	.globl	FindSkipModeMotionVector.90 # -- Begin function FindSkipModeMotionVector.90
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.90,@function
FindSkipModeMotionVector.90:            # @FindSkipModeMotionVector.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$792835585, -56(%rbp)   # imm = 0x2F41B601
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB115_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB115_4
# %bb.3:                                # %if.then24
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
.LBB115_4:                              # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB115_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_7
# %bb.6:                                # %if.then34
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB115_7:                              # %if.end36
	jmp	.LBB115_8
.LBB115_8:                              # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB115_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB115_12
# %bb.11:                               # %if.then69
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB115_12:                             # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB115_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_15
# %bb.14:                               # %if.then82
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB115_15:                             # %if.end85
	jmp	.LBB115_16
.LBB115_16:                             # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB115_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB115_22
.LBB115_18:                             # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jne	.LBB115_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB115_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB115_21:                             # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB115_22:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB115_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB115_28
.LBB115_24:                             # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB115_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB115_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB115_27:                             # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB115_28:                             # %cond.end130
	movl	%ecx, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB115_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -60(%rbp)
	je	.LBB115_39
.LBB115_30:                             # %if.then134
	movl	$0, -8(%rbp)
.LBB115_31:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB115_31 Depth=1
	movl	$0, -4(%rbp)
.LBB115_33:                             # %for.cond137
                                        #   Parent Loop BB115_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB115_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB115_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_33
.LBB115_36:                             # %for.end
                                        #   in Loop: Header=BB115_31 Depth=1
	jmp	.LBB115_37
.LBB115_37:                             # %for.inc157
                                        #   in Loop: Header=BB115_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_31
.LBB115_38:                             # %for.end159
	jmp	.LBB115_48
.LBB115_39:                             # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB115_40:                             # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB115_40 Depth=1
	movl	$0, -4(%rbp)
.LBB115_42:                             # %for.cond166
                                        #   Parent Loop BB115_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB115_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB115_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_42
.LBB115_45:                             # %for.end190
                                        #   in Loop: Header=BB115_40 Depth=1
	jmp	.LBB115_46
.LBB115_46:                             # %for.inc191
                                        #   in Loop: Header=BB115_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_40
.LBB115_47:                             # %for.end193
	jmp	.LBB115_48
.LBB115_48:                             # %if.end194
	cmpl	$792835585, -56(%rbp)   # imm = 0x2F41B601
	jne	.LBB115_50
.LBB115_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_49
.Lfunc_end115:
	.size	FindSkipModeMotionVector.90, .Lfunc_end115-FindSkipModeMotionVector.90
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.91    # -- Begin function Get_Direct_CostMB.91
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.91,@function
Get_Direct_CostMB.91:                   # @Get_Direct_CostMB.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1422956850, -28(%rbp)  # imm = 0x54D09932
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB116_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB116_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB116_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB116_5
.LBB116_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB116_18
.LBB116_5:                              # %if.end
                                        #   in Loop: Header=BB116_1 Depth=1
	jmp	.LBB116_6
.LBB116_6:                              # %for.inc
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_1
.LBB116_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB116_9
	jmp	.LBB116_8
.LBB116_8:                              # %for.end
	subl	$2, %eax
	je	.LBB116_15
	jmp	.LBB116_16
.LBB116_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB116_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB116_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB116_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB116_14
.LBB116_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_14:                             # %if.end9
	jmp	.LBB116_17
.LBB116_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_17
.LBB116_16:                             # %sw.default
	jmp	.LBB116_17
.LBB116_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB116_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1422956850, -28(%rbp)  # imm = 0x54D09932
	jne	.LBB116_20
.LBB116_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_19
.Lfunc_end116:
	.size	Get_Direct_CostMB.91, .Lfunc_end116-Get_Direct_CostMB.91
	.cfi_endproc
                                        # -- End function
	.globl	sign.92                 # -- Begin function sign.92
	.p2align	4, 0x90
	.type	sign.92,@function
sign.92:                                # @sign.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1160228693, -24(%rbp)  # imm = 0x4527AF55
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB117_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB117_3
.LBB117_2:                              # %cond.false
	movl	-12(%rbp), %eax
.LBB117_3:                              # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB117_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_6
.LBB117_5:                              # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_6:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1160228693, -24(%rbp)  # imm = 0x4527AF55
	jne	.LBB117_8
.LBB117_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_7
.Lfunc_end117:
	.size	sign.92, .Lfunc_end117-sign.92
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.93   # -- Begin function BPredPartitionCost.93
	.p2align	4, 0x90
	.type	BPredPartitionCost.93,@function
BPredPartitionCost.93:                  # @BPredPartitionCost.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1648753946, -112(%rbp) # imm = 0x6245FD1A
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -120(%rbp)
	movl	%r9d, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB118_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB118_3
.LBB118_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB118_3
.LBB118_3:                              # %cond.end
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB118_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB118_6
.LBB118_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB118_6
.LBB118_6:                              # %cond.end17
	movl	%eax, -108(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB118_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB118_9
.LBB118_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB118_9
.LBB118_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB118_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB118_12
.LBB118_11:                             # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB118_12:                             # %cond.end41
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB118_13:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB118_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB118_15:                             # %for.cond56
                                        #   Parent Loop BB118_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB118_15 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB118_15 Depth=2
	movl	-100(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_15
.LBB118_18:                             # %for.end
                                        #   in Loop: Header=BB118_13 Depth=1
	jmp	.LBB118_19
.LBB118_19:                             # %for.inc167
                                        #   in Loop: Header=BB118_13 Depth=1
	movl	-124(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_13
.LBB118_20:                             # %for.end169
	movl	-120(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB118_21:                             # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_23 Depth 2
                                        #       Child Loop BB118_25 Depth 3
                                        #         Child Loop BB118_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB118_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB118_23:                             # %for.cond188
                                        #   Parent Loop BB118_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_25 Depth 3
                                        #         Child Loop BB118_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB118_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	-80(%rbp), %edi
	movl	-76(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-64(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB118_25:                             # %for.cond199
                                        #   Parent Loop BB118_21 Depth=1
                                        #     Parent Loop BB118_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB118_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB118_25 Depth=3
	movl	$0, -28(%rbp)
.LBB118_27:                             # %for.cond203
                                        #   Parent Loop BB118_21 Depth=1
                                        #     Parent Loop BB118_23 Depth=2
                                        #       Parent Loop BB118_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB118_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB118_27 Depth=4
	movq	imgY_org, %rax
	movl	-104(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB118_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB118_27
.LBB118_30:                             # %for.end232
                                        #   in Loop: Header=BB118_25 Depth=3
	jmp	.LBB118_31
.LBB118_31:                             # %for.inc233
                                        #   in Loop: Header=BB118_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_25
.LBB118_32:                             # %for.end235
                                        #   in Loop: Header=BB118_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB118_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB118_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB118_35
.LBB118_34:                             # %if.then
                                        #   in Loop: Header=BB118_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB118_35:                             # %if.end
                                        #   in Loop: Header=BB118_23 Depth=2
	jmp	.LBB118_36
.LBB118_36:                             # %for.inc240
                                        #   in Loop: Header=BB118_23 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_23
.LBB118_37:                             # %for.end243
                                        #   in Loop: Header=BB118_21 Depth=1
	jmp	.LBB118_38
.LBB118_38:                             # %for.inc244
                                        #   in Loop: Header=BB118_21 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_21
.LBB118_39:                             # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB118_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB118_58
# %bb.41:                               # %if.then252
	movl	$0, -48(%rbp)
.LBB118_42:                             # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_44 Depth 2
                                        #       Child Loop BB118_46 Depth 3
                                        #         Child Loop BB118_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB118_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB118_42 Depth=1
	movl	$0, -52(%rbp)
.LBB118_44:                             # %for.cond261
                                        #   Parent Loop BB118_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_46 Depth 3
                                        #         Child Loop BB118_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB118_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB118_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB118_46:                             # %for.cond269
                                        #   Parent Loop BB118_42 Depth=1
                                        #     Parent Loop BB118_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB118_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB118_46 Depth=3
	movl	$0, -32(%rbp)
.LBB118_48:                             # %for.cond273
                                        #   Parent Loop BB118_42 Depth=1
                                        #     Parent Loop BB118_44 Depth=2
                                        #       Parent Loop BB118_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB118_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB118_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB118_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_48
.LBB118_51:                             # %for.end288
                                        #   in Loop: Header=BB118_46 Depth=3
	jmp	.LBB118_52
.LBB118_52:                             # %for.inc289
                                        #   in Loop: Header=BB118_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_46
.LBB118_53:                             # %for.end291
                                        #   in Loop: Header=BB118_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB118_44 Depth=2
	movl	-116(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB118_44
.LBB118_55:                             # %for.end298
                                        #   in Loop: Header=BB118_42 Depth=1
	jmp	.LBB118_56
.LBB118_56:                             # %for.inc299
                                        #   in Loop: Header=BB118_42 Depth=1
	movl	-108(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB118_42
.LBB118_57:                             # %for.end301
	jmp	.LBB118_58
.LBB118_58:                             # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$1648753946, -112(%rbp) # imm = 0x6245FD1A
	jne	.LBB118_60
.LBB118_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_60:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_59
.Lfunc_end118:
	.size	BPredPartitionCost.93, .Lfunc_end118-BPredPartitionCost.93
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.94    # -- Begin function SetupLargerBlocks.94
	.p2align	4, 0x90
	.type	SetupLargerBlocks.94,@function
SetupLargerBlocks.94:                   # @SetupLargerBlocks.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1917758653, -76(%rbp)  # imm = 0x724EACBD
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_4:                              # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_5:                              # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB119_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB119_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_5
.LBB119_8:                              # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_9:                              # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB119_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_9
.LBB119_12:                             # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_13:                             # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB119_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB119_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_13
.LBB119_16:                             # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_17:                             # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB119_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB119_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_17
.LBB119_20:                             # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_21:                             # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB119_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB119_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_21
.LBB119_24:                             # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_25:                             # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB119_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB119_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_25
.LBB119_28:                             # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_29:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB119_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB119_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_29
.LBB119_32:                             # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_33:                             # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB119_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB119_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_33
.LBB119_36:                             # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_37:                             # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB119_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB119_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_37
.LBB119_40:                             # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_41:                             # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB119_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB119_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_41
.LBB119_44:                             # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_45:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB119_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB119_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_45
.LBB119_48:                             # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_49:                             # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB119_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB119_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_49
.LBB119_52:                             # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_53:                             # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB119_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB119_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_53
.LBB119_56:                             # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_57:                             # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB119_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB119_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_57
.LBB119_60:                             # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_61:                             # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB119_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB119_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_61
.LBB119_64:                             # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_65:                             # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB119_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB119_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_65
.LBB119_68:                             # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_69:                             # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB119_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB119_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_69
.LBB119_72:                             # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_73:                             # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB119_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB119_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_73
.LBB119_76:                             # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_77:                             # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB119_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB119_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_77
.LBB119_80:                             # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_81:                             # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB119_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB119_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_81
.LBB119_84:                             # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_85:                             # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB119_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB119_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_85
.LBB119_88:                             # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_89:                             # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB119_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB119_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_89
.LBB119_92:                             # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_93:                             # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB119_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB119_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_93
.LBB119_96:                             # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB119_97:                             # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB119_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB119_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB119_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_97
.LBB119_100:                            # %for.end438
	cmpl	$1917758653, -76(%rbp)  # imm = 0x724EACBD
	jne	.LBB119_102
.LBB119_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_102:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_101
.Lfunc_end119:
	.size	SetupLargerBlocks.94, .Lfunc_end119-SetupLargerBlocks.94
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.95
.LCPI120_0:
	.quad	4602678819172646912     # double 0.5
.LCPI120_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.95
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.95,@function
SubPelBlockSearchBiPred.95:             # @SubPelBlockSearchBiPred.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI120_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1320584834, -200(%rbp) # imm = 0x4EB68682
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -154(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB120_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB120_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB120_4
.LBB120_3:                              # %cond.false
	movl	64(%rbp), %eax
.LBB120_4:                              # %cond.end
	jmp	.LBB120_6
.LBB120_5:                              # %cond.false17
	movl	64(%rbp), %eax
.LBB120_6:                              # %cond.end18
	movw	%ax, -174(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB120_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB120_10
.LBB120_9:                              # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB120_10
.LBB120_10:                             # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -114(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB120_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB120_14
.LBB120_13:                             # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB120_14:                             # %cond.end55
	jmp	.LBB120_16
.LBB120_15:                             # %cond.false57
	movl	$1, %eax
	jmp	.LBB120_16
.LBB120_16:                             # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB120_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB120_20
.LBB120_19:                             # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB120_20:                             # %cond.end82
	jmp	.LBB120_22
.LBB120_21:                             # %cond.false84
	movl	$1, %eax
	jmp	.LBB120_22
.LBB120_22:                             # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB120_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB120_26
.LBB120_25:                             # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB120_26:                             # %cond.end106
	jmp	.LBB120_28
.LBB120_27:                             # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB120_28
.LBB120_28:                             # %cond.end109
	movw	%ax, -170(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB120_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB120_32
.LBB120_31:                             # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB120_32:                             # %cond.end130
	jmp	.LBB120_34
.LBB120_33:                             # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB120_34
.LBB120_34:                             # %cond.end133
	movw	%ax, -176(%rbp)
	movswl	-176(%rbp), %eax
	movswl	-170(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB120_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB120_37
.LBB120_36:                             # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB120_37:                             # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB120_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB120_40
.LBB120_39:                             # %cond.false161
	movswl	-90(%rbp), %eax
.LBB120_40:                             # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-154(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_45
# %bb.41:                               # %land.lhs.true197
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB120_46
.LBB120_45:                             # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB120_46:                             # %if.end
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_51
# %bb.47:                               # %land.lhs.true224
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB120_52
.LBB120_51:                             # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB120_52:                             # %if.end248
	movw	$0, -102(%rbp)
	movw	-172(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB120_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_55 Depth 2
                                        #       Child Loop BB120_60 Depth 3
                                        #         Child Loop BB120_162 Depth 4
                                        #           Child Loop BB120_164 Depth 5
                                        #       Child Loop BB120_175 Depth 3
                                        #         Child Loop BB120_181 Depth 4
                                        #           Child Loop BB120_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-174(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB120_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB120_55:                             # %for.cond283
                                        #   Parent Loop BB120_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_60 Depth 3
                                        #         Child Loop BB120_162 Depth 4
                                        #           Child Loop BB120_164 Depth 5
                                        #       Child Loop BB120_175 Depth 3
                                        #         Child Loop BB120_181 Depth 4
                                        #           Child Loop BB120_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB120_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB120_55 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB120_57:                             # %land.end
                                        #   in Loop: Header=BB120_55 Depth=2
	testb	$1, %al
	jne	.LBB120_58
	jmp	.LBB120_195
.LBB120_58:                             # %for.body289
                                        #   in Loop: Header=BB120_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB120_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$0, -40(%rbp)
.LBB120_60:                             # %for.cond304
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_162 Depth 4
                                        #           Child Loop BB120_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB120_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_67
.LBB120_63:                             # %cond.false345
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_66
.LBB120_65:                             # %cond.false369
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_66:                             # %cond.end389
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_67:                             # %cond.end391
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_73
.LBB120_69:                             # %cond.false421
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_72
.LBB120_71:                             # %cond.false448
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_72:                             # %cond.end470
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_73:                             # %cond.end472
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_79
.LBB120_75:                             # %cond.false505
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_78
.LBB120_77:                             # %cond.false532
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_78:                             # %cond.end554
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_79:                             # %cond.end556
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_85
.LBB120_81:                             # %cond.false589
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_84
.LBB120_83:                             # %cond.false616
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_84:                             # %cond.end638
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_85:                             # %cond.end640
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_91
.LBB120_87:                             # %cond.false681
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_90
.LBB120_89:                             # %cond.false706
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_90:                             # %cond.end726
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_91:                             # %cond.end728
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_97
.LBB120_93:                             # %cond.false759
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_96
.LBB120_95:                             # %cond.false786
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_96:                             # %cond.end808
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_97:                             # %cond.end810
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_103
.LBB120_99:                             # %cond.false843
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_102
.LBB120_101:                            # %cond.false870
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_102:                            # %cond.end892
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_103:                            # %cond.end894
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_109
.LBB120_105:                            # %cond.false927
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_108
.LBB120_107:                            # %cond.false954
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_108:                            # %cond.end976
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_109:                            # %cond.end978
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_115
.LBB120_111:                            # %cond.false1019
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_114
.LBB120_113:                            # %cond.false1044
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_114:                            # %cond.end1064
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_115:                            # %cond.end1066
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_121
.LBB120_117:                            # %cond.false1097
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_120
.LBB120_119:                            # %cond.false1124
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_120:                            # %cond.end1146
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_121:                            # %cond.end1148
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_127
.LBB120_123:                            # %cond.false1181
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_126
.LBB120_125:                            # %cond.false1208
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_126:                            # %cond.end1230
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_127:                            # %cond.end1232
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_133
.LBB120_129:                            # %cond.false1265
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_132
.LBB120_131:                            # %cond.false1292
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_132:                            # %cond.end1314
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_133:                            # %cond.end1316
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_139
.LBB120_135:                            # %cond.false1357
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_138
.LBB120_137:                            # %cond.false1382
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_138:                            # %cond.end1402
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_139:                            # %cond.end1404
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_145
.LBB120_141:                            # %cond.false1435
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_144
.LBB120_143:                            # %cond.false1462
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_144:                            # %cond.end1484
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_145:                            # %cond.end1486
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_151
.LBB120_147:                            # %cond.false1519
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_150
.LBB120_149:                            # %cond.false1546
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_150:                            # %cond.end1568
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_151:                            # %cond.end1570
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_157
.LBB120_153:                            # %cond.false1603
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_156
.LBB120_155:                            # %cond.false1630
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_156:                            # %cond.end1652
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_157:                            # %cond.end1654
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB120_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB120_173
.LBB120_160:                            # %if.end1673
                                        #   in Loop: Header=BB120_60 Depth=3
	jmp	.LBB120_170
.LBB120_161:                            # %if.else1674
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB120_162:                            # %for.cond1675
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_164 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB120_162 Depth=4
	movl	$0, -96(%rbp)
.LBB120_164:                            # %for.cond1679
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_60 Depth=3
                                        #         Parent Loop BB120_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB120_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB120_164 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_164
.LBB120_167:                            # %for.end
                                        #   in Loop: Header=BB120_162 Depth=4
	jmp	.LBB120_168
.LBB120_168:                            # %for.inc1694
                                        #   in Loop: Header=BB120_162 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB120_162
.LBB120_169:                            # %for.end1696
                                        #   in Loop: Header=BB120_60 Depth=3
	jmp	.LBB120_170
.LBB120_170:                            # %if.end1697
                                        #   in Loop: Header=BB120_60 Depth=3
	jmp	.LBB120_171
.LBB120_171:                            # %for.inc1698
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_60
.LBB120_172:                            # %for.end1702.loopexit
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_173
.LBB120_173:                            # %for.end1702
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_193
.LBB120_174:                            # %if.else1703
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$0, -40(%rbp)
.LBB120_175:                            # %for.cond1704
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_181 Depth 4
                                        #           Child Loop BB120_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB120_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB120_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB120_192
.LBB120_179:                            # %if.end2054
                                        #   in Loop: Header=BB120_175 Depth=3
	jmp	.LBB120_189
.LBB120_180:                            # %if.else2055
                                        #   in Loop: Header=BB120_175 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB120_181:                            # %for.cond2056
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_183 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB120_181 Depth=4
	movl	$0, -96(%rbp)
.LBB120_183:                            # %for.cond2060
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_175 Depth=3
                                        #         Parent Loop BB120_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB120_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB120_183 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_183
.LBB120_186:                            # %for.end2077
                                        #   in Loop: Header=BB120_181 Depth=4
	jmp	.LBB120_187
.LBB120_187:                            # %for.inc2078
                                        #   in Loop: Header=BB120_181 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB120_181
.LBB120_188:                            # %for.end2080
                                        #   in Loop: Header=BB120_175 Depth=3
	jmp	.LBB120_189
.LBB120_189:                            # %if.end2081
                                        #   in Loop: Header=BB120_175 Depth=3
	jmp	.LBB120_190
.LBB120_190:                            # %for.inc2082
                                        #   in Loop: Header=BB120_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_175
.LBB120_191:                            # %for.end2086.loopexit
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_192
.LBB120_192:                            # %for.end2086
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_193
.LBB120_193:                            # %if.end2087
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_194
.LBB120_194:                            # %for.inc2088
                                        #   in Loop: Header=BB120_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB120_55
.LBB120_195:                            # %for.end2092
                                        #   in Loop: Header=BB120_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB120_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB120_197:                            # %if.end2101
                                        #   in Loop: Header=BB120_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB120_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB120_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB120_199:                            # %if.end2107
                                        #   in Loop: Header=BB120_53 Depth=1
	jmp	.LBB120_200
.LBB120_200:                            # %for.inc2108
                                        #   in Loop: Header=BB120_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB120_53
.LBB120_201:                            # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB120_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB120_203:                            # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB120_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB120_205:                            # %if.end2129
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB120_211
.LBB120_210:                            # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB120_211:                            # %if.end2159
	movw	$0, -102(%rbp)
	movl	-196(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB120_212:                            # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_214 Depth 2
                                        #       Child Loop BB120_219 Depth 3
                                        #         Child Loop BB120_321 Depth 4
                                        #           Child Loop BB120_323 Depth 5
                                        #       Child Loop BB120_334 Depth 3
                                        #         Child Loop BB120_340 Depth 4
                                        #           Child Loop BB120_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB120_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB120_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB120_214:                            # %for.cond2194
                                        #   Parent Loop BB120_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_219 Depth 3
                                        #         Child Loop BB120_321 Depth 4
                                        #           Child Loop BB120_323 Depth 5
                                        #       Child Loop BB120_334 Depth 3
                                        #         Child Loop BB120_340 Depth 4
                                        #           Child Loop BB120_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB120_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB120_214 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB120_216:                            # %land.end2202
                                        #   in Loop: Header=BB120_214 Depth=2
	testb	$1, %al
	jne	.LBB120_217
	jmp	.LBB120_354
.LBB120_217:                            # %for.body2203
                                        #   in Loop: Header=BB120_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB120_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$0, -40(%rbp)
.LBB120_219:                            # %for.cond2218
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_321 Depth 4
                                        #           Child Loop BB120_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB120_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_226
.LBB120_222:                            # %cond.false2261
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_225
.LBB120_224:                            # %cond.false2286
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_225:                            # %cond.end2306
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_226:                            # %cond.end2308
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_232
.LBB120_228:                            # %cond.false2339
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_231
.LBB120_230:                            # %cond.false2366
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_231:                            # %cond.end2388
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_232:                            # %cond.end2390
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_238
.LBB120_234:                            # %cond.false2423
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_237
.LBB120_236:                            # %cond.false2450
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_237:                            # %cond.end2472
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_238:                            # %cond.end2474
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_244
.LBB120_240:                            # %cond.false2507
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_243
.LBB120_242:                            # %cond.false2534
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_243:                            # %cond.end2556
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_244:                            # %cond.end2558
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_250
.LBB120_246:                            # %cond.false2599
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_249
.LBB120_248:                            # %cond.false2624
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_249:                            # %cond.end2644
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_250:                            # %cond.end2646
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_256
.LBB120_252:                            # %cond.false2677
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_255
.LBB120_254:                            # %cond.false2704
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_255:                            # %cond.end2726
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_256:                            # %cond.end2728
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_262
.LBB120_258:                            # %cond.false2761
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_261
.LBB120_260:                            # %cond.false2788
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_261:                            # %cond.end2810
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_262:                            # %cond.end2812
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_268
.LBB120_264:                            # %cond.false2845
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_267
.LBB120_266:                            # %cond.false2872
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_267:                            # %cond.end2894
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_268:                            # %cond.end2896
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_274
.LBB120_270:                            # %cond.false2937
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_273
.LBB120_272:                            # %cond.false2962
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_273:                            # %cond.end2982
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_274:                            # %cond.end2984
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_280
.LBB120_276:                            # %cond.false3015
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_279
.LBB120_278:                            # %cond.false3042
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_279:                            # %cond.end3064
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_280:                            # %cond.end3066
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_286
.LBB120_282:                            # %cond.false3099
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_285
.LBB120_284:                            # %cond.false3126
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_285:                            # %cond.end3148
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_286:                            # %cond.end3150
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_292
.LBB120_288:                            # %cond.false3183
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_291
.LBB120_290:                            # %cond.false3210
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_291:                            # %cond.end3232
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_292:                            # %cond.end3234
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_298
.LBB120_294:                            # %cond.false3275
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_297
.LBB120_296:                            # %cond.false3300
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_297:                            # %cond.end3320
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_298:                            # %cond.end3322
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_304
.LBB120_300:                            # %cond.false3353
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_303
.LBB120_302:                            # %cond.false3380
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_303:                            # %cond.end3402
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_304:                            # %cond.end3404
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_310
.LBB120_306:                            # %cond.false3437
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_309
.LBB120_308:                            # %cond.false3464
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_309:                            # %cond.end3486
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_310:                            # %cond.end3488
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_316
.LBB120_312:                            # %cond.false3521
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_315
.LBB120_314:                            # %cond.false3548
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB120_315:                            # %cond.end3570
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_316:                            # %cond.end3572
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB120_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB120_332
.LBB120_319:                            # %if.end3593
                                        #   in Loop: Header=BB120_219 Depth=3
	jmp	.LBB120_329
.LBB120_320:                            # %if.else3594
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB120_321:                            # %for.cond3595
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_323 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB120_321 Depth=4
	movl	$0, -96(%rbp)
.LBB120_323:                            # %for.cond3599
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_219 Depth=3
                                        #         Parent Loop BB120_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB120_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB120_323 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_323
.LBB120_326:                            # %for.end3616
                                        #   in Loop: Header=BB120_321 Depth=4
	jmp	.LBB120_327
.LBB120_327:                            # %for.inc3617
                                        #   in Loop: Header=BB120_321 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB120_321
.LBB120_328:                            # %for.end3619
                                        #   in Loop: Header=BB120_219 Depth=3
	jmp	.LBB120_329
.LBB120_329:                            # %if.end3620
                                        #   in Loop: Header=BB120_219 Depth=3
	jmp	.LBB120_330
.LBB120_330:                            # %for.inc3621
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_219
.LBB120_331:                            # %for.end3625.loopexit
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_332
.LBB120_332:                            # %for.end3625
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_352
.LBB120_333:                            # %if.else3626
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$0, -40(%rbp)
.LBB120_334:                            # %for.cond3627
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_340 Depth 4
                                        #           Child Loop BB120_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB120_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB120_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB120_351
.LBB120_338:                            # %if.end3978
                                        #   in Loop: Header=BB120_334 Depth=3
	jmp	.LBB120_348
.LBB120_339:                            # %if.else3979
                                        #   in Loop: Header=BB120_334 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB120_340:                            # %for.cond3980
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_342 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB120_340 Depth=4
	movl	$0, -96(%rbp)
.LBB120_342:                            # %for.cond3984
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_334 Depth=3
                                        #         Parent Loop BB120_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB120_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB120_342 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_342
.LBB120_345:                            # %for.end4001
                                        #   in Loop: Header=BB120_340 Depth=4
	jmp	.LBB120_346
.LBB120_346:                            # %for.inc4002
                                        #   in Loop: Header=BB120_340 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB120_340
.LBB120_347:                            # %for.end4004
                                        #   in Loop: Header=BB120_334 Depth=3
	jmp	.LBB120_348
.LBB120_348:                            # %if.end4005
                                        #   in Loop: Header=BB120_334 Depth=3
	jmp	.LBB120_349
.LBB120_349:                            # %for.inc4006
                                        #   in Loop: Header=BB120_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_334
.LBB120_350:                            # %for.end4010.loopexit
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_351
.LBB120_351:                            # %for.end4010
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_352
.LBB120_352:                            # %if.end4011
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_353
.LBB120_353:                            # %for.inc4012
                                        #   in Loop: Header=BB120_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB120_214
.LBB120_354:                            # %for.end4016
                                        #   in Loop: Header=BB120_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB120_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB120_356:                            # %if.end4026
                                        #   in Loop: Header=BB120_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB120_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB120_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB120_358:                            # %if.end4032
                                        #   in Loop: Header=BB120_212 Depth=1
	jmp	.LBB120_359
.LBB120_359:                            # %for.inc4033
                                        #   in Loop: Header=BB120_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB120_212
.LBB120_360:                            # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB120_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB120_362:                            # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1320584834, -200(%rbp) # imm = 0x4EB68682
	jne	.LBB120_364
.LBB120_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_364:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_363
.Lfunc_end120:
	.size	SubPelBlockSearchBiPred.95, .Lfunc_end120-SubPelBlockSearchBiPred.95
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.96    # -- Begin function SetupLargerBlocks.96
	.p2align	4, 0x90
	.type	SetupLargerBlocks.96,@function
SetupLargerBlocks.96:                   # @SetupLargerBlocks.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$268866293, -76(%rbp)   # imm = 0x100692F5
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_1
.LBB121_4:                              # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_5:                              # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB121_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB121_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_5
.LBB121_8:                              # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_9:                              # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB121_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB121_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_9
.LBB121_12:                             # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_13:                             # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB121_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB121_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_13
.LBB121_16:                             # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_17:                             # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB121_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB121_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_17
.LBB121_20:                             # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_21:                             # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB121_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_21
.LBB121_24:                             # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_25:                             # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB121_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB121_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_25
.LBB121_28:                             # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_29:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB121_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB121_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_29
.LBB121_32:                             # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_33:                             # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB121_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB121_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_33
.LBB121_36:                             # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_37:                             # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB121_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB121_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_37
.LBB121_40:                             # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_41:                             # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB121_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB121_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_41
.LBB121_44:                             # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_45:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB121_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB121_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_45
.LBB121_48:                             # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_49:                             # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB121_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB121_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_49
.LBB121_52:                             # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_53:                             # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB121_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB121_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_53
.LBB121_56:                             # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_57:                             # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB121_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB121_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_57
.LBB121_60:                             # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_61:                             # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB121_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB121_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_61
.LBB121_64:                             # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_65:                             # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB121_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB121_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_65
.LBB121_68:                             # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_69:                             # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB121_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB121_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_69
.LBB121_72:                             # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_73:                             # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB121_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB121_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_73
.LBB121_76:                             # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_77:                             # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB121_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB121_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_77
.LBB121_80:                             # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_81:                             # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB121_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB121_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_81
.LBB121_84:                             # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_85:                             # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB121_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB121_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_85
.LBB121_88:                             # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_89:                             # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB121_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB121_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_89
.LBB121_92:                             # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_93:                             # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB121_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB121_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_93
.LBB121_96:                             # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB121_97:                             # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB121_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB121_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB121_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_97
.LBB121_100:                            # %for.end438
	cmpl	$268866293, -76(%rbp)   # imm = 0x100692F5
	jne	.LBB121_102
.LBB121_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_102:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_101
.Lfunc_end121:
	.size	SetupLargerBlocks.96, .Lfunc_end121-SetupLargerBlocks.96
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.97    # -- Begin function SetupLargerBlocks.97
	.p2align	4, 0x90
	.type	SetupLargerBlocks.97,@function
SetupLargerBlocks.97:                   # @SetupLargerBlocks.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$151996943, -76(%rbp)   # imm = 0x90F4A0F
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_1
.LBB122_4:                              # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_5:                              # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB122_5 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB122_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_5
.LBB122_8:                              # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_9:                              # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB122_9 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB122_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_9
.LBB122_12:                             # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_13:                             # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB122_13 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB122_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_13
.LBB122_16:                             # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_17:                             # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB122_17 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB122_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_17
.LBB122_20:                             # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_21:                             # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB122_21 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_21
.LBB122_24:                             # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_25:                             # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB122_25 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB122_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_25
.LBB122_28:                             # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_29:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB122_29 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB122_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_29
.LBB122_32:                             # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_33:                             # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB122_33 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB122_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_33
.LBB122_36:                             # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_37:                             # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB122_37 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB122_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_37
.LBB122_40:                             # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_41:                             # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB122_41 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB122_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_41
.LBB122_44:                             # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_45:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB122_45 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB122_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_45
.LBB122_48:                             # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_49:                             # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB122_49 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB122_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_49
.LBB122_52:                             # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_53:                             # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB122_53 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB122_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_53
.LBB122_56:                             # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_57:                             # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB122_57 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB122_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_57
.LBB122_60:                             # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_61:                             # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB122_61 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB122_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_61
.LBB122_64:                             # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_65:                             # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB122_65 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB122_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_65
.LBB122_68:                             # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_69:                             # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB122_69 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB122_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_69
.LBB122_72:                             # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_73:                             # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB122_73 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB122_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_73
.LBB122_76:                             # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_77:                             # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB122_77 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB122_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_77
.LBB122_80:                             # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_81:                             # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB122_81 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB122_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_81
.LBB122_84:                             # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_85:                             # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB122_85 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB122_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_85
.LBB122_88:                             # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_89:                             # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB122_89 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB122_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_89
.LBB122_92:                             # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_93:                             # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB122_93 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB122_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_93
.LBB122_96:                             # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB122_97:                             # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB122_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB122_97 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB122_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_97
.LBB122_100:                            # %for.end438
	cmpl	$151996943, -76(%rbp)   # imm = 0x90F4A0F
	jne	.LBB122_102
.LBB122_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_102:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_101
.Lfunc_end122:
	.size	SetupLargerBlocks.97, .Lfunc_end122-SetupLargerBlocks.97
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.98    # -- Begin function SetupLargerBlocks.98
	.p2align	4, 0x90
	.type	SetupLargerBlocks.98,@function
SetupLargerBlocks.98:                   # @SetupLargerBlocks.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1315124448, -76(%rbp)  # imm = 0x4E6334E0
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_1
.LBB123_4:                              # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_5:                              # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_5
.LBB123_8:                              # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_9:                              # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB123_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB123_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_9
.LBB123_12:                             # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_13:                             # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB123_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB123_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_13
.LBB123_16:                             # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_17:                             # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB123_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB123_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_17
.LBB123_20:                             # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_21:                             # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB123_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB123_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_21
.LBB123_24:                             # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_25:                             # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB123_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB123_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_25
.LBB123_28:                             # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_29:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB123_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB123_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_29
.LBB123_32:                             # %for.end126
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_33:                             # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB123_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB123_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_33
.LBB123_36:                             # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_37:                             # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB123_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB123_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_37
.LBB123_40:                             # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_41:                             # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB123_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB123_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_41
.LBB123_44:                             # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_45:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB123_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB123_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_45
.LBB123_48:                             # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_49:                             # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB123_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB123_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_49
.LBB123_52:                             # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_53:                             # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB123_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB123_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_53
.LBB123_56:                             # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_57:                             # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB123_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB123_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_57
.LBB123_60:                             # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_61:                             # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB123_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB123_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_61
.LBB123_64:                             # %for.end262
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_65:                             # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB123_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB123_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_65
.LBB123_68:                             # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_69:                             # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB123_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB123_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_69
.LBB123_72:                             # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_73:                             # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB123_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB123_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_73
.LBB123_76:                             # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_77:                             # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB123_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB123_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_77
.LBB123_80:                             # %for.end334
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_81:                             # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB123_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB123_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_81
.LBB123_84:                             # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_85:                             # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB123_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB123_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_85
.LBB123_88:                             # %for.end374
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_89:                             # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB123_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB123_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_89
.LBB123_92:                             # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_93:                             # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB123_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB123_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_93
.LBB123_96:                             # %for.end414
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB123_97:                             # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB123_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB123_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_97
.LBB123_100:                            # %for.end438
	cmpl	$1315124448, -76(%rbp)  # imm = 0x4E6334E0
	jne	.LBB123_102
.LBB123_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_102:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_101
.Lfunc_end123:
	.size	SetupLargerBlocks.98, .Lfunc_end123-SetupLargerBlocks.98
	.cfi_endproc
                                        # -- End function
	.type	QP2QUANT,@object        # @QP2QUANT
	.section	.rodata,"a",@progbits
	.globl	QP2QUANT
	.p2align	4
QP2QUANT:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	16                      # 0x10
	.long	18                      # 0x12
	.long	20                      # 0x14
	.long	23                      # 0x17
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	32                      # 0x20
	.long	36                      # 0x24
	.long	40                      # 0x28
	.long	45                      # 0x2d
	.long	51                      # 0x33
	.long	57                      # 0x39
	.long	64                      # 0x40
	.long	72                      # 0x48
	.long	81                      # 0x51
	.long	91                      # 0x5b
	.size	QP2QUANT, 160

	.type	BlockSAD,@object        # @BlockSAD
	.local	BlockSAD
	.comm	BlockSAD,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"InitializeFastFullIntegerSearch: BlockSAD"
	.size	.L.str, 42

	.type	search_setup_done,@object # @search_setup_done
	.local	search_setup_done
	.comm	search_setup_done,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"InitializeFastFullIntegerSearch: search_setup_done"
	.size	.L.str.1, 51

	.type	search_center_x,@object # @search_center_x
	.local	search_center_x
	.comm	search_center_x,8,8
	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"InitializeFastFullIntegerSearch: search_center_x"
	.size	.L.str.2, 49

	.type	search_center_y,@object # @search_center_y
	.local	search_center_y
	.comm	search_center_y,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"InitializeFastFullIntegerSearch: search_center_y"
	.size	.L.str.3, 49

	.type	pos_00,@object          # @pos_00
	.local	pos_00
	.comm	pos_00,8,8
	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"InitializeFastFullIntegerSearch: pos_00"
	.size	.L.str.4, 40

	.type	max_search_range,@object # @max_search_range
	.local	max_search_range
	.comm	max_search_range,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"InitializeFastFullIntegerSearch: max_search_range"
	.size	.L.str.5, 50

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	PelYline_11,@object     # @PelYline_11
	.local	PelYline_11
	.comm	PelYline_11,8,8
	.type	spiral_search_x,@object # @spiral_search_x
	.comm	spiral_search_x,8,8
	.type	spiral_search_y,@object # @spiral_search_y
	.comm	spiral_search_y,8,8
	.type	byte_abs,@object        # @byte_abs
	.comm	byte_abs,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	max_mvd,@object         # @max_mvd
	.comm	max_mvd,4,4
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"Init_Motion_Search_Module: spiral_search_x"
	.size	.L.str.6, 43

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Init_Motion_Search_Module: spiral_search_y"
	.size	.L.str.7, 43

	.type	mvbits,@object          # @mvbits
	.comm	mvbits,8,8
	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"Init_Motion_Search_Module: mvbits"
	.size	.L.str.8, 34

	.type	refbits,@object         # @refbits
	.comm	refbits,8,8
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"Init_Motion_Search_Module: refbits"
	.size	.L.str.9, 35

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"Init_Motion_Search_Module: byte_abs"
	.size	.L.str.10, 36

	.type	motion_cost,@object     # @motion_cost
	.comm	motion_cost,8,8
	.type	PelY_14,@object         # @PelY_14
	.local	PelY_14
	.comm	PelY_14,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	PelY_14b,@object        # @PelY_14b
	.local	PelY_14b
	.comm	PelY_14b,8,8
	.type	BPredPartitionCost.bx0,@object # @BPredPartitionCost.bx0
	.data
	.p2align	4
BPredPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BPredPartitionCost.bx0, 80

	.type	BPredPartitionCost.by0,@object # @BPredPartitionCost.by0
	.p2align	4
BPredPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BPredPartitionCost.by0, 80

	.type	BlockMotionSearch.orig_val,@object # @BlockMotionSearch.orig_val
	.local	BlockMotionSearch.orig_val
	.comm	BlockMotionSearch.orig_val,512,16
	.type	BlockMotionSearch.orig_pic,@object # @BlockMotionSearch.orig_pic
	.p2align	4
BlockMotionSearch.orig_pic:
	.quad	BlockMotionSearch.orig_val
	.quad	BlockMotionSearch.orig_val+32
	.quad	BlockMotionSearch.orig_val+64
	.quad	BlockMotionSearch.orig_val+96
	.quad	BlockMotionSearch.orig_val+128
	.quad	BlockMotionSearch.orig_val+160
	.quad	BlockMotionSearch.orig_val+192
	.quad	BlockMotionSearch.orig_val+224
	.quad	BlockMotionSearch.orig_val+256
	.quad	BlockMotionSearch.orig_val+288
	.quad	BlockMotionSearch.orig_val+320
	.quad	BlockMotionSearch.orig_val+352
	.quad	BlockMotionSearch.orig_val+384
	.quad	BlockMotionSearch.orig_val+416
	.quad	BlockMotionSearch.orig_val+448
	.quad	BlockMotionSearch.orig_val+480
	.size	BlockMotionSearch.orig_pic, 128

	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	BIDPartitionCost.bx0,@object # @BIDPartitionCost.bx0
	.p2align	4
BIDPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BIDPartitionCost.bx0, 80

	.type	BIDPartitionCost.by0,@object # @BIDPartitionCost.by0
	.p2align	4
BIDPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BIDPartitionCost.by0, 80

	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	PartitionMotionSearch.bx0,@object # @PartitionMotionSearch.bx0
	.p2align	4
PartitionMotionSearch.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	PartitionMotionSearch.bx0, 80

	.type	PartitionMotionSearch.by0,@object # @PartitionMotionSearch.by0
	.p2align	4
PartitionMotionSearch.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	PartitionMotionSearch.by0, 80

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
