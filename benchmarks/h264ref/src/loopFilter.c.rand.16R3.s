	.text
	.file	"loopFilter.c"
	.globl	DeblockFrame            # -- Begin function DeblockFrame
	.p2align	4, 0x90
	.type	DeblockFrame,@function
DeblockFrame:                           # @DeblockFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_DeblockFrame.1
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_DeblockFrame.3
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_DeblockFrame.7
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_DeblockFrame.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_DeblockFrame.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_DeblockFrame.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_DeblockFrame.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_DeblockFrame.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_DeblockFrame.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_DeblockFrame.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_DeblockFrame.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_DeblockFrame.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_DeblockFrame.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_DeblockFrame.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_DeblockFrame.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_DeblockFrame.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	DeblockFrame, .Lfunc_end0-DeblockFrame
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb               # -- Begin function DeblockMb
	.p2align	4, 0x90
	.type	DeblockMb,@function
DeblockMb:                              # @DeblockMb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_DeblockMb.4
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.4
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_DeblockMb.6
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.6
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_DeblockMb.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.10
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_DeblockMb.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.17
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_DeblockMb.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.21
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_DeblockMb.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.22
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_DeblockMb.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.26
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_DeblockMb.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.27
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_DeblockMb.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.36
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_DeblockMb.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.45
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_DeblockMb.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.47
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_DeblockMb.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.49
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_DeblockMb.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.53
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_DeblockMb.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.54
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_DeblockMb.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.60
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_DeblockMb.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.64
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	DeblockMb, .Lfunc_end1-DeblockMb
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength             # -- Begin function GetStrength
	.p2align	4, 0x90
	.type	GetStrength,@function
GetStrength:                            # @GetStrength
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_17
# %bb.1:                                # %func_GetStrength.5
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	GetStrength.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_GetStrength.8
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_GetStrength.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_GetStrength.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_GetStrength.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_GetStrength.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_GetStrength.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_GetStrength.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %func_GetStrength.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_10:                               # %func_GetStrength.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_11:                               # %func_GetStrength.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_12:                               # %func_GetStrength.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_13:                               # %func_GetStrength.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_14:                               # %func_GetStrength.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_15:                               # %func_GetStrength.51
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_16:                               # %func_GetStrength.52
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movl	-44(%rbp), %r10d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %r9d
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r14
	movq	%rdi, %rbx
	je	.LBB2_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB2_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB2_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB2_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB2_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB2_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB2_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB2_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB2_15
	jmp	.LBB2_16
.Lfunc_end2:
	.size	GetStrength, .Lfunc_end2-GetStrength
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop                # -- Begin function EdgeLoop
	.p2align	4, 0x90
	.type	EdgeLoop,@function
EdgeLoop:                               # @EdgeLoop
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movq	%rdx, %r13
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_EdgeLoop.2
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.2
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_EdgeLoop.11
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.11
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_EdgeLoop.13
	.cfi_def_cfa %rbp, 16
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	%r14d, 32(%rsp)
	callq	EdgeLoop.13
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_EdgeLoop.14
	.cfi_def_cfa %rbp, 16
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.14
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_EdgeLoop.16
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.16
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_EdgeLoop.20
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.20
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_EdgeLoop.23
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.23
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_EdgeLoop.33
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.33
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_EdgeLoop.37
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.37
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_EdgeLoop.39
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.39
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_EdgeLoop.41
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.41
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_EdgeLoop.48
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.48
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_EdgeLoop.55
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.55
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_EdgeLoop.57
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.57
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_EdgeLoop.58
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.58
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_EdgeLoop.62
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.62
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movl	-44(%rbp), %ebx         # 4-byte Reload
	movl	16(%rbp), %r13d
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	48(%rbp), %r14d
	movl	40(%rbp), %r12d
	movl	24(%rbp), %r10d
	movl	%r13d, %r11d
	movl	%ebx, %r9d
	movl	%r15d, %r8d
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	movl	%r8d, -48(%rbp)         # 4-byte Spill
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	movq	%rsi, %r9
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	EdgeLoop, .Lfunc_end3-EdgeLoop
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.1          # -- Begin function DeblockFrame.1
	.p2align	4, 0x90
	.type	DeblockFrame.1,@function
DeblockFrame.1:                         # @DeblockFrame.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$705008419, -8(%rbp)    # imm = 0x2A059323
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	cmpl	$705008419, -8(%rbp)    # imm = 0x2A059323
	jne	.LBB4_6
.LBB4_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB4_5
.Lfunc_end4:
	.size	DeblockFrame.1, .Lfunc_end4-DeblockFrame.1
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.2              # -- Begin function EdgeLoop.2
	.p2align	4, 0x90
	.type	EdgeLoop.2,@function
EdgeLoop.2:                             # @EdgeLoop.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1327397487, -192(%rbp) # imm = 0x4F1E7A6F
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB5_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB5_3
.LBB5_2:                                # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB5_3:                                # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB5_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB5_6
.LBB5_5:                                # %cond.false
	movl	$16, %eax
	jmp	.LBB5_6
.LBB5_6:                                # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB5_7:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB5_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB5_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB5_11
.LBB5_10:                               # %cond.false8
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB5_11:                               # %cond.end10
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB5_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB5_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB5_15
.LBB5_14:                               # %cond.false17
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	$1, %eax
	jmp	.LBB5_15
.LBB5_15:                               # %cond.end18
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_17
.LBB5_16:                               # %cond.false20
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-60(%rbp), %eax
.LBB5_17:                               # %cond.end21
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-144(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB5_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB5_19:                               # %lor.end
                                        #   in Loop: Header=BB5_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB5_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB5_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB5_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB5_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB5_25
.LBB5_24:                               # %cond.false47
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB5_25:                               # %cond.end49
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_27
.LBB5_26:                               # %cond.false51
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB5_27:                               # %cond.end52
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB5_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB5_157
.LBB5_29:                               # %if.then57
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB5_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB5_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB5_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB5_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB5_34
.LBB5_33:                               # %cond.false66
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	32(%rbp), %eax
.LBB5_34:                               # %cond.end67
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_36
.LBB5_35:                               # %cond.false69
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	$1, %eax
	jmp	.LBB5_36
.LBB5_36:                               # %cond.end70
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB5_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB5_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB5_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB5_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB5_41
.LBB5_40:                               # %cond.false81
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	32(%rbp), %eax
.LBB5_41:                               # %cond.end82
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_43
.LBB5_42:                               # %cond.false84
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	$1, %eax
	jmp	.LBB5_43
.LBB5_43:                               # %cond.end85
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB5_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB5_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB5_50
.LBB5_46:                               # %cond.false105
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB5_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	$51, %eax
	jmp	.LBB5_49
.LBB5_48:                               # %cond.false114
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB5_49:                               # %cond.end120
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_50:                               # %cond.end122
                                        #   in Loop: Header=BB5_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB5_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB5_56
.LBB5_52:                               # %cond.false135
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB5_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB5_55
.LBB5_54:                               # %cond.false144
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB5_55:                               # %cond.end150
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_56:                               # %cond.end152
                                        #   in Loop: Header=BB5_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB5_58
.LBB5_57:                               # %cond.false160
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB5_58:                               # %cond.end166
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB5_64
.LBB5_60:                               # %cond.false172
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB5_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	$51, %eax
	jmp	.LBB5_63
.LBB5_62:                               # %cond.false177
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB5_63:                               # %cond.end179
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_64:                               # %cond.end181
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB5_70
.LBB5_66:                               # %cond.false187
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB5_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB5_69
.LBB5_68:                               # %cond.false192
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB5_69:                               # %cond.end194
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_70:                               # %cond.end196
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -136(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB5_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB5_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB5_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB5_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB5_75:                               # %if.end271
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB5_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB5_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB5_97
.LBB5_78:                               # %if.else292
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-152(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB5_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB5_81
.LBB5_80:                               # %cond.false307
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB5_81:                               # %cond.end313
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB5_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB5_84
.LBB5_83:                               # %cond.false325
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB5_84:                               # %cond.end331
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB5_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB5_87
.LBB5_86:                               # %cond.false342
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-16(%rbp), %eax
.LBB5_87:                               # %cond.end343
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB5_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB5_90
.LBB5_89:                               # %cond.false355
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-12(%rbp), %eax
.LBB5_90:                               # %cond.end356
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB5_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB5_93
.LBB5_92:                               # %cond.false371
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-40(%rbp), %eax
.LBB5_93:                               # %cond.end372
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB5_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB5_96
.LBB5_95:                               # %cond.false387
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-44(%rbp), %eax
.LBB5_96:                               # %cond.end388
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB5_97:                               # %if.end395
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_153
.LBB5_98:                               # %if.else396
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB5_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB5_101
.LBB5_100:                              # %cond.false400
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB5_101:                              # %cond.end403
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB5_107
.LBB5_103:                              # %cond.false415
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB5_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB5_106
.LBB5_105:                              # %cond.false424
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB5_106:                              # %cond.end430
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_107:                              # %cond.end432
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB5_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB5_114
.LBB5_110:                              # %cond.false440
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB5_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB5_113
.LBB5_112:                              # %cond.false446
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB5_113:                              # %cond.end448
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_114:                              # %cond.end450
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB5_120
.LBB5_116:                              # %cond.false458
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB5_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB5_119
.LBB5_118:                              # %cond.false465
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB5_119:                              # %cond.end467
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_120:                              # %cond.end469
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB5_134
.LBB5_121:                              # %if.else473
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB5_127
.LBB5_123:                              # %cond.false478
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB5_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB5_126
.LBB5_125:                              # %cond.false484
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB5_126:                              # %cond.end486
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_127:                              # %cond.end488
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB5_133
.LBB5_129:                              # %cond.false496
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB5_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB5_132
.LBB5_131:                              # %cond.false503
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB5_132:                              # %cond.end505
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_133:                              # %cond.end507
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB5_134:                              # %if.end511
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB5_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB5_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB5_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB5_142
.LBB5_138:                              # %cond.false527
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB5_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB5_141
.LBB5_140:                              # %cond.false537
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB5_141:                              # %cond.end544
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_142:                              # %cond.end546
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB5_143:                              # %if.end554
                                        #   in Loop: Header=BB5_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB5_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB5_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB5_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB5_150
.LBB5_146:                              # %cond.false568
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB5_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB5_149
.LBB5_148:                              # %cond.false578
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB5_149:                              # %cond.end585
                                        #   in Loop: Header=BB5_7 Depth=1
.LBB5_150:                              # %cond.end587
                                        #   in Loop: Header=BB5_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB5_151:                              # %if.end594
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_152
.LBB5_152:                              # %if.end595
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_153
.LBB5_153:                              # %if.end596
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_154
.LBB5_154:                              # %if.end597
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_155
.LBB5_155:                              # %if.end598
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_156
.LBB5_156:                              # %if.end599
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_157
.LBB5_157:                              # %if.end600
                                        #   in Loop: Header=BB5_7 Depth=1
	jmp	.LBB5_158
.LBB5_158:                              # %for.inc
                                        #   in Loop: Header=BB5_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_7
.LBB5_159:                              # %for.end
	cmpl	$1327397487, -192(%rbp) # imm = 0x4F1E7A6F
	jne	.LBB5_161
.LBB5_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_161:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB5_160
.Lfunc_end5:
	.size	EdgeLoop.2, .Lfunc_end5-EdgeLoop.2
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.3          # -- Begin function DeblockFrame.3
	.p2align	4, 0x90
	.type	DeblockFrame.3,@function
DeblockFrame.3:                         # @DeblockFrame.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$167630327, -8(%rbp)    # imm = 0x9FDD5F7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB6_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB6_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB6_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB6_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_1
.LBB6_4:                                # %for.end
	cmpl	$167630327, -8(%rbp)    # imm = 0x9FDD5F7
	jne	.LBB6_6
.LBB6_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB6_5
.Lfunc_end6:
	.size	DeblockFrame.3, .Lfunc_end6-DeblockFrame.3
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.4             # -- Begin function DeblockMb.4
	.p2align	4, 0x90
	.type	DeblockMb.4,@function
DeblockMb.4:                            # @DeblockMb.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$319520331, -100(%rbp)  # imm = 0x130B7E4B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB7_2
# %bb.1:                                # %if.then
	jmp	.LBB7_2
.LBB7_2:                                # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB7_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB7_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB7_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB7_6:                                # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB7_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB7_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB7_9:                                # %land.end
.LBB7_10:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB7_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB7_12:                               # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB7_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB7_61
.LBB7_14:                               # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB7_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB7_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB7_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB7_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB7_20
.LBB7_19:                               # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB7_20:                               # %if.end40
	jmp	.LBB7_21
.LBB7_21:                               # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB7_22:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_29 Depth 2
                                        #       Child Loop BB7_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB7_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB7_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB7_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB7_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB7_28
.LBB7_25:                               # %lor.rhs47
                                        #   in Loop: Header=BB7_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB7_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB7_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB7_27:                               # %land.end51
                                        #   in Loop: Header=BB7_22 Depth=1
.LBB7_28:                               # %lor.end52
                                        #   in Loop: Header=BB7_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB7_29:                               # %for.cond54
                                        #   Parent Loop BB7_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB7_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB7_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB7_56
.LBB7_32:                               # %if.then60
                                        #   in Loop: Header=BB7_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB7_33:                               # %for.cond70
                                        #   Parent Loop BB7_22 Depth=1
                                        #     Parent Loop BB7_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB7_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB7_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB7_33
.LBB7_36:                               # %for.end
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB7_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB7_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB7_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB7_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB7_39:                               # %if.end84
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB7_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB7_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB7_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB7_42:                               # %if.end100
                                        #   in Loop: Header=BB7_29 Depth=2
	jmp	.LBB7_43
.LBB7_43:                               # %if.end101
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB7_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB7_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB7_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB7_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB7_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB7_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB7_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB7_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB7_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB7_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB7_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB7_50:                               # %if.end125
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB7_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB7_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB7_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB7_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB7_53:                               # %if.end142
                                        #   in Loop: Header=BB7_29 Depth=2
	jmp	.LBB7_54
.LBB7_54:                               # %if.end143
                                        #   in Loop: Header=BB7_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB7_55:                               # %if.end145
                                        #   in Loop: Header=BB7_29 Depth=2
	jmp	.LBB7_56
.LBB7_56:                               # %if.end146
                                        #   in Loop: Header=BB7_29 Depth=2
	jmp	.LBB7_57
.LBB7_57:                               # %for.inc147
                                        #   in Loop: Header=BB7_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB7_29
.LBB7_58:                               # %for.end149
                                        #   in Loop: Header=BB7_22 Depth=1
	jmp	.LBB7_59
.LBB7_59:                               # %for.inc150
                                        #   in Loop: Header=BB7_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB7_22
.LBB7_60:                               # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB7_61:                               # %return
	cmpl	$319520331, -100(%rbp)  # imm = 0x130B7E4B
	jne	.LBB7_63
.LBB7_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_63:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB7_62
.Lfunc_end7:
	.size	DeblockMb.4, .Lfunc_end7-DeblockMb.4
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.5           # -- Begin function GetStrength.5
	.p2align	4, 0x90
	.type	GetStrength.5,@function
GetStrength.5:                          # @GetStrength.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1109485251, -144(%rbp) # imm = 0x422166C3
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB8_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB8_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB8_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB8_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB8_5
.LBB8_4:                                # %cond.false
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB8_5:                                # %cond.end
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB8_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB8_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB8_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB8_9
.LBB8_8:                                # %cond.false15
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	$1, %eax
	jmp	.LBB8_9
.LBB8_9:                                # %cond.end16
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_11
.LBB8_10:                               # %cond.false18
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-28(%rbp), %eax
.LBB8_11:                               # %cond.end19
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB8_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB8_25
.LBB8_13:                               # %if.then
                                        #   in Loop: Header=BB8_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB8_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB8_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB8_23
.LBB8_16:                               # %lor.lhs.false45
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB8_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB8_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB8_23
.LBB8_19:                               # %lor.rhs
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB8_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB8_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB8_22
.LBB8_21:                               # %land.rhs60
                                        #   in Loop: Header=BB8_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB8_22:                               # %land.end
                                        #   in Loop: Header=BB8_1 Depth=1
.LBB8_23:                               # %lor.end
                                        #   in Loop: Header=BB8_1 Depth=1
.LBB8_24:                               # %land.end62
                                        #   in Loop: Header=BB8_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB8_79
.LBB8_25:                               # %if.else
                                        #   in Loop: Header=BB8_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB8_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB8_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB8_35
.LBB8_28:                               # %lor.lhs.false76
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB8_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB8_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB8_35
.LBB8_31:                               # %lor.rhs85
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB8_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB8_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB8_34
.LBB8_33:                               # %land.rhs92
                                        #   in Loop: Header=BB8_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB8_34:                               # %land.end95
                                        #   in Loop: Header=BB8_1 Depth=1
.LBB8_35:                               # %lor.end96
                                        #   in Loop: Header=BB8_1 Depth=1
.LBB8_36:                               # %land.end97
                                        #   in Loop: Header=BB8_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB8_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB8_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB8_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB8_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB8_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB8_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB8_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB8_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB8_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB8_47
.LBB8_46:                               # %if.then144
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB8_77
.LBB8_47:                               # %if.else147
                                        #   in Loop: Header=BB8_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB8_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB8_76
.LBB8_49:                               # %if.else152
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB8_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB8_52
.LBB8_51:                               # %cond.false169
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB8_52:                               # %cond.end174
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB8_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB8_55
.LBB8_54:                               # %cond.false184
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB8_55:                               # %cond.end189
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB8_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB8_58
.LBB8_57:                               # %cond.false199
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB8_58:                               # %cond.end204
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB8_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB8_61
.LBB8_60:                               # %cond.false214
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB8_61:                               # %cond.end219
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB8_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB8_65
.LBB8_63:                               # %lor.lhs.false226
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB8_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB8_74
.LBB8_65:                               # %if.then232
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB8_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB8_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB8_69
.LBB8_68:                               # %if.else309
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB8_69:                               # %if.end
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_73
.LBB8_70:                               # %if.else380
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB8_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB8_72:                               # %land.end518
                                        #   in Loop: Header=BB8_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB8_73:                               # %if.end522
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_75
.LBB8_74:                               # %if.else523
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB8_75:                               # %if.end526
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_76
.LBB8_76:                               # %if.end527
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_77
.LBB8_77:                               # %if.end528
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_78
.LBB8_78:                               # %if.end529
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_79
.LBB8_79:                               # %if.end530
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_80
.LBB8_80:                               # %for.inc
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB8_1
.LBB8_81:                               # %for.end
	cmpl	$1109485251, -144(%rbp) # imm = 0x422166C3
	jne	.LBB8_83
.LBB8_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_83:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_82
.Lfunc_end8:
	.size	GetStrength.5, .Lfunc_end8-GetStrength.5
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.6             # -- Begin function DeblockMb.6
	.p2align	4, 0x90
	.type	DeblockMb.6,@function
DeblockMb.6:                            # @DeblockMb.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1701216332, -112(%rbp) # imm = 0x6566804C
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB9_2
# %bb.1:                                # %if.then
	jmp	.LBB9_2
.LBB9_2:                                # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB9_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB9_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB9_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB9_6:                                # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB9_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB9_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB9_9:                                # %land.end
.LBB9_10:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB9_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB9_12:                               # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB9_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB9_61
.LBB9_14:                               # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB9_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB9_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB9_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB9_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB9_20
.LBB9_19:                               # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB9_20:                               # %if.end40
	jmp	.LBB9_21
.LBB9_21:                               # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB9_22:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_29 Depth 2
                                        #       Child Loop BB9_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB9_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB9_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB9_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB9_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB9_28
.LBB9_25:                               # %lor.rhs47
                                        #   in Loop: Header=BB9_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB9_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB9_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB9_27:                               # %land.end51
                                        #   in Loop: Header=BB9_22 Depth=1
.LBB9_28:                               # %lor.end52
                                        #   in Loop: Header=BB9_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB9_29:                               # %for.cond54
                                        #   Parent Loop BB9_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB9_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB9_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB9_56
.LBB9_32:                               # %if.then60
                                        #   in Loop: Header=BB9_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB9_33:                               # %for.cond70
                                        #   Parent Loop BB9_22 Depth=1
                                        #     Parent Loop BB9_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB9_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB9_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB9_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB9_33
.LBB9_36:                               # %for.end
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB9_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB9_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB9_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB9_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB9_39:                               # %if.end84
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB9_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB9_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB9_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB9_42:                               # %if.end100
                                        #   in Loop: Header=BB9_29 Depth=2
	jmp	.LBB9_43
.LBB9_43:                               # %if.end101
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB9_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB9_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB9_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB9_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB9_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB9_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB9_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB9_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB9_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB9_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB9_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB9_50:                               # %if.end125
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB9_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB9_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB9_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB9_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB9_53:                               # %if.end142
                                        #   in Loop: Header=BB9_29 Depth=2
	jmp	.LBB9_54
.LBB9_54:                               # %if.end143
                                        #   in Loop: Header=BB9_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB9_55:                               # %if.end145
                                        #   in Loop: Header=BB9_29 Depth=2
	jmp	.LBB9_56
.LBB9_56:                               # %if.end146
                                        #   in Loop: Header=BB9_29 Depth=2
	jmp	.LBB9_57
.LBB9_57:                               # %for.inc147
                                        #   in Loop: Header=BB9_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB9_29
.LBB9_58:                               # %for.end149
                                        #   in Loop: Header=BB9_22 Depth=1
	jmp	.LBB9_59
.LBB9_59:                               # %for.inc150
                                        #   in Loop: Header=BB9_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_22
.LBB9_60:                               # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB9_61:                               # %return
	cmpl	$1701216332, -112(%rbp) # imm = 0x6566804C
	jne	.LBB9_63
.LBB9_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_63:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_62
.Lfunc_end9:
	.size	DeblockMb.6, .Lfunc_end9-DeblockMb.6
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.7          # -- Begin function DeblockFrame.7
	.p2align	4, 0x90
	.type	DeblockFrame.7,@function
DeblockFrame.7:                         # @DeblockFrame.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1475820945, -8(%rbp)   # imm = 0x57F73D91
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB10_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_1
.LBB10_4:                               # %for.end
	cmpl	$1475820945, -8(%rbp)   # imm = 0x57F73D91
	jne	.LBB10_6
.LBB10_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_5
.Lfunc_end10:
	.size	DeblockFrame.7, .Lfunc_end10-DeblockFrame.7
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.8           # -- Begin function GetStrength.8
	.p2align	4, 0x90
	.type	GetStrength.8,@function
GetStrength.8:                          # @GetStrength.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1965410489, -140(%rbp) # imm = 0x7525C8B9
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB11_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB11_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB11_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB11_5
.LBB11_4:                               # %cond.false
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB11_5:                               # %cond.end
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB11_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB11_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB11_9
.LBB11_8:                               # %cond.false15
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	$1, %eax
	jmp	.LBB11_9
.LBB11_9:                               # %cond.end16
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_11
.LBB11_10:                              # %cond.false18
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-28(%rbp), %eax
.LBB11_11:                              # %cond.end19
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB11_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB11_25
.LBB11_13:                              # %if.then
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB11_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB11_23
.LBB11_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB11_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB11_23
.LBB11_19:                              # %lor.rhs
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB11_22
.LBB11_21:                              # %land.rhs60
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_22:                              # %land.end
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_23:                              # %lor.end
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_24:                              # %land.end62
                                        #   in Loop: Header=BB11_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB11_79
.LBB11_25:                              # %if.else
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB11_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB11_35
.LBB11_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB11_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB11_35
.LBB11_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB11_34
.LBB11_33:                              # %land.rhs92
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_34:                              # %land.end95
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_35:                              # %lor.end96
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_36:                              # %land.end97
                                        #   in Loop: Header=BB11_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB11_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB11_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB11_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB11_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB11_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB11_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB11_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB11_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB11_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB11_47
.LBB11_46:                              # %if.then144
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB11_77
.LBB11_47:                              # %if.else147
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB11_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB11_76
.LBB11_49:                              # %if.else152
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-136(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_52
.LBB11_51:                              # %cond.false169
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_52:                              # %cond.end174
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_55
.LBB11_54:                              # %cond.false184
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_55:                              # %cond.end189
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_58
.LBB11_57:                              # %cond.false199
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_58:                              # %cond.end204
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_61
.LBB11_60:                              # %cond.false214
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_61:                              # %cond.end219
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB11_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB11_65
.LBB11_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB11_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB11_74
.LBB11_65:                              # %if.then232
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB11_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB11_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB11_69
.LBB11_68:                              # %if.else309
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB11_69:                              # %if.end
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_73
.LBB11_70:                              # %if.else380
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB11_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB11_72:                              # %land.end518
                                        #   in Loop: Header=BB11_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB11_73:                              # %if.end522
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_75
.LBB11_74:                              # %if.else523
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB11_75:                              # %if.end526
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_76
.LBB11_76:                              # %if.end527
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_77
.LBB11_77:                              # %if.end528
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_78
.LBB11_78:                              # %if.end529
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_79
.LBB11_79:                              # %if.end530
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_80
.LBB11_80:                              # %for.inc
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB11_1
.LBB11_81:                              # %for.end
	cmpl	$1965410489, -140(%rbp) # imm = 0x7525C8B9
	jne	.LBB11_83
.LBB11_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_82
.Lfunc_end11:
	.size	GetStrength.8, .Lfunc_end11-GetStrength.8
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.9          # -- Begin function DeblockFrame.9
	.p2align	4, 0x90
	.type	DeblockFrame.9,@function
DeblockFrame.9:                         # @DeblockFrame.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1065212396, -8(%rbp)   # imm = 0x3F7DD9EC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB12_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_1
.LBB12_4:                               # %for.end
	cmpl	$1065212396, -8(%rbp)   # imm = 0x3F7DD9EC
	jne	.LBB12_6
.LBB12_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_5
.Lfunc_end12:
	.size	DeblockFrame.9, .Lfunc_end12-DeblockFrame.9
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.10            # -- Begin function DeblockMb.10
	.p2align	4, 0x90
	.type	DeblockMb.10,@function
DeblockMb.10:                           # @DeblockMb.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$884402151, -112(%rbp)  # imm = 0x34B6E7E7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB13_2
# %bb.1:                                # %if.then
	jmp	.LBB13_2
.LBB13_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB13_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB13_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB13_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB13_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB13_9:                               # %land.end
.LBB13_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB13_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB13_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB13_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB13_61
.LBB13_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB13_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB13_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB13_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB13_20
.LBB13_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB13_20:                              # %if.end40
	jmp	.LBB13_21
.LBB13_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB13_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_29 Depth 2
                                        #       Child Loop BB13_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB13_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB13_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB13_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB13_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB13_28
.LBB13_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB13_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB13_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB13_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB13_27:                              # %land.end51
                                        #   in Loop: Header=BB13_22 Depth=1
.LBB13_28:                              # %lor.end52
                                        #   in Loop: Header=BB13_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB13_29:                              # %for.cond54
                                        #   Parent Loop BB13_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB13_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB13_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB13_56
.LBB13_32:                              # %if.then60
                                        #   in Loop: Header=BB13_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB13_33:                              # %for.cond70
                                        #   Parent Loop BB13_22 Depth=1
                                        #     Parent Loop BB13_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB13_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB13_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB13_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB13_33
.LBB13_36:                              # %for.end
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB13_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB13_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB13_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB13_39:                              # %if.end84
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB13_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB13_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB13_42:                              # %if.end100
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_43
.LBB13_43:                              # %if.end101
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB13_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB13_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB13_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB13_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB13_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB13_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB13_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB13_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB13_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB13_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB13_50:                              # %if.end125
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB13_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB13_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB13_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB13_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB13_53:                              # %if.end142
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_54
.LBB13_54:                              # %if.end143
                                        #   in Loop: Header=BB13_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB13_55:                              # %if.end145
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_56
.LBB13_56:                              # %if.end146
                                        #   in Loop: Header=BB13_29 Depth=2
	jmp	.LBB13_57
.LBB13_57:                              # %for.inc147
                                        #   in Loop: Header=BB13_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_29
.LBB13_58:                              # %for.end149
                                        #   in Loop: Header=BB13_22 Depth=1
	jmp	.LBB13_59
.LBB13_59:                              # %for.inc150
                                        #   in Loop: Header=BB13_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_22
.LBB13_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB13_61:                              # %return
	cmpl	$884402151, -112(%rbp)  # imm = 0x34B6E7E7
	jne	.LBB13_63
.LBB13_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_62
.Lfunc_end13:
	.size	DeblockMb.10, .Lfunc_end13-DeblockMb.10
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.11             # -- Begin function EdgeLoop.11
	.p2align	4, 0x90
	.type	EdgeLoop.11,@function
EdgeLoop.11:                            # @EdgeLoop.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$601444492, -192(%rbp)  # imm = 0x23D9508C
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB14_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB14_3
.LBB14_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB14_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB14_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB14_6
.LBB14_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB14_6
.LBB14_6:                               # %cond.end
	movl	%eax, -152(%rbp)
	movl	$0, -60(%rbp)
.LBB14_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB14_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB14_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB14_11
.LBB14_10:                              # %cond.false8
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB14_11:                              # %cond.end10
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB14_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB14_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB14_15
.LBB14_14:                              # %cond.false17
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	$1, %eax
	jmp	.LBB14_15
.LBB14_15:                              # %cond.end18
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_17
.LBB14_16:                              # %cond.false20
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-60(%rbp), %eax
.LBB14_17:                              # %cond.end21
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-144(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB14_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB14_19:                              # %lor.end
                                        #   in Loop: Header=BB14_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB14_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$8, -152(%rbp)
	jne	.LBB14_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB14_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB14_25
.LBB14_24:                              # %cond.false47
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB14_25:                              # %cond.end49
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_27
.LBB14_26:                              # %cond.false51
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB14_27:                              # %cond.end52
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB14_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB14_157
.LBB14_29:                              # %if.then57
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB14_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB14_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB14_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB14_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB14_34
.LBB14_33:                              # %cond.false66
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	32(%rbp), %eax
.LBB14_34:                              # %cond.end67
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_36
.LBB14_35:                              # %cond.false69
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	$1, %eax
	jmp	.LBB14_36
.LBB14_36:                              # %cond.end70
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB14_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB14_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB14_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB14_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB14_41
.LBB14_40:                              # %cond.false81
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	32(%rbp), %eax
.LBB14_41:                              # %cond.end82
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_43
.LBB14_42:                              # %cond.false84
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	$1, %eax
	jmp	.LBB14_43
.LBB14_43:                              # %cond.end85
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB14_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB14_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_50
.LBB14_46:                              # %cond.false105
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB14_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	$51, %eax
	jmp	.LBB14_49
.LBB14_48:                              # %cond.false114
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB14_49:                              # %cond.end120
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_50:                              # %cond.end122
                                        #   in Loop: Header=BB14_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB14_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB14_56
.LBB14_52:                              # %cond.false135
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB14_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB14_55
.LBB14_54:                              # %cond.false144
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB14_55:                              # %cond.end150
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_56:                              # %cond.end152
                                        #   in Loop: Header=BB14_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB14_58
.LBB14_57:                              # %cond.false160
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB14_58:                              # %cond.end166
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_64
.LBB14_60:                              # %cond.false172
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB14_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	$51, %eax
	jmp	.LBB14_63
.LBB14_62:                              # %cond.false177
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB14_63:                              # %cond.end179
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_64:                              # %cond.end181
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB14_70
.LBB14_66:                              # %cond.false187
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB14_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB14_69
.LBB14_68:                              # %cond.false192
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB14_69:                              # %cond.end194
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_70:                              # %cond.end196
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -184(%rbp)
	movslq	-160(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -136(%rbp)
	movslq	-184(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-160(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB14_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB14_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB14_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB14_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB14_75:                              # %if.end271
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB14_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB14_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB14_97
.LBB14_78:                              # %if.else292
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB14_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB14_81
.LBB14_80:                              # %cond.false307
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB14_81:                              # %cond.end313
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB14_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB14_84
.LBB14_83:                              # %cond.false325
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB14_84:                              # %cond.end331
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB14_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB14_87
.LBB14_86:                              # %cond.false342
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-16(%rbp), %eax
.LBB14_87:                              # %cond.end343
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB14_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB14_90
.LBB14_89:                              # %cond.false355
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-12(%rbp), %eax
.LBB14_90:                              # %cond.end356
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB14_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB14_93
.LBB14_92:                              # %cond.false371
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-36(%rbp), %eax
.LBB14_93:                              # %cond.end372
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB14_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB14_96
.LBB14_95:                              # %cond.false387
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-40(%rbp), %eax
.LBB14_96:                              # %cond.end388
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB14_97:                              # %if.end395
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_153
.LBB14_98:                              # %if.else396
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB14_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB14_101
.LBB14_100:                             # %cond.false400
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB14_101:                             # %cond.end403
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB14_107
.LBB14_103:                             # %cond.false415
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB14_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB14_106
.LBB14_105:                             # %cond.false424
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB14_106:                             # %cond.end430
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_107:                             # %cond.end432
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB14_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_114
.LBB14_110:                             # %cond.false440
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB14_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_113
.LBB14_112:                             # %cond.false446
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB14_113:                             # %cond.end448
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_114:                             # %cond.end450
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_120
.LBB14_116:                             # %cond.false458
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB14_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_119
.LBB14_118:                             # %cond.false465
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB14_119:                             # %cond.end467
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_120:                             # %cond.end469
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB14_134
.LBB14_121:                             # %if.else473
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_127
.LBB14_123:                             # %cond.false478
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB14_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB14_126
.LBB14_125:                             # %cond.false484
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB14_126:                             # %cond.end486
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_127:                             # %cond.end488
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_133
.LBB14_129:                             # %cond.false496
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB14_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB14_132
.LBB14_131:                             # %cond.false503
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB14_132:                             # %cond.end505
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_133:                             # %cond.end507
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB14_134:                             # %if.end511
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB14_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB14_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB14_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB14_142
.LBB14_138:                             # %cond.false527
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB14_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_141
.LBB14_140:                             # %cond.false537
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB14_141:                             # %cond.end544
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_142:                             # %cond.end546
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB14_143:                             # %if.end554
                                        #   in Loop: Header=BB14_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB14_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB14_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB14_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB14_150
.LBB14_146:                             # %cond.false568
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB14_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_149
.LBB14_148:                             # %cond.false578
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB14_149:                             # %cond.end585
                                        #   in Loop: Header=BB14_7 Depth=1
.LBB14_150:                             # %cond.end587
                                        #   in Loop: Header=BB14_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB14_151:                             # %if.end594
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_152
.LBB14_152:                             # %if.end595
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_153
.LBB14_153:                             # %if.end596
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_154
.LBB14_154:                             # %if.end597
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_155
.LBB14_155:                             # %if.end598
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_156
.LBB14_156:                             # %if.end599
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_157
.LBB14_157:                             # %if.end600
                                        #   in Loop: Header=BB14_7 Depth=1
	jmp	.LBB14_158
.LBB14_158:                             # %for.inc
                                        #   in Loop: Header=BB14_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB14_7
.LBB14_159:                             # %for.end
	cmpl	$601444492, -192(%rbp)  # imm = 0x23D9508C
	jne	.LBB14_161
.LBB14_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_160
.Lfunc_end14:
	.size	EdgeLoop.11, .Lfunc_end14-EdgeLoop.11
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.12          # -- Begin function GetStrength.12
	.p2align	4, 0x90
	.type	GetStrength.12,@function
GetStrength.12:                         # @GetStrength.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1956620579, -140(%rbp) # imm = 0x749FA923
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB15_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB15_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB15_5
.LBB15_4:                               # %cond.false
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB15_5:                               # %cond.end
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB15_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB15_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB15_9
.LBB15_8:                               # %cond.false15
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$1, %eax
	jmp	.LBB15_9
.LBB15_9:                               # %cond.end16
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_11
.LBB15_10:                              # %cond.false18
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-28(%rbp), %eax
.LBB15_11:                              # %cond.end19
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB15_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB15_25
.LBB15_13:                              # %if.then
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB15_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB15_23
.LBB15_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB15_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB15_23
.LBB15_19:                              # %lor.rhs
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB15_22
.LBB15_21:                              # %land.rhs60
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_22:                              # %land.end
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_23:                              # %lor.end
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_24:                              # %land.end62
                                        #   in Loop: Header=BB15_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB15_79
.LBB15_25:                              # %if.else
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB15_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB15_35
.LBB15_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB15_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB15_35
.LBB15_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB15_34
.LBB15_33:                              # %land.rhs92
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_34:                              # %land.end95
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_35:                              # %lor.end96
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_36:                              # %land.end97
                                        #   in Loop: Header=BB15_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB15_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB15_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB15_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB15_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB15_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB15_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB15_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB15_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB15_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB15_47
.LBB15_46:                              # %if.then144
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB15_77
.LBB15_47:                              # %if.else147
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB15_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB15_76
.LBB15_49:                              # %if.else152
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_52
.LBB15_51:                              # %cond.false169
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_52:                              # %cond.end174
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_55
.LBB15_54:                              # %cond.false184
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_55:                              # %cond.end189
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_58
.LBB15_57:                              # %cond.false199
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_58:                              # %cond.end204
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_61
.LBB15_60:                              # %cond.false214
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_61:                              # %cond.end219
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB15_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB15_65
.LBB15_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB15_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB15_74
.LBB15_65:                              # %if.then232
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB15_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB15_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB15_69
.LBB15_68:                              # %if.else309
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB15_69:                              # %if.end
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_73
.LBB15_70:                              # %if.else380
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB15_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB15_72:                              # %land.end518
                                        #   in Loop: Header=BB15_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB15_73:                              # %if.end522
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_75
.LBB15_74:                              # %if.else523
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB15_75:                              # %if.end526
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_76
.LBB15_76:                              # %if.end527
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_77
.LBB15_77:                              # %if.end528
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_78
.LBB15_78:                              # %if.end529
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_79
.LBB15_79:                              # %if.end530
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_80
.LBB15_80:                              # %for.inc
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_1
.LBB15_81:                              # %for.end
	cmpl	$1956620579, -140(%rbp) # imm = 0x749FA923
	jne	.LBB15_83
.LBB15_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_82
.Lfunc_end15:
	.size	GetStrength.12, .Lfunc_end15-GetStrength.12
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.13             # -- Begin function EdgeLoop.13
	.p2align	4, 0x90
	.type	EdgeLoop.13,@function
EdgeLoop.13:                            # @EdgeLoop.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$252025727, -184(%rbp)  # imm = 0xF059B7F
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB16_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB16_3
.LBB16_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB16_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB16_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB16_6
.LBB16_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB16_6
.LBB16_6:                               # %cond.end
	movl	%eax, -176(%rbp)
	movl	$0, -60(%rbp)
.LBB16_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB16_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB16_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB16_11
.LBB16_10:                              # %cond.false8
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB16_11:                              # %cond.end10
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB16_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB16_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB16_15
.LBB16_14:                              # %cond.false17
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$1, %eax
	jmp	.LBB16_15
.LBB16_15:                              # %cond.end18
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_17
.LBB16_16:                              # %cond.false20
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %eax
.LBB16_17:                              # %cond.end21
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-132(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	-168(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-168(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB16_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB16_19:                              # %lor.end
                                        #   in Loop: Header=BB16_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB16_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$8, -176(%rbp)
	jne	.LBB16_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB16_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB16_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB16_25
.LBB16_24:                              # %cond.false47
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB16_25:                              # %cond.end49
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_27
.LBB16_26:                              # %cond.false51
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB16_27:                              # %cond.end52
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB16_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB16_157
.LBB16_29:                              # %if.then57
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB16_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB16_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB16_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB16_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB16_34
.LBB16_33:                              # %cond.false66
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
.LBB16_34:                              # %cond.end67
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_36
.LBB16_35:                              # %cond.false69
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$1, %eax
	jmp	.LBB16_36
.LBB16_36:                              # %cond.end70
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB16_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB16_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB16_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB16_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB16_41
.LBB16_40:                              # %cond.false81
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	32(%rbp), %eax
.LBB16_41:                              # %cond.end82
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_43
.LBB16_42:                              # %cond.false84
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$1, %eax
	jmp	.LBB16_43
.LBB16_43:                              # %cond.end85
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB16_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB16_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_50
.LBB16_46:                              # %cond.false105
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB16_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %eax
	jmp	.LBB16_49
.LBB16_48:                              # %cond.false114
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB16_49:                              # %cond.end120
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_50:                              # %cond.end122
                                        #   in Loop: Header=BB16_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB16_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB16_56
.LBB16_52:                              # %cond.false135
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB16_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB16_55
.LBB16_54:                              # %cond.false144
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB16_55:                              # %cond.end150
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_56:                              # %cond.end152
                                        #   in Loop: Header=BB16_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB16_58
.LBB16_57:                              # %cond.false160
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB16_58:                              # %cond.end166
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_64
.LBB16_60:                              # %cond.false172
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB16_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %eax
	jmp	.LBB16_63
.LBB16_62:                              # %cond.false177
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB16_63:                              # %cond.end179
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_64:                              # %cond.end181
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB16_70
.LBB16_66:                              # %cond.false187
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB16_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB16_69
.LBB16_68:                              # %cond.false192
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB16_69:                              # %cond.end194
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_70:                              # %cond.end196
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, %eax
	je	.LBB16_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -136(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB16_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-160(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB16_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB16_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB16_75:                              # %if.end271
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -160(%rbp)
	jne	.LBB16_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB16_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB16_97
.LBB16_78:                              # %if.else292
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB16_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_81
.LBB16_80:                              # %cond.false307
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB16_81:                              # %cond.end313
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB16_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_84
.LBB16_83:                              # %cond.false325
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB16_84:                              # %cond.end331
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB16_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB16_87
.LBB16_86:                              # %cond.false342
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-12(%rbp), %eax
.LBB16_87:                              # %cond.end343
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB16_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB16_90
.LBB16_89:                              # %cond.false355
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-16(%rbp), %eax
.LBB16_90:                              # %cond.end356
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB16_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_93
.LBB16_92:                              # %cond.false371
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-44(%rbp), %eax
.LBB16_93:                              # %cond.end372
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB16_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB16_96
.LBB16_95:                              # %cond.false387
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
.LBB16_96:                              # %cond.end388
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB16_97:                              # %if.end395
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_153
.LBB16_98:                              # %if.else396
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB16_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB16_101
.LBB16_100:                             # %cond.false400
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB16_101:                             # %cond.end403
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB16_107
.LBB16_103:                             # %cond.false415
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB16_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB16_106
.LBB16_105:                             # %cond.false424
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB16_106:                             # %cond.end430
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_107:                             # %cond.end432
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB16_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_114
.LBB16_110:                             # %cond.false440
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB16_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_113
.LBB16_112:                             # %cond.false446
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB16_113:                             # %cond.end448
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_114:                             # %cond.end450
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_120
.LBB16_116:                             # %cond.false458
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB16_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_119
.LBB16_118:                             # %cond.false465
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB16_119:                             # %cond.end467
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_120:                             # %cond.end469
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB16_134
.LBB16_121:                             # %if.else473
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_127
.LBB16_123:                             # %cond.false478
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB16_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB16_126
.LBB16_125:                             # %cond.false484
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB16_126:                             # %cond.end486
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_127:                             # %cond.end488
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_133
.LBB16_129:                             # %cond.false496
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB16_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB16_132
.LBB16_131:                             # %cond.false503
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB16_132:                             # %cond.end505
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_133:                             # %cond.end507
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB16_134:                             # %if.end511
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB16_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB16_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB16_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB16_142
.LBB16_138:                             # %cond.false527
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB16_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB16_141
.LBB16_140:                             # %cond.false537
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB16_141:                             # %cond.end544
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_142:                             # %cond.end546
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB16_143:                             # %if.end554
                                        #   in Loop: Header=BB16_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB16_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB16_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB16_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB16_150
.LBB16_146:                             # %cond.false568
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB16_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB16_149
.LBB16_148:                             # %cond.false578
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB16_149:                             # %cond.end585
                                        #   in Loop: Header=BB16_7 Depth=1
.LBB16_150:                             # %cond.end587
                                        #   in Loop: Header=BB16_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB16_151:                             # %if.end594
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_152
.LBB16_152:                             # %if.end595
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_153
.LBB16_153:                             # %if.end596
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_154
.LBB16_154:                             # %if.end597
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_155
.LBB16_155:                             # %if.end598
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_156
.LBB16_156:                             # %if.end599
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_157
.LBB16_157:                             # %if.end600
                                        #   in Loop: Header=BB16_7 Depth=1
	jmp	.LBB16_158
.LBB16_158:                             # %for.inc
                                        #   in Loop: Header=BB16_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB16_7
.LBB16_159:                             # %for.end
	cmpl	$252025727, -184(%rbp)  # imm = 0xF059B7F
	jne	.LBB16_161
.LBB16_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_160
.Lfunc_end16:
	.size	EdgeLoop.13, .Lfunc_end16-EdgeLoop.13
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.14             # -- Begin function EdgeLoop.14
	.p2align	4, 0x90
	.type	EdgeLoop.14,@function
EdgeLoop.14:                            # @EdgeLoop.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$859880250, -188(%rbp)  # imm = 0x3340BB3A
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB17_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB17_3
.LBB17_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB17_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB17_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB17_6
.LBB17_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB17_6
.LBB17_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB17_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB17_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB17_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB17_11
.LBB17_10:                              # %cond.false8
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB17_11:                              # %cond.end10
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB17_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB17_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB17_15
.LBB17_14:                              # %cond.false17
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	$1, %eax
	jmp	.LBB17_15
.LBB17_15:                              # %cond.end18
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_17
.LBB17_16:                              # %cond.false20
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-60(%rbp), %eax
.LBB17_17:                              # %cond.end21
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-160(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-160(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB17_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB17_19:                              # %lor.end
                                        #   in Loop: Header=BB17_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB17_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB17_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB17_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB17_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB17_25
.LBB17_24:                              # %cond.false47
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB17_25:                              # %cond.end49
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_27
.LBB17_26:                              # %cond.false51
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB17_27:                              # %cond.end52
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB17_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB17_157
.LBB17_29:                              # %if.then57
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB17_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB17_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB17_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB17_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB17_34
.LBB17_33:                              # %cond.false66
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	32(%rbp), %eax
.LBB17_34:                              # %cond.end67
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_36
.LBB17_35:                              # %cond.false69
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	$1, %eax
	jmp	.LBB17_36
.LBB17_36:                              # %cond.end70
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB17_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB17_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB17_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB17_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB17_41
.LBB17_40:                              # %cond.false81
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	32(%rbp), %eax
.LBB17_41:                              # %cond.end82
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_43
.LBB17_42:                              # %cond.false84
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	$1, %eax
	jmp	.LBB17_43
.LBB17_43:                              # %cond.end85
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB17_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB17_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_50
.LBB17_46:                              # %cond.false105
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB17_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	$51, %eax
	jmp	.LBB17_49
.LBB17_48:                              # %cond.false114
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB17_49:                              # %cond.end120
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_50:                              # %cond.end122
                                        #   in Loop: Header=BB17_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB17_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB17_56
.LBB17_52:                              # %cond.false135
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB17_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB17_55
.LBB17_54:                              # %cond.false144
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB17_55:                              # %cond.end150
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_56:                              # %cond.end152
                                        #   in Loop: Header=BB17_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB17_58
.LBB17_57:                              # %cond.false160
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB17_58:                              # %cond.end166
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_64
.LBB17_60:                              # %cond.false172
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB17_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	$51, %eax
	jmp	.LBB17_63
.LBB17_62:                              # %cond.false177
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB17_63:                              # %cond.end179
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_64:                              # %cond.end181
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB17_70
.LBB17_66:                              # %cond.false187
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB17_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB17_69
.LBB17_68:                              # %cond.false192
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB17_69:                              # %cond.end194
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_70:                              # %cond.end196
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-96(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -192(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, %eax
	je	.LBB17_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB17_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-168(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB17_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB17_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB17_75:                              # %if.end271
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -168(%rbp)
	jne	.LBB17_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB17_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB17_97
.LBB17_78:                              # %if.else292
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-176(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB17_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB17_81
.LBB17_80:                              # %cond.false307
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB17_81:                              # %cond.end313
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB17_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB17_84
.LBB17_83:                              # %cond.false325
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB17_84:                              # %cond.end331
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB17_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB17_87
.LBB17_86:                              # %cond.false342
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-16(%rbp), %eax
.LBB17_87:                              # %cond.end343
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB17_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB17_90
.LBB17_89:                              # %cond.false355
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-12(%rbp), %eax
.LBB17_90:                              # %cond.end356
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB17_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB17_93
.LBB17_92:                              # %cond.false371
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-32(%rbp), %eax
.LBB17_93:                              # %cond.end372
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB17_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB17_96
.LBB17_95:                              # %cond.false387
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-40(%rbp), %eax
.LBB17_96:                              # %cond.end388
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB17_97:                              # %if.end395
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_153
.LBB17_98:                              # %if.else396
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB17_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB17_101
.LBB17_100:                             # %cond.false400
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB17_101:                             # %cond.end403
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB17_107
.LBB17_103:                             # %cond.false415
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB17_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB17_106
.LBB17_105:                             # %cond.false424
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB17_106:                             # %cond.end430
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_107:                             # %cond.end432
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB17_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_114
.LBB17_110:                             # %cond.false440
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_113
.LBB17_112:                             # %cond.false446
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB17_113:                             # %cond.end448
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_114:                             # %cond.end450
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_120
.LBB17_116:                             # %cond.false458
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_119
.LBB17_118:                             # %cond.false465
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB17_119:                             # %cond.end467
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_120:                             # %cond.end469
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB17_134
.LBB17_121:                             # %if.else473
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_127
.LBB17_123:                             # %cond.false478
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB17_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB17_126
.LBB17_125:                             # %cond.false484
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB17_126:                             # %cond.end486
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_127:                             # %cond.end488
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB17_133
.LBB17_129:                             # %cond.false496
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB17_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB17_132
.LBB17_131:                             # %cond.false503
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB17_132:                             # %cond.end505
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_133:                             # %cond.end507
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB17_134:                             # %if.end511
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB17_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB17_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB17_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB17_142
.LBB17_138:                             # %cond.false527
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB17_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB17_141
.LBB17_140:                             # %cond.false537
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB17_141:                             # %cond.end544
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_142:                             # %cond.end546
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB17_143:                             # %if.end554
                                        #   in Loop: Header=BB17_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB17_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB17_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB17_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB17_150
.LBB17_146:                             # %cond.false568
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB17_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB17_149
.LBB17_148:                             # %cond.false578
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB17_149:                             # %cond.end585
                                        #   in Loop: Header=BB17_7 Depth=1
.LBB17_150:                             # %cond.end587
                                        #   in Loop: Header=BB17_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB17_151:                             # %if.end594
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_152
.LBB17_152:                             # %if.end595
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_153
.LBB17_153:                             # %if.end596
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_154
.LBB17_154:                             # %if.end597
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_155
.LBB17_155:                             # %if.end598
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_156
.LBB17_156:                             # %if.end599
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_157
.LBB17_157:                             # %if.end600
                                        #   in Loop: Header=BB17_7 Depth=1
	jmp	.LBB17_158
.LBB17_158:                             # %for.inc
                                        #   in Loop: Header=BB17_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB17_7
.LBB17_159:                             # %for.end
	cmpl	$859880250, -188(%rbp)  # imm = 0x3340BB3A
	jne	.LBB17_161
.LBB17_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_160
.Lfunc_end17:
	.size	EdgeLoop.14, .Lfunc_end17-EdgeLoop.14
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.15         # -- Begin function DeblockFrame.15
	.p2align	4, 0x90
	.type	DeblockFrame.15,@function
DeblockFrame.15:                        # @DeblockFrame.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$386682995, -8(%rbp)    # imm = 0x170C5073
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB18_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_1
.LBB18_4:                               # %for.end
	cmpl	$386682995, -8(%rbp)    # imm = 0x170C5073
	jne	.LBB18_6
.LBB18_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_5
.Lfunc_end18:
	.size	DeblockFrame.15, .Lfunc_end18-DeblockFrame.15
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.16             # -- Begin function EdgeLoop.16
	.p2align	4, 0x90
	.type	EdgeLoop.16,@function
EdgeLoop.16:                            # @EdgeLoop.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$793179257, -196(%rbp)  # imm = 0x2F46F479
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB19_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB19_3
.LBB19_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB19_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB19_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB19_6
.LBB19_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB19_6
.LBB19_6:                               # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB19_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB19_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB19_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB19_11
.LBB19_10:                              # %cond.false8
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB19_11:                              # %cond.end10
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB19_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB19_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB19_15
.LBB19_14:                              # %cond.false17
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	$1, %eax
	jmp	.LBB19_15
.LBB19_15:                              # %cond.end18
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_17
.LBB19_16:                              # %cond.false20
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-60(%rbp), %eax
.LBB19_17:                              # %cond.end21
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB19_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB19_19:                              # %lor.end
                                        #   in Loop: Header=BB19_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB19_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB19_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB19_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB19_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB19_25
.LBB19_24:                              # %cond.false47
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB19_25:                              # %cond.end49
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_27
.LBB19_26:                              # %cond.false51
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB19_27:                              # %cond.end52
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB19_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB19_157
.LBB19_29:                              # %if.then57
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB19_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB19_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB19_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB19_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB19_34
.LBB19_33:                              # %cond.false66
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	32(%rbp), %eax
.LBB19_34:                              # %cond.end67
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_36
.LBB19_35:                              # %cond.false69
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	$1, %eax
	jmp	.LBB19_36
.LBB19_36:                              # %cond.end70
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB19_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB19_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB19_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB19_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB19_41
.LBB19_40:                              # %cond.false81
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	32(%rbp), %eax
.LBB19_41:                              # %cond.end82
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_43
.LBB19_42:                              # %cond.false84
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	$1, %eax
	jmp	.LBB19_43
.LBB19_43:                              # %cond.end85
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB19_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB19_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_50
.LBB19_46:                              # %cond.false105
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB19_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	$51, %eax
	jmp	.LBB19_49
.LBB19_48:                              # %cond.false114
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB19_49:                              # %cond.end120
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_50:                              # %cond.end122
                                        #   in Loop: Header=BB19_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB19_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB19_56
.LBB19_52:                              # %cond.false135
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB19_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB19_55
.LBB19_54:                              # %cond.false144
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB19_55:                              # %cond.end150
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_56:                              # %cond.end152
                                        #   in Loop: Header=BB19_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB19_58
.LBB19_57:                              # %cond.false160
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB19_58:                              # %cond.end166
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB19_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_64
.LBB19_60:                              # %cond.false172
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB19_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	$51, %eax
	jmp	.LBB19_63
.LBB19_62:                              # %cond.false177
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB19_63:                              # %cond.end179
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_64:                              # %cond.end181
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB19_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB19_70
.LBB19_66:                              # %cond.false187
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB19_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB19_69
.LBB19_68:                              # %cond.false192
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB19_69:                              # %cond.end194
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_70:                              # %cond.end196
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -184(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-184(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -192(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB19_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB19_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB19_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB19_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB19_75:                              # %if.end271
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB19_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB19_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB19_97
.LBB19_78:                              # %if.else292
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB19_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB19_81
.LBB19_80:                              # %cond.false307
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB19_81:                              # %cond.end313
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB19_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB19_84
.LBB19_83:                              # %cond.false325
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB19_84:                              # %cond.end331
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB19_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB19_87
.LBB19_86:                              # %cond.false342
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-16(%rbp), %eax
.LBB19_87:                              # %cond.end343
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB19_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB19_90
.LBB19_89:                              # %cond.false355
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-12(%rbp), %eax
.LBB19_90:                              # %cond.end356
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB19_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB19_93
.LBB19_92:                              # %cond.false371
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-44(%rbp), %eax
.LBB19_93:                              # %cond.end372
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB19_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB19_96
.LBB19_95:                              # %cond.false387
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-40(%rbp), %eax
.LBB19_96:                              # %cond.end388
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB19_97:                              # %if.end395
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_153
.LBB19_98:                              # %if.else396
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB19_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB19_101
.LBB19_100:                             # %cond.false400
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB19_101:                             # %cond.end403
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB19_107
.LBB19_103:                             # %cond.false415
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB19_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB19_106
.LBB19_105:                             # %cond.false424
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB19_106:                             # %cond.end430
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_107:                             # %cond.end432
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB19_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB19_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_114
.LBB19_110:                             # %cond.false440
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB19_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_113
.LBB19_112:                             # %cond.false446
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB19_113:                             # %cond.end448
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_114:                             # %cond.end450
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB19_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_120
.LBB19_116:                             # %cond.false458
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB19_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_119
.LBB19_118:                             # %cond.false465
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB19_119:                             # %cond.end467
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_120:                             # %cond.end469
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB19_134
.LBB19_121:                             # %if.else473
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB19_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_127
.LBB19_123:                             # %cond.false478
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB19_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB19_126
.LBB19_125:                             # %cond.false484
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB19_126:                             # %cond.end486
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_127:                             # %cond.end488
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB19_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_133
.LBB19_129:                             # %cond.false496
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB19_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB19_132
.LBB19_131:                             # %cond.false503
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB19_132:                             # %cond.end505
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_133:                             # %cond.end507
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB19_134:                             # %if.end511
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB19_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB19_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB19_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB19_142
.LBB19_138:                             # %cond.false527
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB19_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_141
.LBB19_140:                             # %cond.false537
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB19_141:                             # %cond.end544
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_142:                             # %cond.end546
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB19_143:                             # %if.end554
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB19_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB19_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB19_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB19_150
.LBB19_146:                             # %cond.false568
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB19_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB19_149
.LBB19_148:                             # %cond.false578
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB19_149:                             # %cond.end585
                                        #   in Loop: Header=BB19_7 Depth=1
.LBB19_150:                             # %cond.end587
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB19_151:                             # %if.end594
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_152
.LBB19_152:                             # %if.end595
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_153
.LBB19_153:                             # %if.end596
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_154
.LBB19_154:                             # %if.end597
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_155
.LBB19_155:                             # %if.end598
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_156
.LBB19_156:                             # %if.end599
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_157
.LBB19_157:                             # %if.end600
                                        #   in Loop: Header=BB19_7 Depth=1
	jmp	.LBB19_158
.LBB19_158:                             # %for.inc
                                        #   in Loop: Header=BB19_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB19_7
.LBB19_159:                             # %for.end
	cmpl	$793179257, -196(%rbp)  # imm = 0x2F46F479
	jne	.LBB19_161
.LBB19_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_160
.Lfunc_end19:
	.size	EdgeLoop.16, .Lfunc_end19-EdgeLoop.16
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.17            # -- Begin function DeblockMb.17
	.p2align	4, 0x90
	.type	DeblockMb.17,@function
DeblockMb.17:                           # @DeblockMb.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1089486454, -112(%rbp) # imm = 0x40F03E76
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB20_2
# %bb.1:                                # %if.then
	jmp	.LBB20_2
.LBB20_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB20_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB20_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB20_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB20_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB20_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB20_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB20_9:                               # %land.end
.LBB20_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB20_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB20_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB20_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB20_61
.LBB20_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB20_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB20_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB20_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB20_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB20_20
.LBB20_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB20_20:                              # %if.end40
	jmp	.LBB20_21
.LBB20_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB20_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_29 Depth 2
                                        #       Child Loop BB20_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB20_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB20_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB20_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB20_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB20_28
.LBB20_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB20_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB20_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB20_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB20_27:                              # %land.end51
                                        #   in Loop: Header=BB20_22 Depth=1
.LBB20_28:                              # %lor.end52
                                        #   in Loop: Header=BB20_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB20_29:                              # %for.cond54
                                        #   Parent Loop BB20_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB20_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB20_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB20_56
.LBB20_32:                              # %if.then60
                                        #   in Loop: Header=BB20_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB20_33:                              # %for.cond70
                                        #   Parent Loop BB20_22 Depth=1
                                        #     Parent Loop BB20_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB20_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB20_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB20_33
.LBB20_36:                              # %for.end
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB20_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB20_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB20_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB20_39:                              # %if.end84
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB20_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB20_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB20_42:                              # %if.end100
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_43
.LBB20_43:                              # %if.end101
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB20_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB20_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB20_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB20_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB20_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB20_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB20_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB20_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB20_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB20_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB20_50:                              # %if.end125
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB20_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB20_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB20_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB20_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB20_53:                              # %if.end142
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_54
.LBB20_54:                              # %if.end143
                                        #   in Loop: Header=BB20_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB20_55:                              # %if.end145
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_56
.LBB20_56:                              # %if.end146
                                        #   in Loop: Header=BB20_29 Depth=2
	jmp	.LBB20_57
.LBB20_57:                              # %for.inc147
                                        #   in Loop: Header=BB20_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB20_29
.LBB20_58:                              # %for.end149
                                        #   in Loop: Header=BB20_22 Depth=1
	jmp	.LBB20_59
.LBB20_59:                              # %for.inc150
                                        #   in Loop: Header=BB20_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_22
.LBB20_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB20_61:                              # %return
	cmpl	$1089486454, -112(%rbp) # imm = 0x40F03E76
	jne	.LBB20_63
.LBB20_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_62
.Lfunc_end20:
	.size	DeblockMb.17, .Lfunc_end20-DeblockMb.17
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.18          # -- Begin function GetStrength.18
	.p2align	4, 0x90
	.type	GetStrength.18,@function
GetStrength.18:                         # @GetStrength.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$965475040, -152(%rbp)  # imm = 0x398BFAE0
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB21_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB21_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB21_5
.LBB21_4:                               # %cond.false
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB21_5:                               # %cond.end
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB21_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB21_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB21_9
.LBB21_8:                               # %cond.false15
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$1, %eax
	jmp	.LBB21_9
.LBB21_9:                               # %cond.end16
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_11
.LBB21_10:                              # %cond.false18
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-28(%rbp), %eax
.LBB21_11:                              # %cond.end19
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-132(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB21_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB21_25
.LBB21_13:                              # %if.then
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB21_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB21_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB21_23
.LBB21_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB21_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB21_23
.LBB21_19:                              # %lor.rhs
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB21_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB21_22
.LBB21_21:                              # %land.rhs60
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_22:                              # %land.end
                                        #   in Loop: Header=BB21_1 Depth=1
.LBB21_23:                              # %lor.end
                                        #   in Loop: Header=BB21_1 Depth=1
.LBB21_24:                              # %land.end62
                                        #   in Loop: Header=BB21_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB21_79
.LBB21_25:                              # %if.else
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB21_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB21_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB21_35
.LBB21_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB21_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB21_35
.LBB21_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB21_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB21_34
.LBB21_33:                              # %land.rhs92
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_34:                              # %land.end95
                                        #   in Loop: Header=BB21_1 Depth=1
.LBB21_35:                              # %lor.end96
                                        #   in Loop: Header=BB21_1 Depth=1
.LBB21_36:                              # %land.end97
                                        #   in Loop: Header=BB21_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB21_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB21_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB21_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB21_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB21_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB21_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB21_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB21_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB21_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB21_47
.LBB21_46:                              # %if.then144
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB21_77
.LBB21_47:                              # %if.else147
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB21_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB21_76
.LBB21_49:                              # %if.else152
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-144(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB21_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB21_52
.LBB21_51:                              # %cond.false169
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB21_52:                              # %cond.end174
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB21_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB21_55
.LBB21_54:                              # %cond.false184
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB21_55:                              # %cond.end189
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB21_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB21_58
.LBB21_57:                              # %cond.false199
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB21_58:                              # %cond.end204
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB21_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB21_61
.LBB21_60:                              # %cond.false214
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB21_61:                              # %cond.end219
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB21_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB21_65
.LBB21_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB21_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB21_74
.LBB21_65:                              # %if.then232
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB21_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB21_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB21_69
.LBB21_68:                              # %if.else309
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB21_69:                              # %if.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_73
.LBB21_70:                              # %if.else380
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB21_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB21_72:                              # %land.end518
                                        #   in Loop: Header=BB21_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB21_73:                              # %if.end522
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_75
.LBB21_74:                              # %if.else523
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB21_75:                              # %if.end526
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_76
.LBB21_76:                              # %if.end527
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_77
.LBB21_77:                              # %if.end528
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_78
.LBB21_78:                              # %if.end529
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_79
.LBB21_79:                              # %if.end530
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_80
.LBB21_80:                              # %for.inc
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_1
.LBB21_81:                              # %for.end
	cmpl	$965475040, -152(%rbp)  # imm = 0x398BFAE0
	jne	.LBB21_83
.LBB21_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_82
.Lfunc_end21:
	.size	GetStrength.18, .Lfunc_end21-GetStrength.18
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.19          # -- Begin function GetStrength.19
	.p2align	4, 0x90
	.type	GetStrength.19,@function
GetStrength.19:                         # @GetStrength.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$511123418, -152(%rbp)  # imm = 0x1E771FDA
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB22_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB22_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB22_5
.LBB22_4:                               # %cond.false
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB22_5:                               # %cond.end
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB22_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB22_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB22_9
.LBB22_8:                               # %cond.false15
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$1, %eax
	jmp	.LBB22_9
.LBB22_9:                               # %cond.end16
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_11
.LBB22_10:                              # %cond.false18
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-28(%rbp), %eax
.LBB22_11:                              # %cond.end19
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-140(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB22_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB22_25
.LBB22_13:                              # %if.then
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB22_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB22_23
.LBB22_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB22_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB22_23
.LBB22_19:                              # %lor.rhs
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB22_22
.LBB22_21:                              # %land.rhs60
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_22:                              # %land.end
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_23:                              # %lor.end
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_24:                              # %land.end62
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB22_79
.LBB22_25:                              # %if.else
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB22_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB22_35
.LBB22_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB22_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB22_35
.LBB22_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB22_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB22_34
.LBB22_33:                              # %land.rhs92
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB22_34:                              # %land.end95
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_35:                              # %lor.end96
                                        #   in Loop: Header=BB22_1 Depth=1
.LBB22_36:                              # %land.end97
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB22_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB22_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB22_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB22_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB22_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB22_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB22_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB22_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB22_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB22_47
.LBB22_46:                              # %if.then144
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB22_77
.LBB22_47:                              # %if.else147
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB22_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB22_76
.LBB22_49:                              # %if.else152
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-132(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_52
.LBB22_51:                              # %cond.false169
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_52:                              # %cond.end174
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_55
.LBB22_54:                              # %cond.false184
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_55:                              # %cond.end189
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_58
.LBB22_57:                              # %cond.false199
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_58:                              # %cond.end204
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB22_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB22_61
.LBB22_60:                              # %cond.false214
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB22_61:                              # %cond.end219
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB22_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB22_65
.LBB22_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB22_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB22_74
.LBB22_65:                              # %if.then232
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB22_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB22_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB22_69
.LBB22_68:                              # %if.else309
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB22_69:                              # %if.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_73
.LBB22_70:                              # %if.else380
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB22_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB22_72:                              # %land.end518
                                        #   in Loop: Header=BB22_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB22_73:                              # %if.end522
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_75
.LBB22_74:                              # %if.else523
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB22_75:                              # %if.end526
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_76
.LBB22_76:                              # %if.end527
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_77
.LBB22_77:                              # %if.end528
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_78
.LBB22_78:                              # %if.end529
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_79
.LBB22_79:                              # %if.end530
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_80
.LBB22_80:                              # %for.inc
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB22_1
.LBB22_81:                              # %for.end
	cmpl	$511123418, -152(%rbp)  # imm = 0x1E771FDA
	jne	.LBB22_83
.LBB22_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_82
.Lfunc_end22:
	.size	GetStrength.19, .Lfunc_end22-GetStrength.19
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.20             # -- Begin function EdgeLoop.20
	.p2align	4, 0x90
	.type	EdgeLoop.20,@function
EdgeLoop.20:                            # @EdgeLoop.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1618250395, -188(%rbp) # imm = 0x60748A9B
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -132(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB23_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB23_3
.LBB23_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB23_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB23_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB23_6
.LBB23_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB23_6
.LBB23_6:                               # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB23_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB23_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB23_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB23_11
.LBB23_10:                              # %cond.false8
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB23_11:                              # %cond.end10
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB23_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB23_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB23_15
.LBB23_14:                              # %cond.false17
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	$1, %eax
	jmp	.LBB23_15
.LBB23_15:                              # %cond.end18
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_17
.LBB23_16:                              # %cond.false20
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-60(%rbp), %eax
.LBB23_17:                              # %cond.end21
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-136(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	-152(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-152(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB23_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB23_19:                              # %lor.end
                                        #   in Loop: Header=BB23_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB23_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB23_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB23_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB23_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB23_25
.LBB23_24:                              # %cond.false47
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB23_25:                              # %cond.end49
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_27
.LBB23_26:                              # %cond.false51
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB23_27:                              # %cond.end52
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB23_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB23_157
.LBB23_29:                              # %if.then57
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB23_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB23_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB23_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB23_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB23_34
.LBB23_33:                              # %cond.false66
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	32(%rbp), %eax
.LBB23_34:                              # %cond.end67
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_36
.LBB23_35:                              # %cond.false69
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	$1, %eax
	jmp	.LBB23_36
.LBB23_36:                              # %cond.end70
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB23_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB23_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB23_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB23_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB23_41
.LBB23_40:                              # %cond.false81
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	32(%rbp), %eax
.LBB23_41:                              # %cond.end82
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_43
.LBB23_42:                              # %cond.false84
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	$1, %eax
	jmp	.LBB23_43
.LBB23_43:                              # %cond.end85
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB23_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB23_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_50
.LBB23_46:                              # %cond.false105
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB23_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	$51, %eax
	jmp	.LBB23_49
.LBB23_48:                              # %cond.false114
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB23_49:                              # %cond.end120
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_50:                              # %cond.end122
                                        #   in Loop: Header=BB23_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB23_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB23_56
.LBB23_52:                              # %cond.false135
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB23_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB23_55
.LBB23_54:                              # %cond.false144
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB23_55:                              # %cond.end150
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_56:                              # %cond.end152
                                        #   in Loop: Header=BB23_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB23_58
.LBB23_57:                              # %cond.false160
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB23_58:                              # %cond.end166
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_64
.LBB23_60:                              # %cond.false172
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB23_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	$51, %eax
	jmp	.LBB23_63
.LBB23_62:                              # %cond.false177
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB23_63:                              # %cond.end179
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_64:                              # %cond.end181
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB23_70
.LBB23_66:                              # %cond.false187
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB23_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB23_69
.LBB23_68:                              # %cond.false192
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-132(%rbp), %ecx
.LBB23_69:                              # %cond.end194
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_70:                              # %cond.end196
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -196(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -140(%rbp)
	movslq	-196(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB23_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB23_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB23_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB23_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB23_75:                              # %if.end271
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB23_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB23_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB23_97
.LBB23_78:                              # %if.else292
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-156(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB23_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB23_81
.LBB23_80:                              # %cond.false307
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB23_81:                              # %cond.end313
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB23_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB23_84
.LBB23_83:                              # %cond.false325
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB23_84:                              # %cond.end331
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB23_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB23_87
.LBB23_86:                              # %cond.false342
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-16(%rbp), %eax
.LBB23_87:                              # %cond.end343
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB23_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB23_90
.LBB23_89:                              # %cond.false355
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-12(%rbp), %eax
.LBB23_90:                              # %cond.end356
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB23_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB23_93
.LBB23_92:                              # %cond.false371
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-44(%rbp), %eax
.LBB23_93:                              # %cond.end372
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB23_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB23_96
.LBB23_95:                              # %cond.false387
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-36(%rbp), %eax
.LBB23_96:                              # %cond.end388
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB23_97:                              # %if.end395
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_153
.LBB23_98:                              # %if.else396
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB23_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB23_101
.LBB23_100:                             # %cond.false400
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB23_101:                             # %cond.end403
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB23_107
.LBB23_103:                             # %cond.false415
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB23_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB23_106
.LBB23_105:                             # %cond.false424
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB23_106:                             # %cond.end430
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_107:                             # %cond.end432
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB23_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_114
.LBB23_110:                             # %cond.false440
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_113
.LBB23_112:                             # %cond.false446
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB23_113:                             # %cond.end448
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_114:                             # %cond.end450
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_120
.LBB23_116:                             # %cond.false458
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_119
.LBB23_118:                             # %cond.false465
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB23_119:                             # %cond.end467
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_120:                             # %cond.end469
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB23_134
.LBB23_121:                             # %if.else473
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_127
.LBB23_123:                             # %cond.false478
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB23_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB23_126
.LBB23_125:                             # %cond.false484
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB23_126:                             # %cond.end486
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_127:                             # %cond.end488
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_133
.LBB23_129:                             # %cond.false496
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB23_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB23_132
.LBB23_131:                             # %cond.false503
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB23_132:                             # %cond.end505
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_133:                             # %cond.end507
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB23_134:                             # %if.end511
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB23_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB23_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB23_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB23_142
.LBB23_138:                             # %cond.false527
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB23_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB23_141
.LBB23_140:                             # %cond.false537
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB23_141:                             # %cond.end544
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_142:                             # %cond.end546
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB23_143:                             # %if.end554
                                        #   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB23_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB23_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB23_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB23_150
.LBB23_146:                             # %cond.false568
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB23_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB23_149
.LBB23_148:                             # %cond.false578
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB23_149:                             # %cond.end585
                                        #   in Loop: Header=BB23_7 Depth=1
.LBB23_150:                             # %cond.end587
                                        #   in Loop: Header=BB23_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB23_151:                             # %if.end594
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_152
.LBB23_152:                             # %if.end595
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_153
.LBB23_153:                             # %if.end596
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_154
.LBB23_154:                             # %if.end597
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_155
.LBB23_155:                             # %if.end598
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_156
.LBB23_156:                             # %if.end599
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_157
.LBB23_157:                             # %if.end600
                                        #   in Loop: Header=BB23_7 Depth=1
	jmp	.LBB23_158
.LBB23_158:                             # %for.inc
                                        #   in Loop: Header=BB23_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB23_7
.LBB23_159:                             # %for.end
	cmpl	$1618250395, -188(%rbp) # imm = 0x60748A9B
	jne	.LBB23_161
.LBB23_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_160
.Lfunc_end23:
	.size	EdgeLoop.20, .Lfunc_end23-EdgeLoop.20
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.21            # -- Begin function DeblockMb.21
	.p2align	4, 0x90
	.type	DeblockMb.21,@function
DeblockMb.21:                           # @DeblockMb.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1956238798, -108(%rbp) # imm = 0x7499D5CE
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB24_2
# %bb.1:                                # %if.then
	jmp	.LBB24_2
.LBB24_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB24_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB24_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB24_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB24_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB24_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB24_9:                               # %land.end
.LBB24_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB24_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB24_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB24_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB24_61
.LBB24_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB24_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB24_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB24_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB24_20
.LBB24_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB24_20:                              # %if.end40
	jmp	.LBB24_21
.LBB24_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB24_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_29 Depth 2
                                        #       Child Loop BB24_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB24_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB24_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB24_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB24_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB24_28
.LBB24_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB24_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB24_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB24_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB24_27:                              # %land.end51
                                        #   in Loop: Header=BB24_22 Depth=1
.LBB24_28:                              # %lor.end52
                                        #   in Loop: Header=BB24_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB24_29:                              # %for.cond54
                                        #   Parent Loop BB24_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB24_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB24_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB24_56
.LBB24_32:                              # %if.then60
                                        #   in Loop: Header=BB24_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB24_33:                              # %for.cond70
                                        #   Parent Loop BB24_22 Depth=1
                                        #     Parent Loop BB24_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB24_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB24_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB24_33
.LBB24_36:                              # %for.end
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB24_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB24_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB24_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB24_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB24_39:                              # %if.end84
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB24_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB24_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB24_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB24_42:                              # %if.end100
                                        #   in Loop: Header=BB24_29 Depth=2
	jmp	.LBB24_43
.LBB24_43:                              # %if.end101
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB24_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB24_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB24_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB24_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB24_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB24_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB24_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB24_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB24_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB24_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB24_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB24_50:                              # %if.end125
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB24_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB24_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB24_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB24_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB24_53:                              # %if.end142
                                        #   in Loop: Header=BB24_29 Depth=2
	jmp	.LBB24_54
.LBB24_54:                              # %if.end143
                                        #   in Loop: Header=BB24_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB24_55:                              # %if.end145
                                        #   in Loop: Header=BB24_29 Depth=2
	jmp	.LBB24_56
.LBB24_56:                              # %if.end146
                                        #   in Loop: Header=BB24_29 Depth=2
	jmp	.LBB24_57
.LBB24_57:                              # %for.inc147
                                        #   in Loop: Header=BB24_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB24_29
.LBB24_58:                              # %for.end149
                                        #   in Loop: Header=BB24_22 Depth=1
	jmp	.LBB24_59
.LBB24_59:                              # %for.inc150
                                        #   in Loop: Header=BB24_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_22
.LBB24_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB24_61:                              # %return
	cmpl	$1956238798, -108(%rbp) # imm = 0x7499D5CE
	jne	.LBB24_63
.LBB24_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_62
.Lfunc_end24:
	.size	DeblockMb.21, .Lfunc_end24-DeblockMb.21
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.22            # -- Begin function DeblockMb.22
	.p2align	4, 0x90
	.type	DeblockMb.22,@function
DeblockMb.22:                           # @DeblockMb.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1074158549, -100(%rbp) # imm = 0x40065BD5
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB25_2
# %bb.1:                                # %if.then
	jmp	.LBB25_2
.LBB25_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB25_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB25_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB25_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB25_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB25_9:                               # %land.end
.LBB25_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB25_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB25_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB25_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB25_61
.LBB25_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB25_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB25_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB25_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB25_20
.LBB25_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB25_20:                              # %if.end40
	jmp	.LBB25_21
.LBB25_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB25_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_29 Depth 2
                                        #       Child Loop BB25_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB25_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB25_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB25_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB25_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB25_28
.LBB25_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB25_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB25_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB25_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB25_27:                              # %land.end51
                                        #   in Loop: Header=BB25_22 Depth=1
.LBB25_28:                              # %lor.end52
                                        #   in Loop: Header=BB25_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB25_29:                              # %for.cond54
                                        #   Parent Loop BB25_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB25_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB25_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB25_56
.LBB25_32:                              # %if.then60
                                        #   in Loop: Header=BB25_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB25_33:                              # %for.cond70
                                        #   Parent Loop BB25_22 Depth=1
                                        #     Parent Loop BB25_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB25_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB25_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB25_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB25_33
.LBB25_36:                              # %for.end
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB25_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB25_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB25_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB25_39:                              # %if.end84
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB25_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB25_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB25_42:                              # %if.end100
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_43
.LBB25_43:                              # %if.end101
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB25_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB25_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB25_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB25_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB25_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB25_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB25_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB25_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB25_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB25_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB25_50:                              # %if.end125
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB25_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB25_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB25_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB25_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB25_53:                              # %if.end142
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_54
.LBB25_54:                              # %if.end143
                                        #   in Loop: Header=BB25_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB25_55:                              # %if.end145
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_56
.LBB25_56:                              # %if.end146
                                        #   in Loop: Header=BB25_29 Depth=2
	jmp	.LBB25_57
.LBB25_57:                              # %for.inc147
                                        #   in Loop: Header=BB25_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB25_29
.LBB25_58:                              # %for.end149
                                        #   in Loop: Header=BB25_22 Depth=1
	jmp	.LBB25_59
.LBB25_59:                              # %for.inc150
                                        #   in Loop: Header=BB25_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_22
.LBB25_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB25_61:                              # %return
	cmpl	$1074158549, -100(%rbp) # imm = 0x40065BD5
	jne	.LBB25_63
.LBB25_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_62
.Lfunc_end25:
	.size	DeblockMb.22, .Lfunc_end25-DeblockMb.22
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.23             # -- Begin function EdgeLoop.23
	.p2align	4, 0x90
	.type	EdgeLoop.23,@function
EdgeLoop.23:                            # @EdgeLoop.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$86077738, -180(%rbp)   # imm = 0x521712A
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB26_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB26_3
.LBB26_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB26_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB26_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB26_6
.LBB26_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB26_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB26_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB26_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB26_11
.LBB26_10:                              # %cond.false8
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB26_11:                              # %cond.end10
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB26_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB26_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB26_15
.LBB26_14:                              # %cond.false17
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	$1, %eax
	jmp	.LBB26_15
.LBB26_15:                              # %cond.end18
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_17
.LBB26_16:                              # %cond.false20
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-60(%rbp), %eax
.LBB26_17:                              # %cond.end21
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-140(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-152(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-152(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB26_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB26_19:                              # %lor.end
                                        #   in Loop: Header=BB26_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB26_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB26_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB26_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB26_25
.LBB26_24:                              # %cond.false47
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB26_25:                              # %cond.end49
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_27
.LBB26_26:                              # %cond.false51
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB26_27:                              # %cond.end52
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB26_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB26_157
.LBB26_29:                              # %if.then57
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB26_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB26_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB26_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB26_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB26_34
.LBB26_33:                              # %cond.false66
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	32(%rbp), %eax
.LBB26_34:                              # %cond.end67
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_36
.LBB26_35:                              # %cond.false69
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	$1, %eax
	jmp	.LBB26_36
.LBB26_36:                              # %cond.end70
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB26_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB26_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB26_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB26_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB26_41
.LBB26_40:                              # %cond.false81
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	32(%rbp), %eax
.LBB26_41:                              # %cond.end82
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_43
.LBB26_42:                              # %cond.false84
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	$1, %eax
	jmp	.LBB26_43
.LBB26_43:                              # %cond.end85
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB26_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB26_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB26_50
.LBB26_46:                              # %cond.false105
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB26_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	$51, %eax
	jmp	.LBB26_49
.LBB26_48:                              # %cond.false114
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB26_49:                              # %cond.end120
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_50:                              # %cond.end122
                                        #   in Loop: Header=BB26_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB26_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB26_56
.LBB26_52:                              # %cond.false135
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB26_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB26_55
.LBB26_54:                              # %cond.false144
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB26_55:                              # %cond.end150
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_56:                              # %cond.end152
                                        #   in Loop: Header=BB26_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB26_58
.LBB26_57:                              # %cond.false160
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB26_58:                              # %cond.end166
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB26_64
.LBB26_60:                              # %cond.false172
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB26_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	$51, %eax
	jmp	.LBB26_63
.LBB26_62:                              # %cond.false177
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB26_63:                              # %cond.end179
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_64:                              # %cond.end181
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB26_70
.LBB26_66:                              # %cond.false187
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB26_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB26_69
.LBB26_68:                              # %cond.false192
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB26_69:                              # %cond.end194
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_70:                              # %cond.end196
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -196(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-196(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -192(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB26_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB26_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB26_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB26_75:                              # %if.end271
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB26_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB26_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB26_97
.LBB26_78:                              # %if.else292
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB26_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB26_81
.LBB26_80:                              # %cond.false307
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB26_81:                              # %cond.end313
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB26_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB26_84
.LBB26_83:                              # %cond.false325
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB26_84:                              # %cond.end331
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB26_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB26_87
.LBB26_86:                              # %cond.false342
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-16(%rbp), %eax
.LBB26_87:                              # %cond.end343
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB26_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB26_90
.LBB26_89:                              # %cond.false355
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-12(%rbp), %eax
.LBB26_90:                              # %cond.end356
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB26_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB26_93
.LBB26_92:                              # %cond.false371
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-36(%rbp), %eax
.LBB26_93:                              # %cond.end372
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB26_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB26_96
.LBB26_95:                              # %cond.false387
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-44(%rbp), %eax
.LBB26_96:                              # %cond.end388
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB26_97:                              # %if.end395
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_153
.LBB26_98:                              # %if.else396
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB26_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB26_101
.LBB26_100:                             # %cond.false400
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB26_101:                             # %cond.end403
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB26_107
.LBB26_103:                             # %cond.false415
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB26_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB26_106
.LBB26_105:                             # %cond.false424
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB26_106:                             # %cond.end430
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_107:                             # %cond.end432
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB26_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB26_114
.LBB26_110:                             # %cond.false440
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_113
.LBB26_112:                             # %cond.false446
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB26_113:                             # %cond.end448
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_114:                             # %cond.end450
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB26_120
.LBB26_116:                             # %cond.false458
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_119
.LBB26_118:                             # %cond.false465
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB26_119:                             # %cond.end467
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_120:                             # %cond.end469
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB26_134
.LBB26_121:                             # %if.else473
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB26_127
.LBB26_123:                             # %cond.false478
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB26_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB26_126
.LBB26_125:                             # %cond.false484
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB26_126:                             # %cond.end486
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_127:                             # %cond.end488
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB26_133
.LBB26_129:                             # %cond.false496
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB26_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB26_132
.LBB26_131:                             # %cond.false503
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB26_132:                             # %cond.end505
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_133:                             # %cond.end507
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB26_134:                             # %if.end511
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB26_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB26_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB26_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB26_142
.LBB26_138:                             # %cond.false527
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB26_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB26_141
.LBB26_140:                             # %cond.false537
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB26_141:                             # %cond.end544
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_142:                             # %cond.end546
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB26_143:                             # %if.end554
                                        #   in Loop: Header=BB26_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB26_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB26_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB26_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB26_150
.LBB26_146:                             # %cond.false568
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB26_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB26_149
.LBB26_148:                             # %cond.false578
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB26_149:                             # %cond.end585
                                        #   in Loop: Header=BB26_7 Depth=1
.LBB26_150:                             # %cond.end587
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB26_151:                             # %if.end594
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_152
.LBB26_152:                             # %if.end595
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_153
.LBB26_153:                             # %if.end596
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_154
.LBB26_154:                             # %if.end597
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_155
.LBB26_155:                             # %if.end598
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_156
.LBB26_156:                             # %if.end599
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_157
.LBB26_157:                             # %if.end600
                                        #   in Loop: Header=BB26_7 Depth=1
	jmp	.LBB26_158
.LBB26_158:                             # %for.inc
                                        #   in Loop: Header=BB26_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB26_7
.LBB26_159:                             # %for.end
	cmpl	$86077738, -180(%rbp)   # imm = 0x521712A
	jne	.LBB26_161
.LBB26_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_160
.Lfunc_end26:
	.size	EdgeLoop.23, .Lfunc_end26-EdgeLoop.23
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.24         # -- Begin function DeblockFrame.24
	.p2align	4, 0x90
	.type	DeblockFrame.24,@function
DeblockFrame.24:                        # @DeblockFrame.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1432849398, -8(%rbp)   # imm = 0x55678BF6
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB27_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_1
.LBB27_4:                               # %for.end
	cmpl	$1432849398, -8(%rbp)   # imm = 0x55678BF6
	jne	.LBB27_6
.LBB27_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_5
.Lfunc_end27:
	.size	DeblockFrame.24, .Lfunc_end27-DeblockFrame.24
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.25         # -- Begin function DeblockFrame.25
	.p2align	4, 0x90
	.type	DeblockFrame.25,@function
DeblockFrame.25:                        # @DeblockFrame.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1485183185, -8(%rbp)   # imm = 0x588618D1
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB28_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_4:                               # %for.end
	cmpl	$1485183185, -8(%rbp)   # imm = 0x588618D1
	jne	.LBB28_6
.LBB28_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_5
.Lfunc_end28:
	.size	DeblockFrame.25, .Lfunc_end28-DeblockFrame.25
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.26            # -- Begin function DeblockMb.26
	.p2align	4, 0x90
	.type	DeblockMb.26,@function
DeblockMb.26:                           # @DeblockMb.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1933450759, -100(%rbp) # imm = 0x733E1E07
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB29_2
# %bb.1:                                # %if.then
	jmp	.LBB29_2
.LBB29_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB29_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB29_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB29_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB29_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB29_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB29_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB29_9:                               # %land.end
.LBB29_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB29_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB29_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB29_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB29_61
.LBB29_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB29_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB29_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB29_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB29_20
.LBB29_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB29_20:                              # %if.end40
	jmp	.LBB29_21
.LBB29_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB29_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_29 Depth 2
                                        #       Child Loop BB29_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB29_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB29_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB29_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB29_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB29_28
.LBB29_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB29_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB29_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB29_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB29_27:                              # %land.end51
                                        #   in Loop: Header=BB29_22 Depth=1
.LBB29_28:                              # %lor.end52
                                        #   in Loop: Header=BB29_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB29_29:                              # %for.cond54
                                        #   Parent Loop BB29_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB29_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB29_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB29_56
.LBB29_32:                              # %if.then60
                                        #   in Loop: Header=BB29_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB29_33:                              # %for.cond70
                                        #   Parent Loop BB29_22 Depth=1
                                        #     Parent Loop BB29_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB29_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB29_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB29_33
.LBB29_36:                              # %for.end
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB29_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB29_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB29_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB29_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB29_39:                              # %if.end84
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB29_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB29_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB29_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB29_42:                              # %if.end100
                                        #   in Loop: Header=BB29_29 Depth=2
	jmp	.LBB29_43
.LBB29_43:                              # %if.end101
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB29_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB29_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB29_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB29_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB29_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB29_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB29_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB29_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB29_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB29_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB29_50:                              # %if.end125
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB29_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB29_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB29_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB29_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB29_53:                              # %if.end142
                                        #   in Loop: Header=BB29_29 Depth=2
	jmp	.LBB29_54
.LBB29_54:                              # %if.end143
                                        #   in Loop: Header=BB29_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB29_55:                              # %if.end145
                                        #   in Loop: Header=BB29_29 Depth=2
	jmp	.LBB29_56
.LBB29_56:                              # %if.end146
                                        #   in Loop: Header=BB29_29 Depth=2
	jmp	.LBB29_57
.LBB29_57:                              # %for.inc147
                                        #   in Loop: Header=BB29_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB29_29
.LBB29_58:                              # %for.end149
                                        #   in Loop: Header=BB29_22 Depth=1
	jmp	.LBB29_59
.LBB29_59:                              # %for.inc150
                                        #   in Loop: Header=BB29_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_22
.LBB29_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB29_61:                              # %return
	cmpl	$1933450759, -100(%rbp) # imm = 0x733E1E07
	jne	.LBB29_63
.LBB29_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_62
.Lfunc_end29:
	.size	DeblockMb.26, .Lfunc_end29-DeblockMb.26
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.27            # -- Begin function DeblockMb.27
	.p2align	4, 0x90
	.type	DeblockMb.27,@function
DeblockMb.27:                           # @DeblockMb.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1316664379, -112(%rbp) # imm = 0x4E7AB43B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB30_2
# %bb.1:                                # %if.then
	jmp	.LBB30_2
.LBB30_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB30_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB30_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB30_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB30_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB30_9:                               # %land.end
.LBB30_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB30_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB30_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB30_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB30_61
.LBB30_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB30_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB30_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB30_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB30_20
.LBB30_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB30_20:                              # %if.end40
	jmp	.LBB30_21
.LBB30_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB30_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_29 Depth 2
                                        #       Child Loop BB30_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB30_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB30_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB30_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB30_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB30_28
.LBB30_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB30_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB30_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB30_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB30_27:                              # %land.end51
                                        #   in Loop: Header=BB30_22 Depth=1
.LBB30_28:                              # %lor.end52
                                        #   in Loop: Header=BB30_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB30_29:                              # %for.cond54
                                        #   Parent Loop BB30_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB30_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB30_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB30_56
.LBB30_32:                              # %if.then60
                                        #   in Loop: Header=BB30_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB30_33:                              # %for.cond70
                                        #   Parent Loop BB30_22 Depth=1
                                        #     Parent Loop BB30_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB30_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB30_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_33
.LBB30_36:                              # %for.end
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB30_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB30_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB30_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB30_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB30_39:                              # %if.end84
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB30_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB30_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB30_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB30_42:                              # %if.end100
                                        #   in Loop: Header=BB30_29 Depth=2
	jmp	.LBB30_43
.LBB30_43:                              # %if.end101
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB30_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB30_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB30_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB30_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB30_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB30_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB30_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB30_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB30_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB30_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB30_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB30_50:                              # %if.end125
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB30_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB30_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB30_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB30_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB30_53:                              # %if.end142
                                        #   in Loop: Header=BB30_29 Depth=2
	jmp	.LBB30_54
.LBB30_54:                              # %if.end143
                                        #   in Loop: Header=BB30_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB30_55:                              # %if.end145
                                        #   in Loop: Header=BB30_29 Depth=2
	jmp	.LBB30_56
.LBB30_56:                              # %if.end146
                                        #   in Loop: Header=BB30_29 Depth=2
	jmp	.LBB30_57
.LBB30_57:                              # %for.inc147
                                        #   in Loop: Header=BB30_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB30_29
.LBB30_58:                              # %for.end149
                                        #   in Loop: Header=BB30_22 Depth=1
	jmp	.LBB30_59
.LBB30_59:                              # %for.inc150
                                        #   in Loop: Header=BB30_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_22
.LBB30_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB30_61:                              # %return
	cmpl	$1316664379, -112(%rbp) # imm = 0x4E7AB43B
	jne	.LBB30_63
.LBB30_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_62
.Lfunc_end30:
	.size	DeblockMb.27, .Lfunc_end30-DeblockMb.27
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.28          # -- Begin function GetStrength.28
	.p2align	4, 0x90
	.type	GetStrength.28,@function
GetStrength.28:                         # @GetStrength.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$79473056, -144(%rbp)   # imm = 0x4BCA9A0
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB31_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB31_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB31_5
.LBB31_4:                               # %cond.false
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB31_5:                               # %cond.end
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB31_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB31_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB31_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB31_9
.LBB31_8:                               # %cond.false15
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$1, %eax
	jmp	.LBB31_9
.LBB31_9:                               # %cond.end16
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_11
.LBB31_10:                              # %cond.false18
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-28(%rbp), %eax
.LBB31_11:                              # %cond.end19
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-132(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB31_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB31_25
.LBB31_13:                              # %if.then
                                        #   in Loop: Header=BB31_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB31_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB31_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB31_23
.LBB31_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB31_23
.LBB31_19:                              # %lor.rhs
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB31_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB31_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB31_22
.LBB31_21:                              # %land.rhs60
                                        #   in Loop: Header=BB31_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_22:                              # %land.end
                                        #   in Loop: Header=BB31_1 Depth=1
.LBB31_23:                              # %lor.end
                                        #   in Loop: Header=BB31_1 Depth=1
.LBB31_24:                              # %land.end62
                                        #   in Loop: Header=BB31_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB31_79
.LBB31_25:                              # %if.else
                                        #   in Loop: Header=BB31_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB31_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB31_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB31_35
.LBB31_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB31_35
.LBB31_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB31_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB31_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB31_34
.LBB31_33:                              # %land.rhs92
                                        #   in Loop: Header=BB31_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB31_34:                              # %land.end95
                                        #   in Loop: Header=BB31_1 Depth=1
.LBB31_35:                              # %lor.end96
                                        #   in Loop: Header=BB31_1 Depth=1
.LBB31_36:                              # %land.end97
                                        #   in Loop: Header=BB31_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB31_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB31_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB31_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB31_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB31_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB31_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB31_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB31_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB31_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB31_47
.LBB31_46:                              # %if.then144
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB31_77
.LBB31_47:                              # %if.else147
                                        #   in Loop: Header=BB31_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB31_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB31_76
.LBB31_49:                              # %if.else152
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB31_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB31_52
.LBB31_51:                              # %cond.false169
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB31_52:                              # %cond.end174
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB31_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB31_55
.LBB31_54:                              # %cond.false184
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB31_55:                              # %cond.end189
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB31_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB31_58
.LBB31_57:                              # %cond.false199
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB31_58:                              # %cond.end204
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB31_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB31_61
.LBB31_60:                              # %cond.false214
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB31_61:                              # %cond.end219
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	%rax, -160(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB31_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	.LBB31_65
.LBB31_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jne	.LBB31_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB31_74
.LBB31_65:                              # %if.then232
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB31_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB31_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB31_69
.LBB31_68:                              # %if.else309
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB31_69:                              # %if.end
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_73
.LBB31_70:                              # %if.else380
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB31_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB31_72:                              # %land.end518
                                        #   in Loop: Header=BB31_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB31_73:                              # %if.end522
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_75
.LBB31_74:                              # %if.else523
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB31_75:                              # %if.end526
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_76
.LBB31_76:                              # %if.end527
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_77
.LBB31_77:                              # %if.end528
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_78
.LBB31_78:                              # %if.end529
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_79
.LBB31_79:                              # %if.end530
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_80
.LBB31_80:                              # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_1
.LBB31_81:                              # %for.end
	cmpl	$79473056, -144(%rbp)   # imm = 0x4BCA9A0
	jne	.LBB31_83
.LBB31_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_82
.Lfunc_end31:
	.size	GetStrength.28, .Lfunc_end31-GetStrength.28
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.29         # -- Begin function DeblockFrame.29
	.p2align	4, 0x90
	.type	DeblockFrame.29,@function
DeblockFrame.29:                        # @DeblockFrame.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1663754022, -8(%rbp)   # imm = 0x632ADF26
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB32_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_4:                               # %for.end
	cmpl	$1663754022, -8(%rbp)   # imm = 0x632ADF26
	jne	.LBB32_6
.LBB32_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_5
.Lfunc_end32:
	.size	DeblockFrame.29, .Lfunc_end32-DeblockFrame.29
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.30         # -- Begin function DeblockFrame.30
	.p2align	4, 0x90
	.type	DeblockFrame.30,@function
DeblockFrame.30:                        # @DeblockFrame.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$263731246, -8(%rbp)    # imm = 0xFB8382E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB33_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_1
.LBB33_4:                               # %for.end
	cmpl	$263731246, -8(%rbp)    # imm = 0xFB8382E
	jne	.LBB33_6
.LBB33_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_5
.Lfunc_end33:
	.size	DeblockFrame.30, .Lfunc_end33-DeblockFrame.30
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.31          # -- Begin function GetStrength.31
	.p2align	4, 0x90
	.type	GetStrength.31,@function
GetStrength.31:                         # @GetStrength.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$564207297, -140(%rbp)  # imm = 0x21A11EC1
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB34_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB34_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB34_5
.LBB34_4:                               # %cond.false
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB34_5:                               # %cond.end
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB34_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB34_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB34_9
.LBB34_8:                               # %cond.false15
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$1, %eax
	jmp	.LBB34_9
.LBB34_9:                               # %cond.end16
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_11
.LBB34_10:                              # %cond.false18
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-28(%rbp), %eax
.LBB34_11:                              # %cond.end19
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-132(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB34_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB34_25
.LBB34_13:                              # %if.then
                                        #   in Loop: Header=BB34_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB34_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB34_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB34_23
.LBB34_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB34_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB34_23
.LBB34_19:                              # %lor.rhs
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB34_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB34_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB34_22
.LBB34_21:                              # %land.rhs60
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_22:                              # %land.end
                                        #   in Loop: Header=BB34_1 Depth=1
.LBB34_23:                              # %lor.end
                                        #   in Loop: Header=BB34_1 Depth=1
.LBB34_24:                              # %land.end62
                                        #   in Loop: Header=BB34_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB34_79
.LBB34_25:                              # %if.else
                                        #   in Loop: Header=BB34_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB34_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB34_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB34_35
.LBB34_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB34_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB34_35
.LBB34_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB34_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB34_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB34_34
.LBB34_33:                              # %land.rhs92
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_34:                              # %land.end95
                                        #   in Loop: Header=BB34_1 Depth=1
.LBB34_35:                              # %lor.end96
                                        #   in Loop: Header=BB34_1 Depth=1
.LBB34_36:                              # %land.end97
                                        #   in Loop: Header=BB34_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB34_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB34_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB34_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB34_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB34_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB34_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB34_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB34_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB34_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB34_47
.LBB34_46:                              # %if.then144
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB34_77
.LBB34_47:                              # %if.else147
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB34_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB34_76
.LBB34_49:                              # %if.else152
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB34_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB34_52
.LBB34_51:                              # %cond.false169
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB34_52:                              # %cond.end174
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB34_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB34_55
.LBB34_54:                              # %cond.false184
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB34_55:                              # %cond.end189
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB34_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB34_58
.LBB34_57:                              # %cond.false199
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB34_58:                              # %cond.end204
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB34_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB34_61
.LBB34_60:                              # %cond.false214
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB34_61:                              # %cond.end219
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB34_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB34_65
.LBB34_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB34_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB34_74
.LBB34_65:                              # %if.then232
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB34_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB34_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB34_69
.LBB34_68:                              # %if.else309
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB34_69:                              # %if.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_73
.LBB34_70:                              # %if.else380
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB34_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB34_72:                              # %land.end518
                                        #   in Loop: Header=BB34_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB34_73:                              # %if.end522
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_75
.LBB34_74:                              # %if.else523
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB34_75:                              # %if.end526
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_76
.LBB34_76:                              # %if.end527
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_77
.LBB34_77:                              # %if.end528
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_78
.LBB34_78:                              # %if.end529
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_79
.LBB34_79:                              # %if.end530
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_1
.LBB34_81:                              # %for.end
	cmpl	$564207297, -140(%rbp)  # imm = 0x21A11EC1
	jne	.LBB34_83
.LBB34_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_82
.Lfunc_end34:
	.size	GetStrength.31, .Lfunc_end34-GetStrength.31
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.32         # -- Begin function DeblockFrame.32
	.p2align	4, 0x90
	.type	DeblockFrame.32,@function
DeblockFrame.32:                        # @DeblockFrame.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$611672944, -8(%rbp)    # imm = 0x24756370
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB35_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_4:                               # %for.end
	cmpl	$611672944, -8(%rbp)    # imm = 0x24756370
	jne	.LBB35_6
.LBB35_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_5
.Lfunc_end35:
	.size	DeblockFrame.32, .Lfunc_end35-DeblockFrame.32
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.33             # -- Begin function EdgeLoop.33
	.p2align	4, 0x90
	.type	EdgeLoop.33,@function
EdgeLoop.33:                            # @EdgeLoop.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$353396255, -184(%rbp)  # imm = 0x1510661F
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -132(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB36_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB36_3
.LBB36_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB36_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB36_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB36_6
.LBB36_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB36_6
.LBB36_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB36_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB36_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB36_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB36_11
.LBB36_10:                              # %cond.false8
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB36_11:                              # %cond.end10
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB36_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB36_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false17
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$1, %eax
	jmp	.LBB36_15
.LBB36_15:                              # %cond.end18
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_17
.LBB36_16:                              # %cond.false20
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %eax
.LBB36_17:                              # %cond.end21
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-136(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-172(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-172(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB36_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB36_19:                              # %lor.end
                                        #   in Loop: Header=BB36_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB36_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB36_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB36_25
.LBB36_24:                              # %cond.false47
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB36_25:                              # %cond.end49
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_27
.LBB36_26:                              # %cond.false51
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB36_27:                              # %cond.end52
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB36_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB36_157
.LBB36_29:                              # %if.then57
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB36_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB36_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB36_34
.LBB36_33:                              # %cond.false66
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
.LBB36_34:                              # %cond.end67
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_36
.LBB36_35:                              # %cond.false69
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$1, %eax
	jmp	.LBB36_36
.LBB36_36:                              # %cond.end70
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB36_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB36_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB36_41
.LBB36_40:                              # %cond.false81
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
.LBB36_41:                              # %cond.end82
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_43
.LBB36_42:                              # %cond.false84
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$1, %eax
	jmp	.LBB36_43
.LBB36_43:                              # %cond.end85
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB36_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB36_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_50
.LBB36_46:                              # %cond.false105
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB36_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %eax
	jmp	.LBB36_49
.LBB36_48:                              # %cond.false114
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB36_49:                              # %cond.end120
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_50:                              # %cond.end122
                                        #   in Loop: Header=BB36_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB36_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB36_56
.LBB36_52:                              # %cond.false135
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB36_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB36_55
.LBB36_54:                              # %cond.false144
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB36_55:                              # %cond.end150
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_56:                              # %cond.end152
                                        #   in Loop: Header=BB36_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB36_58
.LBB36_57:                              # %cond.false160
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB36_58:                              # %cond.end166
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_64
.LBB36_60:                              # %cond.false172
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB36_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %eax
	jmp	.LBB36_63
.LBB36_62:                              # %cond.false177
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB36_63:                              # %cond.end179
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_64:                              # %cond.end181
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB36_70
.LBB36_66:                              # %cond.false187
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB36_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB36_69
.LBB36_68:                              # %cond.false192
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-132(%rbp), %ecx
.LBB36_69:                              # %cond.end194
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_70:                              # %cond.end196
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, %eax
	je	.LBB36_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB36_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-160(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB36_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB36_75:                              # %if.end271
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -160(%rbp)
	jne	.LBB36_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB36_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB36_97
.LBB36_78:                              # %if.else292
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-164(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB36_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_81
.LBB36_80:                              # %cond.false307
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB36_81:                              # %cond.end313
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB36_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_84
.LBB36_83:                              # %cond.false325
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB36_84:                              # %cond.end331
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB36_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB36_87
.LBB36_86:                              # %cond.false342
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-12(%rbp), %eax
.LBB36_87:                              # %cond.end343
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB36_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB36_90
.LBB36_89:                              # %cond.false355
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-16(%rbp), %eax
.LBB36_90:                              # %cond.end356
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB36_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_93
.LBB36_92:                              # %cond.false371
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
.LBB36_93:                              # %cond.end372
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB36_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_96
.LBB36_95:                              # %cond.false387
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-40(%rbp), %eax
.LBB36_96:                              # %cond.end388
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB36_97:                              # %if.end395
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_153
.LBB36_98:                              # %if.else396
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB36_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB36_101
.LBB36_100:                             # %cond.false400
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB36_101:                             # %cond.end403
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB36_107
.LBB36_103:                             # %cond.false415
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB36_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB36_106
.LBB36_105:                             # %cond.false424
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB36_106:                             # %cond.end430
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_107:                             # %cond.end432
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB36_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_114
.LBB36_110:                             # %cond.false440
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB36_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB36_113
.LBB36_112:                             # %cond.false446
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB36_113:                             # %cond.end448
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_114:                             # %cond.end450
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_120
.LBB36_116:                             # %cond.false458
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB36_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB36_119
.LBB36_118:                             # %cond.false465
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB36_119:                             # %cond.end467
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_120:                             # %cond.end469
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB36_134
.LBB36_121:                             # %if.else473
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_127
.LBB36_123:                             # %cond.false478
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB36_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_126
.LBB36_125:                             # %cond.false484
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB36_126:                             # %cond.end486
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_127:                             # %cond.end488
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_133
.LBB36_129:                             # %cond.false496
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB36_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_132
.LBB36_131:                             # %cond.false503
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB36_132:                             # %cond.end505
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_133:                             # %cond.end507
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB36_134:                             # %if.end511
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB36_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB36_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB36_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB36_142
.LBB36_138:                             # %cond.false527
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB36_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB36_141
.LBB36_140:                             # %cond.false537
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB36_141:                             # %cond.end544
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_142:                             # %cond.end546
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB36_143:                             # %if.end554
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB36_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB36_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB36_150
.LBB36_146:                             # %cond.false568
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB36_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB36_149
.LBB36_148:                             # %cond.false578
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB36_149:                             # %cond.end585
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_150:                             # %cond.end587
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB36_151:                             # %if.end594
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_152
.LBB36_152:                             # %if.end595
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_153
.LBB36_153:                             # %if.end596
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_154
.LBB36_154:                             # %if.end597
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_155
.LBB36_155:                             # %if.end598
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_156
.LBB36_156:                             # %if.end599
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_157
.LBB36_157:                             # %if.end600
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_158
.LBB36_158:                             # %for.inc
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB36_7
.LBB36_159:                             # %for.end
	cmpl	$353396255, -184(%rbp)  # imm = 0x1510661F
	jne	.LBB36_161
.LBB36_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_160
.Lfunc_end36:
	.size	EdgeLoop.33, .Lfunc_end36-EdgeLoop.33
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.34          # -- Begin function GetStrength.34
	.p2align	4, 0x90
	.type	GetStrength.34,@function
GetStrength.34:                         # @GetStrength.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$180678252, -132(%rbp)  # imm = 0xAC4EE6C
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB37_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB37_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB37_5
.LBB37_4:                               # %cond.false
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB37_5:                               # %cond.end
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB37_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB37_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB37_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB37_9
.LBB37_8:                               # %cond.false15
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$1, %eax
	jmp	.LBB37_9
.LBB37_9:                               # %cond.end16
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_11
.LBB37_10:                              # %cond.false18
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-28(%rbp), %eax
.LBB37_11:                              # %cond.end19
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-136(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB37_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB37_25
.LBB37_13:                              # %if.then
                                        #   in Loop: Header=BB37_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB37_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB37_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB37_23
.LBB37_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB37_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB37_23
.LBB37_19:                              # %lor.rhs
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB37_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB37_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB37_22
.LBB37_21:                              # %land.rhs60
                                        #   in Loop: Header=BB37_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_22:                              # %land.end
                                        #   in Loop: Header=BB37_1 Depth=1
.LBB37_23:                              # %lor.end
                                        #   in Loop: Header=BB37_1 Depth=1
.LBB37_24:                              # %land.end62
                                        #   in Loop: Header=BB37_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB37_79
.LBB37_25:                              # %if.else
                                        #   in Loop: Header=BB37_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB37_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB37_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB37_35
.LBB37_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB37_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB37_35
.LBB37_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB37_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB37_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB37_34
.LBB37_33:                              # %land.rhs92
                                        #   in Loop: Header=BB37_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_34:                              # %land.end95
                                        #   in Loop: Header=BB37_1 Depth=1
.LBB37_35:                              # %lor.end96
                                        #   in Loop: Header=BB37_1 Depth=1
.LBB37_36:                              # %land.end97
                                        #   in Loop: Header=BB37_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB37_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB37_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB37_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB37_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB37_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB37_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB37_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB37_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB37_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB37_47
.LBB37_46:                              # %if.then144
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB37_77
.LBB37_47:                              # %if.else147
                                        #   in Loop: Header=BB37_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB37_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB37_76
.LBB37_49:                              # %if.else152
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-152(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB37_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB37_52
.LBB37_51:                              # %cond.false169
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB37_52:                              # %cond.end174
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB37_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB37_55
.LBB37_54:                              # %cond.false184
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB37_55:                              # %cond.end189
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB37_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB37_58
.LBB37_57:                              # %cond.false199
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB37_58:                              # %cond.end204
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB37_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB37_61
.LBB37_60:                              # %cond.false214
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB37_61:                              # %cond.end219
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB37_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB37_65
.LBB37_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB37_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB37_74
.LBB37_65:                              # %if.then232
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB37_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB37_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB37_69
.LBB37_68:                              # %if.else309
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB37_69:                              # %if.end
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_73
.LBB37_70:                              # %if.else380
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB37_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB37_72:                              # %land.end518
                                        #   in Loop: Header=BB37_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB37_73:                              # %if.end522
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_75
.LBB37_74:                              # %if.else523
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB37_75:                              # %if.end526
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_76
.LBB37_76:                              # %if.end527
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_77
.LBB37_77:                              # %if.end528
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_78
.LBB37_78:                              # %if.end529
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_79
.LBB37_79:                              # %if.end530
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_80
.LBB37_80:                              # %for.inc
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB37_1
.LBB37_81:                              # %for.end
	cmpl	$180678252, -132(%rbp)  # imm = 0xAC4EE6C
	jne	.LBB37_83
.LBB37_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_82
.Lfunc_end37:
	.size	GetStrength.34, .Lfunc_end37-GetStrength.34
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.35          # -- Begin function GetStrength.35
	.p2align	4, 0x90
	.type	GetStrength.35,@function
GetStrength.35:                         # @GetStrength.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$165957908, -148(%rbp)  # imm = 0x9E45114
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB38_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB38_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB38_5
.LBB38_4:                               # %cond.false
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB38_5:                               # %cond.end
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB38_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB38_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB38_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB38_9
.LBB38_8:                               # %cond.false15
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$1, %eax
	jmp	.LBB38_9
.LBB38_9:                               # %cond.end16
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_11
.LBB38_10:                              # %cond.false18
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-28(%rbp), %eax
.LBB38_11:                              # %cond.end19
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-136(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB38_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB38_25
.LBB38_13:                              # %if.then
                                        #   in Loop: Header=BB38_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB38_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB38_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB38_23
.LBB38_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB38_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB38_23
.LBB38_19:                              # %lor.rhs
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB38_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB38_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB38_22
.LBB38_21:                              # %land.rhs60
                                        #   in Loop: Header=BB38_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_22:                              # %land.end
                                        #   in Loop: Header=BB38_1 Depth=1
.LBB38_23:                              # %lor.end
                                        #   in Loop: Header=BB38_1 Depth=1
.LBB38_24:                              # %land.end62
                                        #   in Loop: Header=BB38_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB38_79
.LBB38_25:                              # %if.else
                                        #   in Loop: Header=BB38_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB38_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB38_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB38_35
.LBB38_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB38_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB38_35
.LBB38_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB38_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB38_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB38_34
.LBB38_33:                              # %land.rhs92
                                        #   in Loop: Header=BB38_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_34:                              # %land.end95
                                        #   in Loop: Header=BB38_1 Depth=1
.LBB38_35:                              # %lor.end96
                                        #   in Loop: Header=BB38_1 Depth=1
.LBB38_36:                              # %land.end97
                                        #   in Loop: Header=BB38_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB38_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB38_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB38_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB38_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB38_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB38_47
.LBB38_46:                              # %if.then144
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB38_77
.LBB38_47:                              # %if.else147
                                        #   in Loop: Header=BB38_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB38_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB38_76
.LBB38_49:                              # %if.else152
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-152(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB38_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB38_52
.LBB38_51:                              # %cond.false169
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB38_52:                              # %cond.end174
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB38_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB38_55
.LBB38_54:                              # %cond.false184
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB38_55:                              # %cond.end189
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB38_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB38_58
.LBB38_57:                              # %cond.false199
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB38_58:                              # %cond.end204
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB38_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB38_61
.LBB38_60:                              # %cond.false214
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB38_61:                              # %cond.end219
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB38_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB38_65
.LBB38_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB38_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB38_74
.LBB38_65:                              # %if.then232
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB38_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB38_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB38_69
.LBB38_68:                              # %if.else309
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB38_69:                              # %if.end
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_73
.LBB38_70:                              # %if.else380
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB38_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB38_72:                              # %land.end518
                                        #   in Loop: Header=BB38_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB38_73:                              # %if.end522
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_75
.LBB38_74:                              # %if.else523
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB38_75:                              # %if.end526
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_76
.LBB38_76:                              # %if.end527
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_77
.LBB38_77:                              # %if.end528
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_78
.LBB38_78:                              # %if.end529
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_79
.LBB38_79:                              # %if.end530
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_1
.LBB38_81:                              # %for.end
	cmpl	$165957908, -148(%rbp)  # imm = 0x9E45114
	jne	.LBB38_83
.LBB38_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_82
.Lfunc_end38:
	.size	GetStrength.35, .Lfunc_end38-GetStrength.35
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.36            # -- Begin function DeblockMb.36
	.p2align	4, 0x90
	.type	DeblockMb.36,@function
DeblockMb.36:                           # @DeblockMb.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1208693150, -100(%rbp) # imm = 0x480B319E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB39_2
# %bb.1:                                # %if.then
	jmp	.LBB39_2
.LBB39_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB39_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB39_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB39_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB39_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB39_9:                               # %land.end
.LBB39_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB39_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB39_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB39_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB39_61
.LBB39_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB39_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB39_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB39_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB39_20
.LBB39_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB39_20:                              # %if.end40
	jmp	.LBB39_21
.LBB39_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB39_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_29 Depth 2
                                        #       Child Loop BB39_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB39_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB39_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB39_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB39_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB39_28
.LBB39_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB39_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB39_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB39_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB39_27:                              # %land.end51
                                        #   in Loop: Header=BB39_22 Depth=1
.LBB39_28:                              # %lor.end52
                                        #   in Loop: Header=BB39_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB39_29:                              # %for.cond54
                                        #   Parent Loop BB39_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB39_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB39_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB39_56
.LBB39_32:                              # %if.then60
                                        #   in Loop: Header=BB39_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB39_33:                              # %for.cond70
                                        #   Parent Loop BB39_22 Depth=1
                                        #     Parent Loop BB39_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB39_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB39_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB39_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB39_33
.LBB39_36:                              # %for.end
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB39_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB39_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB39_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB39_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB39_39:                              # %if.end84
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB39_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB39_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB39_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB39_42:                              # %if.end100
                                        #   in Loop: Header=BB39_29 Depth=2
	jmp	.LBB39_43
.LBB39_43:                              # %if.end101
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB39_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB39_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB39_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB39_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB39_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB39_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB39_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB39_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB39_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB39_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB39_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB39_50:                              # %if.end125
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB39_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB39_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB39_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB39_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB39_53:                              # %if.end142
                                        #   in Loop: Header=BB39_29 Depth=2
	jmp	.LBB39_54
.LBB39_54:                              # %if.end143
                                        #   in Loop: Header=BB39_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB39_55:                              # %if.end145
                                        #   in Loop: Header=BB39_29 Depth=2
	jmp	.LBB39_56
.LBB39_56:                              # %if.end146
                                        #   in Loop: Header=BB39_29 Depth=2
	jmp	.LBB39_57
.LBB39_57:                              # %for.inc147
                                        #   in Loop: Header=BB39_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB39_29
.LBB39_58:                              # %for.end149
                                        #   in Loop: Header=BB39_22 Depth=1
	jmp	.LBB39_59
.LBB39_59:                              # %for.inc150
                                        #   in Loop: Header=BB39_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_22
.LBB39_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB39_61:                              # %return
	cmpl	$1208693150, -100(%rbp) # imm = 0x480B319E
	jne	.LBB39_63
.LBB39_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_62
.Lfunc_end39:
	.size	DeblockMb.36, .Lfunc_end39-DeblockMb.36
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.37             # -- Begin function EdgeLoop.37
	.p2align	4, 0x90
	.type	EdgeLoop.37,@function
EdgeLoop.37:                            # @EdgeLoop.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1926996919, -184(%rbp) # imm = 0x72DBA3B7
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB40_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB40_3
.LBB40_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB40_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB40_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB40_6
.LBB40_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB40_6
.LBB40_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB40_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB40_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB40_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB40_11
.LBB40_10:                              # %cond.false8
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB40_11:                              # %cond.end10
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB40_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB40_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB40_15
.LBB40_14:                              # %cond.false17
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	$1, %eax
	jmp	.LBB40_15
.LBB40_15:                              # %cond.end18
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_17
.LBB40_16:                              # %cond.false20
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-60(%rbp), %eax
.LBB40_17:                              # %cond.end21
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-136(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB40_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB40_19:                              # %lor.end
                                        #   in Loop: Header=BB40_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB40_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB40_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB40_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB40_25
.LBB40_24:                              # %cond.false47
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB40_25:                              # %cond.end49
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_27
.LBB40_26:                              # %cond.false51
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB40_27:                              # %cond.end52
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB40_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB40_157
.LBB40_29:                              # %if.then57
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB40_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB40_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB40_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB40_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB40_34
.LBB40_33:                              # %cond.false66
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	32(%rbp), %eax
.LBB40_34:                              # %cond.end67
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_36
.LBB40_35:                              # %cond.false69
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	$1, %eax
	jmp	.LBB40_36
.LBB40_36:                              # %cond.end70
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB40_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB40_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB40_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB40_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB40_41
.LBB40_40:                              # %cond.false81
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	32(%rbp), %eax
.LBB40_41:                              # %cond.end82
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_43
.LBB40_42:                              # %cond.false84
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	$1, %eax
	jmp	.LBB40_43
.LBB40_43:                              # %cond.end85
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB40_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB40_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_50
.LBB40_46:                              # %cond.false105
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB40_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	$51, %eax
	jmp	.LBB40_49
.LBB40_48:                              # %cond.false114
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB40_49:                              # %cond.end120
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_50:                              # %cond.end122
                                        #   in Loop: Header=BB40_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB40_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB40_56
.LBB40_52:                              # %cond.false135
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB40_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB40_55
.LBB40_54:                              # %cond.false144
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB40_55:                              # %cond.end150
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_56:                              # %cond.end152
                                        #   in Loop: Header=BB40_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB40_58
.LBB40_57:                              # %cond.false160
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB40_58:                              # %cond.end166
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB40_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_64
.LBB40_60:                              # %cond.false172
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB40_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	$51, %eax
	jmp	.LBB40_63
.LBB40_62:                              # %cond.false177
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB40_63:                              # %cond.end179
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_64:                              # %cond.end181
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB40_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB40_70
.LBB40_66:                              # %cond.false187
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB40_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB40_69
.LBB40_68:                              # %cond.false192
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB40_69:                              # %cond.end194
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_70:                              # %cond.end196
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB40_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB40_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB40_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB40_75:                              # %if.end271
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB40_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB40_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB40_97
.LBB40_78:                              # %if.else292
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-156(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-168(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB40_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB40_81
.LBB40_80:                              # %cond.false307
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB40_81:                              # %cond.end313
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB40_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB40_84
.LBB40_83:                              # %cond.false325
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB40_84:                              # %cond.end331
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB40_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB40_87
.LBB40_86:                              # %cond.false342
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-12(%rbp), %eax
.LBB40_87:                              # %cond.end343
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB40_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB40_90
.LBB40_89:                              # %cond.false355
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-16(%rbp), %eax
.LBB40_90:                              # %cond.end356
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB40_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB40_93
.LBB40_92:                              # %cond.false371
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-36(%rbp), %eax
.LBB40_93:                              # %cond.end372
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB40_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB40_96
.LBB40_95:                              # %cond.false387
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-44(%rbp), %eax
.LBB40_96:                              # %cond.end388
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB40_97:                              # %if.end395
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_153
.LBB40_98:                              # %if.else396
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB40_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB40_101
.LBB40_100:                             # %cond.false400
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB40_101:                             # %cond.end403
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB40_107
.LBB40_103:                             # %cond.false415
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB40_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB40_106
.LBB40_105:                             # %cond.false424
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB40_106:                             # %cond.end430
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_107:                             # %cond.end432
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB40_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB40_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_114
.LBB40_110:                             # %cond.false440
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB40_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_113
.LBB40_112:                             # %cond.false446
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB40_113:                             # %cond.end448
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_114:                             # %cond.end450
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB40_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_120
.LBB40_116:                             # %cond.false458
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB40_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_119
.LBB40_118:                             # %cond.false465
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB40_119:                             # %cond.end467
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_120:                             # %cond.end469
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB40_134
.LBB40_121:                             # %if.else473
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB40_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_127
.LBB40_123:                             # %cond.false478
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB40_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB40_126
.LBB40_125:                             # %cond.false484
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB40_126:                             # %cond.end486
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_127:                             # %cond.end488
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB40_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_133
.LBB40_129:                             # %cond.false496
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB40_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB40_132
.LBB40_131:                             # %cond.false503
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB40_132:                             # %cond.end505
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_133:                             # %cond.end507
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB40_134:                             # %if.end511
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB40_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB40_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB40_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB40_142
.LBB40_138:                             # %cond.false527
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB40_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB40_141
.LBB40_140:                             # %cond.false537
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB40_141:                             # %cond.end544
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_142:                             # %cond.end546
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB40_143:                             # %if.end554
                                        #   in Loop: Header=BB40_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB40_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB40_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB40_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB40_150
.LBB40_146:                             # %cond.false568
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB40_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB40_149
.LBB40_148:                             # %cond.false578
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB40_149:                             # %cond.end585
                                        #   in Loop: Header=BB40_7 Depth=1
.LBB40_150:                             # %cond.end587
                                        #   in Loop: Header=BB40_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB40_151:                             # %if.end594
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_152
.LBB40_152:                             # %if.end595
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_153
.LBB40_153:                             # %if.end596
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_154
.LBB40_154:                             # %if.end597
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_155
.LBB40_155:                             # %if.end598
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_156
.LBB40_156:                             # %if.end599
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_157
.LBB40_157:                             # %if.end600
                                        #   in Loop: Header=BB40_7 Depth=1
	jmp	.LBB40_158
.LBB40_158:                             # %for.inc
                                        #   in Loop: Header=BB40_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB40_7
.LBB40_159:                             # %for.end
	cmpl	$1926996919, -184(%rbp) # imm = 0x72DBA3B7
	jne	.LBB40_161
.LBB40_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_160
.Lfunc_end40:
	.size	EdgeLoop.37, .Lfunc_end40-EdgeLoop.37
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.38          # -- Begin function GetStrength.38
	.p2align	4, 0x90
	.type	GetStrength.38,@function
GetStrength.38:                         # @GetStrength.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1890532540, -140(%rbp) # imm = 0x70AF3CBC
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB41_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB41_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB41_5
.LBB41_4:                               # %cond.false
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB41_5:                               # %cond.end
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB41_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB41_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB41_9
.LBB41_8:                               # %cond.false15
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$1, %eax
	jmp	.LBB41_9
.LBB41_9:                               # %cond.end16
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_11
.LBB41_10:                              # %cond.false18
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-28(%rbp), %eax
.LBB41_11:                              # %cond.end19
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-132(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB41_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB41_25
.LBB41_13:                              # %if.then
                                        #   in Loop: Header=BB41_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB41_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB41_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB41_23
.LBB41_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB41_23
.LBB41_19:                              # %lor.rhs
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB41_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB41_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB41_22
.LBB41_21:                              # %land.rhs60
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_22:                              # %land.end
                                        #   in Loop: Header=BB41_1 Depth=1
.LBB41_23:                              # %lor.end
                                        #   in Loop: Header=BB41_1 Depth=1
.LBB41_24:                              # %land.end62
                                        #   in Loop: Header=BB41_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB41_79
.LBB41_25:                              # %if.else
                                        #   in Loop: Header=BB41_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB41_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB41_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB41_35
.LBB41_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB41_35
.LBB41_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB41_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB41_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB41_34
.LBB41_33:                              # %land.rhs92
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_34:                              # %land.end95
                                        #   in Loop: Header=BB41_1 Depth=1
.LBB41_35:                              # %lor.end96
                                        #   in Loop: Header=BB41_1 Depth=1
.LBB41_36:                              # %land.end97
                                        #   in Loop: Header=BB41_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB41_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB41_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB41_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB41_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB41_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB41_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB41_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB41_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB41_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-152(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB41_47
.LBB41_46:                              # %if.then144
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB41_77
.LBB41_47:                              # %if.else147
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB41_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB41_76
.LBB41_49:                              # %if.else152
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB41_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB41_52
.LBB41_51:                              # %cond.false169
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB41_52:                              # %cond.end174
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB41_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB41_55
.LBB41_54:                              # %cond.false184
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB41_55:                              # %cond.end189
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB41_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB41_58
.LBB41_57:                              # %cond.false199
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB41_58:                              # %cond.end204
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB41_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB41_61
.LBB41_60:                              # %cond.false214
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB41_61:                              # %cond.end219
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB41_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB41_65
.LBB41_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB41_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB41_74
.LBB41_65:                              # %if.then232
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB41_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB41_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB41_69
.LBB41_68:                              # %if.else309
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB41_69:                              # %if.end
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_73
.LBB41_70:                              # %if.else380
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB41_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB41_72:                              # %land.end518
                                        #   in Loop: Header=BB41_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB41_73:                              # %if.end522
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_75
.LBB41_74:                              # %if.else523
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB41_75:                              # %if.end526
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_76
.LBB41_76:                              # %if.end527
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_77
.LBB41_77:                              # %if.end528
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_78
.LBB41_78:                              # %if.end529
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_79
.LBB41_79:                              # %if.end530
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_80
.LBB41_80:                              # %for.inc
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_1
.LBB41_81:                              # %for.end
	cmpl	$1890532540, -140(%rbp) # imm = 0x70AF3CBC
	jne	.LBB41_83
.LBB41_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_82
.Lfunc_end41:
	.size	GetStrength.38, .Lfunc_end41-GetStrength.38
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.39             # -- Begin function EdgeLoop.39
	.p2align	4, 0x90
	.type	EdgeLoop.39,@function
EdgeLoop.39:                            # @EdgeLoop.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$409936322, -192(%rbp)  # imm = 0x186F21C2
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB42_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB42_3
.LBB42_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB42_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB42_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB42_6
.LBB42_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB42_6
.LBB42_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB42_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB42_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB42_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB42_11
.LBB42_10:                              # %cond.false8
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB42_11:                              # %cond.end10
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB42_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB42_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB42_15
.LBB42_14:                              # %cond.false17
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$1, %eax
	jmp	.LBB42_15
.LBB42_15:                              # %cond.end18
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_17
.LBB42_16:                              # %cond.false20
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %eax
.LBB42_17:                              # %cond.end21
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-152(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-152(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB42_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB42_19:                              # %lor.end
                                        #   in Loop: Header=BB42_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB42_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB42_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB42_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB42_25
.LBB42_24:                              # %cond.false47
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB42_25:                              # %cond.end49
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_27
.LBB42_26:                              # %cond.false51
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB42_27:                              # %cond.end52
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB42_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB42_157
.LBB42_29:                              # %if.then57
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB42_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB42_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB42_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB42_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB42_34
.LBB42_33:                              # %cond.false66
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
.LBB42_34:                              # %cond.end67
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_36
.LBB42_35:                              # %cond.false69
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$1, %eax
	jmp	.LBB42_36
.LBB42_36:                              # %cond.end70
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB42_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB42_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB42_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB42_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB42_41
.LBB42_40:                              # %cond.false81
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
.LBB42_41:                              # %cond.end82
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_43
.LBB42_42:                              # %cond.false84
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$1, %eax
	jmp	.LBB42_43
.LBB42_43:                              # %cond.end85
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB42_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB42_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_50
.LBB42_46:                              # %cond.false105
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB42_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %eax
	jmp	.LBB42_49
.LBB42_48:                              # %cond.false114
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB42_49:                              # %cond.end120
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_50:                              # %cond.end122
                                        #   in Loop: Header=BB42_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB42_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB42_56
.LBB42_52:                              # %cond.false135
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB42_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB42_55
.LBB42_54:                              # %cond.false144
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB42_55:                              # %cond.end150
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_56:                              # %cond.end152
                                        #   in Loop: Header=BB42_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB42_58
.LBB42_57:                              # %cond.false160
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB42_58:                              # %cond.end166
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_64
.LBB42_60:                              # %cond.false172
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB42_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %eax
	jmp	.LBB42_63
.LBB42_62:                              # %cond.false177
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB42_63:                              # %cond.end179
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_64:                              # %cond.end181
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB42_70
.LBB42_66:                              # %cond.false187
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB42_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB42_69
.LBB42_68:                              # %cond.false192
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB42_69:                              # %cond.end194
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_70:                              # %cond.end196
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -140(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB42_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB42_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB42_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB42_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB42_75:                              # %if.end271
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB42_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB42_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB42_97
.LBB42_78:                              # %if.else292
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-176(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-160(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB42_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_81
.LBB42_80:                              # %cond.false307
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB42_81:                              # %cond.end313
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB42_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_84
.LBB42_83:                              # %cond.false325
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB42_84:                              # %cond.end331
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB42_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB42_87
.LBB42_86:                              # %cond.false342
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
.LBB42_87:                              # %cond.end343
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB42_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB42_90
.LBB42_89:                              # %cond.false355
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-12(%rbp), %eax
.LBB42_90:                              # %cond.end356
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB42_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_93
.LBB42_92:                              # %cond.false371
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-44(%rbp), %eax
.LBB42_93:                              # %cond.end372
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB42_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_96
.LBB42_95:                              # %cond.false387
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
.LBB42_96:                              # %cond.end388
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB42_97:                              # %if.end395
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_153
.LBB42_98:                              # %if.else396
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB42_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB42_101
.LBB42_100:                             # %cond.false400
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB42_101:                             # %cond.end403
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB42_107
.LBB42_103:                             # %cond.false415
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB42_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB42_106
.LBB42_105:                             # %cond.false424
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB42_106:                             # %cond.end430
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_107:                             # %cond.end432
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB42_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_114
.LBB42_110:                             # %cond.false440
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_113
.LBB42_112:                             # %cond.false446
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB42_113:                             # %cond.end448
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_114:                             # %cond.end450
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_120
.LBB42_116:                             # %cond.false458
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_119
.LBB42_118:                             # %cond.false465
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB42_119:                             # %cond.end467
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_120:                             # %cond.end469
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB42_134
.LBB42_121:                             # %if.else473
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_127
.LBB42_123:                             # %cond.false478
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB42_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_126
.LBB42_125:                             # %cond.false484
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB42_126:                             # %cond.end486
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_127:                             # %cond.end488
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_133
.LBB42_129:                             # %cond.false496
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB42_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_132
.LBB42_131:                             # %cond.false503
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB42_132:                             # %cond.end505
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_133:                             # %cond.end507
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB42_134:                             # %if.end511
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB42_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB42_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB42_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB42_142
.LBB42_138:                             # %cond.false527
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB42_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB42_141
.LBB42_140:                             # %cond.false537
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB42_141:                             # %cond.end544
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_142:                             # %cond.end546
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB42_143:                             # %if.end554
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB42_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB42_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB42_150
.LBB42_146:                             # %cond.false568
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB42_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB42_149
.LBB42_148:                             # %cond.false578
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB42_149:                             # %cond.end585
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_150:                             # %cond.end587
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB42_151:                             # %if.end594
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_152
.LBB42_152:                             # %if.end595
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_153
.LBB42_153:                             # %if.end596
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_154
.LBB42_154:                             # %if.end597
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_155
.LBB42_155:                             # %if.end598
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_156
.LBB42_156:                             # %if.end599
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_157
.LBB42_157:                             # %if.end600
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_158
.LBB42_158:                             # %for.inc
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB42_7
.LBB42_159:                             # %for.end
	cmpl	$409936322, -192(%rbp)  # imm = 0x186F21C2
	jne	.LBB42_161
.LBB42_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_160
.Lfunc_end42:
	.size	EdgeLoop.39, .Lfunc_end42-EdgeLoop.39
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.40         # -- Begin function DeblockFrame.40
	.p2align	4, 0x90
	.type	DeblockFrame.40,@function
DeblockFrame.40:                        # @DeblockFrame.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$645892025, -8(%rbp)    # imm = 0x267F87B9
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB43_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_1
.LBB43_4:                               # %for.end
	cmpl	$645892025, -8(%rbp)    # imm = 0x267F87B9
	jne	.LBB43_6
.LBB43_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_5
.Lfunc_end43:
	.size	DeblockFrame.40, .Lfunc_end43-DeblockFrame.40
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.41             # -- Begin function EdgeLoop.41
	.p2align	4, 0x90
	.type	EdgeLoop.41,@function
EdgeLoop.41:                            # @EdgeLoop.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$997104748, -188(%rbp)  # imm = 0x3B6E9C6C
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB44_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB44_3
.LBB44_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB44_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB44_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB44_6
.LBB44_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB44_6
.LBB44_6:                               # %cond.end
	movl	%eax, -168(%rbp)
	movl	$0, -60(%rbp)
.LBB44_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-168(%rbp), %eax
	jge	.LBB44_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB44_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB44_11
.LBB44_10:                              # %cond.false8
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB44_11:                              # %cond.end10
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB44_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB44_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB44_15
.LBB44_14:                              # %cond.false17
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$1, %eax
	jmp	.LBB44_15
.LBB44_15:                              # %cond.end18
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_17
.LBB44_16:                              # %cond.false20
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-60(%rbp), %eax
.LBB44_17:                              # %cond.end21
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-136(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB44_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB44_19:                              # %lor.end
                                        #   in Loop: Header=BB44_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB44_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$8, -168(%rbp)
	jne	.LBB44_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB44_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB44_25
.LBB44_24:                              # %cond.false47
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB44_25:                              # %cond.end49
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_27
.LBB44_26:                              # %cond.false51
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB44_27:                              # %cond.end52
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB44_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB44_157
.LBB44_29:                              # %if.then57
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB44_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB44_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB44_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB44_34
.LBB44_33:                              # %cond.false66
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	32(%rbp), %eax
.LBB44_34:                              # %cond.end67
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_36
.LBB44_35:                              # %cond.false69
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$1, %eax
	jmp	.LBB44_36
.LBB44_36:                              # %cond.end70
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB44_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB44_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB44_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB44_41
.LBB44_40:                              # %cond.false81
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	32(%rbp), %eax
.LBB44_41:                              # %cond.end82
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_43
.LBB44_42:                              # %cond.false84
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$1, %eax
	jmp	.LBB44_43
.LBB44_43:                              # %cond.end85
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB44_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB44_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_50
.LBB44_46:                              # %cond.false105
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB44_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$51, %eax
	jmp	.LBB44_49
.LBB44_48:                              # %cond.false114
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB44_49:                              # %cond.end120
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_50:                              # %cond.end122
                                        #   in Loop: Header=BB44_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB44_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB44_56
.LBB44_52:                              # %cond.false135
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB44_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB44_55
.LBB44_54:                              # %cond.false144
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB44_55:                              # %cond.end150
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_56:                              # %cond.end152
                                        #   in Loop: Header=BB44_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB44_58
.LBB44_57:                              # %cond.false160
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB44_58:                              # %cond.end166
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_64
.LBB44_60:                              # %cond.false172
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB44_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$51, %eax
	jmp	.LBB44_63
.LBB44_62:                              # %cond.false177
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB44_63:                              # %cond.end179
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_64:                              # %cond.end181
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB44_70
.LBB44_66:                              # %cond.false187
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB44_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB44_69
.LBB44_68:                              # %cond.false192
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB44_69:                              # %cond.end194
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_70:                              # %cond.end196
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -184(%rbp)
	movslq	-172(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-184(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-172(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-96(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB44_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB44_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB44_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB44_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB44_75:                              # %if.end271
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB44_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB44_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB44_97
.LBB44_78:                              # %if.else292
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB44_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB44_81
.LBB44_80:                              # %cond.false307
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB44_81:                              # %cond.end313
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB44_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB44_84
.LBB44_83:                              # %cond.false325
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB44_84:                              # %cond.end331
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB44_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB44_87
.LBB44_86:                              # %cond.false342
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-12(%rbp), %eax
.LBB44_87:                              # %cond.end343
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB44_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB44_90
.LBB44_89:                              # %cond.false355
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-16(%rbp), %eax
.LBB44_90:                              # %cond.end356
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB44_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB44_93
.LBB44_92:                              # %cond.false371
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-32(%rbp), %eax
.LBB44_93:                              # %cond.end372
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB44_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB44_96
.LBB44_95:                              # %cond.false387
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-36(%rbp), %eax
.LBB44_96:                              # %cond.end388
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB44_97:                              # %if.end395
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_153
.LBB44_98:                              # %if.else396
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB44_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB44_101
.LBB44_100:                             # %cond.false400
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB44_101:                             # %cond.end403
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB44_107
.LBB44_103:                             # %cond.false415
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB44_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB44_106
.LBB44_105:                             # %cond.false424
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB44_106:                             # %cond.end430
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_107:                             # %cond.end432
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB44_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_114
.LBB44_110:                             # %cond.false440
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB44_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_113
.LBB44_112:                             # %cond.false446
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB44_113:                             # %cond.end448
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_114:                             # %cond.end450
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_120
.LBB44_116:                             # %cond.false458
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB44_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_119
.LBB44_118:                             # %cond.false465
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB44_119:                             # %cond.end467
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_120:                             # %cond.end469
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB44_134
.LBB44_121:                             # %if.else473
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_127
.LBB44_123:                             # %cond.false478
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB44_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB44_126
.LBB44_125:                             # %cond.false484
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB44_126:                             # %cond.end486
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_127:                             # %cond.end488
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_133
.LBB44_129:                             # %cond.false496
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB44_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB44_132
.LBB44_131:                             # %cond.false503
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB44_132:                             # %cond.end505
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_133:                             # %cond.end507
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB44_134:                             # %if.end511
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB44_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB44_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB44_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB44_142
.LBB44_138:                             # %cond.false527
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB44_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB44_141
.LBB44_140:                             # %cond.false537
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB44_141:                             # %cond.end544
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_142:                             # %cond.end546
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB44_143:                             # %if.end554
                                        #   in Loop: Header=BB44_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB44_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB44_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB44_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB44_150
.LBB44_146:                             # %cond.false568
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB44_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB44_149
.LBB44_148:                             # %cond.false578
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB44_149:                             # %cond.end585
                                        #   in Loop: Header=BB44_7 Depth=1
.LBB44_150:                             # %cond.end587
                                        #   in Loop: Header=BB44_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB44_151:                             # %if.end594
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_152
.LBB44_152:                             # %if.end595
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_153
.LBB44_153:                             # %if.end596
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_154
.LBB44_154:                             # %if.end597
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_155
.LBB44_155:                             # %if.end598
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_156
.LBB44_156:                             # %if.end599
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_157
.LBB44_157:                             # %if.end600
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_158
.LBB44_158:                             # %for.inc
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB44_7
.LBB44_159:                             # %for.end
	cmpl	$997104748, -188(%rbp)  # imm = 0x3B6E9C6C
	jne	.LBB44_161
.LBB44_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_160
.Lfunc_end44:
	.size	EdgeLoop.41, .Lfunc_end44-EdgeLoop.41
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.42          # -- Begin function GetStrength.42
	.p2align	4, 0x90
	.type	GetStrength.42,@function
GetStrength.42:                         # @GetStrength.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$856513786, -136(%rbp)  # imm = 0x330D5CFA
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB45_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB45_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB45_5
.LBB45_4:                               # %cond.false
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB45_5:                               # %cond.end
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB45_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB45_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB45_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB45_9
.LBB45_8:                               # %cond.false15
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$1, %eax
	jmp	.LBB45_9
.LBB45_9:                               # %cond.end16
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_11
.LBB45_10:                              # %cond.false18
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-28(%rbp), %eax
.LBB45_11:                              # %cond.end19
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-140(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB45_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB45_25
.LBB45_13:                              # %if.then
                                        #   in Loop: Header=BB45_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB45_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB45_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB45_23
.LBB45_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB45_23
.LBB45_19:                              # %lor.rhs
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB45_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB45_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB45_22
.LBB45_21:                              # %land.rhs60
                                        #   in Loop: Header=BB45_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_22:                              # %land.end
                                        #   in Loop: Header=BB45_1 Depth=1
.LBB45_23:                              # %lor.end
                                        #   in Loop: Header=BB45_1 Depth=1
.LBB45_24:                              # %land.end62
                                        #   in Loop: Header=BB45_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB45_79
.LBB45_25:                              # %if.else
                                        #   in Loop: Header=BB45_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB45_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB45_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB45_35
.LBB45_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB45_35
.LBB45_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB45_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB45_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB45_34
.LBB45_33:                              # %land.rhs92
                                        #   in Loop: Header=BB45_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB45_34:                              # %land.end95
                                        #   in Loop: Header=BB45_1 Depth=1
.LBB45_35:                              # %lor.end96
                                        #   in Loop: Header=BB45_1 Depth=1
.LBB45_36:                              # %land.end97
                                        #   in Loop: Header=BB45_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB45_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB45_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB45_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB45_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB45_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB45_47
.LBB45_46:                              # %if.then144
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB45_77
.LBB45_47:                              # %if.else147
                                        #   in Loop: Header=BB45_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB45_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB45_76
.LBB45_49:                              # %if.else152
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-152(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB45_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB45_52
.LBB45_51:                              # %cond.false169
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB45_52:                              # %cond.end174
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB45_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB45_55
.LBB45_54:                              # %cond.false184
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB45_55:                              # %cond.end189
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB45_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB45_58
.LBB45_57:                              # %cond.false199
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB45_58:                              # %cond.end204
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB45_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB45_61
.LBB45_60:                              # %cond.false214
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB45_61:                              # %cond.end219
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB45_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB45_65
.LBB45_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB45_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB45_74
.LBB45_65:                              # %if.then232
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB45_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB45_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB45_69
.LBB45_68:                              # %if.else309
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB45_69:                              # %if.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_73
.LBB45_70:                              # %if.else380
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB45_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB45_72:                              # %land.end518
                                        #   in Loop: Header=BB45_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB45_73:                              # %if.end522
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_75
.LBB45_74:                              # %if.else523
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB45_75:                              # %if.end526
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_76
.LBB45_76:                              # %if.end527
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_77
.LBB45_77:                              # %if.end528
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_78
.LBB45_78:                              # %if.end529
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_79
.LBB45_79:                              # %if.end530
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_80
.LBB45_80:                              # %for.inc
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_1
.LBB45_81:                              # %for.end
	cmpl	$856513786, -136(%rbp)  # imm = 0x330D5CFA
	jne	.LBB45_83
.LBB45_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_82
.Lfunc_end45:
	.size	GetStrength.42, .Lfunc_end45-GetStrength.42
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.43          # -- Begin function GetStrength.43
	.p2align	4, 0x90
	.type	GetStrength.43,@function
GetStrength.43:                         # @GetStrength.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$960783089, -148(%rbp)  # imm = 0x394462F1
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB46_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB46_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB46_5
.LBB46_4:                               # %cond.false
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB46_5:                               # %cond.end
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB46_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB46_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB46_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB46_9
.LBB46_8:                               # %cond.false15
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$1, %eax
	jmp	.LBB46_9
.LBB46_9:                               # %cond.end16
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_11
.LBB46_10:                              # %cond.false18
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-28(%rbp), %eax
.LBB46_11:                              # %cond.end19
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB46_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB46_25
.LBB46_13:                              # %if.then
                                        #   in Loop: Header=BB46_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB46_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB46_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB46_23
.LBB46_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB46_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB46_23
.LBB46_19:                              # %lor.rhs
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB46_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB46_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB46_22
.LBB46_21:                              # %land.rhs60
                                        #   in Loop: Header=BB46_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_22:                              # %land.end
                                        #   in Loop: Header=BB46_1 Depth=1
.LBB46_23:                              # %lor.end
                                        #   in Loop: Header=BB46_1 Depth=1
.LBB46_24:                              # %land.end62
                                        #   in Loop: Header=BB46_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB46_79
.LBB46_25:                              # %if.else
                                        #   in Loop: Header=BB46_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB46_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB46_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB46_35
.LBB46_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB46_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB46_35
.LBB46_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB46_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB46_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB46_34
.LBB46_33:                              # %land.rhs92
                                        #   in Loop: Header=BB46_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_34:                              # %land.end95
                                        #   in Loop: Header=BB46_1 Depth=1
.LBB46_35:                              # %lor.end96
                                        #   in Loop: Header=BB46_1 Depth=1
.LBB46_36:                              # %land.end97
                                        #   in Loop: Header=BB46_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB46_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB46_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB46_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB46_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB46_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB46_47
.LBB46_46:                              # %if.then144
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB46_77
.LBB46_47:                              # %if.else147
                                        #   in Loop: Header=BB46_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB46_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB46_76
.LBB46_49:                              # %if.else152
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB46_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB46_52
.LBB46_51:                              # %cond.false169
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB46_52:                              # %cond.end174
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB46_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB46_55
.LBB46_54:                              # %cond.false184
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB46_55:                              # %cond.end189
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB46_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB46_58
.LBB46_57:                              # %cond.false199
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB46_58:                              # %cond.end204
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB46_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB46_61
.LBB46_60:                              # %cond.false214
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB46_61:                              # %cond.end219
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB46_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB46_65
.LBB46_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB46_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB46_74
.LBB46_65:                              # %if.then232
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB46_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB46_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB46_69
.LBB46_68:                              # %if.else309
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB46_69:                              # %if.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_73
.LBB46_70:                              # %if.else380
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB46_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB46_72:                              # %land.end518
                                        #   in Loop: Header=BB46_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB46_73:                              # %if.end522
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_75
.LBB46_74:                              # %if.else523
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB46_75:                              # %if.end526
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_76
.LBB46_76:                              # %if.end527
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_77
.LBB46_77:                              # %if.end528
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_78
.LBB46_78:                              # %if.end529
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_79
.LBB46_79:                              # %if.end530
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_80
.LBB46_80:                              # %for.inc
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB46_1
.LBB46_81:                              # %for.end
	cmpl	$960783089, -148(%rbp)  # imm = 0x394462F1
	jne	.LBB46_83
.LBB46_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_82
.Lfunc_end46:
	.size	GetStrength.43, .Lfunc_end46-GetStrength.43
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.44          # -- Begin function GetStrength.44
	.p2align	4, 0x90
	.type	GetStrength.44,@function
GetStrength.44:                         # @GetStrength.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$783457911, -136(%rbp)  # imm = 0x2EB29E77
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB47_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB47_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB47_5
.LBB47_4:                               # %cond.false
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB47_5:                               # %cond.end
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB47_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB47_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB47_9
.LBB47_8:                               # %cond.false15
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$1, %eax
	jmp	.LBB47_9
.LBB47_9:                               # %cond.end16
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_11
.LBB47_10:                              # %cond.false18
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-28(%rbp), %eax
.LBB47_11:                              # %cond.end19
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB47_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB47_25
.LBB47_13:                              # %if.then
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB47_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB47_23
.LBB47_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB47_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB47_23
.LBB47_19:                              # %lor.rhs
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB47_22
.LBB47_21:                              # %land.rhs60
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_22:                              # %land.end
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_23:                              # %lor.end
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_24:                              # %land.end62
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB47_79
.LBB47_25:                              # %if.else
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB47_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB47_35
.LBB47_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB47_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB47_35
.LBB47_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB47_34
.LBB47_33:                              # %land.rhs92
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_34:                              # %land.end95
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_35:                              # %lor.end96
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_36:                              # %land.end97
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB47_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB47_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB47_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB47_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB47_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB47_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB47_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB47_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB47_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB47_47
.LBB47_46:                              # %if.then144
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB47_77
.LBB47_47:                              # %if.else147
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB47_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB47_76
.LBB47_49:                              # %if.else152
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_52
.LBB47_51:                              # %cond.false169
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_52:                              # %cond.end174
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_55
.LBB47_54:                              # %cond.false184
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_55:                              # %cond.end189
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_58
.LBB47_57:                              # %cond.false199
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_58:                              # %cond.end204
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_61
.LBB47_60:                              # %cond.false214
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_61:                              # %cond.end219
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB47_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB47_65
.LBB47_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB47_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB47_74
.LBB47_65:                              # %if.then232
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB47_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB47_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB47_69
.LBB47_68:                              # %if.else309
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB47_69:                              # %if.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_73
.LBB47_70:                              # %if.else380
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB47_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB47_72:                              # %land.end518
                                        #   in Loop: Header=BB47_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB47_73:                              # %if.end522
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_75
.LBB47_74:                              # %if.else523
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB47_75:                              # %if.end526
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_76
.LBB47_76:                              # %if.end527
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_77
.LBB47_77:                              # %if.end528
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_78
.LBB47_78:                              # %if.end529
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_79
.LBB47_79:                              # %if.end530
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_80
.LBB47_80:                              # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_1
.LBB47_81:                              # %for.end
	cmpl	$783457911, -136(%rbp)  # imm = 0x2EB29E77
	jne	.LBB47_83
.LBB47_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_82
.Lfunc_end47:
	.size	GetStrength.44, .Lfunc_end47-GetStrength.44
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.45            # -- Begin function DeblockMb.45
	.p2align	4, 0x90
	.type	DeblockMb.45,@function
DeblockMb.45:                           # @DeblockMb.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1174982439, -100(%rbp) # imm = 0x4608CF27
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB48_2
# %bb.1:                                # %if.then
	jmp	.LBB48_2
.LBB48_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB48_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB48_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB48_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB48_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB48_9:                               # %land.end
.LBB48_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB48_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB48_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB48_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB48_61
.LBB48_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB48_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB48_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB48_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB48_20
.LBB48_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB48_20:                              # %if.end40
	jmp	.LBB48_21
.LBB48_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB48_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_29 Depth 2
                                        #       Child Loop BB48_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB48_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB48_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB48_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB48_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB48_28
.LBB48_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB48_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB48_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB48_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB48_27:                              # %land.end51
                                        #   in Loop: Header=BB48_22 Depth=1
.LBB48_28:                              # %lor.end52
                                        #   in Loop: Header=BB48_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB48_29:                              # %for.cond54
                                        #   Parent Loop BB48_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB48_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB48_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB48_56
.LBB48_32:                              # %if.then60
                                        #   in Loop: Header=BB48_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB48_33:                              # %for.cond70
                                        #   Parent Loop BB48_22 Depth=1
                                        #     Parent Loop BB48_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB48_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB48_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB48_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB48_33
.LBB48_36:                              # %for.end
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB48_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB48_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB48_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB48_39:                              # %if.end84
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB48_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB48_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB48_42:                              # %if.end100
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_43
.LBB48_43:                              # %if.end101
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB48_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB48_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB48_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB48_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB48_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB48_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB48_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB48_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB48_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB48_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB48_50:                              # %if.end125
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB48_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB48_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB48_53:                              # %if.end142
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_54
.LBB48_54:                              # %if.end143
                                        #   in Loop: Header=BB48_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB48_55:                              # %if.end145
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_56
.LBB48_56:                              # %if.end146
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_57
.LBB48_57:                              # %for.inc147
                                        #   in Loop: Header=BB48_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_29
.LBB48_58:                              # %for.end149
                                        #   in Loop: Header=BB48_22 Depth=1
	jmp	.LBB48_59
.LBB48_59:                              # %for.inc150
                                        #   in Loop: Header=BB48_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_22
.LBB48_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB48_61:                              # %return
	cmpl	$1174982439, -100(%rbp) # imm = 0x4608CF27
	jne	.LBB48_63
.LBB48_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_62
.Lfunc_end48:
	.size	DeblockMb.45, .Lfunc_end48-DeblockMb.45
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.46          # -- Begin function GetStrength.46
	.p2align	4, 0x90
	.type	GetStrength.46,@function
GetStrength.46:                         # @GetStrength.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1568596460, -132(%rbp) # imm = 0x5D7EE1EC
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB49_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB49_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB49_5
.LBB49_4:                               # %cond.false
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB49_5:                               # %cond.end
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB49_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB49_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB49_9
.LBB49_8:                               # %cond.false15
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$1, %eax
	jmp	.LBB49_9
.LBB49_9:                               # %cond.end16
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_11
.LBB49_10:                              # %cond.false18
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-28(%rbp), %eax
.LBB49_11:                              # %cond.end19
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB49_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB49_25
.LBB49_13:                              # %if.then
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB49_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB49_23
.LBB49_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB49_23
.LBB49_19:                              # %lor.rhs
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB49_22
.LBB49_21:                              # %land.rhs60
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_22:                              # %land.end
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_23:                              # %lor.end
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_24:                              # %land.end62
                                        #   in Loop: Header=BB49_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB49_79
.LBB49_25:                              # %if.else
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB49_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB49_35
.LBB49_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB49_35
.LBB49_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB49_34
.LBB49_33:                              # %land.rhs92
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_34:                              # %land.end95
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_35:                              # %lor.end96
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_36:                              # %land.end97
                                        #   in Loop: Header=BB49_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB49_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB49_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB49_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB49_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB49_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB49_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB49_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB49_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB49_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB49_47
.LBB49_46:                              # %if.then144
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB49_77
.LBB49_47:                              # %if.else147
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB49_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB49_76
.LBB49_49:                              # %if.else152
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_52
.LBB49_51:                              # %cond.false169
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_52:                              # %cond.end174
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_55
.LBB49_54:                              # %cond.false184
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_55:                              # %cond.end189
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_58
.LBB49_57:                              # %cond.false199
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_58:                              # %cond.end204
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_61
.LBB49_60:                              # %cond.false214
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_61:                              # %cond.end219
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB49_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB49_65
.LBB49_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB49_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB49_74
.LBB49_65:                              # %if.then232
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB49_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB49_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB49_69
.LBB49_68:                              # %if.else309
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB49_69:                              # %if.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_73
.LBB49_70:                              # %if.else380
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB49_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB49_72:                              # %land.end518
                                        #   in Loop: Header=BB49_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB49_73:                              # %if.end522
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_75
.LBB49_74:                              # %if.else523
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB49_75:                              # %if.end526
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_76
.LBB49_76:                              # %if.end527
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_77
.LBB49_77:                              # %if.end528
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_78
.LBB49_78:                              # %if.end529
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_79
.LBB49_79:                              # %if.end530
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_80
.LBB49_80:                              # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_1
.LBB49_81:                              # %for.end
	cmpl	$1568596460, -132(%rbp) # imm = 0x5D7EE1EC
	jne	.LBB49_83
.LBB49_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_82
.Lfunc_end49:
	.size	GetStrength.46, .Lfunc_end49-GetStrength.46
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.47            # -- Begin function DeblockMb.47
	.p2align	4, 0x90
	.type	DeblockMb.47,@function
DeblockMb.47:                           # @DeblockMb.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1920354162, -104(%rbp) # imm = 0x72764772
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB50_2
# %bb.1:                                # %if.then
	jmp	.LBB50_2
.LBB50_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB50_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB50_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB50_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB50_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB50_9:                               # %land.end
.LBB50_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB50_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB50_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB50_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB50_61
.LBB50_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB50_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB50_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB50_20
.LBB50_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB50_20:                              # %if.end40
	jmp	.LBB50_21
.LBB50_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB50_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_29 Depth 2
                                        #       Child Loop BB50_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB50_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB50_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB50_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB50_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB50_28
.LBB50_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB50_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB50_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB50_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB50_27:                              # %land.end51
                                        #   in Loop: Header=BB50_22 Depth=1
.LBB50_28:                              # %lor.end52
                                        #   in Loop: Header=BB50_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB50_29:                              # %for.cond54
                                        #   Parent Loop BB50_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB50_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB50_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB50_56
.LBB50_32:                              # %if.then60
                                        #   in Loop: Header=BB50_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB50_33:                              # %for.cond70
                                        #   Parent Loop BB50_22 Depth=1
                                        #     Parent Loop BB50_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB50_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB50_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB50_33
.LBB50_36:                              # %for.end
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB50_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB50_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB50_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB50_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB50_39:                              # %if.end84
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB50_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB50_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB50_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB50_42:                              # %if.end100
                                        #   in Loop: Header=BB50_29 Depth=2
	jmp	.LBB50_43
.LBB50_43:                              # %if.end101
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB50_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB50_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB50_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB50_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB50_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB50_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB50_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB50_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB50_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB50_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB50_50:                              # %if.end125
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB50_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB50_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB50_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB50_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB50_53:                              # %if.end142
                                        #   in Loop: Header=BB50_29 Depth=2
	jmp	.LBB50_54
.LBB50_54:                              # %if.end143
                                        #   in Loop: Header=BB50_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB50_55:                              # %if.end145
                                        #   in Loop: Header=BB50_29 Depth=2
	jmp	.LBB50_56
.LBB50_56:                              # %if.end146
                                        #   in Loop: Header=BB50_29 Depth=2
	jmp	.LBB50_57
.LBB50_57:                              # %for.inc147
                                        #   in Loop: Header=BB50_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB50_29
.LBB50_58:                              # %for.end149
                                        #   in Loop: Header=BB50_22 Depth=1
	jmp	.LBB50_59
.LBB50_59:                              # %for.inc150
                                        #   in Loop: Header=BB50_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_22
.LBB50_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB50_61:                              # %return
	cmpl	$1920354162, -104(%rbp) # imm = 0x72764772
	jne	.LBB50_63
.LBB50_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_62
.Lfunc_end50:
	.size	DeblockMb.47, .Lfunc_end50-DeblockMb.47
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.48             # -- Begin function EdgeLoop.48
	.p2align	4, 0x90
	.type	EdgeLoop.48,@function
EdgeLoop.48:                            # @EdgeLoop.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1364754524, -196(%rbp) # imm = 0x5158805C
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB51_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB51_3
.LBB51_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB51_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB51_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB51_6
.LBB51_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB51_6
.LBB51_6:                               # %cond.end
	movl	%eax, -164(%rbp)
	movl	$0, -60(%rbp)
.LBB51_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-164(%rbp), %eax
	jge	.LBB51_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB51_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB51_11
.LBB51_10:                              # %cond.false8
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB51_11:                              # %cond.end10
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB51_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB51_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB51_15
.LBB51_14:                              # %cond.false17
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	$1, %eax
	jmp	.LBB51_15
.LBB51_15:                              # %cond.end18
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_17
.LBB51_16:                              # %cond.false20
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-60(%rbp), %eax
.LBB51_17:                              # %cond.end21
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-160(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-160(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB51_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB51_19:                              # %lor.end
                                        #   in Loop: Header=BB51_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB51_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$8, -164(%rbp)
	jne	.LBB51_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB51_25
.LBB51_24:                              # %cond.false47
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB51_25:                              # %cond.end49
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_27
.LBB51_26:                              # %cond.false51
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB51_27:                              # %cond.end52
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB51_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB51_157
.LBB51_29:                              # %if.then57
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB51_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB51_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB51_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB51_34
.LBB51_33:                              # %cond.false66
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	32(%rbp), %eax
.LBB51_34:                              # %cond.end67
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_36
.LBB51_35:                              # %cond.false69
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	$1, %eax
	jmp	.LBB51_36
.LBB51_36:                              # %cond.end70
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB51_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB51_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB51_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB51_41
.LBB51_40:                              # %cond.false81
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	32(%rbp), %eax
.LBB51_41:                              # %cond.end82
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_43
.LBB51_42:                              # %cond.false84
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	$1, %eax
	jmp	.LBB51_43
.LBB51_43:                              # %cond.end85
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB51_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB51_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_50
.LBB51_46:                              # %cond.false105
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB51_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	$51, %eax
	jmp	.LBB51_49
.LBB51_48:                              # %cond.false114
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB51_49:                              # %cond.end120
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_50:                              # %cond.end122
                                        #   in Loop: Header=BB51_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB51_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB51_56
.LBB51_52:                              # %cond.false135
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB51_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB51_55
.LBB51_54:                              # %cond.false144
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB51_55:                              # %cond.end150
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_56:                              # %cond.end152
                                        #   in Loop: Header=BB51_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB51_58
.LBB51_57:                              # %cond.false160
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB51_58:                              # %cond.end166
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_64
.LBB51_60:                              # %cond.false172
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB51_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	$51, %eax
	jmp	.LBB51_63
.LBB51_62:                              # %cond.false177
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB51_63:                              # %cond.end179
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_64:                              # %cond.end181
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB51_70
.LBB51_66:                              # %cond.false187
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB51_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB51_69
.LBB51_68:                              # %cond.false192
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB51_69:                              # %cond.end194
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_70:                              # %cond.end196
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB51_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB51_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB51_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB51_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB51_75:                              # %if.end271
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB51_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB51_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB51_97
.LBB51_78:                              # %if.else292
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-156(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB51_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB51_81
.LBB51_80:                              # %cond.false307
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB51_81:                              # %cond.end313
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB51_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB51_84
.LBB51_83:                              # %cond.false325
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB51_84:                              # %cond.end331
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB51_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB51_87
.LBB51_86:                              # %cond.false342
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-16(%rbp), %eax
.LBB51_87:                              # %cond.end343
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB51_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB51_90
.LBB51_89:                              # %cond.false355
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-12(%rbp), %eax
.LBB51_90:                              # %cond.end356
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB51_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB51_93
.LBB51_92:                              # %cond.false371
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-40(%rbp), %eax
.LBB51_93:                              # %cond.end372
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB51_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB51_96
.LBB51_95:                              # %cond.false387
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-32(%rbp), %eax
.LBB51_96:                              # %cond.end388
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB51_97:                              # %if.end395
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_153
.LBB51_98:                              # %if.else396
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB51_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB51_101
.LBB51_100:                             # %cond.false400
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB51_101:                             # %cond.end403
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB51_107
.LBB51_103:                             # %cond.false415
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB51_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB51_106
.LBB51_105:                             # %cond.false424
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB51_106:                             # %cond.end430
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_107:                             # %cond.end432
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB51_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_114
.LBB51_110:                             # %cond.false440
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_113
.LBB51_112:                             # %cond.false446
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB51_113:                             # %cond.end448
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_114:                             # %cond.end450
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_120
.LBB51_116:                             # %cond.false458
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_119
.LBB51_118:                             # %cond.false465
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB51_119:                             # %cond.end467
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_120:                             # %cond.end469
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB51_134
.LBB51_121:                             # %if.else473
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_127
.LBB51_123:                             # %cond.false478
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB51_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB51_126
.LBB51_125:                             # %cond.false484
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB51_126:                             # %cond.end486
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_127:                             # %cond.end488
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_133
.LBB51_129:                             # %cond.false496
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB51_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB51_132
.LBB51_131:                             # %cond.false503
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB51_132:                             # %cond.end505
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_133:                             # %cond.end507
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB51_134:                             # %if.end511
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB51_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB51_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB51_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB51_142
.LBB51_138:                             # %cond.false527
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB51_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB51_141
.LBB51_140:                             # %cond.false537
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB51_141:                             # %cond.end544
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_142:                             # %cond.end546
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB51_143:                             # %if.end554
                                        #   in Loop: Header=BB51_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB51_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB51_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB51_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB51_150
.LBB51_146:                             # %cond.false568
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB51_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB51_149
.LBB51_148:                             # %cond.false578
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB51_149:                             # %cond.end585
                                        #   in Loop: Header=BB51_7 Depth=1
.LBB51_150:                             # %cond.end587
                                        #   in Loop: Header=BB51_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB51_151:                             # %if.end594
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_152
.LBB51_152:                             # %if.end595
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_153
.LBB51_153:                             # %if.end596
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_154
.LBB51_154:                             # %if.end597
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_155
.LBB51_155:                             # %if.end598
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_156
.LBB51_156:                             # %if.end599
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_157
.LBB51_157:                             # %if.end600
                                        #   in Loop: Header=BB51_7 Depth=1
	jmp	.LBB51_158
.LBB51_158:                             # %for.inc
                                        #   in Loop: Header=BB51_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB51_7
.LBB51_159:                             # %for.end
	cmpl	$1364754524, -196(%rbp) # imm = 0x5158805C
	jne	.LBB51_161
.LBB51_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_160
.Lfunc_end51:
	.size	EdgeLoop.48, .Lfunc_end51-EdgeLoop.48
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.49            # -- Begin function DeblockMb.49
	.p2align	4, 0x90
	.type	DeblockMb.49,@function
DeblockMb.49:                           # @DeblockMb.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$676257328, -108(%rbp)  # imm = 0x284EDE30
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB52_2
# %bb.1:                                # %if.then
	jmp	.LBB52_2
.LBB52_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB52_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB52_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB52_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB52_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB52_9:                               # %land.end
.LBB52_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB52_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB52_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB52_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB52_61
.LBB52_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB52_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB52_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB52_20
.LBB52_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB52_20:                              # %if.end40
	jmp	.LBB52_21
.LBB52_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB52_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_29 Depth 2
                                        #       Child Loop BB52_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB52_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB52_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB52_28
.LBB52_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB52_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB52_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB52_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB52_27:                              # %land.end51
                                        #   in Loop: Header=BB52_22 Depth=1
.LBB52_28:                              # %lor.end52
                                        #   in Loop: Header=BB52_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB52_29:                              # %for.cond54
                                        #   Parent Loop BB52_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB52_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB52_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB52_56
.LBB52_32:                              # %if.then60
                                        #   in Loop: Header=BB52_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -44(%rbp)
.LBB52_33:                              # %for.cond70
                                        #   Parent Loop BB52_22 Depth=1
                                        #     Parent Loop BB52_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB52_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB52_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB52_33
.LBB52_36:                              # %for.end
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB52_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB52_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB52_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB52_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB52_39:                              # %if.end84
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB52_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB52_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB52_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB52_42:                              # %if.end100
                                        #   in Loop: Header=BB52_29 Depth=2
	jmp	.LBB52_43
.LBB52_43:                              # %if.end101
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB52_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB52_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB52_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB52_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB52_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB52_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB52_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB52_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB52_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB52_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB52_50:                              # %if.end125
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB52_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB52_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB52_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB52_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB52_53:                              # %if.end142
                                        #   in Loop: Header=BB52_29 Depth=2
	jmp	.LBB52_54
.LBB52_54:                              # %if.end143
                                        #   in Loop: Header=BB52_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB52_55:                              # %if.end145
                                        #   in Loop: Header=BB52_29 Depth=2
	jmp	.LBB52_56
.LBB52_56:                              # %if.end146
                                        #   in Loop: Header=BB52_29 Depth=2
	jmp	.LBB52_57
.LBB52_57:                              # %for.inc147
                                        #   in Loop: Header=BB52_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_29
.LBB52_58:                              # %for.end149
                                        #   in Loop: Header=BB52_22 Depth=1
	jmp	.LBB52_59
.LBB52_59:                              # %for.inc150
                                        #   in Loop: Header=BB52_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_22
.LBB52_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB52_61:                              # %return
	cmpl	$676257328, -108(%rbp)  # imm = 0x284EDE30
	jne	.LBB52_63
.LBB52_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_62
.Lfunc_end52:
	.size	DeblockMb.49, .Lfunc_end52-DeblockMb.49
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.50         # -- Begin function DeblockFrame.50
	.p2align	4, 0x90
	.type	DeblockFrame.50,@function
DeblockFrame.50:                        # @DeblockFrame.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1951001650, -8(%rbp)   # imm = 0x7449EC32
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB53_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_1
.LBB53_4:                               # %for.end
	cmpl	$1951001650, -8(%rbp)   # imm = 0x7449EC32
	jne	.LBB53_6
.LBB53_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_5
.Lfunc_end53:
	.size	DeblockFrame.50, .Lfunc_end53-DeblockFrame.50
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.51          # -- Begin function GetStrength.51
	.p2align	4, 0x90
	.type	GetStrength.51,@function
GetStrength.51:                         # @GetStrength.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$831030911, -136(%rbp)  # imm = 0x3188867F
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB54_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB54_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB54_5
.LBB54_4:                               # %cond.false
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB54_5:                               # %cond.end
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB54_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB54_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB54_9
.LBB54_8:                               # %cond.false15
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$1, %eax
	jmp	.LBB54_9
.LBB54_9:                               # %cond.end16
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_11
.LBB54_10:                              # %cond.false18
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-28(%rbp), %eax
.LBB54_11:                              # %cond.end19
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB54_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB54_25
.LBB54_13:                              # %if.then
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB54_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB54_23
.LBB54_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB54_23
.LBB54_19:                              # %lor.rhs
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB54_22
.LBB54_21:                              # %land.rhs60
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_22:                              # %land.end
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_23:                              # %lor.end
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_24:                              # %land.end62
                                        #   in Loop: Header=BB54_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB54_79
.LBB54_25:                              # %if.else
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB54_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB54_35
.LBB54_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB54_35
.LBB54_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB54_34
.LBB54_33:                              # %land.rhs92
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_34:                              # %land.end95
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_35:                              # %lor.end96
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_36:                              # %land.end97
                                        #   in Loop: Header=BB54_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB54_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB54_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB54_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB54_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB54_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB54_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB54_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB54_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB54_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-152(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB54_47
.LBB54_46:                              # %if.then144
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB54_77
.LBB54_47:                              # %if.else147
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB54_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB54_76
.LBB54_49:                              # %if.else152
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_52
.LBB54_51:                              # %cond.false169
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_52:                              # %cond.end174
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_55
.LBB54_54:                              # %cond.false184
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_55:                              # %cond.end189
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_58
.LBB54_57:                              # %cond.false199
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_58:                              # %cond.end204
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_61
.LBB54_60:                              # %cond.false214
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_61:                              # %cond.end219
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB54_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB54_65
.LBB54_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB54_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB54_74
.LBB54_65:                              # %if.then232
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB54_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB54_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB54_69
.LBB54_68:                              # %if.else309
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB54_69:                              # %if.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_73
.LBB54_70:                              # %if.else380
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB54_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB54_72:                              # %land.end518
                                        #   in Loop: Header=BB54_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB54_73:                              # %if.end522
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_75
.LBB54_74:                              # %if.else523
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB54_75:                              # %if.end526
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_76
.LBB54_76:                              # %if.end527
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_77
.LBB54_77:                              # %if.end528
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_78
.LBB54_78:                              # %if.end529
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_79
.LBB54_79:                              # %if.end530
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_80
.LBB54_80:                              # %for.inc
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB54_1
.LBB54_81:                              # %for.end
	cmpl	$831030911, -136(%rbp)  # imm = 0x3188867F
	jne	.LBB54_83
.LBB54_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_82
.Lfunc_end54:
	.size	GetStrength.51, .Lfunc_end54-GetStrength.51
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.52          # -- Begin function GetStrength.52
	.p2align	4, 0x90
	.type	GetStrength.52,@function
GetStrength.52:                         # @GetStrength.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$848341834, -148(%rbp)  # imm = 0x3290AB4A
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB55_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB55_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB55_5
.LBB55_4:                               # %cond.false
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB55_5:                               # %cond.end
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB55_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB55_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB55_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB55_9
.LBB55_8:                               # %cond.false15
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$1, %eax
	jmp	.LBB55_9
.LBB55_9:                               # %cond.end16
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_11
.LBB55_10:                              # %cond.false18
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-28(%rbp), %eax
.LBB55_11:                              # %cond.end19
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB55_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB55_25
.LBB55_13:                              # %if.then
                                        #   in Loop: Header=BB55_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB55_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB55_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB55_23
.LBB55_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB55_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB55_23
.LBB55_19:                              # %lor.rhs
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB55_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB55_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB55_22
.LBB55_21:                              # %land.rhs60
                                        #   in Loop: Header=BB55_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB55_22:                              # %land.end
                                        #   in Loop: Header=BB55_1 Depth=1
.LBB55_23:                              # %lor.end
                                        #   in Loop: Header=BB55_1 Depth=1
.LBB55_24:                              # %land.end62
                                        #   in Loop: Header=BB55_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB55_79
.LBB55_25:                              # %if.else
                                        #   in Loop: Header=BB55_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB55_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB55_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB55_35
.LBB55_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB55_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB55_35
.LBB55_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB55_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB55_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB55_34
.LBB55_33:                              # %land.rhs92
                                        #   in Loop: Header=BB55_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB55_34:                              # %land.end95
                                        #   in Loop: Header=BB55_1 Depth=1
.LBB55_35:                              # %lor.end96
                                        #   in Loop: Header=BB55_1 Depth=1
.LBB55_36:                              # %land.end97
                                        #   in Loop: Header=BB55_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB55_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB55_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB55_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB55_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB55_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB55_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB55_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB55_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB55_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB55_47
.LBB55_46:                              # %if.then144
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB55_77
.LBB55_47:                              # %if.else147
                                        #   in Loop: Header=BB55_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB55_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB55_76
.LBB55_49:                              # %if.else152
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-152(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB55_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB55_52
.LBB55_51:                              # %cond.false169
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB55_52:                              # %cond.end174
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB55_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB55_55
.LBB55_54:                              # %cond.false184
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB55_55:                              # %cond.end189
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB55_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB55_58
.LBB55_57:                              # %cond.false199
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB55_58:                              # %cond.end204
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB55_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB55_61
.LBB55_60:                              # %cond.false214
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB55_61:                              # %cond.end219
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB55_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB55_65
.LBB55_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB55_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB55_74
.LBB55_65:                              # %if.then232
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB55_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB55_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB55_69
.LBB55_68:                              # %if.else309
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB55_69:                              # %if.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_73
.LBB55_70:                              # %if.else380
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB55_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB55_72:                              # %land.end518
                                        #   in Loop: Header=BB55_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB55_73:                              # %if.end522
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_75
.LBB55_74:                              # %if.else523
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB55_75:                              # %if.end526
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_76
.LBB55_76:                              # %if.end527
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_77
.LBB55_77:                              # %if.end528
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_78
.LBB55_78:                              # %if.end529
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_79
.LBB55_79:                              # %if.end530
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_80
.LBB55_80:                              # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB55_1
.LBB55_81:                              # %for.end
	cmpl	$848341834, -148(%rbp)  # imm = 0x3290AB4A
	jne	.LBB55_83
.LBB55_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_82
.Lfunc_end55:
	.size	GetStrength.52, .Lfunc_end55-GetStrength.52
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.53            # -- Begin function DeblockMb.53
	.p2align	4, 0x90
	.type	DeblockMb.53,@function
DeblockMb.53:                           # @DeblockMb.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1278656532, -112(%rbp) # imm = 0x4C36C014
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB56_2
# %bb.1:                                # %if.then
	jmp	.LBB56_2
.LBB56_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB56_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB56_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB56_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB56_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB56_9:                               # %land.end
.LBB56_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB56_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB56_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB56_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB56_61
.LBB56_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB56_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB56_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB56_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB56_20
.LBB56_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB56_20:                              # %if.end40
	jmp	.LBB56_21
.LBB56_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB56_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_29 Depth 2
                                        #       Child Loop BB56_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB56_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB56_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB56_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB56_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB56_28
.LBB56_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB56_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB56_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB56_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB56_27:                              # %land.end51
                                        #   in Loop: Header=BB56_22 Depth=1
.LBB56_28:                              # %lor.end52
                                        #   in Loop: Header=BB56_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB56_29:                              # %for.cond54
                                        #   Parent Loop BB56_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB56_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB56_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB56_56
.LBB56_32:                              # %if.then60
                                        #   in Loop: Header=BB56_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB56_33:                              # %for.cond70
                                        #   Parent Loop BB56_22 Depth=1
                                        #     Parent Loop BB56_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB56_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB56_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_33
.LBB56_36:                              # %for.end
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB56_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB56_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB56_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB56_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB56_39:                              # %if.end84
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB56_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB56_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB56_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB56_42:                              # %if.end100
                                        #   in Loop: Header=BB56_29 Depth=2
	jmp	.LBB56_43
.LBB56_43:                              # %if.end101
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB56_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB56_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB56_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB56_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB56_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB56_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB56_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB56_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB56_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB56_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB56_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB56_50:                              # %if.end125
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB56_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB56_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB56_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB56_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB56_53:                              # %if.end142
                                        #   in Loop: Header=BB56_29 Depth=2
	jmp	.LBB56_54
.LBB56_54:                              # %if.end143
                                        #   in Loop: Header=BB56_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB56_55:                              # %if.end145
                                        #   in Loop: Header=BB56_29 Depth=2
	jmp	.LBB56_56
.LBB56_56:                              # %if.end146
                                        #   in Loop: Header=BB56_29 Depth=2
	jmp	.LBB56_57
.LBB56_57:                              # %for.inc147
                                        #   in Loop: Header=BB56_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_29
.LBB56_58:                              # %for.end149
                                        #   in Loop: Header=BB56_22 Depth=1
	jmp	.LBB56_59
.LBB56_59:                              # %for.inc150
                                        #   in Loop: Header=BB56_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_22
.LBB56_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB56_61:                              # %return
	cmpl	$1278656532, -112(%rbp) # imm = 0x4C36C014
	jne	.LBB56_63
.LBB56_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_62
.Lfunc_end56:
	.size	DeblockMb.53, .Lfunc_end56-DeblockMb.53
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.54            # -- Begin function DeblockMb.54
	.p2align	4, 0x90
	.type	DeblockMb.54,@function
DeblockMb.54:                           # @DeblockMb.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1021997415, -100(%rbp) # imm = 0x3CEA7167
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	jmp	.LBB57_2
.LBB57_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB57_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB57_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB57_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB57_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB57_9:                               # %land.end
.LBB57_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB57_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB57_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB57_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB57_61
.LBB57_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB57_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB57_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB57_20
.LBB57_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB57_20:                              # %if.end40
	jmp	.LBB57_21
.LBB57_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB57_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_29 Depth 2
                                        #       Child Loop BB57_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB57_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB57_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB57_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB57_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB57_28
.LBB57_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB57_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB57_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB57_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB57_27:                              # %land.end51
                                        #   in Loop: Header=BB57_22 Depth=1
.LBB57_28:                              # %lor.end52
                                        #   in Loop: Header=BB57_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB57_29:                              # %for.cond54
                                        #   Parent Loop BB57_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB57_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB57_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB57_56
.LBB57_32:                              # %if.then60
                                        #   in Loop: Header=BB57_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB57_33:                              # %for.cond70
                                        #   Parent Loop BB57_22 Depth=1
                                        #     Parent Loop BB57_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB57_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB57_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB57_33
.LBB57_36:                              # %for.end
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB57_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB57_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB57_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB57_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB57_39:                              # %if.end84
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB57_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB57_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB57_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB57_42:                              # %if.end100
                                        #   in Loop: Header=BB57_29 Depth=2
	jmp	.LBB57_43
.LBB57_43:                              # %if.end101
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB57_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB57_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB57_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB57_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB57_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB57_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB57_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB57_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB57_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB57_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB57_50:                              # %if.end125
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB57_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB57_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB57_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB57_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB57_53:                              # %if.end142
                                        #   in Loop: Header=BB57_29 Depth=2
	jmp	.LBB57_54
.LBB57_54:                              # %if.end143
                                        #   in Loop: Header=BB57_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB57_55:                              # %if.end145
                                        #   in Loop: Header=BB57_29 Depth=2
	jmp	.LBB57_56
.LBB57_56:                              # %if.end146
                                        #   in Loop: Header=BB57_29 Depth=2
	jmp	.LBB57_57
.LBB57_57:                              # %for.inc147
                                        #   in Loop: Header=BB57_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB57_29
.LBB57_58:                              # %for.end149
                                        #   in Loop: Header=BB57_22 Depth=1
	jmp	.LBB57_59
.LBB57_59:                              # %for.inc150
                                        #   in Loop: Header=BB57_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_22
.LBB57_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB57_61:                              # %return
	cmpl	$1021997415, -100(%rbp) # imm = 0x3CEA7167
	jne	.LBB57_63
.LBB57_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_62
.Lfunc_end57:
	.size	DeblockMb.54, .Lfunc_end57-DeblockMb.54
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.55             # -- Begin function EdgeLoop.55
	.p2align	4, 0x90
	.type	EdgeLoop.55,@function
EdgeLoop.55:                            # @EdgeLoop.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$2054252983, -188(%rbp) # imm = 0x7A7169B7
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB58_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB58_3
.LBB58_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB58_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB58_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB58_6
.LBB58_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB58_6
.LBB58_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB58_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB58_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB58_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB58_11
.LBB58_10:                              # %cond.false8
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB58_11:                              # %cond.end10
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB58_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB58_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB58_15
.LBB58_14:                              # %cond.false17
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$1, %eax
	jmp	.LBB58_15
.LBB58_15:                              # %cond.end18
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_17
.LBB58_16:                              # %cond.false20
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %eax
.LBB58_17:                              # %cond.end21
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-132(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB58_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB58_19:                              # %lor.end
                                        #   in Loop: Header=BB58_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB58_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB58_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB58_25
.LBB58_24:                              # %cond.false47
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB58_25:                              # %cond.end49
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_27
.LBB58_26:                              # %cond.false51
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB58_27:                              # %cond.end52
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB58_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB58_157
.LBB58_29:                              # %if.then57
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB58_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB58_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB58_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB58_34
.LBB58_33:                              # %cond.false66
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
.LBB58_34:                              # %cond.end67
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_36
.LBB58_35:                              # %cond.false69
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$1, %eax
	jmp	.LBB58_36
.LBB58_36:                              # %cond.end70
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB58_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB58_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB58_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB58_41
.LBB58_40:                              # %cond.false81
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	32(%rbp), %eax
.LBB58_41:                              # %cond.end82
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_43
.LBB58_42:                              # %cond.false84
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$1, %eax
	jmp	.LBB58_43
.LBB58_43:                              # %cond.end85
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB58_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB58_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_50
.LBB58_46:                              # %cond.false105
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB58_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %eax
	jmp	.LBB58_49
.LBB58_48:                              # %cond.false114
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB58_49:                              # %cond.end120
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_50:                              # %cond.end122
                                        #   in Loop: Header=BB58_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB58_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB58_56
.LBB58_52:                              # %cond.false135
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB58_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB58_55
.LBB58_54:                              # %cond.false144
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB58_55:                              # %cond.end150
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_56:                              # %cond.end152
                                        #   in Loop: Header=BB58_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB58_58
.LBB58_57:                              # %cond.false160
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB58_58:                              # %cond.end166
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_64
.LBB58_60:                              # %cond.false172
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB58_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %eax
	jmp	.LBB58_63
.LBB58_62:                              # %cond.false177
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB58_63:                              # %cond.end179
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_64:                              # %cond.end181
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB58_70
.LBB58_66:                              # %cond.false187
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB58_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB58_69
.LBB58_68:                              # %cond.false192
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB58_69:                              # %cond.end194
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_70:                              # %cond.end196
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -184(%rbp)
	movslq	-152(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -136(%rbp)
	movslq	-184(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-152(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, %eax
	je	.LBB58_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB58_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-160(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB58_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB58_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB58_75:                              # %if.end271
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -160(%rbp)
	jne	.LBB58_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB58_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB58_97
.LBB58_78:                              # %if.else292
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-176(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB58_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false307
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB58_81:                              # %cond.end313
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB58_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_84
.LBB58_83:                              # %cond.false325
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB58_84:                              # %cond.end331
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB58_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB58_87
.LBB58_86:                              # %cond.false342
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-12(%rbp), %eax
.LBB58_87:                              # %cond.end343
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB58_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB58_90
.LBB58_89:                              # %cond.false355
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-16(%rbp), %eax
.LBB58_90:                              # %cond.end356
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB58_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_93
.LBB58_92:                              # %cond.false371
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-36(%rbp), %eax
.LBB58_93:                              # %cond.end372
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB58_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB58_96
.LBB58_95:                              # %cond.false387
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
.LBB58_96:                              # %cond.end388
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB58_97:                              # %if.end395
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_153
.LBB58_98:                              # %if.else396
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB58_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB58_101
.LBB58_100:                             # %cond.false400
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB58_101:                             # %cond.end403
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB58_107
.LBB58_103:                             # %cond.false415
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB58_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB58_106
.LBB58_105:                             # %cond.false424
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB58_106:                             # %cond.end430
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_107:                             # %cond.end432
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB58_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_114
.LBB58_110:                             # %cond.false440
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB58_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_113
.LBB58_112:                             # %cond.false446
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB58_113:                             # %cond.end448
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_114:                             # %cond.end450
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_120
.LBB58_116:                             # %cond.false458
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB58_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_119
.LBB58_118:                             # %cond.false465
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB58_119:                             # %cond.end467
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_120:                             # %cond.end469
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB58_134
.LBB58_121:                             # %if.else473
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_127
.LBB58_123:                             # %cond.false478
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB58_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB58_126
.LBB58_125:                             # %cond.false484
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB58_126:                             # %cond.end486
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_127:                             # %cond.end488
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB58_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_133
.LBB58_129:                             # %cond.false496
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB58_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB58_132
.LBB58_131:                             # %cond.false503
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB58_132:                             # %cond.end505
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_133:                             # %cond.end507
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB58_134:                             # %if.end511
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB58_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB58_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB58_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB58_142
.LBB58_138:                             # %cond.false527
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB58_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_141
.LBB58_140:                             # %cond.false537
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB58_141:                             # %cond.end544
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_142:                             # %cond.end546
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB58_143:                             # %if.end554
                                        #   in Loop: Header=BB58_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB58_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB58_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB58_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB58_150
.LBB58_146:                             # %cond.false568
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB58_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_149
.LBB58_148:                             # %cond.false578
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB58_149:                             # %cond.end585
                                        #   in Loop: Header=BB58_7 Depth=1
.LBB58_150:                             # %cond.end587
                                        #   in Loop: Header=BB58_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB58_151:                             # %if.end594
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_152
.LBB58_152:                             # %if.end595
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_153
.LBB58_153:                             # %if.end596
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_154
.LBB58_154:                             # %if.end597
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_155
.LBB58_155:                             # %if.end598
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_156
.LBB58_156:                             # %if.end599
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_157
.LBB58_157:                             # %if.end600
                                        #   in Loop: Header=BB58_7 Depth=1
	jmp	.LBB58_158
.LBB58_158:                             # %for.inc
                                        #   in Loop: Header=BB58_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB58_7
.LBB58_159:                             # %for.end
	cmpl	$2054252983, -188(%rbp) # imm = 0x7A7169B7
	jne	.LBB58_161
.LBB58_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_160
.Lfunc_end58:
	.size	EdgeLoop.55, .Lfunc_end58-EdgeLoop.55
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.56         # -- Begin function DeblockFrame.56
	.p2align	4, 0x90
	.type	DeblockFrame.56,@function
DeblockFrame.56:                        # @DeblockFrame.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1721717410, -8(%rbp)   # imm = 0x669F52A2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB59_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB59_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB59_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_1
.LBB59_4:                               # %for.end
	cmpl	$1721717410, -8(%rbp)   # imm = 0x669F52A2
	jne	.LBB59_6
.LBB59_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_5
.Lfunc_end59:
	.size	DeblockFrame.56, .Lfunc_end59-DeblockFrame.56
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.57             # -- Begin function EdgeLoop.57
	.p2align	4, 0x90
	.type	EdgeLoop.57,@function
EdgeLoop.57:                            # @EdgeLoop.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$325129712, -180(%rbp)  # imm = 0x136115F0
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB60_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB60_3
.LBB60_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB60_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB60_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB60_6
.LBB60_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB60_6
.LBB60_6:                               # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB60_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB60_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB60_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB60_11
.LBB60_10:                              # %cond.false8
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB60_11:                              # %cond.end10
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB60_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB60_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB60_15
.LBB60_14:                              # %cond.false17
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$1, %eax
	jmp	.LBB60_15
.LBB60_15:                              # %cond.end18
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_17
.LBB60_16:                              # %cond.false20
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %eax
.LBB60_17:                              # %cond.end21
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-132(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-152(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-132(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-152(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB60_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB60_19:                              # %lor.end
                                        #   in Loop: Header=BB60_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB60_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB60_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB60_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB60_25
.LBB60_24:                              # %cond.false47
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB60_25:                              # %cond.end49
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_27
.LBB60_26:                              # %cond.false51
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB60_27:                              # %cond.end52
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB60_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB60_157
.LBB60_29:                              # %if.then57
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB60_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB60_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB60_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB60_34
.LBB60_33:                              # %cond.false66
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
.LBB60_34:                              # %cond.end67
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_36
.LBB60_35:                              # %cond.false69
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$1, %eax
	jmp	.LBB60_36
.LBB60_36:                              # %cond.end70
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB60_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB60_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB60_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB60_41
.LBB60_40:                              # %cond.false81
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
.LBB60_41:                              # %cond.end82
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_43
.LBB60_42:                              # %cond.false84
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$1, %eax
	jmp	.LBB60_43
.LBB60_43:                              # %cond.end85
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB60_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB60_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_50
.LBB60_46:                              # %cond.false105
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB60_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %eax
	jmp	.LBB60_49
.LBB60_48:                              # %cond.false114
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB60_49:                              # %cond.end120
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_50:                              # %cond.end122
                                        #   in Loop: Header=BB60_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB60_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB60_56
.LBB60_52:                              # %cond.false135
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB60_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB60_55
.LBB60_54:                              # %cond.false144
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB60_55:                              # %cond.end150
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_56:                              # %cond.end152
                                        #   in Loop: Header=BB60_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB60_58
.LBB60_57:                              # %cond.false160
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB60_58:                              # %cond.end166
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_64
.LBB60_60:                              # %cond.false172
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB60_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %eax
	jmp	.LBB60_63
.LBB60_62:                              # %cond.false177
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB60_63:                              # %cond.end179
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_64:                              # %cond.end181
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB60_70
.LBB60_66:                              # %cond.false187
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB60_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB60_69
.LBB60_68:                              # %cond.false192
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB60_69:                              # %cond.end194
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_70:                              # %cond.end196
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-172(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-172(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, %eax
	je	.LBB60_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB60_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-156(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB60_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB60_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB60_75:                              # %if.end271
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -156(%rbp)
	jne	.LBB60_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB60_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB60_97
.LBB60_78:                              # %if.else292
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-164(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-168(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB60_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_81
.LBB60_80:                              # %cond.false307
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB60_81:                              # %cond.end313
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB60_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_84
.LBB60_83:                              # %cond.false325
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB60_84:                              # %cond.end331
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB60_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB60_87
.LBB60_86:                              # %cond.false342
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
.LBB60_87:                              # %cond.end343
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB60_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB60_90
.LBB60_89:                              # %cond.false355
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-16(%rbp), %eax
.LBB60_90:                              # %cond.end356
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB60_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_93
.LBB60_92:                              # %cond.false371
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-32(%rbp), %eax
.LBB60_93:                              # %cond.end372
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB60_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_96
.LBB60_95:                              # %cond.false387
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
.LBB60_96:                              # %cond.end388
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB60_97:                              # %if.end395
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_153
.LBB60_98:                              # %if.else396
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB60_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB60_101
.LBB60_100:                             # %cond.false400
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB60_101:                             # %cond.end403
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB60_107
.LBB60_103:                             # %cond.false415
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB60_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB60_106
.LBB60_105:                             # %cond.false424
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB60_106:                             # %cond.end430
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_107:                             # %cond.end432
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB60_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_114
.LBB60_110:                             # %cond.false440
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB60_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_113
.LBB60_112:                             # %cond.false446
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB60_113:                             # %cond.end448
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_114:                             # %cond.end450
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_120
.LBB60_116:                             # %cond.false458
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB60_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_119
.LBB60_118:                             # %cond.false465
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB60_119:                             # %cond.end467
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_120:                             # %cond.end469
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB60_134
.LBB60_121:                             # %if.else473
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_127
.LBB60_123:                             # %cond.false478
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB60_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB60_126
.LBB60_125:                             # %cond.false484
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB60_126:                             # %cond.end486
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_127:                             # %cond.end488
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_133
.LBB60_129:                             # %cond.false496
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB60_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB60_132
.LBB60_131:                             # %cond.false503
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB60_132:                             # %cond.end505
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_133:                             # %cond.end507
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB60_134:                             # %if.end511
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB60_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB60_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB60_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB60_142
.LBB60_138:                             # %cond.false527
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB60_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB60_141
.LBB60_140:                             # %cond.false537
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB60_141:                             # %cond.end544
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_142:                             # %cond.end546
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB60_143:                             # %if.end554
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB60_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB60_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB60_150
.LBB60_146:                             # %cond.false568
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB60_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB60_149
.LBB60_148:                             # %cond.false578
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB60_149:                             # %cond.end585
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_150:                             # %cond.end587
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB60_151:                             # %if.end594
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_152
.LBB60_152:                             # %if.end595
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_153
.LBB60_153:                             # %if.end596
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_154
.LBB60_154:                             # %if.end597
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_155
.LBB60_155:                             # %if.end598
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_156
.LBB60_156:                             # %if.end599
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_157
.LBB60_157:                             # %if.end600
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_158
.LBB60_158:                             # %for.inc
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB60_7
.LBB60_159:                             # %for.end
	cmpl	$325129712, -180(%rbp)  # imm = 0x136115F0
	jne	.LBB60_161
.LBB60_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_160
.Lfunc_end60:
	.size	EdgeLoop.57, .Lfunc_end60-EdgeLoop.57
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.58             # -- Begin function EdgeLoop.58
	.p2align	4, 0x90
	.type	EdgeLoop.58,@function
EdgeLoop.58:                            # @EdgeLoop.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$221138275, -184(%rbp)  # imm = 0xD2E4D63
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB61_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB61_3
.LBB61_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB61_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB61_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB61_6
.LBB61_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB61_6
.LBB61_6:                               # %cond.end
	movl	%eax, -168(%rbp)
	movl	$0, -60(%rbp)
.LBB61_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-168(%rbp), %eax
	jge	.LBB61_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB61_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB61_11
.LBB61_10:                              # %cond.false8
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB61_11:                              # %cond.end10
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -152(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB61_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB61_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB61_15
.LBB61_14:                              # %cond.false17
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$1, %eax
	jmp	.LBB61_15
.LBB61_15:                              # %cond.end18
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_17
.LBB61_16:                              # %cond.false20
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %eax
.LBB61_17:                              # %cond.end21
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-136(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	-160(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-160(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB61_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB61_19:                              # %lor.end
                                        #   in Loop: Header=BB61_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB61_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$8, -168(%rbp)
	jne	.LBB61_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB61_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB61_25
.LBB61_24:                              # %cond.false47
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB61_25:                              # %cond.end49
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_27
.LBB61_26:                              # %cond.false51
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB61_27:                              # %cond.end52
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB61_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB61_157
.LBB61_29:                              # %if.then57
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB61_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB61_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB61_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB61_34
.LBB61_33:                              # %cond.false66
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
.LBB61_34:                              # %cond.end67
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_36
.LBB61_35:                              # %cond.false69
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$1, %eax
	jmp	.LBB61_36
.LBB61_36:                              # %cond.end70
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB61_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB61_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB61_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB61_41
.LBB61_40:                              # %cond.false81
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	32(%rbp), %eax
.LBB61_41:                              # %cond.end82
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_43
.LBB61_42:                              # %cond.false84
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$1, %eax
	jmp	.LBB61_43
.LBB61_43:                              # %cond.end85
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB61_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB61_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_50
.LBB61_46:                              # %cond.false105
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB61_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %eax
	jmp	.LBB61_49
.LBB61_48:                              # %cond.false114
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB61_49:                              # %cond.end120
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_50:                              # %cond.end122
                                        #   in Loop: Header=BB61_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB61_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB61_56
.LBB61_52:                              # %cond.false135
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB61_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB61_55
.LBB61_54:                              # %cond.false144
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB61_55:                              # %cond.end150
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_56:                              # %cond.end152
                                        #   in Loop: Header=BB61_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB61_58
.LBB61_57:                              # %cond.false160
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB61_58:                              # %cond.end166
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_64
.LBB61_60:                              # %cond.false172
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB61_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %eax
	jmp	.LBB61_63
.LBB61_62:                              # %cond.false177
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB61_63:                              # %cond.end179
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_64:                              # %cond.end181
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB61_70
.LBB61_66:                              # %cond.false187
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB61_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB61_69
.LBB61_68:                              # %cond.false192
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB61_69:                              # %cond.end194
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_70:                              # %cond.end196
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -196(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-196(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB61_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB61_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB61_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB61_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB61_75:                              # %if.end271
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB61_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB61_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB61_97
.LBB61_78:                              # %if.else292
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB61_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_81
.LBB61_80:                              # %cond.false307
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB61_81:                              # %cond.end313
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB61_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_84
.LBB61_83:                              # %cond.false325
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB61_84:                              # %cond.end331
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB61_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB61_87
.LBB61_86:                              # %cond.false342
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
.LBB61_87:                              # %cond.end343
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB61_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB61_90
.LBB61_89:                              # %cond.false355
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-12(%rbp), %eax
.LBB61_90:                              # %cond.end356
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB61_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_93
.LBB61_92:                              # %cond.false371
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
.LBB61_93:                              # %cond.end372
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB61_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB61_96
.LBB61_95:                              # %cond.false387
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
.LBB61_96:                              # %cond.end388
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB61_97:                              # %if.end395
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_153
.LBB61_98:                              # %if.else396
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB61_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB61_101
.LBB61_100:                             # %cond.false400
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB61_101:                             # %cond.end403
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB61_107
.LBB61_103:                             # %cond.false415
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB61_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB61_106
.LBB61_105:                             # %cond.false424
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB61_106:                             # %cond.end430
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_107:                             # %cond.end432
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB61_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_114
.LBB61_110:                             # %cond.false440
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB61_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_113
.LBB61_112:                             # %cond.false446
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB61_113:                             # %cond.end448
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_114:                             # %cond.end450
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_120
.LBB61_116:                             # %cond.false458
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB61_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_119
.LBB61_118:                             # %cond.false465
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB61_119:                             # %cond.end467
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_120:                             # %cond.end469
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB61_134
.LBB61_121:                             # %if.else473
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_127
.LBB61_123:                             # %cond.false478
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB61_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB61_126
.LBB61_125:                             # %cond.false484
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB61_126:                             # %cond.end486
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_127:                             # %cond.end488
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB61_133
.LBB61_129:                             # %cond.false496
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB61_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB61_132
.LBB61_131:                             # %cond.false503
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB61_132:                             # %cond.end505
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_133:                             # %cond.end507
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB61_134:                             # %if.end511
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB61_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB61_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB61_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB61_142
.LBB61_138:                             # %cond.false527
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB61_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_141
.LBB61_140:                             # %cond.false537
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB61_141:                             # %cond.end544
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_142:                             # %cond.end546
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB61_143:                             # %if.end554
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB61_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB61_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB61_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB61_150
.LBB61_146:                             # %cond.false568
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB61_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB61_149
.LBB61_148:                             # %cond.false578
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB61_149:                             # %cond.end585
                                        #   in Loop: Header=BB61_7 Depth=1
.LBB61_150:                             # %cond.end587
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB61_151:                             # %if.end594
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_152
.LBB61_152:                             # %if.end595
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_153
.LBB61_153:                             # %if.end596
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_154
.LBB61_154:                             # %if.end597
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_155
.LBB61_155:                             # %if.end598
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_156
.LBB61_156:                             # %if.end599
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_157
.LBB61_157:                             # %if.end600
                                        #   in Loop: Header=BB61_7 Depth=1
	jmp	.LBB61_158
.LBB61_158:                             # %for.inc
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB61_7
.LBB61_159:                             # %for.end
	cmpl	$221138275, -184(%rbp)  # imm = 0xD2E4D63
	jne	.LBB61_161
.LBB61_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_160
.Lfunc_end61:
	.size	EdgeLoop.58, .Lfunc_end61-EdgeLoop.58
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.59         # -- Begin function DeblockFrame.59
	.p2align	4, 0x90
	.type	DeblockFrame.59,@function
DeblockFrame.59:                        # @DeblockFrame.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$44895766, -8(%rbp)     # imm = 0x2AD0E16
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB62_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_4:                               # %for.end
	cmpl	$44895766, -8(%rbp)     # imm = 0x2AD0E16
	jne	.LBB62_6
.LBB62_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_5
.Lfunc_end62:
	.size	DeblockFrame.59, .Lfunc_end62-DeblockFrame.59
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.60            # -- Begin function DeblockMb.60
	.p2align	4, 0x90
	.type	DeblockMb.60,@function
DeblockMb.60:                           # @DeblockMb.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$543054969, -108(%rbp)  # imm = 0x205E5C79
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB63_2
# %bb.1:                                # %if.then
	jmp	.LBB63_2
.LBB63_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB63_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB63_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB63_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB63_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB63_9:                               # %land.end
.LBB63_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB63_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB63_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB63_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB63_61
.LBB63_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB63_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB63_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB63_20
.LBB63_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB63_20:                              # %if.end40
	jmp	.LBB63_21
.LBB63_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB63_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_29 Depth 2
                                        #       Child Loop BB63_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB63_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB63_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB63_28
.LBB63_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB63_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB63_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB63_27:                              # %land.end51
                                        #   in Loop: Header=BB63_22 Depth=1
.LBB63_28:                              # %lor.end52
                                        #   in Loop: Header=BB63_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB63_29:                              # %for.cond54
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB63_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB63_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB63_56
.LBB63_32:                              # %if.then60
                                        #   in Loop: Header=BB63_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB63_33:                              # %for.cond70
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB63_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB63_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB63_33
.LBB63_36:                              # %for.end
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB63_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB63_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB63_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB63_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB63_39:                              # %if.end84
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB63_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB63_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB63_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB63_42:                              # %if.end100
                                        #   in Loop: Header=BB63_29 Depth=2
	jmp	.LBB63_43
.LBB63_43:                              # %if.end101
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB63_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB63_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB63_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB63_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB63_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB63_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB63_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB63_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB63_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB63_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB63_50:                              # %if.end125
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB63_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB63_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB63_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB63_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB63_53:                              # %if.end142
                                        #   in Loop: Header=BB63_29 Depth=2
	jmp	.LBB63_54
.LBB63_54:                              # %if.end143
                                        #   in Loop: Header=BB63_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB63_55:                              # %if.end145
                                        #   in Loop: Header=BB63_29 Depth=2
	jmp	.LBB63_56
.LBB63_56:                              # %if.end146
                                        #   in Loop: Header=BB63_29 Depth=2
	jmp	.LBB63_57
.LBB63_57:                              # %for.inc147
                                        #   in Loop: Header=BB63_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_29
.LBB63_58:                              # %for.end149
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_59
.LBB63_59:                              # %for.inc150
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_22
.LBB63_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB63_61:                              # %return
	cmpl	$543054969, -108(%rbp)  # imm = 0x205E5C79
	jne	.LBB63_63
.LBB63_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_62
.Lfunc_end63:
	.size	DeblockMb.60, .Lfunc_end63-DeblockMb.60
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.61         # -- Begin function DeblockFrame.61
	.p2align	4, 0x90
	.type	DeblockFrame.61,@function
DeblockFrame.61:                        # @DeblockFrame.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1087267280, -8(%rbp)   # imm = 0x40CE61D0
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	cmpl	$1087267280, -8(%rbp)   # imm = 0x40CE61D0
	jne	.LBB64_6
.LBB64_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_5
.Lfunc_end64:
	.size	DeblockFrame.61, .Lfunc_end64-DeblockFrame.61
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.62             # -- Begin function EdgeLoop.62
	.p2align	4, 0x90
	.type	EdgeLoop.62,@function
EdgeLoop.62:                            # @EdgeLoop.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$353052364, -180(%rbp)  # imm = 0x150B26CC
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB65_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB65_3
.LBB65_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB65_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB65_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB65_6
.LBB65_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB65_6
.LBB65_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB65_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB65_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB65_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB65_11
.LBB65_10:                              # %cond.false8
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB65_11:                              # %cond.end10
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB65_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB65_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB65_15
.LBB65_14:                              # %cond.false17
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$1, %eax
	jmp	.LBB65_15
.LBB65_15:                              # %cond.end18
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_17
.LBB65_16:                              # %cond.false20
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %eax
.LBB65_17:                              # %cond.end21
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-136(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	-160(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-160(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB65_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB65_19:                              # %lor.end
                                        #   in Loop: Header=BB65_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB65_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB65_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB65_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB65_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB65_25
.LBB65_24:                              # %cond.false47
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB65_25:                              # %cond.end49
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_27
.LBB65_26:                              # %cond.false51
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB65_27:                              # %cond.end52
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB65_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB65_157
.LBB65_29:                              # %if.then57
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB65_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB65_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB65_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB65_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB65_34
.LBB65_33:                              # %cond.false66
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
.LBB65_34:                              # %cond.end67
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_36
.LBB65_35:                              # %cond.false69
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$1, %eax
	jmp	.LBB65_36
.LBB65_36:                              # %cond.end70
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB65_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB65_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB65_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB65_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB65_41
.LBB65_40:                              # %cond.false81
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
.LBB65_41:                              # %cond.end82
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_43
.LBB65_42:                              # %cond.false84
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$1, %eax
	jmp	.LBB65_43
.LBB65_43:                              # %cond.end85
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB65_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB65_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_50
.LBB65_46:                              # %cond.false105
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB65_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %eax
	jmp	.LBB65_49
.LBB65_48:                              # %cond.false114
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB65_49:                              # %cond.end120
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_50:                              # %cond.end122
                                        #   in Loop: Header=BB65_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB65_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB65_56
.LBB65_52:                              # %cond.false135
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB65_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB65_55
.LBB65_54:                              # %cond.false144
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB65_55:                              # %cond.end150
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_56:                              # %cond.end152
                                        #   in Loop: Header=BB65_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB65_58
.LBB65_57:                              # %cond.false160
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB65_58:                              # %cond.end166
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_64
.LBB65_60:                              # %cond.false172
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB65_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %eax
	jmp	.LBB65_63
.LBB65_62:                              # %cond.false177
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB65_63:                              # %cond.end179
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_64:                              # %cond.end181
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB65_70
.LBB65_66:                              # %cond.false187
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB65_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB65_69
.LBB65_68:                              # %cond.false192
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB65_69:                              # %cond.end194
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_70:                              # %cond.end196
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB65_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -140(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB65_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB65_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB65_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB65_75:                              # %if.end271
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB65_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB65_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB65_97
.LBB65_78:                              # %if.else292
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB65_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_81
.LBB65_80:                              # %cond.false307
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB65_81:                              # %cond.end313
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB65_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_84
.LBB65_83:                              # %cond.false325
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB65_84:                              # %cond.end331
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB65_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB65_87
.LBB65_86:                              # %cond.false342
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-16(%rbp), %eax
.LBB65_87:                              # %cond.end343
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB65_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB65_90
.LBB65_89:                              # %cond.false355
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-12(%rbp), %eax
.LBB65_90:                              # %cond.end356
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB65_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_93
.LBB65_92:                              # %cond.false371
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
.LBB65_93:                              # %cond.end372
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB65_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_96
.LBB65_95:                              # %cond.false387
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
.LBB65_96:                              # %cond.end388
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB65_97:                              # %if.end395
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_153
.LBB65_98:                              # %if.else396
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB65_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB65_101
.LBB65_100:                             # %cond.false400
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB65_101:                             # %cond.end403
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB65_107
.LBB65_103:                             # %cond.false415
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB65_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB65_106
.LBB65_105:                             # %cond.false424
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB65_106:                             # %cond.end430
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_107:                             # %cond.end432
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB65_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_114
.LBB65_110:                             # %cond.false440
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB65_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_113
.LBB65_112:                             # %cond.false446
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB65_113:                             # %cond.end448
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_114:                             # %cond.end450
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_120
.LBB65_116:                             # %cond.false458
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB65_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_119
.LBB65_118:                             # %cond.false465
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB65_119:                             # %cond.end467
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_120:                             # %cond.end469
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB65_134
.LBB65_121:                             # %if.else473
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_127
.LBB65_123:                             # %cond.false478
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB65_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_126
.LBB65_125:                             # %cond.false484
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB65_126:                             # %cond.end486
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_127:                             # %cond.end488
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_133
.LBB65_129:                             # %cond.false496
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB65_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_132
.LBB65_131:                             # %cond.false503
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB65_132:                             # %cond.end505
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_133:                             # %cond.end507
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB65_134:                             # %if.end511
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB65_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB65_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB65_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB65_142
.LBB65_138:                             # %cond.false527
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB65_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB65_141
.LBB65_140:                             # %cond.false537
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB65_141:                             # %cond.end544
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_142:                             # %cond.end546
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB65_143:                             # %if.end554
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB65_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB65_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB65_150
.LBB65_146:                             # %cond.false568
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB65_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB65_149
.LBB65_148:                             # %cond.false578
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB65_149:                             # %cond.end585
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_150:                             # %cond.end587
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB65_151:                             # %if.end594
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_152
.LBB65_152:                             # %if.end595
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_153
.LBB65_153:                             # %if.end596
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_154
.LBB65_154:                             # %if.end597
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_155
.LBB65_155:                             # %if.end598
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_156
.LBB65_156:                             # %if.end599
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_157
.LBB65_157:                             # %if.end600
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_158
.LBB65_158:                             # %for.inc
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB65_7
.LBB65_159:                             # %for.end
	cmpl	$353052364, -180(%rbp)  # imm = 0x150B26CC
	jne	.LBB65_161
.LBB65_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_160
.Lfunc_end65:
	.size	EdgeLoop.62, .Lfunc_end65-EdgeLoop.62
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.63         # -- Begin function DeblockFrame.63
	.p2align	4, 0x90
	.type	DeblockFrame.63,@function
DeblockFrame.63:                        # @DeblockFrame.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$974527568, -8(%rbp)    # imm = 0x3A161C50
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB66_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_1
.LBB66_4:                               # %for.end
	cmpl	$974527568, -8(%rbp)    # imm = 0x3A161C50
	jne	.LBB66_6
.LBB66_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_5
.Lfunc_end66:
	.size	DeblockFrame.63, .Lfunc_end66-DeblockFrame.63
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.64            # -- Begin function DeblockMb.64
	.p2align	4, 0x90
	.type	DeblockMb.64,@function
DeblockMb.64:                           # @DeblockMb.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1339076099, -100(%rbp) # imm = 0x4FD0AE03
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB67_2
# %bb.1:                                # %if.then
	jmp	.LBB67_2
.LBB67_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB67_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB67_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB67_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB67_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB67_9:                               # %land.end
.LBB67_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB67_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB67_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB67_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB67_61
.LBB67_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB67_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB67_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB67_20
.LBB67_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB67_20:                              # %if.end40
	jmp	.LBB67_21
.LBB67_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB67_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_29 Depth 2
                                        #       Child Loop BB67_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB67_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB67_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB67_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB67_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB67_28
.LBB67_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB67_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB67_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB67_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB67_27:                              # %land.end51
                                        #   in Loop: Header=BB67_22 Depth=1
.LBB67_28:                              # %lor.end52
                                        #   in Loop: Header=BB67_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB67_29:                              # %for.cond54
                                        #   Parent Loop BB67_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB67_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB67_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB67_56
.LBB67_32:                              # %if.then60
                                        #   in Loop: Header=BB67_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -44(%rbp)
.LBB67_33:                              # %for.cond70
                                        #   Parent Loop BB67_22 Depth=1
                                        #     Parent Loop BB67_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB67_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB67_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB67_33
.LBB67_36:                              # %for.end
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB67_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB67_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB67_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB67_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB67_39:                              # %if.end84
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB67_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB67_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB67_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB67_42:                              # %if.end100
                                        #   in Loop: Header=BB67_29 Depth=2
	jmp	.LBB67_43
.LBB67_43:                              # %if.end101
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB67_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB67_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB67_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB67_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB67_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB67_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB67_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB67_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB67_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB67_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB67_50:                              # %if.end125
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB67_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB67_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB67_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB67_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB67_53:                              # %if.end142
                                        #   in Loop: Header=BB67_29 Depth=2
	jmp	.LBB67_54
.LBB67_54:                              # %if.end143
                                        #   in Loop: Header=BB67_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB67_55:                              # %if.end145
                                        #   in Loop: Header=BB67_29 Depth=2
	jmp	.LBB67_56
.LBB67_56:                              # %if.end146
                                        #   in Loop: Header=BB67_29 Depth=2
	jmp	.LBB67_57
.LBB67_57:                              # %for.inc147
                                        #   in Loop: Header=BB67_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_29
.LBB67_58:                              # %for.end149
                                        #   in Loop: Header=BB67_22 Depth=1
	jmp	.LBB67_59
.LBB67_59:                              # %for.inc150
                                        #   in Loop: Header=BB67_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_22
.LBB67_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB67_61:                              # %return
	cmpl	$1339076099, -100(%rbp) # imm = 0x4FD0AE03
	jne	.LBB67_63
.LBB67_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_62
.Lfunc_end67:
	.size	DeblockMb.64, .Lfunc_end67-DeblockMb.64
	.cfi_endproc
                                        # -- End function
	.type	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag,@object # @__const.DeblockMb.filterNon8x8LumaEdgesFlag
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.L__const.DeblockMb.filterNon8x8LumaEdgesFlag:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.size	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, 16

	.type	chroma_edge,@object     # @chroma_edge
	.data
	.globl	chroma_edge
	.p2align	4
chroma_edge:
	.asciz	"\377\000\000"
	.ascii	"\377\377\377\001"
	.ascii	"\377\001\001\002"
	.ascii	"\377\377\377\003"
	.asciz	"\377\000\000"
	.ascii	"\377\377\001\001"
	.ascii	"\377\001\002\002"
	.ascii	"\377\377\003\003"
	.size	chroma_edge, 32

	.type	mixedModeEdgeFlag,@object # @mixedModeEdgeFlag
	.comm	mixedModeEdgeFlag,1,1
	.type	.L__const.EdgeLoop.pelnum_cr,@object # @__const.EdgeLoop.pelnum_cr
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.EdgeLoop.pelnum_cr:
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	16                      # 0x10
	.size	.L__const.EdgeLoop.pelnum_cr, 32

	.type	fieldModeFilteringFlag,@object # @fieldModeFilteringFlag
	.comm	fieldModeFilteringFlag,1,1
	.type	ALPHA_TABLE,@object     # @ALPHA_TABLE
	.data
	.globl	ALPHA_TABLE
	.p2align	4
ALPHA_TABLE:
	.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\005\006\007\b\t\n\f\r\017\021\024\026\031\034 $(-28?GPZeq\177\220\242\266\313\342\377\377"
	.size	ALPHA_TABLE, 52

	.type	BETA_TABLE,@object      # @BETA_TABLE
	.globl	BETA_TABLE
	.p2align	4
BETA_TABLE:
	.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\002\003\003\003\003\004\004\004\006\006\007\007\b\b\t\t\n\n\013\013\f\f\r\r\016\016\017\017\020\020\021\021\022\022"
	.size	BETA_TABLE, 52

	.type	CLIP_TAB,@object        # @CLIP_TAB
	.globl	CLIP_TAB
	.p2align	4
CLIP_TAB:
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\001\001\001"
	.ascii	"\000\000\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\002\003\003"
	.ascii	"\000\001\002\003\003"
	.ascii	"\000\002\002\003\003"
	.ascii	"\000\002\002\004\004"
	.ascii	"\000\002\003\004\004"
	.ascii	"\000\002\003\004\004"
	.ascii	"\000\003\003\005\005"
	.ascii	"\000\003\004\006\006"
	.ascii	"\000\003\004\006\006"
	.ascii	"\000\004\005\007\007"
	.ascii	"\000\004\005\b\b"
	.ascii	"\000\004\006\t\t"
	.ascii	"\000\005\007\n\n"
	.ascii	"\000\006\b\013\013"
	.ascii	"\000\006\b\r\r"
	.ascii	"\000\007\n\016\016"
	.ascii	"\000\b\013\020\020"
	.ascii	"\000\t\f\022\022"
	.ascii	"\000\n\r\024\024"
	.ascii	"\000\013\017\027\027"
	.ascii	"\000\r\021\031\031"
	.size	CLIP_TAB, 260

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	ININT_STRENGTH,@object  # @ININT_STRENGTH
	.globl	ININT_STRENGTH
	.p2align	4
ININT_STRENGTH:
	.long	67372036                # 0x4040404
	.long	50529027                # 0x3030303
	.long	50529027                # 0x3030303
	.long	50529027                # 0x3030303
	.size	ININT_STRENGTH, 16

	.type	BLK_NUM,@object         # @BLK_NUM
	.globl	BLK_NUM
	.p2align	4
BLK_NUM:
	.ascii	"\000\004\b\f"
	.ascii	"\001\005\t\r"
	.ascii	"\002\006\n\016"
	.ascii	"\003\007\013\017"
	.ascii	"\000\001\002\003"
	.ascii	"\004\005\006\007"
	.ascii	"\b\t\n\013"
	.ascii	"\f\r\016\017"
	.size	BLK_NUM, 32

	.type	BLK_4_TO_8,@object      # @BLK_4_TO_8
	.globl	BLK_4_TO_8
	.p2align	4
BLK_4_TO_8:
	.ascii	"\000\000\001\001\000\000\001\001\002\002\003\003\002\002\003\003"
	.size	BLK_4_TO_8, 16


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
